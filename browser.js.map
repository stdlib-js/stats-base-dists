{"version":3,"file":"browser.js","sources":["../node_modules/@stdlib/utils-define-property/lib/define_property.js","../node_modules/@stdlib/utils-define-property/lib/builtin.js","../node_modules/@stdlib/utils-define-property/lib/index.js","../node_modules/@stdlib/utils-define-property/lib/polyfill.js","../node_modules/@stdlib/utils-define-property/lib/has_define_property_support.js","../node_modules/@stdlib/utils-define-read-only-property/lib/main.js","../node_modules/@stdlib/utils-define-nonenumerable-read-only-property/lib/main.js","../node_modules/@stdlib/math-base-assert-is-nan/lib/main.js","../node_modules/@stdlib/math-base-special-sqrt/lib/main.js","../node_modules/@stdlib/constants-float64-fourth-pi/lib/index.js","../node_modules/@stdlib/math-base-special-asin/lib/asin.js","../node_modules/@stdlib/math-base-special-asin/lib/rational_rs.js","../node_modules/@stdlib/math-base-special-asin/lib/rational_pq.js","../node_modules/@stdlib/constants-float64-pi/lib/index.js","../node_modules/@stdlib/stats-base-dists-arcsine-cdf/lib/main.js","../node_modules/@stdlib/utils-constant-function/lib/constant_function.js","../node_modules/@stdlib/utils-define-nonenumerable-read-only-accessor/lib/main.js","../node_modules/@stdlib/assert-is-number/lib/primitive.js","../node_modules/@stdlib/stats-base-dists-arcsine-cdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-arcsine-cdf/lib/factory.js","../node_modules/@stdlib/assert-has-tostringtag-support/lib/main.js","../node_modules/@stdlib/assert-has-symbol-support/lib/main.js","../node_modules/@stdlib/utils-native-class/lib/tostring.js","../node_modules/@stdlib/assert-has-own-property/lib/main.js","../node_modules/@stdlib/utils-native-class/lib/tostringtag.js","../node_modules/@stdlib/utils-native-class/lib/index.js","../node_modules/@stdlib/utils-native-class/lib/polyfill.js","../node_modules/@stdlib/utils-native-class/lib/native_class.js","../node_modules/@stdlib/number-ctor/lib/number.js","../node_modules/@stdlib/assert-is-number/lib/tostring.js","../node_modules/@stdlib/assert-is-number/lib/object.js","../node_modules/@stdlib/assert-is-number/lib/try2serialize.js","../node_modules/@stdlib/assert-is-number/lib/main.js","../node_modules/@stdlib/assert-is-number/lib/index.js","../node_modules/@stdlib/assert-is-uint32array/lib/main.js","../node_modules/@stdlib/constants-uint32-max/lib/index.js","../node_modules/@stdlib/assert-has-uint32array-support/lib/uint32array.js","../node_modules/@stdlib/array-uint32/lib/uint32array.js","../node_modules/@stdlib/array-uint32/lib/index.js","../node_modules/@stdlib/assert-has-uint32array-support/lib/main.js","../node_modules/@stdlib/array-uint32/lib/polyfill.js","../node_modules/@stdlib/assert-is-float64array/lib/main.js","../node_modules/@stdlib/assert-has-float64array-support/lib/float64array.js","../node_modules/@stdlib/array-float64/lib/float64array.js","../node_modules/@stdlib/array-float64/lib/index.js","../node_modules/@stdlib/assert-has-float64array-support/lib/main.js","../node_modules/@stdlib/array-float64/lib/polyfill.js","../node_modules/@stdlib/assert-is-uint8array/lib/main.js","../node_modules/@stdlib/constants-uint8-max/lib/index.js","../node_modules/@stdlib/assert-has-uint8array-support/lib/uint8array.js","../node_modules/@stdlib/array-uint8/lib/uint8array.js","../node_modules/@stdlib/array-uint8/lib/index.js","../node_modules/@stdlib/assert-has-uint8array-support/lib/main.js","../node_modules/@stdlib/array-uint8/lib/polyfill.js","../node_modules/@stdlib/assert-is-uint16array/lib/main.js","../node_modules/@stdlib/constants-uint16-max/lib/index.js","../node_modules/@stdlib/assert-has-uint16array-support/lib/uint16array.js","../node_modules/@stdlib/array-uint16/lib/uint16array.js","../node_modules/@stdlib/array-uint16/lib/index.js","../node_modules/@stdlib/assert-has-uint16array-support/lib/main.js","../node_modules/@stdlib/array-uint16/lib/polyfill.js","../node_modules/@stdlib/assert-is-little-endian/lib/main.js","../node_modules/@stdlib/assert-is-little-endian/lib/ctors.js","../node_modules/@stdlib/number-float64-base-get-high-word/lib/high.js","../node_modules/@stdlib/number-float64-base-get-high-word/lib/main.js","../node_modules/@stdlib/number-float64-base-set-high-word/lib/high.js","../node_modules/@stdlib/number-float64-base-set-high-word/lib/main.js","../node_modules/@stdlib/constants-float64-exponent-bias/lib/index.js","../node_modules/@stdlib/constants-float64-ninf/lib/index.js","../node_modules/@stdlib/math-base-special-ln/lib/ln.js","../node_modules/@stdlib/math-base-special-ln/lib/polyval_p.js","../node_modules/@stdlib/math-base-special-ln/lib/polyval_q.js","../node_modules/@stdlib/stats-base-dists-arcsine-entropy/lib/main.js","../node_modules/@stdlib/stats-base-dists-arcsine-kurtosis/lib/kurtosis.js","../node_modules/@stdlib/stats-base-dists-arcsine-mean/lib/mean.js","../node_modules/@stdlib/stats-base-dists-arcsine-median/lib/median.js","../node_modules/@stdlib/stats-base-dists-arcsine-mode/lib/mode.js","../node_modules/@stdlib/stats-base-dists-arcsine-skewness/lib/skewness.js","../node_modules/@stdlib/stats-base-dists-arcsine-stdev/lib/stdev.js","../node_modules/@stdlib/math-base-special-floor/lib/main.js","../node_modules/@stdlib/math-base-assert-is-integer/lib/is_integer.js","../node_modules/@stdlib/math-base-assert-is-even/lib/is_even.js","../node_modules/@stdlib/math-base-assert-is-odd/lib/is_odd.js","../node_modules/@stdlib/constants-float64-pinf/lib/index.js","../node_modules/@stdlib/number-float64-base-to-words/lib/indices.js","../node_modules/@stdlib/math-base-assert-is-infinite/lib/main.js","../node_modules/@stdlib/math-base-special-abs/lib/main.js","../node_modules/@stdlib/number-float64-base-to-words/lib/assign.js","../node_modules/@stdlib/number-float64-base-to-words/lib/main.js","../node_modules/@stdlib/number-float64-base-to-words/lib/index.js","../node_modules/@stdlib/number-float64-base-set-low-word/lib/low.js","../node_modules/@stdlib/number-float64-base-set-low-word/lib/main.js","../node_modules/@stdlib/number-uint32-base-to-int32/lib/main.js","../node_modules/@stdlib/constants-float64-high-word-abs-mask/lib/index.js","../node_modules/@stdlib/number-float64-base-from-words/lib/indices.js","../node_modules/@stdlib/number-float64-base-from-words/lib/main.js","../node_modules/@stdlib/math-base-special-copysign/lib/main.js","../node_modules/@stdlib/constants-float64-high-word-sign-mask/lib/index.js","../node_modules/@stdlib/math-base-special-pow/lib/log2ax.js","../node_modules/@stdlib/constants-float64-max-base2-exponent/lib/index.js","../node_modules/@stdlib/constants-float64-smallest-normal/lib/index.js","../node_modules/@stdlib/number-float64-base-normalize/lib/assign.js","../node_modules/@stdlib/number-float64-base-normalize/lib/index.js","../node_modules/@stdlib/number-float64-base-normalize/lib/main.js","../node_modules/@stdlib/math-base-special-ldexp/lib/main.js","../node_modules/@stdlib/number-float64-base-exponent/lib/main.js","../node_modules/@stdlib/constants-float64-high-word-exponent-mask/lib/index.js","../node_modules/@stdlib/constants-float64-min-base2-exponent-subnormal/lib/index.js","../node_modules/@stdlib/constants-float64-max-base2-exponent-subnormal/lib/index.js","../node_modules/@stdlib/constants-float64-ln-two/lib/index.js","../node_modules/@stdlib/constants-float64-high-word-significand-mask/lib/index.js","../node_modules/@stdlib/math-base-special-pow/lib/pow2.js","../node_modules/@stdlib/math-base-special-pow/lib/main.js","../node_modules/@stdlib/math-base-special-pow/lib/y_is_infinite.js","../node_modules/@stdlib/math-base-special-pow/lib/x_is_zero.js","../node_modules/@stdlib/math-base-special-pow/lib/y_is_huge.js","../node_modules/@stdlib/math-base-special-pow/lib/logx.js","../node_modules/@stdlib/math-base-special-pow/lib/polyval_w.js","../node_modules/@stdlib/math-base-special-pow/lib/polyval_l.js","../node_modules/@stdlib/math-base-special-pow/lib/polyval_p.js","../node_modules/@stdlib/stats-base-dists-arcsine-variance/lib/variance.js","../node_modules/@stdlib/constants-float64-ln-pi/lib/index.js","../node_modules/@stdlib/stats-base-dists-arcsine-logcdf/lib/logcdf.js","../node_modules/@stdlib/stats-base-dists-arcsine-logpdf/lib/logpdf.js","../node_modules/@stdlib/stats-base-dists-arcsine-pdf/lib/pdf.js","../node_modules/@stdlib/math-base-special-kernel-cos/lib/kernel_cos.js","../node_modules/@stdlib/math-base-special-kernel-cos/lib/polyval_c13.js","../node_modules/@stdlib/math-base-special-kernel-cos/lib/polyval_c46.js","../node_modules/@stdlib/stats-base-dists-arcsine-logcdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-arcsine-logcdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-arcsine-logpdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-arcsine-logpdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-arcsine-pdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-arcsine-pdf/lib/factory.js","../node_modules/@stdlib/math-base-special-kernel-sin/lib/kernel_sin.js","../node_modules/@stdlib/number-float64-base-get-low-word/lib/low.js","../node_modules/@stdlib/number-float64-base-get-low-word/lib/main.js","../node_modules/@stdlib/array-base-zeros/lib/main.js","../node_modules/@stdlib/array-base-filled/lib/main.js","../node_modules/@stdlib/math-base-special-rempio2/lib/kernel_rempio2.js","../node_modules/@stdlib/math-base-special-round/lib/round.js","../node_modules/@stdlib/math-base-special-rempio2/lib/rempio2_medium.js","../node_modules/@stdlib/math-base-special-rempio2/lib/rempio2.js","../node_modules/@stdlib/math-base-special-sin/lib/sin.js","../node_modules/@stdlib/constants-float64-half-pi/lib/index.js","../node_modules/@stdlib/stats-base-dists-arcsine-quantile/lib/quantile.js","../node_modules/@stdlib/string-base-format-interpolate/lib/is_number.js","../node_modules/@stdlib/string-base-format-interpolate/lib/zero_pad.js","../node_modules/@stdlib/stats-base-dists-arcsine-quantile/lib/index.js","../node_modules/@stdlib/stats-base-dists-arcsine-quantile/lib/factory.js","../node_modules/@stdlib/string-base-format-interpolate/lib/format_integer.js","../node_modules/@stdlib/string-base-format-interpolate/lib/is_string.js","../node_modules/@stdlib/string-base-format-interpolate/lib/format_double.js","../node_modules/@stdlib/string-base-format-interpolate/lib/space_pad.js","../node_modules/@stdlib/string-base-format-interpolate/lib/main.js","../node_modules/@stdlib/string-base-format-tokenize/lib/main.js","../node_modules/@stdlib/string-format/lib/is_string.js","../node_modules/@stdlib/string-format/lib/main.js","../node_modules/@stdlib/stats-base-dists-arcsine-ctor/lib/main.js","../node_modules/@stdlib/stats-base-dists-arcsine/lib/index.js","../node_modules/@stdlib/stats-base-dists-bernoulli-cdf/lib/cdf.js","../node_modules/@stdlib/assert-is-probability/lib/primitive.js","../node_modules/@stdlib/assert-is-probability/lib/object.js","../node_modules/@stdlib/assert-is-probability/lib/main.js","../node_modules/@stdlib/stats-base-dists-bernoulli-entropy/lib/entropy.js","../node_modules/@stdlib/stats-base-dists-bernoulli-kurtosis/lib/kurtosis.js","../node_modules/@stdlib/stats-base-dists-bernoulli-mean/lib/mean.js","../node_modules/@stdlib/stats-base-dists-bernoulli-mode/lib/mode.js","../node_modules/@stdlib/stats-base-dists-bernoulli-median/lib/median.js","../node_modules/@stdlib/stats-base-dists-bernoulli-skewness/lib/skewness.js","../node_modules/@stdlib/stats-base-dists-bernoulli-stdev/lib/stdev.js","../node_modules/@stdlib/stats-base-dists-bernoulli-variance/lib/variance.js","../node_modules/@stdlib/math-base-assert-is-probability/lib/is_probability.js","../node_modules/@stdlib/stats-base-dists-bernoulli-cdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-bernoulli-cdf/lib/factory.js","../node_modules/@stdlib/assert-is-probability/lib/index.js","../node_modules/@stdlib/math-base-special-ceil/lib/main.js","../node_modules/@stdlib/math-base-special-trunc/lib/main.js","../node_modules/@stdlib/math-base-special-exp/lib/exp.js","../node_modules/@stdlib/math-base-special-exp/lib/expmulti.js","../node_modules/@stdlib/math-base-special-exp/lib/polyval_p.js","../node_modules/@stdlib/stats-base-dists-bernoulli-mgf/lib/mgf.js","../node_modules/@stdlib/stats-base-dists-bernoulli-pmf/lib/pmf.js","../node_modules/@stdlib/stats-base-dists-bernoulli-quantile/lib/quantile.js","../node_modules/@stdlib/stats-base-dists-bernoulli-ctor/lib/ctor.js","../node_modules/@stdlib/stats-base-dists-bernoulli-mgf/lib/index.js","../node_modules/@stdlib/stats-base-dists-bernoulli-mgf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-bernoulli-pmf/lib/index.js","../node_modules/@stdlib/stats-base-dists-bernoulli-pmf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-bernoulli-quantile/lib/index.js","../node_modules/@stdlib/stats-base-dists-bernoulli-quantile/lib/factory.js","../node_modules/@stdlib/stats-base-dists-bernoulli/lib/index.js","../node_modules/@stdlib/math-base-special-expm1/lib/expm1.js","../node_modules/@stdlib/constants-float64-half-ln-two/lib/index.js","../node_modules/@stdlib/math-base-special-expm1/lib/polyval_q.js","../node_modules/@stdlib/math-base-special-log1p/lib/log1p.js","../node_modules/@stdlib/math-base-special-log1p/lib/polyval_lp.js","../node_modules/@stdlib/constants-float64-e/lib/index.js","../node_modules/@stdlib/constants-float64-eps/lib/index.js","../node_modules/@stdlib/math-base-special-beta/lib/lanczos_sum_expg_scaled.js","../node_modules/@stdlib/math-base-special-beta/lib/beta.js","../node_modules/@stdlib/math-base-assert-is-positive-zero/lib/main.js","../node_modules/@stdlib/math-base-special-max/lib/max.js","../node_modules/@stdlib/math-base-assert-is-negative-zero/lib/main.js","../node_modules/@stdlib/math-base-special-min/lib/min.js","../node_modules/@stdlib/constants-float64-max/lib/index.js","../node_modules/@stdlib/constants-float64-sqrt-two-pi/lib/index.js","../node_modules/@stdlib/math-base-special-gamma/lib/stirling_approximation.js","../node_modules/@stdlib/math-base-special-gamma/lib/polyval_s.js","../node_modules/@stdlib/constants-float64-eulergamma/lib/index.js","../node_modules/@stdlib/math-base-special-gamma/lib/small_approximation.js","../node_modules/@stdlib/math-base-special-gamma/lib/gamma.js","../node_modules/@stdlib/math-base-special-gamma/lib/rational_pq.js","../node_modules/@stdlib/math-base-special-factorial/lib/factorial.js","../node_modules/@stdlib/math-base-special-gamma-lanczos-sum/lib/rational_pq.js","../node_modules/@stdlib/constants-float64-gamma-lanczos-g/lib/index.js","../node_modules/@stdlib/math-base-special-gamma-delta-ratio/lib/gamma_delta_ratio_lanczos.js","../node_modules/@stdlib/math-base-special-gamma-delta-ratio/lib/gamma_delta_ratio.js","../node_modules/@stdlib/math-base-special-cos/lib/cos.js","../node_modules/@stdlib/math-base-special-sinpi/lib/sinpi.js","../node_modules/@stdlib/math-base-special-gammaln/lib/gammaln.js","../node_modules/@stdlib/math-base-special-gammaln/lib/polyval_a1.js","../node_modules/@stdlib/math-base-special-gammaln/lib/polyval_a2.js","../node_modules/@stdlib/math-base-special-gammaln/lib/polyval_t1.js","../node_modules/@stdlib/math-base-special-gammaln/lib/polyval_t2.js","../node_modules/@stdlib/math-base-special-gammaln/lib/polyval_t3.js","../node_modules/@stdlib/math-base-special-gammaln/lib/polyval_u.js","../node_modules/@stdlib/math-base-special-gammaln/lib/polyval_v.js","../node_modules/@stdlib/math-base-special-gammaln/lib/polyval_s.js","../node_modules/@stdlib/math-base-special-gammaln/lib/polyval_r.js","../node_modules/@stdlib/math-base-special-gammaln/lib/polyval_w.js","../node_modules/@stdlib/constants-float64-sqrt-eps/lib/index.js","../node_modules/@stdlib/constants-float64-max-ln/lib/index.js","../node_modules/@stdlib/math-base-special-erfc/lib/erfc.js","../node_modules/@stdlib/math-base-special-erfc/lib/polyval_pp.js","../node_modules/@stdlib/math-base-special-erfc/lib/polyval_qq.js","../node_modules/@stdlib/math-base-special-erfc/lib/polyval_pa.js","../node_modules/@stdlib/math-base-special-erfc/lib/polyval_qa.js","../node_modules/@stdlib/math-base-special-erfc/lib/polyval_ra.js","../node_modules/@stdlib/math-base-special-erfc/lib/polyval_sa.js","../node_modules/@stdlib/math-base-special-erfc/lib/polyval_rb.js","../node_modules/@stdlib/math-base-special-erfc/lib/polyval_sb.js","../node_modules/@stdlib/constants-float64-min-ln/lib/index.js","../node_modules/@stdlib/math-base-special-gammainc/lib/full_igamma_prefix.js","../node_modules/@stdlib/math-base-tools-evalpoly/lib/evalpoly.js","../node_modules/@stdlib/math-base-tools-evalpoly/lib/index.js","../node_modules/@stdlib/math-base-tools-evalpoly/lib/factory.js","../node_modules/@stdlib/constants-float64-two-pi/lib/index.js","../node_modules/@stdlib/math-base-special-gammainc/lib/igamma_temme_large.js","../node_modules/@stdlib/utils-eval/lib/index.js","../node_modules/@stdlib/assert-has-generator-support/lib/main.js","../node_modules/@stdlib/math-base-tools-sum-series/lib/generators.js","../node_modules/@stdlib/math-base-tools-sum-series/lib/basic.js","../node_modules/@stdlib/math-base-tools-sum-series/lib/index.js","../node_modules/@stdlib/math-base-special-gammainc/lib/lower_gamma_series.js","../node_modules/@stdlib/math-base-special-gammainc/lib/lower_incomplete_gamma_series.js","../node_modules/@stdlib/math-base-special-gamma-lanczos-sum-expg-scaled/lib/rational_pq.js","../node_modules/@stdlib/math-base-special-gammainc/lib/regularised_gamma_prefix.js","../node_modules/@stdlib/math-base-special-gamma1pm1/lib/lgamma_small_imp.js","../node_modules/@stdlib/math-base-special-gamma1pm1/lib/rational_p1q1.js","../node_modules/@stdlib/math-base-special-gamma1pm1/lib/rational_p2q2.js","../node_modules/@stdlib/math-base-special-gamma1pm1/lib/rational_p3q3.js","../node_modules/@stdlib/math-base-special-gammainc/lib/tgamma_small_upper_part.js","../node_modules/@stdlib/math-base-special-gamma1pm1/lib/gamma1pm1.js","../node_modules/@stdlib/math-base-special-powm1/lib/powm1.js","../node_modules/@stdlib/math-base-special-gammainc/lib/small_gamma2_series.js","../node_modules/@stdlib/constants-float32-smallest-normal/lib/index.js","../node_modules/@stdlib/math-base-tools-continued-fraction/lib/generators.js","../node_modules/@stdlib/math-base-tools-continued-fraction/lib/basic.js","../node_modules/@stdlib/math-base-tools-continued-fraction/lib/index.js","../node_modules/@stdlib/math-base-special-gammainc/lib/upper_gamma_fraction.js","../node_modules/@stdlib/math-base-special-gammainc/lib/upper_incomplete_gamma_fract.js","../node_modules/@stdlib/math-base-special-gammainc/lib/gammainc.js","../node_modules/@stdlib/math-base-special-gammainc/lib/finite_gamma_q.js","../node_modules/@stdlib/math-base-special-gammainc/lib/finite_half_gamma_q.js","../node_modules/@stdlib/math-base-special-gammainc/lib/polyval_c0.js","../node_modules/@stdlib/math-base-special-gammainc/lib/polyval_c1.js","../node_modules/@stdlib/math-base-special-gammainc/lib/polyval_c2.js","../node_modules/@stdlib/math-base-special-gammainc/lib/polyval_c3.js","../node_modules/@stdlib/math-base-special-gammainc/lib/polyval_c4.js","../node_modules/@stdlib/math-base-special-gammainc/lib/polyval_c5.js","../node_modules/@stdlib/math-base-special-gammainc/lib/polyval_c6.js","../node_modules/@stdlib/math-base-special-gammainc/lib/polyval_c7.js","../node_modules/@stdlib/math-base-special-gammainc/lib/polyval_c8.js","../node_modules/@stdlib/math-base-special-kernel-betainc/lib/beta_small_b_large_a_series.js","../node_modules/@stdlib/math-base-special-kernel-betainc/lib/regularized_gamma_prefix.js","../node_modules/@stdlib/math-base-special-kernel-betainc/lib/full_igamma_prefix.js","../node_modules/@stdlib/math-base-special-kernel-betainc/lib/rising_factorial_ratio.js","../node_modules/@stdlib/math-base-special-kernel-betainc/lib/ibeta_power_terms.js","../node_modules/@stdlib/math-base-special-minabs/lib/minabs.js","../node_modules/@stdlib/math-base-special-maxabs/lib/maxabs.js","../node_modules/@stdlib/math-base-special-kernel-betainc/lib/ibeta_fraction2.js","../node_modules/@stdlib/math-base-special-binomcoef/lib/binomcoef.js","../node_modules/@stdlib/math-base-special-kernel-betainc/lib/ibeta_a_step.js","../node_modules/@stdlib/math-base-special-kernel-betainc/lib/ibeta_series.js","../node_modules/@stdlib/math-base-special-kernel-betainc/lib/assign.js","../node_modules/@stdlib/math-base-special-kernel-betainc/lib/binomial_ccdf.js","../node_modules/@stdlib/math-base-special-betainc/lib/betainc.js","../node_modules/@stdlib/stats-base-dists-beta-cdf/lib/cdf.js","../node_modules/@stdlib/stats-base-dists-beta-cdf/lib/factory.js","../node_modules/@stdlib/assert-is-positive-number/lib/primitive.js","../node_modules/@stdlib/assert-is-positive-number/lib/object.js","../node_modules/@stdlib/assert-is-positive-number/lib/main.js","../node_modules/@stdlib/math-base-special-kernel-betainc/lib/index.js","../node_modules/@stdlib/math-base-special-kernel-betainc/lib/main.js","../node_modules/@stdlib/stats-base-dists-beta-cdf/lib/index.js","../node_modules/@stdlib/assert-is-positive-number/lib/index.js","../node_modules/@stdlib/math-base-special-kernel-tan/lib/kernel_tan.js","../node_modules/@stdlib/math-base-special-kernel-tan/lib/polyval_t_odd.js","../node_modules/@stdlib/math-base-special-kernel-tan/lib/polyval_t_even.js","../node_modules/@stdlib/math-base-special-tan/lib/tan.js","../node_modules/@stdlib/math-base-special-digamma/lib/digamma.js","../node_modules/@stdlib/math-base-special-digamma/lib/asymptotic_expansion.js","../node_modules/@stdlib/math-base-special-digamma/lib/polyval_p.js","../node_modules/@stdlib/math-base-special-digamma/lib/rational_approximation.js","../node_modules/@stdlib/math-base-special-digamma/lib/rational_pq.js","../node_modules/@stdlib/constants-float64-ln-sqrt-two-pi/lib/index.js","../node_modules/@stdlib/math-base-special-betaln/lib/dceval.js","../node_modules/@stdlib/math-base-special-betaln/lib/gamma_correction.js","../node_modules/@stdlib/math-base-special-betaln/lib/betaln.js","../node_modules/@stdlib/stats-base-dists-beta-entropy/lib/entropy.js","../node_modules/@stdlib/stats-base-dists-beta-kurtosis/lib/kurtosis.js","../node_modules/@stdlib/stats-base-dists-beta-mean/lib/mean.js","../node_modules/@stdlib/math-base-special-erfcinv/lib/erfcinv.js","../node_modules/@stdlib/math-base-special-erfcinv/lib/rational_p1q1.js","../node_modules/@stdlib/math-base-special-erfcinv/lib/rational_p2q2.js","../node_modules/@stdlib/math-base-special-erfcinv/lib/rational_p3q3.js","../node_modules/@stdlib/math-base-special-erfcinv/lib/rational_p4q4.js","../node_modules/@stdlib/math-base-special-erfcinv/lib/rational_p5q5.js","../node_modules/@stdlib/constants-float64-sqrt-two/lib/index.js","../node_modules/@stdlib/math-base-special-kernel-betaincinv/lib/inverse_students_t_body_series.js","../node_modules/@stdlib/math-base-special-kernel-betaincinv/lib/polyval_co14.js","../node_modules/@stdlib/math-base-special-kernel-betaincinv/lib/polyval_co15.js","../node_modules/@stdlib/math-base-special-kernel-betaincinv/lib/polyval_co16.js","../node_modules/@stdlib/math-base-special-kernel-betaincinv/lib/polyval_co17.js","../node_modules/@stdlib/math-base-special-kernel-betaincinv/lib/polyval_co18.js","../node_modules/@stdlib/math-base-special-kernel-betaincinv/lib/polyval_co19.js","../node_modules/@stdlib/math-base-special-kernel-betaincinv/lib/polyval_co20.js","../node_modules/@stdlib/math-base-special-kernel-betaincinv/lib/polyval_co21.js","../node_modules/@stdlib/math-base-special-kernel-betaincinv/lib/polyval_co22.js","../node_modules/@stdlib/math-base-special-kernel-betaincinv/lib/inverse_students_t_tail_series.js","../node_modules/@stdlib/math-base-special-kernel-betaincinv/lib/inverse_students_t_hill.js","../node_modules/@stdlib/math-base-special-kernel-betaincinv/lib/inverse_students_t.js","../node_modules/@stdlib/math-base-special-acos/lib/acos.js","../node_modules/@stdlib/math-base-special-kernel-betaincinv/lib/temme1.js","../node_modules/@stdlib/math-base-special-kernel-betaincinv/lib/root_finder.js","../node_modules/@stdlib/math-base-special-signum/lib/main.js","../node_modules/@stdlib/math-base-special-kernel-betaincinv/lib/newton_raphson.js","../node_modules/@stdlib/math-base-special-kernel-betaincinv/lib/temme2.js","../node_modules/@stdlib/constants-float32-max/lib/index.js","../node_modules/@stdlib/math-base-special-gammaincinv/lib/higher_newton.js","../node_modules/@stdlib/math-base-special-gammaincinv/lib/lambdaeta.js","../node_modules/@stdlib/math-base-special-gammaincinv/lib/polyval_ak1.js","../node_modules/@stdlib/math-base-special-gammaincinv/lib/polyval_ak2.js","../node_modules/@stdlib/math-base-special-gammaincinv/lib/chepolsum.js","../node_modules/@stdlib/math-base-special-gammaincinv/lib/stirling.js","../node_modules/@stdlib/math-base-special-gammaincinv/lib/polyval_c.js","../node_modules/@stdlib/math-base-special-gammaincinv/lib/polyval_d.js","../node_modules/@stdlib/math-base-special-gammaincinv/lib/gamstar.js","../node_modules/@stdlib/math-base-special-gammaincinv/lib/compute.js","../node_modules/@stdlib/math-base-special-gammaincinv/lib/eps1.js","../node_modules/@stdlib/math-base-special-gammaincinv/lib/rational_ak0bk0.js","../node_modules/@stdlib/math-base-special-gammaincinv/lib/eps2.js","../node_modules/@stdlib/math-base-special-gammaincinv/lib/rational_ak1bk1.js","../node_modules/@stdlib/math-base-special-gammaincinv/lib/rational_ak2bk2.js","../node_modules/@stdlib/math-base-special-gammaincinv/lib/rational_ak3bk3.js","../node_modules/@stdlib/math-base-special-gammaincinv/lib/eps3.js","../node_modules/@stdlib/math-base-special-gammaincinv/lib/rational_ak4bk4.js","../node_modules/@stdlib/math-base-special-gammaincinv/lib/rational_ak5bk5.js","../node_modules/@stdlib/math-base-special-gammaincinv/lib/rational_ak6bk6.js","../node_modules/@stdlib/math-base-special-gammaincinv/lib/rational_ak7bk7.js","../node_modules/@stdlib/math-base-special-gammaincinv/lib/rational_ak8bk8.js","../node_modules/@stdlib/math-base-special-gammaincinv/lib/gammaincinv.js","../node_modules/@stdlib/math-base-special-kernel-betaincinv/lib/kernel_betaincinv.js","../node_modules/@stdlib/math-base-special-kernel-betaincinv/lib/find_ibeta_inv_from_t_dist.js","../node_modules/@stdlib/math-base-special-kernel-betaincinv/lib/polyval_co1.js","../node_modules/@stdlib/math-base-special-kernel-betaincinv/lib/polyval_co2.js","../node_modules/@stdlib/math-base-special-kernel-betaincinv/lib/polyval_co3.js","../node_modules/@stdlib/math-base-special-kernel-betaincinv/lib/polyval_co4.js","../node_modules/@stdlib/math-base-special-kernel-betaincinv/lib/polyval_co5.js","../node_modules/@stdlib/math-base-special-kernel-betaincinv/lib/polyval_co6.js","../node_modules/@stdlib/math-base-special-kernel-betaincinv/lib/polyval_co7.js","../node_modules/@stdlib/math-base-special-kernel-betaincinv/lib/polyval_co8.js","../node_modules/@stdlib/math-base-special-kernel-betaincinv/lib/polyval_co9.js","../node_modules/@stdlib/math-base-special-kernel-betaincinv/lib/polyval_co10.js","../node_modules/@stdlib/math-base-special-kernel-betaincinv/lib/polyval_co11.js","../node_modules/@stdlib/math-base-special-kernel-betaincinv/lib/polyval_co12.js","../node_modules/@stdlib/math-base-special-kernel-betaincinv/lib/polyval_co13.js","../node_modules/@stdlib/math-base-special-kernel-betaincinv/lib/temme3.js","../node_modules/@stdlib/constants-float64-smallest-subnormal/lib/index.js","../node_modules/@stdlib/math-base-special-kernel-betaincinv/lib/ibeta_roots.js","../node_modules/@stdlib/math-base-special-kernel-betaincinv/lib/halley_iterate.js","../node_modules/@stdlib/math-base-special-betaincinv/lib/betaincinv.js","../node_modules/@stdlib/stats-base-dists-beta-median/lib/median.js","../node_modules/@stdlib/stats-base-dists-beta-mode/lib/mode.js","../node_modules/@stdlib/stats-base-dists-beta-skewness/lib/skewness.js","../node_modules/@stdlib/stats-base-dists-beta-stdev/lib/stdev.js","../node_modules/@stdlib/stats-base-dists-beta-variance/lib/variance.js","../node_modules/@stdlib/stats-base-dists-beta-logcdf/lib/logcdf.js","../node_modules/@stdlib/stats-base-dists-beta-logcdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-beta-logpdf/lib/logpdf.js","../node_modules/@stdlib/stats-base-dists-beta-mgf/lib/_mgf.js","../node_modules/@stdlib/stats-base-dists-beta-mgf/lib/mgf.js","../node_modules/@stdlib/stats-base-dists-beta-pdf/lib/pdf.js","../node_modules/@stdlib/stats-base-dists-beta-quantile/lib/quantile.js","../node_modules/@stdlib/stats-base-dists-beta-ctor/lib/ctor.js","../node_modules/@stdlib/stats-base-dists-beta-logcdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-beta-logpdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-beta-logpdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-beta-mgf/lib/index.js","../node_modules/@stdlib/stats-base-dists-beta-mgf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-beta-pdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-beta-pdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-beta-quantile/lib/index.js","../node_modules/@stdlib/stats-base-dists-beta-quantile/lib/factory.js","../node_modules/@stdlib/stats-base-dists-beta/lib/index.js","../node_modules/@stdlib/stats-base-dists-betaprime-cdf/lib/cdf.js","../node_modules/@stdlib/stats-base-dists-betaprime-kurtosis/lib/kurtosis.js","../node_modules/@stdlib/stats-base-dists-betaprime-mean/lib/mean.js","../node_modules/@stdlib/stats-base-dists-betaprime-mode/lib/mode.js","../node_modules/@stdlib/stats-base-dists-betaprime-skewness/lib/skewness.js","../node_modules/@stdlib/stats-base-dists-betaprime-stdev/lib/stdev.js","../node_modules/@stdlib/stats-base-dists-betaprime-variance/lib/variance.js","../node_modules/@stdlib/stats-base-dists-betaprime-logcdf/lib/logcdf.js","../node_modules/@stdlib/stats-base-dists-betaprime-logpdf/lib/logpdf.js","../node_modules/@stdlib/stats-base-dists-betaprime-logpdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-betaprime-pdf/lib/pdf.js","../node_modules/@stdlib/stats-base-dists-betaprime-quantile/lib/quantile.js","../node_modules/@stdlib/stats-base-dists-betaprime-ctor/lib/ctor.js","../node_modules/@stdlib/stats-base-dists-betaprime-cdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-betaprime-cdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-betaprime-logcdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-betaprime-logcdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-betaprime-logpdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-betaprime-pdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-betaprime-pdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-betaprime-quantile/lib/index.js","../node_modules/@stdlib/stats-base-dists-betaprime-quantile/lib/factory.js","../node_modules/@stdlib/stats-base-dists-betaprime/lib/index.js","../node_modules/@stdlib/math-base-assert-is-nonnegative-integer/lib/is_nonnegative_integer.js","../node_modules/@stdlib/stats-base-dists-binomial-cdf/lib/cdf.js","../node_modules/@stdlib/assert-is-integer/lib/integer.js","../node_modules/@stdlib/assert-is-integer/lib/primitive.js","../node_modules/@stdlib/assert-is-integer/lib/object.js","../node_modules/@stdlib/assert-is-integer/lib/main.js","../node_modules/@stdlib/assert-is-positive-integer/lib/primitive.js","../node_modules/@stdlib/assert-is-positive-integer/lib/object.js","../node_modules/@stdlib/assert-is-positive-integer/lib/main.js","../node_modules/@stdlib/stats-base-dists-binomial-kurtosis/lib/kurtosis.js","../node_modules/@stdlib/stats-base-dists-binomial-mean/lib/mean.js","../node_modules/@stdlib/stats-base-dists-binomial-median/lib/median.js","../node_modules/@stdlib/stats-base-dists-binomial-mode/lib/mode.js","../node_modules/@stdlib/stats-base-dists-binomial-skewness/lib/skewness.js","../node_modules/@stdlib/stats-base-dists-binomial-stdev/lib/stdev.js","../node_modules/@stdlib/stats-base-dists-binomial-variance/lib/variance.js","../node_modules/@stdlib/math-base-special-binomcoefln/lib/binomcoefln.js","../node_modules/@stdlib/stats-base-dists-binomial-logpmf/lib/logpmf.js","../node_modules/@stdlib/stats-base-dists-degenerate-logpmf/lib/logpmf.js","../node_modules/@stdlib/stats-base-dists-degenerate-logpmf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-binomial-mgf/lib/mgf.js","../node_modules/@stdlib/stats-base-dists-binomial-pmf/lib/pmf.js","../node_modules/@stdlib/stats-base-dists-degenerate-pmf/lib/pmf.js","../node_modules/@stdlib/stats-base-dists-degenerate-pmf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-binomial-quantile/lib/search_left.js","../node_modules/@stdlib/stats-base-dists-binomial-quantile/lib/search_right.js","../node_modules/@stdlib/stats-base-dists-binomial-quantile/lib/quantile.js","../node_modules/@stdlib/stats-base-dists-degenerate-quantile/lib/quantile.js","../node_modules/@stdlib/stats-base-dists-degenerate-quantile/lib/factory.js","../node_modules/@stdlib/stats-base-dists-binomial-ctor/lib/ctor.js","../node_modules/@stdlib/stats-base-dists-binomial-cdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-binomial-cdf/lib/factory.js","../node_modules/@stdlib/assert-is-integer/lib/index.js","../node_modules/@stdlib/assert-is-positive-integer/lib/index.js","../node_modules/@stdlib/stats-base-dists-degenerate-logpmf/lib/index.js","../node_modules/@stdlib/stats-base-dists-binomial-logpmf/lib/index.js","../node_modules/@stdlib/stats-base-dists-binomial-logpmf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-binomial-mgf/lib/index.js","../node_modules/@stdlib/stats-base-dists-binomial-mgf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-degenerate-pmf/lib/index.js","../node_modules/@stdlib/stats-base-dists-binomial-pmf/lib/index.js","../node_modules/@stdlib/stats-base-dists-binomial-pmf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-degenerate-quantile/lib/index.js","../node_modules/@stdlib/stats-base-dists-binomial-quantile/lib/index.js","../node_modules/@stdlib/stats-base-dists-binomial-quantile/lib/factory.js","../node_modules/@stdlib/stats-base-dists-binomial/lib/index.js","../node_modules/@stdlib/stats-base-dists-binomial-entropy/lib/entropy.js","../node_modules/@stdlib/math-base-special-atan/lib/atan.js","../node_modules/@stdlib/math-base-special-atan2/lib/main.js","../node_modules/@stdlib/number-float64-base-signbit/lib/main.js","../node_modules/@stdlib/math-base-special-atan/lib/polyval_p.js","../node_modules/@stdlib/math-base-special-atan/lib/polyval_q.js","../node_modules/@stdlib/stats-base-dists-cauchy-cdf/lib/cdf.js","../node_modules/@stdlib/assert-is-nan/lib/primitive.js","../node_modules/@stdlib/assert-is-nan/lib/object.js","../node_modules/@stdlib/assert-is-nan/lib/main.js","../node_modules/@stdlib/stats-base-dists-cauchy-entropy/lib/entropy.js","../node_modules/@stdlib/stats-base-dists-cauchy-median/lib/median.js","../node_modules/@stdlib/stats-base-dists-cauchy-mode/lib/mode.js","../node_modules/@stdlib/stats-base-dists-cauchy-cdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-cauchy-cdf/lib/factory.js","../node_modules/@stdlib/assert-is-nan/lib/index.js","../node_modules/@stdlib/stats-base-dists-cauchy-logcdf/lib/logcdf.js","../node_modules/@stdlib/stats-base-dists-cauchy-logpdf/lib/logpdf.js","../node_modules/@stdlib/stats-base-dists-cauchy-pdf/lib/pdf.js","../node_modules/@stdlib/stats-base-dists-cauchy-quantile/lib/quantile.js","../node_modules/@stdlib/stats-base-dists-cauchy-ctor/lib/ctor.js","../node_modules/@stdlib/stats-base-dists-cauchy-logcdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-cauchy-logcdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-cauchy-logpdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-cauchy-logpdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-cauchy-pdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-cauchy-pdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-cauchy-quantile/lib/index.js","../node_modules/@stdlib/stats-base-dists-cauchy-quantile/lib/factory.js","../node_modules/@stdlib/stats-base-dists-cauchy/lib/index.js","../node_modules/@stdlib/stats-base-dists-gamma-cdf/lib/cdf.js","../node_modules/@stdlib/stats-base-dists-degenerate-cdf/lib/cdf.js","../node_modules/@stdlib/stats-base-dists-degenerate-cdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-gamma-cdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-chi-cdf/lib/cdf.js","../node_modules/@stdlib/stats-base-dists-chi-entropy/lib/entropy.js","../node_modules/@stdlib/stats-base-dists-chi-mean/lib/mean.js","../node_modules/@stdlib/stats-base-dists-chi-variance/lib/variance.js","../node_modules/@stdlib/stats-base-dists-chi-skewness/lib/skewness.js","../node_modules/@stdlib/stats-base-dists-chi-kurtosis/lib/kurtosis.js","../node_modules/@stdlib/stats-base-dists-chi-mode/lib/mode.js","../node_modules/@stdlib/stats-base-dists-chi-stdev/lib/stdev.js","../node_modules/@stdlib/stats-base-dists-chi-logpdf/lib/logpdf.js","../node_modules/@stdlib/stats-base-dists-degenerate-logpdf/lib/logpdf.js","../node_modules/@stdlib/stats-base-dists-degenerate-logpdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-chi-pdf/lib/pdf.js","../node_modules/@stdlib/stats-base-dists-degenerate-pdf/lib/pdf.js","../node_modules/@stdlib/stats-base-dists-degenerate-pdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-gamma-quantile/lib/quantile.js","../node_modules/@stdlib/stats-base-dists-gamma-quantile/lib/factory.js","../node_modules/@stdlib/stats-base-dists-chi-quantile/lib/quantile.js","../node_modules/@stdlib/stats-base-dists-chi-ctor/lib/ctor.js","../node_modules/@stdlib/stats-base-dists-degenerate-cdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-gamma-cdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-chi-cdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-chi-cdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-degenerate-logpdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-chi-logpdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-chi-logpdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-degenerate-pdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-chi-pdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-chi-pdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-gamma-quantile/lib/index.js","../node_modules/@stdlib/stats-base-dists-chi-quantile/lib/index.js","../node_modules/@stdlib/stats-base-dists-chi-quantile/lib/factory.js","../node_modules/@stdlib/stats-base-dists-chi/lib/index.js","../node_modules/@stdlib/stats-base-dists-chisquare-cdf/lib/cdf.js","../node_modules/@stdlib/stats-base-dists-chisquare-entropy/lib/entropy.js","../node_modules/@stdlib/stats-base-dists-chisquare-kurtosis/lib/kurtosis.js","../node_modules/@stdlib/stats-base-dists-chisquare-mean/lib/mean.js","../node_modules/@stdlib/stats-base-dists-chisquare-quantile/lib/quantile.js","../node_modules/@stdlib/stats-base-dists-chisquare-median/lib/median.js","../node_modules/@stdlib/stats-base-dists-chisquare-mode/lib/mode.js","../node_modules/@stdlib/stats-base-dists-chisquare-skewness/lib/skewness.js","../node_modules/@stdlib/stats-base-dists-chisquare-stdev/lib/stdev.js","../node_modules/@stdlib/stats-base-dists-chisquare-variance/lib/variance.js","../node_modules/@stdlib/stats-base-dists-chisquare-mgf/lib/mgf.js","../node_modules/@stdlib/stats-base-dists-gamma-pdf/lib/gamma_p_derivative.js","../node_modules/@stdlib/stats-base-dists-gamma-pdf/lib/regularised_gamma_prefix.js","../node_modules/@stdlib/stats-base-dists-gamma-pdf/lib/pdf.js","../node_modules/@stdlib/stats-base-dists-gamma-pdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-chisquare-pdf/lib/pdf.js","../node_modules/@stdlib/stats-base-dists-chisquare-ctor/lib/ctor.js","../node_modules/@stdlib/stats-base-dists-gamma-logpdf/lib/gamma_p_derivative.js","../node_modules/@stdlib/stats-base-dists-gamma-logpdf/lib/regularised_gamma_prefix.js","../node_modules/@stdlib/stats-base-dists-gamma-logpdf/lib/logpdf.js","../node_modules/@stdlib/stats-base-dists-gamma-logpdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-chisquare-logpdf/lib/logpdf.js","../node_modules/@stdlib/stats-base-dists-chisquare-cdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-chisquare-cdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-chisquare-quantile/lib/index.js","../node_modules/@stdlib/stats-base-dists-chisquare-quantile/lib/factory.js","../node_modules/@stdlib/stats-base-dists-chisquare-mgf/lib/index.js","../node_modules/@stdlib/stats-base-dists-chisquare-mgf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-gamma-pdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-chisquare-pdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-chisquare-pdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-gamma-logpdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-chisquare-logpdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-chisquare-logpdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-chisquare/lib/index.js","../node_modules/@stdlib/stats-base-dists-cosine-cdf/lib/cdf.js","../node_modules/@stdlib/stats-base-dists-cosine-cdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-cosine-cdf/lib/factory.js","../node_modules/@stdlib/constants-float64-pi-squared/lib/index.js","../node_modules/@stdlib/stats-base-dists-cosine-kurtosis/lib/kurtosis.js","../node_modules/@stdlib/stats-base-dists-cosine-mean/lib/mean.js","../node_modules/@stdlib/stats-base-dists-cosine-median/lib/median.js","../node_modules/@stdlib/stats-base-dists-cosine-mode/lib/mode.js","../node_modules/@stdlib/stats-base-dists-cosine-skewness/lib/skewness.js","../node_modules/@stdlib/stats-base-dists-cosine-stdev/lib/stdev.js","../node_modules/@stdlib/stats-base-dists-cosine-variance/lib/variance.js","../node_modules/@stdlib/stats-base-dists-cosine-logcdf/lib/logcdf.js","../node_modules/@stdlib/stats-base-dists-degenerate-logcdf/lib/logcdf.js","../node_modules/@stdlib/stats-base-dists-degenerate-logcdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-degenerate-logcdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-cosine-logcdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-cosine-logcdf/lib/factory.js","../node_modules/@stdlib/math-base-special-cospi/lib/cospi.js","../node_modules/@stdlib/stats-base-dists-cosine-logpdf/lib/logpdf.js","../node_modules/@stdlib/stats-base-dists-cosine-logpdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-cosine-logpdf/lib/factory.js","../node_modules/@stdlib/math-base-special-sinh/lib/sinh.js","../node_modules/@stdlib/math-base-special-sinh/lib/rational_pq.js","../node_modules/@stdlib/stats-base-dists-cosine-mgf/lib/mgf.js","../node_modules/@stdlib/stats-base-dists-cosine-pdf/lib/pdf.js","../node_modules/@stdlib/stats-base-dists-cosine-mgf/lib/index.js","../node_modules/@stdlib/stats-base-dists-cosine-mgf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-cosine-pdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-cosine-pdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-cosine-quantile/lib/bisect.js","../node_modules/@stdlib/stats-base-dists-cosine-quantile/lib/quantile.js","../node_modules/@stdlib/stats-base-dists-cosine-ctor/lib/ctor.js","../node_modules/@stdlib/stats-base-dists-cosine-quantile/lib/index.js","../node_modules/@stdlib/stats-base-dists-cosine-quantile/lib/factory.js","../node_modules/@stdlib/stats-base-dists-cosine/lib/index.js","../node_modules/@stdlib/stats-base-dists-degenerate-entropy/lib/entropy.js","../node_modules/@stdlib/stats-base-dists-degenerate-mean/lib/mean.js","../node_modules/@stdlib/stats-base-dists-degenerate-mode/lib/mode.js","../node_modules/@stdlib/stats-base-dists-degenerate-median/lib/median.js","../node_modules/@stdlib/stats-base-dists-degenerate-stdev/lib/stdev.js","../node_modules/@stdlib/stats-base-dists-degenerate-variance/lib/variance.js","../node_modules/@stdlib/stats-base-dists-degenerate-mgf/lib/mgf.js","../node_modules/@stdlib/stats-base-dists-degenerate-mgf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-degenerate-ctor/lib/ctor.js","../node_modules/@stdlib/stats-base-dists-degenerate-mgf/lib/index.js","../node_modules/@stdlib/stats-base-dists-degenerate/lib/index.js","../node_modules/@stdlib/stats-base-dists-discrete-uniform-cdf/lib/cdf.js","../node_modules/@stdlib/stats-base-dists-discrete-uniform-entropy/lib/entropy.js","../node_modules/@stdlib/stats-base-dists-discrete-uniform-kurtosis/lib/kurtosis.js","../node_modules/@stdlib/stats-base-dists-discrete-uniform-mean/lib/mean.js","../node_modules/@stdlib/stats-base-dists-discrete-uniform-median/lib/median.js","../node_modules/@stdlib/stats-base-dists-discrete-uniform-skewness/lib/skewness.js","../node_modules/@stdlib/stats-base-dists-discrete-uniform-cdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-discrete-uniform-cdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-discrete-uniform-stdev/lib/stdev.js","../node_modules/@stdlib/stats-base-dists-discrete-uniform-variance/lib/variance.js","../node_modules/@stdlib/stats-base-dists-discrete-uniform-logcdf/lib/logcdf.js","../node_modules/@stdlib/stats-base-dists-discrete-uniform-logpmf/lib/logpmf.js","../node_modules/@stdlib/stats-base-dists-discrete-uniform-mgf/lib/mgf.js","../node_modules/@stdlib/stats-base-dists-discrete-uniform-pmf/lib/pmf.js","../node_modules/@stdlib/stats-base-dists-discrete-uniform-quantile/lib/quantile.js","../node_modules/@stdlib/stats-base-dists-discrete-uniform-ctor/lib/ctor.js","../node_modules/@stdlib/stats-base-dists-discrete-uniform-logcdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-discrete-uniform-logcdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-discrete-uniform-logpmf/lib/index.js","../node_modules/@stdlib/stats-base-dists-discrete-uniform-logpmf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-discrete-uniform-mgf/lib/index.js","../node_modules/@stdlib/stats-base-dists-discrete-uniform-mgf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-discrete-uniform-pmf/lib/index.js","../node_modules/@stdlib/stats-base-dists-discrete-uniform-pmf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-discrete-uniform-quantile/lib/index.js","../node_modules/@stdlib/stats-base-dists-discrete-uniform-quantile/lib/factory.js","../node_modules/@stdlib/stats-base-dists-discrete-uniform/lib/index.js","../node_modules/@stdlib/stats-base-dists-erlang-cdf/lib/cdf.js","../node_modules/@stdlib/math-base-assert-is-positive-integer/lib/is_positive_integer.js","../node_modules/@stdlib/stats-base-dists-erlang-entropy/lib/entropy.js","../node_modules/@stdlib/stats-base-dists-erlang-kurtosis/lib/kurtosis.js","../node_modules/@stdlib/stats-base-dists-erlang-mean/lib/mean.js","../node_modules/@stdlib/stats-base-dists-erlang-mode/lib/mode.js","../node_modules/@stdlib/stats-base-dists-erlang-skewness/lib/skewness.js","../node_modules/@stdlib/stats-base-dists-erlang-stdev/lib/stdev.js","../node_modules/@stdlib/stats-base-dists-erlang-variance/lib/variance.js","../node_modules/@stdlib/stats-base-dists-erlang-logpdf/lib/logpdf.js","../node_modules/@stdlib/stats-base-dists-erlang-mgf/lib/mgf.js","../node_modules/@stdlib/stats-base-dists-erlang-pdf/lib/pdf.js","../node_modules/@stdlib/stats-base-dists-erlang-quantile/lib/quantile.js","../node_modules/@stdlib/stats-base-dists-erlang-ctor/lib/ctor.js","../node_modules/@stdlib/stats-base-dists-erlang-cdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-erlang-cdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-erlang-logpdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-erlang-logpdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-erlang-mgf/lib/index.js","../node_modules/@stdlib/stats-base-dists-erlang-mgf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-erlang-pdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-erlang-pdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-erlang-quantile/lib/index.js","../node_modules/@stdlib/stats-base-dists-erlang-quantile/lib/factory.js","../node_modules/@stdlib/stats-base-dists-erlang/lib/index.js","../node_modules/@stdlib/stats-base-dists-exponential-cdf/lib/cdf.js","../node_modules/@stdlib/stats-base-dists-exponential-entropy/lib/entropy.js","../node_modules/@stdlib/stats-base-dists-exponential-kurtosis/lib/kurtosis.js","../node_modules/@stdlib/stats-base-dists-exponential-mean/lib/mean.js","../node_modules/@stdlib/stats-base-dists-exponential-median/lib/median.js","../node_modules/@stdlib/stats-base-dists-exponential-mode/lib/mode.js","../node_modules/@stdlib/stats-base-dists-exponential-skewness/lib/skewness.js","../node_modules/@stdlib/stats-base-dists-exponential-stdev/lib/stdev.js","../node_modules/@stdlib/stats-base-dists-exponential-variance/lib/variance.js","../node_modules/@stdlib/stats-base-dists-exponential-logcdf/lib/logcdf.js","../node_modules/@stdlib/stats-base-dists-exponential-logpdf/lib/logpdf.js","../node_modules/@stdlib/stats-base-dists-exponential-mgf/lib/mgf.js","../node_modules/@stdlib/stats-base-dists-exponential-pdf/lib/pdf.js","../node_modules/@stdlib/stats-base-dists-exponential-quantile/lib/quantile.js","../node_modules/@stdlib/stats-base-dists-exponential-ctor/lib/ctor.js","../node_modules/@stdlib/stats-base-dists-exponential-cdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-exponential-cdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-exponential-logcdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-exponential-logcdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-exponential-logpdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-exponential-logpdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-exponential-mgf/lib/index.js","../node_modules/@stdlib/stats-base-dists-exponential-mgf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-exponential-pdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-exponential-pdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-exponential-quantile/lib/index.js","../node_modules/@stdlib/stats-base-dists-exponential-quantile/lib/factory.js","../node_modules/@stdlib/stats-base-dists-exponential/lib/index.js","../node_modules/@stdlib/stats-base-dists-f-cdf/lib/cdf.js","../node_modules/@stdlib/stats-base-dists-f-entropy/lib/entropy.js","../node_modules/@stdlib/stats-base-dists-f-kurtosis/lib/kurtosis.js","../node_modules/@stdlib/stats-base-dists-f-mean/lib/mean.js","../node_modules/@stdlib/stats-base-dists-f-mode/lib/mode.js","../node_modules/@stdlib/stats-base-dists-f-skewness/lib/skewness.js","../node_modules/@stdlib/stats-base-dists-f-stdev/lib/stdev.js","../node_modules/@stdlib/stats-base-dists-f-variance/lib/variance.js","../node_modules/@stdlib/stats-base-dists-f-pdf/lib/ibeta_derivative.js","../node_modules/@stdlib/stats-base-dists-f-pdf/lib/ibeta_power_terms.js","../node_modules/@stdlib/stats-base-dists-f-pdf/lib/pdf.js","../node_modules/@stdlib/stats-base-dists-f-quantile/lib/quantile.js","../node_modules/@stdlib/stats-base-dists-f-ctor/lib/ctor.js","../node_modules/@stdlib/stats-base-dists-f-cdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-f-cdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-f-pdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-f-pdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-f-quantile/lib/index.js","../node_modules/@stdlib/stats-base-dists-f-quantile/lib/factory.js","../node_modules/@stdlib/stats-base-dists-f/lib/index.js","../node_modules/@stdlib/stats-base-dists-frechet-cdf/lib/cdf.js","../node_modules/@stdlib/stats-base-dists-frechet-entropy/lib/entropy.js","../node_modules/@stdlib/stats-base-dists-frechet-kurtosis/lib/kurtosis.js","../node_modules/@stdlib/stats-base-dists-frechet-mean/lib/mean.js","../node_modules/@stdlib/stats-base-dists-frechet-median/lib/median.js","../node_modules/@stdlib/stats-base-dists-frechet-mode/lib/mode.js","../node_modules/@stdlib/stats-base-dists-frechet-skewness/lib/skewness.js","../node_modules/@stdlib/stats-base-dists-frechet-stdev/lib/stdev.js","../node_modules/@stdlib/stats-base-dists-frechet-variance/lib/variance.js","../node_modules/@stdlib/stats-base-dists-frechet-logcdf/lib/logcdf.js","../node_modules/@stdlib/stats-base-dists-frechet-logpdf/lib/logpdf.js","../node_modules/@stdlib/stats-base-dists-frechet-logpdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-frechet-pdf/lib/pdf.js","../node_modules/@stdlib/stats-base-dists-frechet-quantile/lib/quantile.js","../node_modules/@stdlib/stats-base-dists-frechet-ctor/lib/ctor.js","../node_modules/@stdlib/stats-base-dists-frechet-cdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-frechet-cdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-frechet-logcdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-frechet-logcdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-frechet-logpdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-frechet-pdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-frechet-pdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-frechet-quantile/lib/index.js","../node_modules/@stdlib/stats-base-dists-frechet-quantile/lib/factory.js","../node_modules/@stdlib/stats-base-dists-frechet/lib/index.js","../node_modules/@stdlib/stats-base-dists-gamma-entropy/lib/entropy.js","../node_modules/@stdlib/stats-base-dists-gamma-kurtosis/lib/kurtosis.js","../node_modules/@stdlib/stats-base-dists-gamma-mean/lib/mean.js","../node_modules/@stdlib/stats-base-dists-gamma-mode/lib/mode.js","../node_modules/@stdlib/stats-base-dists-gamma-skewness/lib/skewness.js","../node_modules/@stdlib/stats-base-dists-gamma-stdev/lib/stdev.js","../node_modules/@stdlib/stats-base-dists-gamma-variance/lib/variance.js","../node_modules/@stdlib/stats-base-dists-gamma-logcdf/lib/logcdf.js","../node_modules/@stdlib/stats-base-dists-gamma-mgf/lib/mgf.js","../node_modules/@stdlib/stats-base-dists-gamma-ctor/lib/ctor.js","../node_modules/@stdlib/stats-base-dists-gamma-logcdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-gamma-logcdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-gamma-mgf/lib/index.js","../node_modules/@stdlib/stats-base-dists-gamma-mgf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-gamma/lib/index.js","../node_modules/@stdlib/stats-base-dists-geometric-cdf/lib/cdf.js","../node_modules/@stdlib/stats-base-dists-geometric-entropy/lib/entropy.js","../node_modules/@stdlib/stats-base-dists-geometric-kurtosis/lib/kurtosis.js","../node_modules/@stdlib/stats-base-dists-geometric-mean/lib/mean.js","../node_modules/@stdlib/stats-base-dists-geometric-cdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-geometric-cdf/lib/factory.js","../node_modules/@stdlib/math-base-special-log2/lib/klog.js","../node_modules/@stdlib/math-base-special-log2/lib/main.js","../node_modules/@stdlib/math-base-special-log2/lib/polyval_p.js","../node_modules/@stdlib/math-base-special-log2/lib/polyval_q.js","../node_modules/@stdlib/stats-base-dists-geometric-median/lib/median.js","../node_modules/@stdlib/stats-base-dists-geometric-mode/lib/mode.js","../node_modules/@stdlib/stats-base-dists-geometric-skewness/lib/skewness.js","../node_modules/@stdlib/stats-base-dists-geometric-stdev/lib/stdev.js","../node_modules/@stdlib/stats-base-dists-geometric-variance/lib/variance.js","../node_modules/@stdlib/stats-base-dists-geometric-logcdf/lib/logcdf.js","../node_modules/@stdlib/stats-base-dists-geometric-logpmf/lib/logpmf.js","../node_modules/@stdlib/stats-base-dists-geometric-mgf/lib/mgf.js","../node_modules/@stdlib/stats-base-dists-geometric-pmf/lib/pmf.js","../node_modules/@stdlib/stats-base-dists-geometric-quantile/lib/quantile.js","../node_modules/@stdlib/stats-base-dists-geometric-ctor/lib/ctor.js","../node_modules/@stdlib/stats-base-dists-geometric-logcdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-geometric-logcdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-geometric-logpmf/lib/index.js","../node_modules/@stdlib/stats-base-dists-geometric-logpmf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-geometric-mgf/lib/index.js","../node_modules/@stdlib/stats-base-dists-geometric-mgf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-geometric-pmf/lib/index.js","../node_modules/@stdlib/stats-base-dists-geometric-pmf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-geometric-quantile/lib/index.js","../node_modules/@stdlib/stats-base-dists-geometric-quantile/lib/factory.js","../node_modules/@stdlib/stats-base-dists-geometric/lib/index.js","../node_modules/@stdlib/stats-base-dists-gumbel-cdf/lib/cdf.js","../node_modules/@stdlib/stats-base-dists-gumbel-entropy/lib/entropy.js","../node_modules/@stdlib/stats-base-dists-gumbel-kurtosis/lib/kurtosis.js","../node_modules/@stdlib/stats-base-dists-gumbel-mean/lib/mean.js","../node_modules/@stdlib/stats-base-dists-gumbel-cdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-gumbel-cdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-gumbel-median/lib/median.js","../node_modules/@stdlib/stats-base-dists-gumbel-mode/lib/mode.js","../node_modules/@stdlib/stats-base-dists-gumbel-skewness/lib/skewness.js","../node_modules/@stdlib/math-base-special-riemann-zeta/lib/zeta.js","../node_modules/@stdlib/math-base-special-riemann-zeta/lib/rational_p1q1.js","../node_modules/@stdlib/math-base-special-riemann-zeta/lib/rational_p2q2.js","../node_modules/@stdlib/math-base-special-riemann-zeta/lib/rational_p3q3.js","../node_modules/@stdlib/math-base-special-riemann-zeta/lib/rational_p4q4.js","../node_modules/@stdlib/math-base-special-riemann-zeta/lib/rational_p5q5.js","../node_modules/@stdlib/math-base-special-riemann-zeta/lib/rational_p6q6.js","../node_modules/@stdlib/stats-base-dists-gumbel-stdev/lib/stdev.js","../node_modules/@stdlib/stats-base-dists-gumbel-variance/lib/variance.js","../node_modules/@stdlib/stats-base-dists-gumbel-logcdf/lib/logcdf.js","../node_modules/@stdlib/stats-base-dists-gumbel-logpdf/lib/logpdf.js","../node_modules/@stdlib/stats-base-dists-gumbel-mgf/lib/mgf.js","../node_modules/@stdlib/stats-base-dists-gumbel-pdf/lib/pdf.js","../node_modules/@stdlib/stats-base-dists-gumbel-quantile/lib/quantile.js","../node_modules/@stdlib/stats-base-dists-gumbel-ctor/lib/ctor.js","../node_modules/@stdlib/stats-base-dists-gumbel-logcdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-gumbel-logcdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-gumbel-logpdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-gumbel-logpdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-gumbel-mgf/lib/index.js","../node_modules/@stdlib/stats-base-dists-gumbel-mgf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-gumbel-pdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-gumbel-pdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-gumbel-quantile/lib/index.js","../node_modules/@stdlib/stats-base-dists-gumbel-quantile/lib/factory.js","../node_modules/@stdlib/stats-base-dists-gumbel/lib/index.js","../node_modules/@stdlib/math-base-special-factorialln/lib/factorialln.js","../node_modules/@stdlib/math-base-assert-is-negative-integer/lib/is_negative_integer.js","../node_modules/@stdlib/stats-base-dists-hypergeometric-pmf/lib/pmf.js","../node_modules/@stdlib/stats-base-dists-hypergeometric-cdf/lib/sum.js","../node_modules/@stdlib/stats-base-dists-hypergeometric-cdf/lib/cdf.js","../node_modules/@stdlib/assert-is-nonnegative-integer/lib/primitive.js","../node_modules/@stdlib/assert-is-nonnegative-integer/lib/object.js","../node_modules/@stdlib/assert-is-nonnegative-integer/lib/main.js","../node_modules/@stdlib/stats-base-dists-hypergeometric-kurtosis/lib/kurtosis.js","../node_modules/@stdlib/stats-base-dists-hypergeometric-mean/lib/mean.js","../node_modules/@stdlib/stats-base-dists-hypergeometric-mode/lib/mode.js","../node_modules/@stdlib/stats-base-dists-hypergeometric-skewness/lib/skewness.js","../node_modules/@stdlib/stats-base-dists-hypergeometric-stdev/lib/stdev.js","../node_modules/@stdlib/stats-base-dists-hypergeometric-variance/lib/variance.js","../node_modules/@stdlib/stats-base-dists-hypergeometric-logpmf/lib/logpmf.js","../node_modules/@stdlib/stats-base-dists-hypergeometric-quantile/lib/quantile.js","../node_modules/@stdlib/stats-base-dists-hypergeometric-ctor/lib/ctor.js","../node_modules/@stdlib/stats-base-dists-hypergeometric-pmf/lib/index.js","../node_modules/@stdlib/stats-base-dists-hypergeometric-pmf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-hypergeometric-cdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-hypergeometric-cdf/lib/factory.js","../node_modules/@stdlib/assert-is-nonnegative-integer/lib/index.js","../node_modules/@stdlib/stats-base-dists-hypergeometric-logpmf/lib/index.js","../node_modules/@stdlib/stats-base-dists-hypergeometric-logpmf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-hypergeometric-quantile/lib/index.js","../node_modules/@stdlib/stats-base-dists-hypergeometric-quantile/lib/factory.js","../node_modules/@stdlib/stats-base-dists-hypergeometric/lib/index.js","../node_modules/@stdlib/stats-base-dists-invgamma-cdf/lib/cdf.js","../node_modules/@stdlib/stats-base-dists-invgamma-entropy/lib/entropy.js","../node_modules/@stdlib/stats-base-dists-invgamma-kurtosis/lib/kurtosis.js","../node_modules/@stdlib/stats-base-dists-invgamma-mean/lib/mean.js","../node_modules/@stdlib/stats-base-dists-invgamma-mode/lib/mode.js","../node_modules/@stdlib/stats-base-dists-invgamma-quantile/lib/quantile.js","../node_modules/@stdlib/stats-base-dists-invgamma-logpdf/lib/logpdf.js","../node_modules/@stdlib/stats-base-dists-invgamma-skewness/lib/skewness.js","../node_modules/@stdlib/stats-base-dists-invgamma-stdev/lib/stdev.js","../node_modules/@stdlib/stats-base-dists-invgamma-variance/lib/variance.js","../node_modules/@stdlib/stats-base-dists-invgamma-pdf/lib/pdf.js","../node_modules/@stdlib/stats-base-dists-invgamma-ctor/lib/ctor.js","../node_modules/@stdlib/stats-base-dists-invgamma-cdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-invgamma-cdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-invgamma-quantile/lib/index.js","../node_modules/@stdlib/stats-base-dists-invgamma-quantile/lib/factory.js","../node_modules/@stdlib/stats-base-dists-invgamma-logpdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-invgamma-logpdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-invgamma-pdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-invgamma-pdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-invgamma/lib/index.js","../node_modules/@stdlib/stats-base-dists-kumaraswamy-cdf/lib/cdf.js","../node_modules/@stdlib/stats-base-dists-kumaraswamy-kurtosis/lib/kurtosis.js","../node_modules/@stdlib/stats-base-dists-kumaraswamy-mean/lib/mean.js","../node_modules/@stdlib/stats-base-dists-kumaraswamy-mode/lib/mode.js","../node_modules/@stdlib/stats-base-dists-kumaraswamy-skewness/lib/skewness.js","../node_modules/@stdlib/stats-base-dists-kumaraswamy-stdev/lib/stdev.js","../node_modules/@stdlib/stats-base-dists-kumaraswamy-variance/lib/variance.js","../node_modules/@stdlib/stats-base-dists-kumaraswamy-logcdf/lib/logcdf.js","../node_modules/@stdlib/stats-base-dists-kumaraswamy-logpdf/lib/logpdf.js","../node_modules/@stdlib/stats-base-dists-kumaraswamy-pdf/lib/pdf.js","../node_modules/@stdlib/stats-base-dists-kumaraswamy-quantile/lib/quantile.js","../node_modules/@stdlib/stats-base-dists-kumaraswamy-ctor/lib/ctor.js","../node_modules/@stdlib/stats-base-dists-kumaraswamy-cdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-kumaraswamy-cdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-kumaraswamy-logcdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-kumaraswamy-logcdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-kumaraswamy-logpdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-kumaraswamy-logpdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-kumaraswamy-pdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-kumaraswamy-pdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-kumaraswamy-quantile/lib/index.js","../node_modules/@stdlib/stats-base-dists-kumaraswamy-quantile/lib/factory.js","../node_modules/@stdlib/stats-base-dists-kumaraswamy/lib/index.js","../node_modules/@stdlib/stats-base-dists-laplace-cdf/lib/cdf.js","../node_modules/@stdlib/stats-base-dists-laplace-entropy/lib/entropy.js","../node_modules/@stdlib/stats-base-dists-laplace-kurtosis/lib/kurtosis.js","../node_modules/@stdlib/stats-base-dists-laplace-mean/lib/mean.js","../node_modules/@stdlib/stats-base-dists-laplace-median/lib/median.js","../node_modules/@stdlib/stats-base-dists-laplace-mode/lib/mode.js","../node_modules/@stdlib/stats-base-dists-laplace-skewness/lib/skewness.js","../node_modules/@stdlib/stats-base-dists-laplace-stdev/lib/stdev.js","../node_modules/@stdlib/stats-base-dists-laplace-variance/lib/variance.js","../node_modules/@stdlib/stats-base-dists-kumaraswamy-median/lib/median.js","../node_modules/@stdlib/stats-base-dists-laplace-cdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-laplace-cdf/lib/factory.js","../node_modules/@stdlib/constants-float64-ln-half/lib/index.js","../node_modules/@stdlib/stats-base-dists-laplace-logcdf/lib/logcdf.js","../node_modules/@stdlib/stats-base-dists-laplace-logpdf/lib/logpdf.js","../node_modules/@stdlib/stats-base-dists-laplace-mgf/lib/mgf.js","../node_modules/@stdlib/stats-base-dists-laplace-pdf/lib/pdf.js","../node_modules/@stdlib/stats-base-dists-laplace-quantile/lib/quantile.js","../node_modules/@stdlib/stats-base-dists-laplace-ctor/lib/ctor.js","../node_modules/@stdlib/stats-base-dists-laplace-logcdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-laplace-logcdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-laplace-logpdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-laplace-logpdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-laplace-mgf/lib/index.js","../node_modules/@stdlib/stats-base-dists-laplace-mgf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-laplace-pdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-laplace-pdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-laplace-quantile/lib/index.js","../node_modules/@stdlib/stats-base-dists-laplace-quantile/lib/factory.js","../node_modules/@stdlib/stats-base-dists-laplace/lib/index.js","../node_modules/@stdlib/stats-base-dists-levy-cdf/lib/cdf.js","../node_modules/@stdlib/stats-base-dists-levy-cdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-levy-cdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-levy-entropy/lib/entropy.js","../node_modules/@stdlib/stats-base-dists-levy-mean/lib/mean.js","../node_modules/@stdlib/stats-base-dists-levy-median/lib/median.js","../node_modules/@stdlib/stats-base-dists-levy-mode/lib/mode.js","../node_modules/@stdlib/stats-base-dists-levy-stdev/lib/stdev.js","../node_modules/@stdlib/stats-base-dists-levy-variance/lib/variance.js","../node_modules/@stdlib/stats-base-dists-levy-logcdf/lib/logcdf.js","../node_modules/@stdlib/stats-base-dists-levy-logcdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-levy-logcdf/lib/factory.js","../node_modules/@stdlib/constants-float64-ln-two-pi/lib/index.js","../node_modules/@stdlib/stats-base-dists-levy-logpdf/lib/logpdf.js","../node_modules/@stdlib/stats-base-dists-levy-pdf/lib/pdf.js","../node_modules/@stdlib/stats-base-dists-levy-quantile/lib/quantile.js","../node_modules/@stdlib/stats-base-dists-levy-ctor/lib/ctor.js","../node_modules/@stdlib/stats-base-dists-levy-logpdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-levy-logpdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-levy-pdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-levy-pdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-levy-quantile/lib/index.js","../node_modules/@stdlib/stats-base-dists-levy-quantile/lib/factory.js","../node_modules/@stdlib/stats-base-dists-levy/lib/index.js","../node_modules/@stdlib/stats-base-dists-logistic-cdf/lib/cdf.js","../node_modules/@stdlib/stats-base-dists-logistic-entropy/lib/entropy.js","../node_modules/@stdlib/stats-base-dists-logistic-kurtosis/lib/kurtosis.js","../node_modules/@stdlib/stats-base-dists-logistic-mean/lib/mean.js","../node_modules/@stdlib/stats-base-dists-logistic-median/lib/median.js","../node_modules/@stdlib/stats-base-dists-logistic-mode/lib/mode.js","../node_modules/@stdlib/stats-base-dists-logistic-skewness/lib/skewness.js","../node_modules/@stdlib/stats-base-dists-logistic-cdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-logistic-cdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-logistic-stdev/lib/stdev.js","../node_modules/@stdlib/constants-float64-sqrt-three/lib/index.js","../node_modules/@stdlib/stats-base-dists-logistic-variance/lib/variance.js","../node_modules/@stdlib/stats-base-dists-logistic-logcdf/lib/log1pexp.js","../node_modules/@stdlib/stats-base-dists-logistic-logcdf/lib/logcdf.js","../node_modules/@stdlib/stats-base-dists-logistic-logpdf/lib/logpdf.js","../node_modules/@stdlib/math-base-special-sinc/lib/sinc.js","../node_modules/@stdlib/stats-base-dists-logistic-mgf/lib/mgf.js","../node_modules/@stdlib/stats-base-dists-logistic-pdf/lib/pdf.js","../node_modules/@stdlib/stats-base-dists-logistic-quantile/lib/quantile.js","../node_modules/@stdlib/stats-base-dists-logistic-ctor/lib/ctor.js","../node_modules/@stdlib/stats-base-dists-logistic-logcdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-logistic-logcdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-logistic-logpdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-logistic-logpdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-logistic-mgf/lib/index.js","../node_modules/@stdlib/stats-base-dists-logistic-mgf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-logistic-pdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-logistic-pdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-logistic-quantile/lib/index.js","../node_modules/@stdlib/stats-base-dists-logistic-quantile/lib/factory.js","../node_modules/@stdlib/stats-base-dists-logistic/lib/index.js","../node_modules/@stdlib/stats-base-dists-normal-cdf/lib/cdf.js","../node_modules/@stdlib/stats-base-dists-normal-cdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-lognormal-cdf/lib/cdf.js","../node_modules/@stdlib/stats-base-dists-lognormal-entropy/lib/entropy.js","../node_modules/@stdlib/stats-base-dists-lognormal-kurtosis/lib/kurtosis.js","../node_modules/@stdlib/stats-base-dists-lognormal-mean/lib/mean.js","../node_modules/@stdlib/stats-base-dists-lognormal-median/lib/median.js","../node_modules/@stdlib/stats-base-dists-lognormal-mode/lib/mode.js","../node_modules/@stdlib/stats-base-dists-lognormal-skewness/lib/skewness.js","../node_modules/@stdlib/stats-base-dists-lognormal-stdev/lib/stdev.js","../node_modules/@stdlib/stats-base-dists-lognormal-variance/lib/variance.js","../node_modules/@stdlib/stats-base-dists-lognormal-logpdf/lib/logpdf.js","../node_modules/@stdlib/stats-base-dists-lognormal-pdf/lib/pdf.js","../node_modules/@stdlib/stats-base-dists-normal-cdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-lognormal-cdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-lognormal-cdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-lognormal-logpdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-lognormal-logpdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-lognormal-pdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-lognormal-pdf/lib/factory.js","../node_modules/@stdlib/math-base-special-erfinv/lib/erfinv.js","../node_modules/@stdlib/math-base-special-erfinv/lib/rational_p1q1.js","../node_modules/@stdlib/math-base-special-erfinv/lib/rational_p2q2.js","../node_modules/@stdlib/math-base-special-erfinv/lib/rational_p3q3.js","../node_modules/@stdlib/math-base-special-erfinv/lib/rational_p4q4.js","../node_modules/@stdlib/math-base-special-erfinv/lib/rational_p5q5.js","../node_modules/@stdlib/stats-base-dists-normal-quantile/lib/quantile.js","../node_modules/@stdlib/stats-base-dists-lognormal-quantile/lib/quantile.js","../node_modules/@stdlib/stats-base-dists-lognormal-ctor/lib/ctor.js","../node_modules/@stdlib/stats-base-dists-normal-quantile/lib/index.js","../node_modules/@stdlib/stats-base-dists-normal-quantile/lib/factory.js","../node_modules/@stdlib/stats-base-dists-lognormal-quantile/lib/index.js","../node_modules/@stdlib/stats-base-dists-lognormal-quantile/lib/factory.js","../node_modules/@stdlib/stats-base-dists-lognormal/lib/index.js","../node_modules/@stdlib/stats-base-dists-negative-binomial-quantile/lib/search.js","../node_modules/@stdlib/stats-base-dists-negative-binomial-cdf/lib/cdf.js","../node_modules/@stdlib/stats-base-dists-negative-binomial-kurtosis/lib/kurtosis.js","../node_modules/@stdlib/stats-base-dists-negative-binomial-mean/lib/mean.js","../node_modules/@stdlib/stats-base-dists-negative-binomial-mode/lib/mode.js","../node_modules/@stdlib/stats-base-dists-negative-binomial-skewness/lib/skewness.js","../node_modules/@stdlib/stats-base-dists-negative-binomial-stdev/lib/stdev.js","../node_modules/@stdlib/stats-base-dists-negative-binomial-variance/lib/variance.js","../node_modules/@stdlib/stats-base-dists-negative-binomial-logpmf/lib/ibeta_derivative.js","../node_modules/@stdlib/stats-base-dists-negative-binomial-logpmf/lib/ibeta_power_terms.js","../node_modules/@stdlib/stats-base-dists-negative-binomial-logpmf/lib/logpmf.js","../node_modules/@stdlib/stats-base-dists-negative-binomial-mgf/lib/mgf.js","../node_modules/@stdlib/stats-base-dists-negative-binomial-pmf/lib/ibeta_derivative.js","../node_modules/@stdlib/stats-base-dists-negative-binomial-pmf/lib/ibeta_power_terms.js","../node_modules/@stdlib/stats-base-dists-negative-binomial-pmf/lib/pmf.js","../node_modules/@stdlib/stats-base-dists-negative-binomial-cdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-negative-binomial-cdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-negative-binomial-logpmf/lib/index.js","../node_modules/@stdlib/stats-base-dists-negative-binomial-logpmf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-negative-binomial-mgf/lib/index.js","../node_modules/@stdlib/stats-base-dists-negative-binomial-mgf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-negative-binomial-pmf/lib/index.js","../node_modules/@stdlib/stats-base-dists-negative-binomial-pmf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-negative-binomial-quantile/lib/quantile.js","../node_modules/@stdlib/stats-base-dists-negative-binomial-ctor/lib/ctor.js","../node_modules/@stdlib/stats-base-dists-negative-binomial-quantile/lib/index.js","../node_modules/@stdlib/stats-base-dists-negative-binomial-quantile/lib/factory.js","../node_modules/@stdlib/stats-base-dists-negative-binomial/lib/index.js","../node_modules/@stdlib/stats-base-dists-normal-entropy/lib/entropy.js","../node_modules/@stdlib/stats-base-dists-normal-kurtosis/lib/kurtosis.js","../node_modules/@stdlib/stats-base-dists-normal-mean/lib/mean.js","../node_modules/@stdlib/stats-base-dists-normal-median/lib/median.js","../node_modules/@stdlib/stats-base-dists-normal-mode/lib/mode.js","../node_modules/@stdlib/stats-base-dists-normal-skewness/lib/skewness.js","../node_modules/@stdlib/stats-base-dists-normal-stdev/lib/stdev.js","../node_modules/@stdlib/stats-base-dists-normal-variance/lib/variance.js","../node_modules/@stdlib/stats-base-dists-normal-logpdf/lib/logpdf.js","../node_modules/@stdlib/stats-base-dists-normal-mgf/lib/mgf.js","../node_modules/@stdlib/stats-base-dists-normal-pdf/lib/pdf.js","../node_modules/@stdlib/stats-base-dists-normal-ctor/lib/ctor.js","../node_modules/@stdlib/stats-base-dists-normal-logpdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-normal-logpdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-normal-mgf/lib/index.js","../node_modules/@stdlib/stats-base-dists-normal-mgf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-normal-pdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-normal-pdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-normal/lib/index.js","../node_modules/@stdlib/stats-base-dists-pareto-type1-cdf/lib/cdf.js","../node_modules/@stdlib/stats-base-dists-pareto-type1-entropy/lib/entropy.js","../node_modules/@stdlib/stats-base-dists-pareto-type1-kurtosis/lib/kurtosis.js","../node_modules/@stdlib/stats-base-dists-pareto-type1-mean/lib/mean.js","../node_modules/@stdlib/stats-base-dists-pareto-type1-median/lib/median.js","../node_modules/@stdlib/stats-base-dists-pareto-type1-mode/lib/mode.js","../node_modules/@stdlib/stats-base-dists-pareto-type1-skewness/lib/skewness.js","../node_modules/@stdlib/stats-base-dists-pareto-type1-variance/lib/variance.js","../node_modules/@stdlib/stats-base-dists-pareto-type1-logcdf/lib/logcdf.js","../node_modules/@stdlib/stats-base-dists-pareto-type1-logpdf/lib/logpdf.js","../node_modules/@stdlib/stats-base-dists-pareto-type1-pdf/lib/pdf.js","../node_modules/@stdlib/stats-base-dists-pareto-type1-quantile/lib/quantile.js","../node_modules/@stdlib/stats-base-dists-pareto-type1-ctor/lib/ctor.js","../node_modules/@stdlib/stats-base-dists-pareto-type1-cdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-pareto-type1-cdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-pareto-type1-logcdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-pareto-type1-logcdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-pareto-type1-logpdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-pareto-type1-logpdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-pareto-type1-pdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-pareto-type1-pdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-pareto-type1-quantile/lib/index.js","../node_modules/@stdlib/stats-base-dists-pareto-type1-quantile/lib/factory.js","../node_modules/@stdlib/stats-base-dists-pareto-type1/lib/index.js","../node_modules/@stdlib/stats-base-dists-poisson-quantile/lib/search.js","../node_modules/@stdlib/stats-base-dists-poisson-cdf/lib/cdf.js","../node_modules/@stdlib/stats-base-dists-poisson-entropy/lib/entropy.js","../node_modules/@stdlib/stats-base-dists-poisson-kurtosis/lib/kurtosis.js","../node_modules/@stdlib/stats-base-dists-poisson-mean/lib/mean.js","../node_modules/@stdlib/stats-base-dists-poisson-median/lib/median.js","../node_modules/@stdlib/stats-base-dists-poisson-mode/lib/mode.js","../node_modules/@stdlib/stats-base-dists-poisson-skewness/lib/skewness.js","../node_modules/@stdlib/stats-base-dists-poisson-stdev/lib/stdev.js","../node_modules/@stdlib/stats-base-dists-poisson-variance/lib/variance.js","../node_modules/@stdlib/stats-base-dists-poisson-logpmf/lib/logpmf.js","../node_modules/@stdlib/stats-base-dists-poisson-mgf/lib/mgf.js","../node_modules/@stdlib/stats-base-dists-poisson-pmf/lib/pmf.js","../node_modules/@stdlib/stats-base-dists-pareto-type1-stdev/lib/stdev.js","../node_modules/@stdlib/stats-base-dists-poisson-cdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-poisson-cdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-poisson-logpmf/lib/index.js","../node_modules/@stdlib/stats-base-dists-poisson-logpmf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-poisson-mgf/lib/index.js","../node_modules/@stdlib/stats-base-dists-poisson-mgf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-poisson-pmf/lib/index.js","../node_modules/@stdlib/stats-base-dists-poisson-pmf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-poisson-quantile/lib/quantile.js","../node_modules/@stdlib/stats-base-dists-poisson-ctor/lib/ctor.js","../node_modules/@stdlib/stats-base-dists-poisson-quantile/lib/index.js","../node_modules/@stdlib/stats-base-dists-poisson-quantile/lib/factory.js","../node_modules/@stdlib/stats-base-dists-poisson/lib/index.js","../node_modules/@stdlib/stats-base-dists-rayleigh-cdf/lib/cdf.js","../node_modules/@stdlib/stats-base-dists-rayleigh-entropy/lib/entropy.js","../node_modules/@stdlib/stats-base-dists-rayleigh-cdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-rayleigh-cdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-rayleigh-kurtosis/lib/kurtosis.js","../node_modules/@stdlib/constants-float64-sqrt-half-pi/lib/index.js","../node_modules/@stdlib/stats-base-dists-rayleigh-mean/lib/mean.js","../node_modules/@stdlib/stats-base-dists-rayleigh-median/lib/median.js","../node_modules/@stdlib/stats-base-dists-rayleigh-mode/lib/mode.js","../node_modules/@stdlib/constants-float64-sqrt-pi/lib/index.js","../node_modules/@stdlib/stats-base-dists-rayleigh-skewness/lib/skewness.js","../node_modules/@stdlib/stats-base-dists-rayleigh-stdev/lib/stdev.js","../node_modules/@stdlib/stats-base-dists-rayleigh-variance/lib/variance.js","../node_modules/@stdlib/stats-base-dists-rayleigh-logcdf/lib/logcdf.js","../node_modules/@stdlib/stats-base-dists-rayleigh-logpdf/lib/logpdf.js","../node_modules/@stdlib/stats-base-dists-rayleigh-logcdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-rayleigh-logcdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-rayleigh-logpdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-rayleigh-logpdf/lib/factory.js","../node_modules/@stdlib/math-base-special-erf/lib/erf.js","../node_modules/@stdlib/math-base-special-erf/lib/polyval_pp.js","../node_modules/@stdlib/math-base-special-erf/lib/polyval_qq.js","../node_modules/@stdlib/math-base-special-erf/lib/polyval_pa.js","../node_modules/@stdlib/math-base-special-erf/lib/polyval_qa.js","../node_modules/@stdlib/math-base-special-erf/lib/polyval_ra.js","../node_modules/@stdlib/math-base-special-erf/lib/polyval_sa.js","../node_modules/@stdlib/math-base-special-erf/lib/polyval_rb.js","../node_modules/@stdlib/math-base-special-erf/lib/polyval_sb.js","../node_modules/@stdlib/stats-base-dists-rayleigh-mgf/lib/mgf.js","../node_modules/@stdlib/stats-base-dists-rayleigh-pdf/lib/pdf.js","../node_modules/@stdlib/stats-base-dists-rayleigh-quantile/lib/quantile.js","../node_modules/@stdlib/stats-base-dists-rayleigh-ctor/lib/ctor.js","../node_modules/@stdlib/stats-base-dists-rayleigh-mgf/lib/index.js","../node_modules/@stdlib/stats-base-dists-rayleigh-mgf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-rayleigh-pdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-rayleigh-pdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-rayleigh-quantile/lib/index.js","../node_modules/@stdlib/stats-base-dists-rayleigh-quantile/lib/factory.js","../node_modules/@stdlib/stats-base-dists-rayleigh/lib/index.js","../node_modules/@stdlib/math-base-assert-is-finite/lib/main.js","../node_modules/@stdlib/utils-type-of/lib/fixtures/re.js","../node_modules/@stdlib/assert-is-boolean/lib/primitive.js","../node_modules/@stdlib/assert-is-boolean/lib/tostring.js","../node_modules/@stdlib/assert-is-boolean/lib/object.js","../node_modules/@stdlib/assert-is-boolean/lib/try2serialize.js","../node_modules/@stdlib/assert-is-boolean/lib/main.js","../node_modules/@stdlib/utils-global/lib/codegen.js","../node_modules/@stdlib/assert-is-boolean/lib/index.js","../node_modules/@stdlib/utils-global/lib/self.js","../node_modules/@stdlib/utils-global/lib/window.js","../node_modules/@stdlib/utils-global/lib/global.js","../node_modules/@stdlib/utils-type-of/lib/fixtures/nodelist.js","../node_modules/@stdlib/utils-global/lib/main.js","../node_modules/@stdlib/utils-type-of/lib/fixtures/typedarray.js","../node_modules/@stdlib/regexp-function-name/lib/main.js","../node_modules/@stdlib/regexp-function-name/lib/regexp.js","../node_modules/@stdlib/regexp-function-name/lib/index.js","../node_modules/@stdlib/assert-is-array/lib/main.js","../node_modules/@stdlib/assert-is-object-like/lib/main.js","../node_modules/@stdlib/utils-constructor-name/lib/main.js","../node_modules/@stdlib/assert-is-buffer/lib/main.js","../node_modules/@stdlib/assert-is-object-like/lib/index.js","../node_modules/@stdlib/assert-tools-array-function/lib/arrayfcn.js","../node_modules/@stdlib/utils-type-of/lib/index.js","../node_modules/@stdlib/stats-base-dists-signrank-cdf/lib/weights.js","../node_modules/@stdlib/utils-type-of/lib/check.js","../node_modules/@stdlib/utils-type-of/lib/polyfill.js","../node_modules/@stdlib/utils-type-of/lib/typeof.js","../node_modules/@stdlib/assert-is-function/lib/main.js","../node_modules/@stdlib/utils-identity-function/lib/identity.js","../node_modules/@stdlib/utils-memoize/lib/memoize.js","../node_modules/@stdlib/stats-base-dists-signrank-pdf/lib/weights.js","../node_modules/@stdlib/stats-base-dists-signrank-cdf/lib/cdf.js","../node_modules/@stdlib/stats-base-dists-signrank-cdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-signrank-cdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-signrank-quantile/lib/weights.js","../node_modules/@stdlib/stats-base-dists-signrank-pdf/lib/pdf.js","../node_modules/@stdlib/stats-base-dists-signrank-pdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-signrank-pdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-signrank-quantile/lib/quantile.js","../node_modules/@stdlib/stats-base-dists-signrank-quantile/lib/index.js","../node_modules/@stdlib/stats-base-dists-signrank-quantile/lib/factory.js","../node_modules/@stdlib/stats-base-dists-signrank/lib/index.js","../node_modules/@stdlib/stats-base-dists-studentized-range-cdf/lib/apnorm.js","../node_modules/@stdlib/stats-base-dists-studentized-range-cdf/lib/prange_v_inf.js","../node_modules/@stdlib/stats-base-dists-studentized-range-cdf/lib/f26.js","../node_modules/@stdlib/stats-base-dists-studentized-range-cdf/lib/gausslegdquad.js","../node_modules/@stdlib/stats-base-dists-studentized-range-cdf/lib/main.js","../node_modules/@stdlib/stats-base-dists-studentized-range-cdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-studentized-range-cdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-studentized-range-quantile/lib/qtrngo.js","../node_modules/@stdlib/stats-base-dists-studentized-range-quantile/lib/apnorminv.js","../node_modules/@stdlib/stats-base-dists-studentized-range-quantile/lib/main.js","../node_modules/@stdlib/stats-base-dists-studentized-range-quantile/lib/index.js","../node_modules/@stdlib/stats-base-dists-studentized-range-quantile/lib/factory.js","../node_modules/@stdlib/stats-base-dists-studentized-range/lib/index.js","../node_modules/@stdlib/stats-base-dists-t-cdf/lib/cdf.js","../node_modules/@stdlib/stats-base-dists-t-entropy/lib/entropy.js","../node_modules/@stdlib/stats-base-dists-t-kurtosis/lib/kurtosis.js","../node_modules/@stdlib/stats-base-dists-t-mean/lib/mean.js","../node_modules/@stdlib/stats-base-dists-t-median/lib/median.js","../node_modules/@stdlib/stats-base-dists-t-mode/lib/mode.js","../node_modules/@stdlib/stats-base-dists-t-skewness/lib/skewness.js","../node_modules/@stdlib/stats-base-dists-t-stdev/lib/stdev.js","../node_modules/@stdlib/stats-base-dists-t-variance/lib/variance.js","../node_modules/@stdlib/stats-base-dists-t-logcdf/lib/logcdf.js","../node_modules/@stdlib/stats-base-dists-t-logpdf/lib/logpdf.js","../node_modules/@stdlib/stats-base-dists-t-pdf/lib/pdf.js","../node_modules/@stdlib/stats-base-dists-t-quantile/lib/quantile.js","../node_modules/@stdlib/stats-base-dists-t-ctor/lib/ctor.js","../node_modules/@stdlib/stats-base-dists-t-cdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-t-cdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-t-logcdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-t-logcdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-t-logpdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-t-logpdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-t-pdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-t-pdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-t-quantile/lib/index.js","../node_modules/@stdlib/stats-base-dists-t-quantile/lib/factory.js","../node_modules/@stdlib/stats-base-dists-t/lib/index.js","../node_modules/@stdlib/stats-base-dists-triangular-cdf/lib/cdf.js","../node_modules/@stdlib/stats-base-dists-triangular-entropy/lib/entropy.js","../node_modules/@stdlib/stats-base-dists-triangular-kurtosis/lib/kurtosis.js","../node_modules/@stdlib/stats-base-dists-triangular-mean/lib/mean.js","../node_modules/@stdlib/stats-base-dists-triangular-median/lib/median.js","../node_modules/@stdlib/stats-base-dists-triangular-mode/lib/mode.js","../node_modules/@stdlib/stats-base-dists-triangular-skewness/lib/skewness.js","../node_modules/@stdlib/stats-base-dists-triangular-stdev/lib/stdev.js","../node_modules/@stdlib/stats-base-dists-triangular-variance/lib/variance.js","../node_modules/@stdlib/stats-base-dists-triangular-logcdf/lib/logcdf.js","../node_modules/@stdlib/stats-base-dists-triangular-logpdf/lib/logpdf.js","../node_modules/@stdlib/stats-base-dists-triangular-mgf/lib/mgf.js","../node_modules/@stdlib/stats-base-dists-triangular-pdf/lib/pdf.js","../node_modules/@stdlib/stats-base-dists-triangular-quantile/lib/quantile.js","../node_modules/@stdlib/stats-base-dists-triangular-ctor/lib/ctor.js","../node_modules/@stdlib/stats-base-dists-triangular-cdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-triangular-cdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-triangular-logcdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-triangular-logcdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-triangular-logpdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-triangular-logpdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-triangular-mgf/lib/index.js","../node_modules/@stdlib/stats-base-dists-triangular-mgf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-triangular-pdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-triangular-pdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-triangular-quantile/lib/index.js","../node_modules/@stdlib/stats-base-dists-triangular-quantile/lib/factory.js","../node_modules/@stdlib/stats-base-dists-triangular/lib/index.js","../node_modules/@stdlib/stats-base-dists-truncated-normal-pdf/lib/pdf.js","../node_modules/@stdlib/stats-base-dists-truncated-normal-pdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-truncated-normal-pdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-truncated-normal/lib/index.js","../node_modules/@stdlib/stats-base-dists-uniform-cdf/lib/cdf.js","../node_modules/@stdlib/stats-base-dists-uniform-entropy/lib/entropy.js","../node_modules/@stdlib/stats-base-dists-uniform-kurtosis/lib/kurtosis.js","../node_modules/@stdlib/stats-base-dists-uniform-mean/lib/mean.js","../node_modules/@stdlib/stats-base-dists-uniform-median/lib/median.js","../node_modules/@stdlib/stats-base-dists-uniform-skewness/lib/skewness.js","../node_modules/@stdlib/stats-base-dists-uniform-cdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-uniform-cdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-uniform-stdev/lib/stdev.js","../node_modules/@stdlib/stats-base-dists-uniform-variance/lib/variance.js","../node_modules/@stdlib/stats-base-dists-uniform-logcdf/lib/logcdf.js","../node_modules/@stdlib/stats-base-dists-uniform-logpdf/lib/logpdf.js","../node_modules/@stdlib/stats-base-dists-uniform-mgf/lib/mgf.js","../node_modules/@stdlib/stats-base-dists-uniform-pdf/lib/pdf.js","../node_modules/@stdlib/stats-base-dists-uniform-quantile/lib/quantile.js","../node_modules/@stdlib/stats-base-dists-uniform-ctor/lib/ctor.js","../node_modules/@stdlib/stats-base-dists-uniform-logcdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-uniform-logcdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-uniform-logpdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-uniform-logpdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-uniform-mgf/lib/index.js","../node_modules/@stdlib/stats-base-dists-uniform-mgf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-uniform-pdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-uniform-pdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-uniform-quantile/lib/index.js","../node_modules/@stdlib/stats-base-dists-uniform-quantile/lib/factory.js","../node_modules/@stdlib/stats-base-dists-uniform/lib/index.js","../node_modules/@stdlib/stats-base-dists-weibull-cdf/lib/cdf.js","../node_modules/@stdlib/stats-base-dists-weibull-entropy/lib/entropy.js","../node_modules/@stdlib/stats-base-dists-weibull-kurtosis/lib/kurtosis.js","../node_modules/@stdlib/stats-base-dists-weibull-mean/lib/mean.js","../node_modules/@stdlib/stats-base-dists-weibull-median/lib/median.js","../node_modules/@stdlib/stats-base-dists-weibull-mode/lib/mode.js","../node_modules/@stdlib/stats-base-dists-weibull-variance/lib/variance.js","../node_modules/@stdlib/stats-base-dists-weibull-skewness/lib/skewness.js","../node_modules/@stdlib/stats-base-dists-weibull-stdev/lib/stdev.js","../node_modules/@stdlib/stats-base-dists-weibull-logcdf/lib/logcdf.js","../node_modules/@stdlib/stats-base-dists-weibull-logpdf/lib/logpdf.js","../node_modules/@stdlib/stats-base-dists-weibull-mgf/lib/mgf.js","../node_modules/@stdlib/stats-base-dists-weibull-pdf/lib/pdf.js","../node_modules/@stdlib/stats-base-dists-weibull-quantile/lib/quantile.js","../node_modules/@stdlib/stats-base-dists-weibull-ctor/lib/ctor.js","../node_modules/@stdlib/stats-base-dists-weibull-cdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-weibull-cdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-weibull-logcdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-weibull-logcdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-weibull-logpdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-weibull-logpdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-weibull-mgf/lib/index.js","../node_modules/@stdlib/stats-base-dists-weibull-mgf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-weibull-pdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-weibull-pdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-weibull-quantile/lib/index.js","../node_modules/@stdlib/stats-base-dists-weibull-quantile/lib/factory.js","../node_modules/@stdlib/stats-base-dists-weibull/lib/index.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar main = ( typeof Object.defineProperty === 'function' ) ? Object.defineProperty : null;\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Defines (or modifies) an object property.\n*\n* ## Notes\n*\n* -   Property descriptors come in two flavors: **data descriptors** and **accessor descriptors**. A data descriptor is a property that has a value, which may or may not be writable. An accessor descriptor is a property described by a getter-setter function pair. A descriptor must be one of these two flavors and cannot be both.\n*\n* @name defineProperty\n* @type {Function}\n* @param {Object} obj - object on which to define the property\n* @param {(string|symbol)} prop - property name\n* @param {Object} descriptor - property descriptor\n* @param {boolean} [descriptor.configurable=false] - boolean indicating if property descriptor can be changed and if the property can be deleted from the provided object\n* @param {boolean} [descriptor.enumerable=false] - boolean indicating if the property shows up when enumerating object properties\n* @param {boolean} [descriptor.writable=false] - boolean indicating if the value associated with the property can be changed with an assignment operator\n* @param {*} [descriptor.value] - property value\n* @param {(Function|void)} [descriptor.get=undefined] - function which serves as a getter for the property, or, if no getter, undefined. When the property is accessed, a getter function is called without arguments and with the `this` context set to the object through which the property is accessed (which may not be the object on which the property is defined due to inheritance). The return value will be used as the property value.\n* @param {(Function|void)} [descriptor.set=undefined] - function which serves as a setter for the property, or, if no setter, undefined. When assigning a property value, a setter function is called with one argument (the value being assigned to the property) and with the `this` context set to the object through which the property is assigned.\n* @throws {TypeError} first argument must be an object\n* @throws {TypeError} third argument must be an object\n* @throws {Error} property descriptor cannot have both a value and a setter and/or getter\n* @returns {Object} object with added property\n*\n* @example\n* var obj = {};\n*\n* defineProperty( obj, 'foo', {\n*     'value': 'bar'\n* });\n*\n* var str = obj.foo;\n* // returns 'bar'\n*/\nvar defineProperty = Object.defineProperty;\n\n\n// EXPORTS //\n\nexport default defineProperty;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Define (or modify) an object property.\n*\n* @module @stdlib/utils-define-property\n*\n* @example\n* import defineProperty from '@stdlib/utils-define-property';\n*\n* var obj = {};\n* defineProperty( obj, 'foo', {\n*     'value': 'bar',\n*     'writable': false,\n*     'configurable': false,\n*     'enumerable': false\n* });\n* obj.foo = 'boop'; // => throws\n*/\n\n// MODULES //\n\nimport hasDefinePropertySupport from './has_define_property_support.js';\nimport builtin from './builtin.js';\nimport polyfill from './polyfill.js';\n\n\n// MAIN //\n\nvar defineProperty;\nif ( hasDefinePropertySupport() ) {\n\tdefineProperty = builtin;\n} else {\n\tdefineProperty = polyfill;\n}\n\n\n// EXPORTS //\n\nexport default defineProperty;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-underscore-dangle, no-proto */\n\n'use strict';\n\n// VARIABLES //\n\nvar objectProtoype = Object.prototype;\nvar toStr = objectProtoype.toString;\nvar defineGetter = objectProtoype.__defineGetter__;\nvar defineSetter = objectProtoype.__defineSetter__;\nvar lookupGetter = objectProtoype.__lookupGetter__;\nvar lookupSetter = objectProtoype.__lookupSetter__;\n\n\n// MAIN //\n\n/**\n* Defines (or modifies) an object property.\n*\n* ## Notes\n*\n* -   Property descriptors come in two flavors: **data descriptors** and **accessor descriptors**. A data descriptor is a property that has a value, which may or may not be writable. An accessor descriptor is a property described by a getter-setter function pair. A descriptor must be one of these two flavors and cannot be both.\n*\n* @param {Object} obj - object on which to define the property\n* @param {string} prop - property name\n* @param {Object} descriptor - property descriptor\n* @param {boolean} [descriptor.configurable=false] - boolean indicating if property descriptor can be changed and if the property can be deleted from the provided object\n* @param {boolean} [descriptor.enumerable=false] - boolean indicating if the property shows up when enumerating object properties\n* @param {boolean} [descriptor.writable=false] - boolean indicating if the value associated with the property can be changed with an assignment operator\n* @param {*} [descriptor.value] - property value\n* @param {(Function|void)} [descriptor.get=undefined] - function which serves as a getter for the property, or, if no getter, undefined. When the property is accessed, a getter function is called without arguments and with the `this` context set to the object through which the property is accessed (which may not be the object on which the property is defined due to inheritance). The return value will be used as the property value.\n* @param {(Function|void)} [descriptor.set=undefined] - function which serves as a setter for the property, or, if no setter, undefined. When assigning a property value, a setter function is called with one argument (the value being assigned to the property) and with the `this` context set to the object through which the property is assigned.\n* @throws {TypeError} first argument must be an object\n* @throws {TypeError} third argument must be an object\n* @throws {Error} property descriptor cannot have both a value and a setter and/or getter\n* @returns {Object} object with added property\n*\n* @example\n* var obj = {};\n*\n* defineProperty( obj, 'foo', {\n*     'value': 'bar'\n* });\n*\n* var str = obj.foo;\n* // returns 'bar'\n*/\nfunction defineProperty( obj, prop, descriptor ) {\n\tvar prototype;\n\tvar hasValue;\n\tvar hasGet;\n\tvar hasSet;\n\n\tif ( typeof obj !== 'object' || obj === null || toStr.call( obj ) === '[object Array]' ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be an object. Value: `' + obj + '`.' );\n\t}\n\tif ( typeof descriptor !== 'object' || descriptor === null || toStr.call( descriptor ) === '[object Array]' ) {\n\t\tthrow new TypeError( 'invalid argument. Property descriptor must be an object. Value: `' + descriptor + '`.' );\n\t}\n\thasValue = ( 'value' in descriptor );\n\tif ( hasValue ) {\n\t\tif (\n\t\t\tlookupGetter.call( obj, prop ) ||\n\t\t\tlookupSetter.call( obj, prop )\n\t\t) {\n\t\t\t// Override `__proto__` to avoid touching inherited accessors:\n\t\t\tprototype = obj.__proto__;\n\t\t\tobj.__proto__ = objectProtoype;\n\n\t\t\t// Delete property as existing getters/setters prevent assigning value to specified property:\n\t\t\tdelete obj[ prop ];\n\t\t\tobj[ prop ] = descriptor.value;\n\n\t\t\t// Restore original prototype:\n\t\t\tobj.__proto__ = prototype;\n\t\t} else {\n\t\t\tobj[ prop ] = descriptor.value;\n\t\t}\n\t}\n\thasGet = ( 'get' in descriptor );\n\thasSet = ( 'set' in descriptor );\n\n\tif ( hasValue && ( hasGet || hasSet ) ) {\n\t\tthrow new Error( 'invalid argument. Cannot specify one or more accessors and a value or writable attribute in the property descriptor.' );\n\t}\n\n\tif ( hasGet && defineGetter ) {\n\t\tdefineGetter.call( obj, prop, descriptor.get );\n\t}\n\tif ( hasSet && defineSetter ) {\n\t\tdefineSetter.call( obj, prop, descriptor.set );\n\t}\n\treturn obj;\n}\n\n\n// EXPORTS //\n\nexport default defineProperty;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport defineProperty from './define_property.js';\n\n\n// MAIN //\n\n/**\n* Tests for `Object.defineProperty` support.\n*\n* @private\n* @returns {boolean} boolean indicating if an environment has `Object.defineProperty` support\n*\n* @example\n* var bool = hasDefinePropertySupport();\n* // returns <boolean>\n*/\nfunction hasDefinePropertySupport() {\n\t// Test basic support...\n\ttry {\n\t\tdefineProperty( {}, 'x', {} );\n\t\treturn true;\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\treturn false;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default hasDefinePropertySupport;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport defineProperty from '@stdlib/utils-define-property';\n\n\n// MAIN //\n\n/**\n* Defines a read-only property.\n*\n* @param {Object} obj - object on which to define the property\n* @param {(string|symbol)} prop - property name\n* @param {*} value - value to set\n*\n* @example\n* var obj = {};\n*\n* setReadOnly( obj, 'foo', 'bar' );\n*\n* try {\n*     obj.foo = 'boop';\n* } catch ( err ) {\n*     console.error( err.message );\n* }\n*/\nfunction setReadOnly( obj, prop, value ) {\n\tdefineProperty( obj, prop, {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'writable': false,\n\t\t'value': value\n\t});\n}\n\n\n// EXPORTS //\n\nexport default setReadOnly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport defineProperty from '@stdlib/utils-define-property';\n\n\n// MAIN //\n\n/**\n* Defines a non-enumerable read-only property.\n*\n* @param {Object} obj - object on which to define the property\n* @param {(string|symbol)} prop - property name\n* @param {*} value - value to set\n*\n* @example\n* var obj = {};\n*\n* setNonEnumerableReadOnly( obj, 'foo', 'bar' );\n*\n* try {\n*     obj.foo = 'boop';\n* } catch ( err ) {\n*     console.error( err.message );\n* }\n*/\nfunction setNonEnumerableReadOnly( obj, prop, value ) {\n\tdefineProperty( obj, prop, {\n\t\t'configurable': false,\n\t\t'enumerable': false,\n\t\t'writable': false,\n\t\t'value': value\n\t});\n}\n\n\n// EXPORTS //\n\nexport default setNonEnumerableReadOnly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Tests if a double-precision floating-point numeric value is `NaN`.\n*\n* @param {number} x - value to test\n* @returns {boolean} boolean indicating whether the value is `NaN`\n*\n* @example\n* var bool = isnan( NaN );\n* // returns true\n*\n* @example\n* var bool = isnan( 7.0 );\n* // returns false\n*/\nfunction isnan( x ) {\n\treturn ( x !== x );\n}\n\n\n// EXPORTS //\n\nexport default isnan;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Compute the principal square root of a double-precision floating-point number.\n*\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} principal square root\n*\n* @example\n* var v = sqrt( 4.0 );\n* // returns 2.0\n*\n* v = sqrt( 9.0 );\n* // returns 3.0\n*\n* v = sqrt( 0.0 );\n* // returns 0.0\n*\n* v = sqrt( -4.0 );\n* // returns NaN\n*\n* v = sqrt( NaN );\n* // returns NaN\n*/\nvar sqrt = Math.sqrt; // eslint-disable-line stdlib/no-builtin-math\n\n\n// EXPORTS //\n\nexport default sqrt;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* One fourth times the mathematical constant `π`.\n*\n* @module @stdlib/constants-float64-fourth-pi\n* @type {number}\n*\n* @example\n* import FOURTH_PI from '@stdlib/constants-float64-fourth-pi';\n* // returns 7.85398163397448309616e-1\n*/\n\n\n// MAIN //\n\n/**\n* One fourth times the mathematical constant `π`.\n*\n* @constant\n* @type {number}\n* @default 7.85398163397448309616e-1\n* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Pi}\n*/\nvar FOURTH_PI = 7.85398163397448309616e-1;\n\n\n// EXPORTS //\n\nexport default FOURTH_PI;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C code, long comment, copyright, license, and constants are from [Cephes]{@link http://www.netlib.org/cephes}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright 1984, 1995, 2000 by Stephen L. Moshier\n*\n* Some software in this archive may be from the book _Methods and Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster International, 1989) or from the Cephes Mathematical Library, a commercial product. In either event, it is copyrighted by the author. What you see here may be used freely but it comes with no support or guarantee.\n*\n* Stephen L. Moshier\n* moshier@na-net.ornl.gov\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport PIO4 from '@stdlib/constants-float64-fourth-pi';\nimport ratevalPQ from './rational_pq.js';\nimport ratevalRS from './rational_rs.js';\n\n\n// VARIABLES //\n\nvar MOREBITS = 6.123233995736765886130e-17; // pi/2 = PIO2 + MOREBITS\n\n\n// MAIN //\n\n/**\n* Computes the arcsine of a number.\n*\n* ## Method\n*\n* -   A rational function of the form\n*\n*     ```tex\n*     x + x^3 \\frac{P(x^2)}{Q(x^2)}\n*     ```\n*\n*     is used for \\\\(\\|x\\|\\\\) in the interval \\\\(\\[0, 0.5\\]\\\\). If \\\\(\\|x\\| > 0.5\\\\), it is transformed by the identity\n*\n*     ```tex\n*     \\operatorname{asin}(x) = \\frac{\\pi}{2} - 2 \\operatorname{asin}( \\sqrt{ (1-x)/2 } )\n*     ```\n*\n* ## Notes\n*\n* -   Relative error:\n*\n*     | arithmetic | domain | # trials | peak    | rms     |\n*     |:-----------|:-------|:---------|:--------|:--------|\n*     | DEC        | -1, 1  | 40000    | 2.6e-17 | 7.1e-18 |\n*     | IEEE       | -1, 1  | 10^6     | 1.9e-16 | 5.4e-17 |\n*\n* @param {number} x - input value\n* @returns {number} arcsine (in radians)\n*\n* @example\n* var v = asin( 0.0 );\n* // returns ~0.0\n*\n* @example\n* var v = asin( 3.141592653589793/4.0 );\n* // returns ~0.903\n*\n* @example\n* var v = asin( -3.141592653589793/6.0 );\n* // returns ~-0.551\n*\n* @example\n* var v = asin( NaN );\n* // returns NaN\n*/\nfunction asin( x ) {\n\tvar sgn;\n\tvar zz;\n\tvar a;\n\tvar p;\n\tvar z;\n\n\tif ( isnan( x ) ) {\n\t\treturn NaN;\n\t}\n\tif ( x > 0.0 ) {\n\t\ta = x;\n\t} else {\n\t\tsgn = true;\n\t\ta = -x;\n\t}\n\tif ( a > 1.0 ) {\n\t\treturn NaN;\n\t}\n\tif ( a > 0.625 ) {\n\t\t// arcsin(1-x) = pi/2 - sqrt(2x)(1+R(x))\n\t\tzz = 1.0 - a;\n\t\tp = zz * ratevalRS( zz );\n\t\tzz = sqrt( zz + zz );\n\t\tz = PIO4 - zz;\n\t\tzz = ( zz*p ) - MOREBITS;\n\t\tz -= zz;\n\t\tz += PIO4;\n\t} else {\n\t\tif ( a < 1.0e-8 ) {\n\t\t\treturn x;\n\t\t}\n\t\tzz = a * a;\n\t\tz = zz * ratevalPQ( zz );\n\t\tz = ( a*z ) + a;\n\t}\n\treturn ( sgn ) ? -z : z;\n}\n\n\n// EXPORTS //\n\nexport default asin;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn 0.08333333333333809;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = 28.536655482610616 + (x * (-25.56901049652825 + (x * (6.968710824104713 + (x * (-0.5634242780008963 + (x * 0.002967721961301243))))))); // eslint-disable-line max-len\n\t\ts2 = 342.43986579130785 + (x * (-383.8770957603691 + (x * (147.0656354026815 + (x * (-21.947795316429207 + (x * 1.0))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = 0.002967721961301243 + (x * (-0.5634242780008963 + (x * (6.968710824104713 + (x * (-25.56901049652825 + (x * 28.536655482610616))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (-21.947795316429207 + (x * (147.0656354026815 + (x * (-383.8770957603691 + (x * 342.43986579130785))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn 0.16666666666666713;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = -8.198089802484825 + (x * (19.562619833175948 + (x * (-16.262479672107002 + (x * (5.444622390564711 + (x * (-0.6019598008014124 + (x * 0.004253011369004428))))))))); // eslint-disable-line max-len\n\t\ts2 = -49.18853881490881 + (x * (139.51056146574857 + (x * (-147.1791292232726 + (x * (70.49610280856842 + (x * (-14.740913729888538 + (x * 1.0))))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = 0.004253011369004428 + (x * (-0.6019598008014124 + (x * (5.444622390564711 + (x * (-16.262479672107002 + (x * (19.562619833175948 + (x * -8.198089802484825))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (-14.740913729888538 + (x * (70.49610280856842 + (x * (-147.1791292232726 + (x * (139.51056146574857 + (x * -49.18853881490881))))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* The mathematical constant `π`.\n*\n* @module @stdlib/constants-float64-pi\n* @type {number}\n*\n* @example\n* import PI from '@stdlib/constants-float64-pi';\n* // returns 3.141592653589793\n*/\n\n\n// MAIN //\n\n/**\n* The mathematical constant `π`.\n*\n* @constant\n* @type {number}\n* @default 3.141592653589793\n* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Pi}\n*/\nvar PI = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679; // eslint-disable-line max-len\n\n\n// EXPORTS //\n\nexport default PI;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport asin from '@stdlib/math-base-special-asin';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport PI from '@stdlib/constants-float64-pi';\n\n\n// VARIABLES //\n\nvar TWO_OVER_PI = 2.0 / PI; // TODO: consider moving to pkg\n\n\n// MAIN //\n\n/**\n* Evaluates the cumulative distribution function (CDF) for an arcsine distribution with minimum support `a` and maximum support `b` at a value `x`.\n*\n* @param {number} x - input value\n* @param {number} a - minimum support\n* @param {number} b - maximum support\n* @returns {Probability} evaluated CDF\n*\n* @example\n* var y = cdf( 9.0, 0.0, 10.0 );\n* // returns ~0.795\n*\n* @example\n* var y = cdf( 0.5, 0.0, 2.0 );\n* // returns ~0.333\n*\n* @example\n* var y = cdf( +Infinity, 2.0, 4.0 );\n* // returns 1.0\n*\n* @example\n* var y = cdf( -Infinity, 2.0, 4.0 );\n* // returns 0.0\n*\n* @example\n* var y = cdf( NaN, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2.0, 1.0, 0.0 );\n* // returns NaN\n*/\nfunction cdf( x, a, b ) {\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\ta >= b\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x < a ) {\n\t\treturn 0.0;\n\t}\n\tif ( x >= b ) {\n\t\treturn 1.0;\n\t}\n\treturn TWO_OVER_PI * asin( sqrt( ( x-a ) / ( b-a ) ) );\n}\n\n\n// EXPORTS //\n\nexport default cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Creates a function which always returns the same value.\n*\n* @param {*} [value] - value to always return\n* @returns {Function} constant function\n*\n* @example\n* var fcn = wrap( 3.14 );\n*\n* var v = fcn();\n* // returns 3.14\n*\n* v = fcn();\n* // returns 3.14\n*\n* v = fcn();\n* // returns 3.14\n*/\nfunction wrap( value ) {\n\treturn constantFunction;\n\n\t/**\n\t* Constant function.\n\t*\n\t* @private\n\t* @returns {*} constant value\n\t*/\n\tfunction constantFunction() {\n\t\treturn value;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default wrap;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport defineProperty from '@stdlib/utils-define-property';\n\n\n// MAIN //\n\n/**\n* Defines a non-enumerable read-only accessor.\n*\n* @param {Object} obj - object on which to define the property\n* @param {(string|symbol)} prop - property name\n* @param {Function} getter - accessor\n*\n* @example\n* function getter() {\n*     return 'bar';\n* }\n*\n* var obj = {};\n*\n* setNonEnumerableReadOnlyAccessor( obj, 'foo', getter );\n*\n* try {\n*     obj.foo = 'boop';\n* } catch ( err ) {\n*     console.error( err.message );\n* }\n*/\nfunction setNonEnumerableReadOnlyAccessor( obj, prop, getter ) { // eslint-disable-line id-length\n\tdefineProperty( obj, prop, {\n\t\t'configurable': false,\n\t\t'enumerable': false,\n\t\t'get': getter\n\t});\n}\n\n\n// EXPORTS //\n\nexport default setNonEnumerableReadOnlyAccessor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Tests if a value is a number primitive.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a number primitive\n*\n* @example\n* var bool = isNumber( 3.14 );\n* // returns true\n*\n* @example\n* var bool = isNumber( NaN );\n* // returns true\n*\n* @example\n* var bool = isNumber( new Number( 3.14 ) );\n* // returns false\n*/\nfunction isNumber( value ) {\n\treturn ( typeof value === 'number' );\n}\n\n\n// EXPORTS //\n\nexport default isNumber;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Arcsine distribution cumulative distribution function (CDF).\n*\n* @module @stdlib/stats-base-dists-arcsine-cdf\n*\n* @example\n* import cdf from '@stdlib/stats-base-dists-arcsine-cdf';\n*\n* var y = cdf( 5.0, 0.0, 4.0 );\n* // returns 1.0\n*\n* var mycdf = cdf.factory( 0.0, 10.0 );\n* y = mycdf( 0.5 );\n* // returns ~0.144\n*\n* y = mycdf( 8.0 );\n* // returns ~0.705\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport cdf from './main.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( cdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport asin from '@stdlib/math-base-special-asin';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport PI from '@stdlib/constants-float64-pi';\n\n\n// VARIABLES //\n\nvar TWO_OVER_PI = 2.0 / PI;\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the cumulative distribution function (CDF) for an arcsine distribution with minimum support `a` and maximum support `b`.\n*\n* @param {number} a - minimum support\n* @param {number} b - maximum support\n* @returns {Function} CDF\n*\n* @example\n* var cdf = factory( 0.0, 10.0 );\n* var y = cdf( 0.5 );\n* // returns ~0.144\n*\n* y = cdf( 8.0 );\n* // returns ~0.705\n*/\nfunction factory( a, b ) {\n\tif (\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\ta >= b\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn cdf;\n\n\t/**\n\t* Evaluates the cumulative distribution function (CDF) for an arcsine distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated CDF\n\t*\n\t* @example\n\t* var y = cdf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction cdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x < a ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\tif ( x >= b ) {\n\t\t\treturn 1.0;\n\t\t}\n\t\treturn TWO_OVER_PI * asin( sqrt( ( x-a ) / ( b-a ) ) );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport hasSymbols from '@stdlib/assert-has-symbol-support';\n\n\n// VARIABLES //\n\nvar FLG = hasSymbols();\n\n\n// MAIN //\n\n/**\n* Tests for native `toStringTag` support.\n*\n* @returns {boolean} boolean indicating if an environment has `toStringTag` support\n*\n* @example\n* var bool = hasToStringTagSupport();\n* // returns <boolean>\n*/\nfunction hasToStringTagSupport() {\n\treturn ( FLG && typeof Symbol.toStringTag === 'symbol' );\n}\n\n\n// EXPORTS //\n\nexport default hasToStringTagSupport;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Tests for native `Symbol` support.\n*\n* @returns {boolean} boolean indicating if an environment has `Symbol` support\n*\n* @example\n* var bool = hasSymbolSupport();\n* // returns <boolean>\n*/\nfunction hasSymbolSupport() {\n\treturn (\n\t\ttypeof Symbol === 'function' &&\n\t\ttypeof Symbol( 'foo' ) === 'symbol'\n\t);\n}\n\n\n// EXPORTS //\n\nexport default hasSymbolSupport;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar toStr = Object.prototype.toString;\n\n\n// EXPORTS //\n\nexport default toStr;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// FUNCTIONS //\n\nvar has = Object.prototype.hasOwnProperty;\n\n\n// MAIN //\n\n/**\n* Tests if an object has a specified property.\n*\n* @param {*} value - value to test\n* @param {*} property - property to test\n* @returns {boolean} boolean indicating if an object has a specified property\n*\n* @example\n* var beep = {\n*     'boop': true\n* };\n*\n* var bool = hasOwnProp( beep, 'boop' );\n* // returns true\n*\n* @example\n* var beep = {\n*     'boop': true\n* };\n*\n* var bool = hasOwnProp( beep, 'bap' );\n* // returns false\n*/\nfunction hasOwnProp( value, property ) {\n\tif (\n\t\tvalue === void 0 ||\n\t\tvalue === null\n\t) {\n\t\treturn false;\n\t}\n\treturn has.call( value, property );\n}\n\n\n// EXPORTS //\n\nexport default hasOwnProp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar toStrTag = ( typeof Symbol === 'function' ) ? Symbol.toStringTag : '';\n\n\n// EXPORTS //\n\nexport default toStrTag;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a string value indicating a specification defined classification of an object.\n*\n* @module @stdlib/utils-native-class\n*\n* @example\n* import nativeClass from '@stdlib/utils-native-class';\n*\n* var str = nativeClass( 'a' );\n* // returns '[object String]'\n*\n* str = nativeClass( 5 );\n* // returns '[object Number]'\n*\n* function Beep() {\n*     return this;\n* }\n* str = nativeClass( new Beep() );\n* // returns '[object Object]'\n*/\n\n// MODULES //\n\nimport hasToStringTag from '@stdlib/assert-has-tostringtag-support';\nimport builtin from './native_class.js';\nimport polyfill from './polyfill.js';\n\n\n// MAIN //\n\nvar nativeClass;\nif ( hasToStringTag() ) {\n\tnativeClass = polyfill;\n} else {\n\tnativeClass = builtin;\n}\n\n\n// EXPORTS //\n\nexport default nativeClass;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport toStringTag from './tostringtag.js';\nimport toStr from './tostring.js';\n\n\n// MAIN //\n\n/**\n* Returns a string value indicating a specification defined classification of an object in environments supporting `Symbol.toStringTag`.\n*\n* @param {*} v - input value\n* @returns {string} string value indicating a specification defined classification of the input value\n*\n* @example\n* var str = nativeClass( 'a' );\n* // returns '[object String]'\n*\n* @example\n* var str = nativeClass( 5 );\n* // returns '[object Number]'\n*\n* @example\n* function Beep() {\n*     return this;\n* }\n* var str = nativeClass( new Beep() );\n* // returns '[object Object]'\n*/\nfunction nativeClass( v ) {\n\tvar isOwn;\n\tvar tag;\n\tvar out;\n\n\tif ( v === null || v === void 0 ) {\n\t\treturn toStr.call( v );\n\t}\n\ttag = v[ toStringTag ];\n\tisOwn = hasOwnProp( v, toStringTag );\n\n\t// Attempt to override the `toStringTag` property. For built-ins having a `Symbol.toStringTag` property (e.g., `JSON`, `Math`, etc), the `Symbol.toStringTag` property is read-only (e.g., , so we need to wrap in a `try/catch`.\n\ttry {\n\t\tv[ toStringTag ] = void 0;\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\treturn toStr.call( v );\n\t}\n\tout = toStr.call( v );\n\n\tif ( isOwn ) {\n\t\tv[ toStringTag ] = tag;\n\t} else {\n\t\tdelete v[ toStringTag ];\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default nativeClass;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport toStr from './tostring.js';\n\n\n// MAIN //\n\n/**\n* Returns a string value indicating a specification defined classification (via the internal property `[[Class]]`) of an object.\n*\n* @param {*} v - input value\n* @returns {string} string value indicating a specification defined classification of the input value\n*\n* @example\n* var str = nativeClass( 'a' );\n* // returns '[object String]'\n*\n* @example\n* var str = nativeClass( 5 );\n* // returns '[object Number]'\n*\n* @example\n* function Beep() {\n*     return this;\n* }\n* var str = nativeClass( new Beep() );\n* // returns '[object Object]'\n*/\nfunction nativeClass( v ) {\n\treturn toStr.call( v );\n}\n\n\n// EXPORTS //\n\nexport default nativeClass;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// EXPORTS //\n\nexport default Number; // eslint-disable-line stdlib/require-globals\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Number from '@stdlib/number-ctor';\n\n\n// MAIN //\n\n// eslint-disable-next-line stdlib/no-redeclare\nvar toString = Number.prototype.toString; // non-generic\n\n\n// EXPORTS //\n\nexport default toString;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport hasToStringTag from '@stdlib/assert-has-tostringtag-support';\nimport nativeClass from '@stdlib/utils-native-class';\nimport Number from '@stdlib/number-ctor';\nimport test from './try2serialize.js';\n\n\n// VARIABLES //\n\nvar FLG = hasToStringTag();\n\n\n// MAIN //\n\n/**\n* Tests if a value is a number object.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a number object\n*\n* @example\n* var bool = isNumber( 3.14 );\n* // returns false\n*\n* @example\n* var bool = isNumber( new Number( 3.14 ) );\n* // returns true\n*/\nfunction isNumber( value ) {\n\tif ( typeof value === 'object' ) {\n\t\tif ( value instanceof Number ) {\n\t\t\treturn true;\n\t\t}\n\t\tif ( FLG ) {\n\t\t\treturn test( value );\n\t\t}\n\t\treturn ( nativeClass( value ) === '[object Number]' );\n\t}\n\treturn false;\n}\n\n\n// EXPORTS //\n\nexport default isNumber;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport toString from './tostring.js'; // eslint-disable-line stdlib/no-redeclare\n\n\n// MAIN //\n\n/**\n* Attempts to serialize a value to a string.\n*\n* @private\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value can be serialized\n*/\nfunction test( value ) {\n\ttry {\n\t\ttoString.call( value );\n\t\treturn true;\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\treturn false;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default test;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPrimitive from './primitive.js';\nimport isObject from './object.js';\n\n\n// MAIN //\n\n/**\n* Tests if a value is a number.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is a number\n*\n* @example\n* var bool = isNumber( 3.14 );\n* // returns true\n*\n* @example\n* var bool = isNumber( new Number( 3.14 ) );\n* // returns true\n*\n* @example\n* var bool = isNumber( NaN );\n* // returns true\n*\n* @example\n* var bool = isNumber( null );\n* // returns false\n*/\nfunction isNumber( value ) {\n\treturn ( isPrimitive( value ) || isObject( value ) );\n}\n\n\n// EXPORTS //\n\nexport default isNumber;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if a value is a number.\n*\n* @module @stdlib/assert-is-number\n*\n* @example\n* import isNumber from '@stdlib/assert-is-number';\n*\n* var bool = isNumber( 3.14 );\n* // returns true\n*\n* bool = isNumber( new Number( 3.14 ) );\n* // returns true\n*\n* bool = isNumber( NaN );\n* // returns true\n*\n* bool = isNumber( null );\n* // returns false\n*\n* @example\n* import { isPrimitive as isNumber } from '@stdlib/assert-is-number';\n*\n* var bool = isNumber( 3.14 );\n* // returns true\n*\n* bool = isNumber( NaN );\n* // returns true\n*\n* bool = isNumber( new Number( 3.14 ) );\n* // returns false\n*\n* @example\n* import { isObject as isNumber } from '@stdlib/assert-is-number';\n*\n* var bool = isNumber( 3.14 );\n* // returns false\n*\n* bool = isNumber( new Number( 3.14 ) );\n* // returns true\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport isNumber from './main.js';\nimport isPrimitive from './primitive.js';\nimport isObject from './object.js';\n\n\n// MAIN //\n\nsetReadOnly( isNumber, 'isPrimitive', isPrimitive );\nsetReadOnly( isNumber, 'isObject', isObject );\n\n\n// EXPORTS //\n\nexport default isNumber;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport nativeClass from '@stdlib/utils-native-class';\n\n\n// VARIABLES //\n\nvar hasUint32Array = ( typeof Uint32Array === 'function' ); // eslint-disable-line stdlib/require-globals\n\n\n// MAIN //\n\n/**\n* Tests if a value is a Uint32Array.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is a Uint32Array\n*\n* @example\n* var bool = isUint32Array( new Uint32Array( 10 ) );\n* // returns true\n*\n* @example\n* var bool = isUint32Array( [] );\n* // returns false\n*/\nfunction isUint32Array( value ) {\n\treturn (\n\t\t( hasUint32Array && value instanceof Uint32Array ) || // eslint-disable-line stdlib/require-globals\n\t\tnativeClass( value ) === '[object Uint32Array]'\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isUint32Array;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Maximum unsigned 32-bit integer.\n*\n* @module @stdlib/constants-uint32-max\n* @type {uinteger32}\n*\n* @example\n* import UINT32_MAX from '@stdlib/constants-uint32-max';\n* // returns 4294967295\n*/\n\n\n// MAIN //\n\n/**\n* Maximum unsigned 32-bit integer.\n*\n* ## Notes\n*\n* The number has the value\n*\n* ```tex\n* 2^{32} - 1\n* ```\n*\n* which corresponds to the bit sequence\n*\n* ```binarystring\n* 11111111111111111111111111111111\n* ```\n*\n* @constant\n* @type {uinteger32}\n* @default 4294967295\n*/\nvar UINT32_MAX = 4294967295;\n\n\n// EXPORTS //\n\nexport default UINT32_MAX;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar main = ( typeof Uint32Array === 'function' ) ? Uint32Array : null; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar ctor = ( typeof Uint32Array === 'function' ) ? Uint32Array : void 0; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default ctor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Typed array constructor which returns a typed array representing an array of 32-bit unsigned integers in the platform byte order.\n*\n* @module @stdlib/array-uint32\n*\n* @example\n* import ctor from '@stdlib/array-uint32';\n*\n* var arr = new ctor( 10 );\n* // returns <Uint32Array>\n*/\n\n// MODULES //\n\nimport hasUint32ArraySupport from '@stdlib/assert-has-uint32array-support';\nimport builtin from './uint32array.js';\nimport polyfill from './polyfill.js';\n\n\n// MAIN //\n\nvar ctor;\nif ( hasUint32ArraySupport() ) {\n\tctor = builtin;\n} else {\n\tctor = polyfill;\n}\n\n\n// EXPORTS //\n\nexport default ctor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isUint32Array from '@stdlib/assert-is-uint32array';\nimport UINT32_MAX from '@stdlib/constants-uint32-max';\nimport GlobalUint32Array from './uint32array.js';\n\n\n// MAIN //\n\n/**\n* Tests for native `Uint32Array` support.\n*\n* @returns {boolean} boolean indicating if an environment has `Uint32Array` support\n*\n* @example\n* var bool = hasUint32ArraySupport();\n* // returns <boolean>\n*/\nfunction hasUint32ArraySupport() {\n\tvar bool;\n\tvar arr;\n\n\tif ( typeof GlobalUint32Array !== 'function' ) {\n\t\treturn false;\n\t}\n\t// Test basic support...\n\ttry {\n\t\tarr = [ 1, 3.14, -3.14, UINT32_MAX+1, UINT32_MAX+2 ];\n\t\tarr = new GlobalUint32Array( arr );\n\t\tbool = (\n\t\t\tisUint32Array( arr ) &&\n\t\t\tarr[ 0 ] === 1 &&\n\t\t\tarr[ 1 ] === 3 &&            // truncation\n\t\t\tarr[ 2 ] === UINT32_MAX-2 && // truncation and wrap around\n\t\t\tarr[ 3 ] === 0 &&            // wrap around\n\t\t\tarr[ 4 ] === 1               // wrap around\n\t\t);\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\tbool = false;\n\t}\n\treturn bool;\n}\n\n\n// EXPORTS //\n\nexport default hasUint32ArraySupport;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// TODO: write polyfill\n\n// MAIN //\n\n/**\n* Typed array which represents an array of 32-bit unsigned integers in the platform byte order.\n*\n* @throws {Error} not implemented\n*/\nfunction polyfill() {\n\tthrow new Error( 'not implemented' );\n}\n\n\n// EXPORTS //\n\nexport default polyfill;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport nativeClass from '@stdlib/utils-native-class';\n\n\n// VARIABLES //\n\nvar hasFloat64Array = ( typeof Float64Array === 'function' ); // eslint-disable-line stdlib/require-globals\n\n\n// MAIN //\n\n/**\n* Tests if a value is a Float64Array.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is a Float64Array\n*\n* @example\n* var bool = isFloat64Array( new Float64Array( 10 ) );\n* // returns true\n*\n* @example\n* var bool = isFloat64Array( [] );\n* // returns false\n*/\nfunction isFloat64Array( value ) {\n\treturn (\n\t\t( hasFloat64Array && value instanceof Float64Array ) || // eslint-disable-line stdlib/require-globals\n\t\tnativeClass( value ) === '[object Float64Array]'\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isFloat64Array;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar main = ( typeof Float64Array === 'function' ) ? Float64Array : null; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar ctor = ( typeof Float64Array === 'function' ) ? Float64Array : void 0; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default ctor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Typed array constructor which returns a typed array representing an array of double-precision floating-point numbers in the platform byte order.\n*\n* @module @stdlib/array-float64\n*\n* @example\n* import ctor from '@stdlib/array-float64';\n*\n* var arr = new ctor( 10 );\n* // returns <Float64Array>\n*/\n\n// MODULES //\n\nimport hasFloat64ArraySupport from '@stdlib/assert-has-float64array-support';\nimport builtin from './float64array.js';\nimport polyfill from './polyfill.js';\n\n\n// MAIN //\n\nvar ctor;\nif ( hasFloat64ArraySupport() ) {\n\tctor = builtin;\n} else {\n\tctor = polyfill;\n}\n\n\n// EXPORTS //\n\nexport default ctor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isFloat64Array from '@stdlib/assert-is-float64array';\nimport GlobalFloat64Array from './float64array.js';\n\n\n// MAIN //\n\n/**\n* Tests for native `Float64Array` support.\n*\n* @returns {boolean} boolean indicating if an environment has `Float64Array` support\n*\n* @example\n* var bool = hasFloat64ArraySupport();\n* // returns <boolean>\n*/\nfunction hasFloat64ArraySupport() {\n\tvar bool;\n\tvar arr;\n\n\tif ( typeof GlobalFloat64Array !== 'function' ) {\n\t\treturn false;\n\t}\n\t// Test basic support...\n\ttry {\n\t\tarr = new GlobalFloat64Array( [ 1.0, 3.14, -3.14, NaN ] );\n\t\tbool = (\n\t\t\tisFloat64Array( arr ) &&\n\t\t\tarr[ 0 ] === 1.0 &&\n\t\t\tarr[ 1 ] === 3.14 &&\n\t\t\tarr[ 2 ] === -3.14 &&\n\t\t\tarr[ 3 ] !== arr[ 3 ]\n\t\t);\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\tbool = false;\n\t}\n\treturn bool;\n}\n\n\n// EXPORTS //\n\nexport default hasFloat64ArraySupport;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// TODO: write polyfill\n\n// MAIN //\n\n/**\n* Typed array which represents an array of double-precision floating-point numbers in the platform byte order.\n*\n* @throws {Error} not implemented\n*/\nfunction polyfill() {\n\tthrow new Error( 'not implemented' );\n}\n\n\n// EXPORTS //\n\nexport default polyfill;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport nativeClass from '@stdlib/utils-native-class';\n\n\n// VARIABLES //\n\nvar hasUint8Array = ( typeof Uint8Array === 'function' ); // eslint-disable-line stdlib/require-globals\n\n\n// MAIN //\n\n/**\n* Tests if a value is a Uint8Array.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is a Uint8Array\n*\n* @example\n* var bool = isUint8Array( new Uint8Array( 10 ) );\n* // returns true\n*\n* @example\n* var bool = isUint8Array( [] );\n* // returns false\n*/\nfunction isUint8Array( value ) {\n\treturn (\n\t\t( hasUint8Array && value instanceof Uint8Array ) || // eslint-disable-line stdlib/require-globals\n\t\tnativeClass( value ) === '[object Uint8Array]'\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isUint8Array;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Maximum unsigned 8-bit integer.\n*\n* @module @stdlib/constants-uint8-max\n* @type {integer32}\n*\n* @example\n* import UINT8_MAX from '@stdlib/constants-uint8-max';\n* // returns 255\n*/\n\n\n// MAIN //\n\n/**\n* Maximum unsigned 8-bit integer.\n*\n* ## Notes\n*\n* The number has the value\n*\n* ```tex\n* 2^{8} - 1\n* ```\n*\n* which corresponds to the bit sequence\n*\n* ```binarystring\n* 11111111\n* ```\n*\n* @constant\n* @type {integer32}\n* @default 255\n*/\nvar UINT8_MAX = 255|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default UINT8_MAX;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar main = ( typeof Uint8Array === 'function' ) ? Uint8Array : null; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar ctor = ( typeof Uint8Array === 'function' ) ? Uint8Array : void 0; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default ctor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Typed array constructor which returns a typed array representing an array of 8-bit unsigned integers in the platform byte order.\n*\n* @module @stdlib/array-uint8\n*\n* @example\n* import ctor from '@stdlib/array-uint8';\n*\n* var arr = new ctor( 10 );\n* // returns <Uint8Array>\n*/\n\n// MODULES //\n\nimport hasUint8ArraySupport from '@stdlib/assert-has-uint8array-support';\nimport builtin from './uint8array.js';\nimport polyfill from './polyfill.js';\n\n\n// MAIN //\n\nvar ctor;\nif ( hasUint8ArraySupport() ) {\n\tctor = builtin;\n} else {\n\tctor = polyfill;\n}\n\n\n// EXPORTS //\n\nexport default ctor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isUint8Array from '@stdlib/assert-is-uint8array';\nimport UINT8_MAX from '@stdlib/constants-uint8-max';\nimport GlobalUint8Array from './uint8array.js';\n\n\n// MAIN //\n\n/**\n* Tests for native `Uint8Array` support.\n*\n* @returns {boolean} boolean indicating if an environment has `Uint8Array` support\n*\n* @example\n* var bool = hasUint8ArraySupport();\n* // returns <boolean>\n*/\nfunction hasUint8ArraySupport() {\n\tvar bool;\n\tvar arr;\n\n\tif ( typeof GlobalUint8Array !== 'function' ) {\n\t\treturn false;\n\t}\n\t// Test basic support...\n\ttry {\n\t\tarr = [ 1, 3.14, -3.14, UINT8_MAX+1, UINT8_MAX+2 ];\n\t\tarr = new GlobalUint8Array( arr );\n\t\tbool = (\n\t\t\tisUint8Array( arr ) &&\n\t\t\tarr[ 0 ] === 1 &&\n\t\t\tarr[ 1 ] === 3 &&           // truncation\n\t\t\tarr[ 2 ] === UINT8_MAX-2 && // truncation and wrap around\n\t\t\tarr[ 3 ] === 0 &&           // wrap around\n\t\t\tarr[ 4 ] === 1              // wrap around\n\t\t);\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\tbool = false;\n\t}\n\treturn bool;\n}\n\n\n// EXPORTS //\n\nexport default hasUint8ArraySupport;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// TODO: write polyfill\n\n// MAIN //\n\n/**\n* Typed array which represents an array of 8-bit unsigned integers in the platform byte order.\n*\n* @throws {Error} not implemented\n*/\nfunction polyfill() {\n\tthrow new Error( 'not implemented' );\n}\n\n\n// EXPORTS //\n\nexport default polyfill;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport nativeClass from '@stdlib/utils-native-class';\n\n\n// VARIABLES //\n\nvar hasUint16Array = ( typeof Uint16Array === 'function' ); // eslint-disable-line stdlib/require-globals\n\n\n// MAIN //\n\n/**\n* Tests if a value is a Uint16Array.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is a Uint16Array\n*\n* @example\n* var bool = isUint16Array( new Uint16Array( 10 ) );\n* // returns true\n*\n* @example\n* var bool = isUint16Array( [] );\n* // returns false\n*/\nfunction isUint16Array( value ) {\n\treturn (\n\t\t( hasUint16Array && value instanceof Uint16Array ) || // eslint-disable-line stdlib/require-globals\n\t\tnativeClass( value ) === '[object Uint16Array]'\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isUint16Array;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Maximum unsigned 16-bit integer.\n*\n* @module @stdlib/constants-uint16-max\n* @type {integer32}\n*\n* @example\n* import UINT16_MAX from '@stdlib/constants-uint16-max';\n* // returns 65535\n*/\n\n\n// MAIN //\n\n/**\n* Maximum unsigned 16-bit integer.\n*\n* ## Notes\n*\n* The number has the value\n*\n* ```tex\n* 2^{16} - 1\n* ```\n*\n* which corresponds to the bit sequence\n*\n* ```binarystring\n* 1111111111111111\n* ```\n*\n* @constant\n* @type {integer32}\n* @default 65535\n*/\nvar UINT16_MAX = 65535|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default UINT16_MAX;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar main = ( typeof Uint16Array === 'function' ) ? Uint16Array : null; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar ctor = ( typeof Uint16Array === 'function' ) ? Uint16Array : void 0; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default ctor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Typed array constructor which returns a typed array representing an array of 16-bit unsigned integers in the platform byte order.\n*\n* @module @stdlib/array-uint16\n*\n* @example\n* import ctor from '@stdlib/array-uint16';\n*\n* var arr = new ctor( 10 );\n* // returns <Uint16Array>\n*/\n\n// MODULES //\n\nimport hasUint16ArraySupport from '@stdlib/assert-has-uint16array-support';\nimport builtin from './uint16array.js';\nimport polyfill from './polyfill.js';\n\n\n// MAIN //\n\nvar ctor;\nif ( hasUint16ArraySupport() ) {\n\tctor = builtin;\n} else {\n\tctor = polyfill;\n}\n\n\n// EXPORTS //\n\nexport default ctor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isUint16Array from '@stdlib/assert-is-uint16array';\nimport UINT16_MAX from '@stdlib/constants-uint16-max';\nimport GlobalUint16Array from './uint16array.js';\n\n\n// MAIN //\n\n/**\n* Tests for native `Uint16Array` support.\n*\n* @returns {boolean} boolean indicating if an environment has `Uint16Array` support\n*\n* @example\n* var bool = hasUint16ArraySupport();\n* // returns <boolean>\n*/\nfunction hasUint16ArraySupport() {\n\tvar bool;\n\tvar arr;\n\n\tif ( typeof GlobalUint16Array !== 'function' ) {\n\t\treturn false;\n\t}\n\t// Test basic support...\n\ttry {\n\t\tarr = [ 1, 3.14, -3.14, UINT16_MAX+1, UINT16_MAX+2 ];\n\t\tarr = new GlobalUint16Array( arr );\n\t\tbool = (\n\t\t\tisUint16Array( arr ) &&\n\t\t\tarr[ 0 ] === 1 &&\n\t\t\tarr[ 1 ] === 3 &&            // truncation\n\t\t\tarr[ 2 ] === UINT16_MAX-2 && // truncation and wrap around\n\t\t\tarr[ 3 ] === 0 &&            // wrap around\n\t\t\tarr[ 4 ] === 1               // wrap around\n\t\t);\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\tbool = false;\n\t}\n\treturn bool;\n}\n\n\n// EXPORTS //\n\nexport default hasUint16ArraySupport;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// TODO: write polyfill\n\n// MAIN //\n\n/**\n* Typed array which represents an array of 16-bit unsigned integers in the platform byte order.\n*\n* @throws {Error} not implemented\n*/\nfunction polyfill() {\n\tthrow new Error( 'not implemented' );\n}\n\n\n// EXPORTS //\n\nexport default polyfill;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport ctors from './ctors.js';\n\n\n// VARIABLES //\n\nvar bool;\n\n\n// FUNCTIONS //\n\n/**\n* Returns a boolean indicating if an environment is little endian.\n*\n* @private\n* @returns {boolean} boolean indicating if an environment is little endian\n*\n* @example\n* var bool = isLittleEndian();\n* // returns <boolean>\n*/\nfunction isLittleEndian() {\n\tvar uint16view;\n\tvar uint8view;\n\n\tuint16view = new ctors[ 'uint16' ]( 1 );\n\n\t/*\n\t* Set the uint16 view to a value having distinguishable lower and higher order words.\n\t*\n\t* 4660 => 0x1234 => 0x12 0x34 => '00010010 00110100' => (0x12,0x34) == (18,52)\n\t*/\n\tuint16view[ 0 ] = 0x1234;\n\n\t// Create a uint8 view on top of the uint16 buffer:\n\tuint8view = new ctors[ 'uint8' ]( uint16view.buffer );\n\n\t// If little endian, the least significant byte will be first...\n\treturn ( uint8view[ 0 ] === 0x34 );\n}\n\n\n// MAIN //\n\nbool = isLittleEndian();\n\n\n// EXPORTS //\n\nexport default bool;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Uint8Array from '@stdlib/array-uint8';\nimport Uint16Array from '@stdlib/array-uint16';\n\n\n// MAIN //\n\nvar ctors = {\n\t'uint16': Uint16Array,\n\t'uint8': Uint8Array\n};\n\n\n// EXPORTS //\n\nexport default ctors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isLittleEndian from '@stdlib/assert-is-little-endian';\n\n\n// MAIN //\n\nvar HIGH;\nif ( isLittleEndian === true ) {\n\tHIGH = 1; // second index\n} else {\n\tHIGH = 0; // first index\n}\n\n\n// EXPORTS //\n\nexport default HIGH;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Uint32Array from '@stdlib/array-uint32';\nimport Float64Array from '@stdlib/array-float64';\nimport HIGH from './high.js';\n\n\n// VARIABLES //\n\nvar FLOAT64_VIEW = new Float64Array( 1 );\nvar UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );\n\n\n// MAIN //\n\n/**\n* Returns an unsigned 32-bit integer corresponding to the more significant 32 bits of a double-precision floating-point number.\n*\n* ## Notes\n*\n* ```text\n* float64 (64 bits)\n* f := fraction (significand/mantissa) (52 bits)\n* e := exponent (11 bits)\n* s := sign bit (1 bit)\n*\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |                                Float64                                |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |              Uint32               |               Uint32              |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* ```\n*\n* If little endian (more significant bits last):\n*\n* ```text\n*                         <-- lower      higher -->\n* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |\n* ```\n*\n* If big endian (more significant bits first):\n*\n* ```text\n*                         <-- higher      lower -->\n* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |\n* ```\n*\n* In which Uint32 can we find the higher order bits? If little endian, the second; if big endian, the first.\n*\n*\n* ## References\n*\n* -   [Open Group][1]\n*\n* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm\n*\n* @param {number} x - input value\n* @returns {uinteger32} higher order word\n*\n* @example\n* var w = getHighWord( 3.14e201 ); // => 01101001110001001000001011000011\n* // returns 1774486211\n*/\nfunction getHighWord( x ) {\n\tFLOAT64_VIEW[ 0 ] = x;\n\treturn UINT32_VIEW[ HIGH ];\n}\n\n\n// EXPORTS //\n\nexport default getHighWord;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isLittleEndian from '@stdlib/assert-is-little-endian';\n\n\n// MAIN //\n\nvar HIGH;\nif ( isLittleEndian === true ) {\n\tHIGH = 1; // second index\n} else {\n\tHIGH = 0; // first index\n}\n\n\n// EXPORTS //\n\nexport default HIGH;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Uint32Array from '@stdlib/array-uint32';\nimport Float64Array from '@stdlib/array-float64';\nimport HIGH from './high.js';\n\n\n// VARIABLES //\n\nvar FLOAT64_VIEW = new Float64Array( 1 );\nvar UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );\n\n\n// MAIN //\n\n/**\n* Sets the more significant 32 bits of a double-precision floating-point number.\n*\n* ## Notes\n*\n* ```text\n* float64 (64 bits)\n* f := fraction (significand/mantissa) (52 bits)\n* e := exponent (11 bits)\n* s := sign bit (1 bit)\n*\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |                                Float64                                |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |              Uint32               |               Uint32              |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* ```\n*\n* If little endian (more significant bits last):\n*\n* ```text\n*                         <-- lower      higher -->\n* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |\n* ```\n*\n* If big endian (more significant bits first):\n*\n* ```text\n*                         <-- higher      lower -->\n* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |\n* ```\n*\n* In which Uint32 can we find the higher order bits? If little endian, the second; if big endian, the first.\n*\n*\n* ## References\n*\n* -   [Open Group][1]\n*\n* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm\n*\n* @param {number} x - double\n* @param {uinteger32} high - unsigned 32-bit integer to replace the higher order word of `x`\n* @returns {number} double having the same lower order word as `x`\n*\n* @example\n* var high = 5 >>> 0; // => 0 00000000000 00000000000000000101\n*\n* var y = setHighWord( 3.14e201, high ); //  => 0 00000000000 0000000000000000010110010011110010110101100010000010\n* // returns 1.18350528745e-313\n*\n* @example\n* import PINF from '@stdlib/constants-float64-pinf'; // => 0 11111111111 00000000000000000000 00000000000000000000000000000000\n*\n* var high = 1072693248 >>> 0; // => 0 01111111111 00000000000000000000\n*\n* // Set the higher order bits of `+infinity` to return `1`:\n* var y = setHighWord( PINF, high ); // => 0 01111111111 0000000000000000000000000000000000000000000000000000\n* // returns 1.0\n*/\nfunction setHighWord( x, high ) {\n\tFLOAT64_VIEW[ 0 ] = x;\n\tUINT32_VIEW[ HIGH ] = ( high >>> 0 ); // identity bit shift to ensure integer\n\treturn FLOAT64_VIEW[ 0 ];\n}\n\n\n// EXPORTS //\n\nexport default setHighWord;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* The bias of a double-precision floating-point number's exponent.\n*\n* @module @stdlib/constants-float64-exponent-bias\n* @type {integer32}\n*\n* @example\n* import FLOAT64_EXPONENT_BIAS from '@stdlib/constants-float64-exponent-bias';\n* // returns 1023\n*/\n\n\n// MAIN //\n\n/**\n* Bias of a double-precision floating-point number's exponent.\n*\n* ## Notes\n*\n* The bias can be computed via\n*\n* ```tex\n* \\mathrm{bias} = 2^{k-1} - 1\n* ```\n*\n* where \\\\(k\\\\) is the number of bits in the exponent; here, \\\\(k = 11\\\\).\n*\n* @constant\n* @type {integer32}\n* @default 1023\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_EXPONENT_BIAS = 1023|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default FLOAT64_EXPONENT_BIAS;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Double-precision floating-point negative infinity.\n*\n* @module @stdlib/constants-float64-ninf\n* @type {number}\n*\n* @example\n* import FLOAT64_NINF from '@stdlib/constants-float64-ninf';\n* // returns -Infinity\n*/\n\n// MODULES //\n\nimport Number from '@stdlib/number-ctor';\n\n\n// MAIN //\n\n/**\n* Double-precision floating-point negative infinity.\n*\n* ## Notes\n*\n* Double-precision floating-point negative infinity has the bit sequence\n*\n* ```binarystring\n* 1 11111111111 00000000000000000000 00000000000000000000000000000000\n* ```\n*\n* @constant\n* @type {number}\n* @default Number.NEGATIVE_INFINITY\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_NINF = Number.NEGATIVE_INFINITY;\n\n\n// EXPORTS //\n\nexport default FLOAT64_NINF;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/e_log.c}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport getHighWord from '@stdlib/number-float64-base-get-high-word';\nimport setHighWord from '@stdlib/number-float64-base-set-high-word';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport BIAS from '@stdlib/constants-float64-exponent-bias';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport polyvalP from './polyval_p.js';\nimport polyvalQ from './polyval_q.js';\n\n\n// VARIABLES //\n\nvar LN2_HI = 6.93147180369123816490e-01; // 3FE62E42 FEE00000\nvar LN2_LO = 1.90821492927058770002e-10; // 3DEA39EF 35793C76\nvar TWO54 = 1.80143985094819840000e+16;  // 0x43500000, 0x00000000\nvar ONE_THIRD = 0.33333333333333333;\n\n// 0x000fffff = 1048575 => 0 00000000000 11111111111111111111\nvar HIGH_SIGNIFICAND_MASK = 0x000fffff|0; // asm type annotation\n\n// 0x7ff00000 = 2146435072 => 0 11111111111 00000000000000000000 => biased exponent: 2047 = 1023+1023 => 2^1023\nvar HIGH_MAX_NORMAL_EXP = 0x7ff00000|0; // asm type annotation\n\n// 0x00100000 = 1048576 => 0 00000000001 00000000000000000000 => biased exponent: 1 = -1022+1023 => 2^-1022\nvar HIGH_MIN_NORMAL_EXP = 0x00100000|0; // asm type annotation\n\n// 0x3ff00000 = 1072693248 => 0 01111111111 00000000000000000000 => biased exponent: 1023 = 0+1023 => 2^0 = 1\nvar HIGH_BIASED_EXP_0 = 0x3ff00000|0; // asm type annotation\n\n\n// MAIN //\n\n/**\n* Evaluates the natural logarithm.\n*\n* @param {NonNegativeNumber} x - input value\n* @returns {number} function value\n*\n* @example\n* var v = ln( 4.0 );\n* // returns ~1.386\n*\n* @example\n* var v = ln( 0.0 );\n* // returns -Infinity\n*\n* @example\n* var v = ln( Infinity );\n* // returns Infinity\n*\n* @example\n* var v = ln( NaN );\n* // returns NaN\n*\n* @example\n* var v = ln( -4.0 );\n* // returns NaN\n*/\nfunction ln( x ) {\n\tvar hfsq;\n\tvar hx;\n\tvar t2;\n\tvar t1;\n\tvar k;\n\tvar R;\n\tvar f;\n\tvar i;\n\tvar j;\n\tvar s;\n\tvar w;\n\tvar z;\n\n\tif ( x === 0.0 ) {\n\t\treturn NINF;\n\t}\n\tif ( isnan( x ) || x < 0.0 ) {\n\t\treturn NaN;\n\t}\n\thx = getHighWord( x );\n\tk = 0|0; // asm type annotation\n\tif ( hx < HIGH_MIN_NORMAL_EXP ) {\n\t\t// Case: 0 < x < 2**-1022\n\t\tk -= 54|0; // asm type annotation\n\n\t\t// Subnormal number, scale up `x`:\n\t\tx *= TWO54;\n\t\thx = getHighWord( x );\n\t}\n\tif ( hx >= HIGH_MAX_NORMAL_EXP ) {\n\t\treturn x + x;\n\t}\n\tk += ( ( hx>>20 ) - BIAS )|0; // asm type annotation\n\thx &= HIGH_SIGNIFICAND_MASK;\n\ti = ( (hx+0x95f64) & 0x100000 )|0; // asm type annotation\n\n\t// Normalize `x` or `x/2`...\n\tx = setHighWord( x, hx|(i^HIGH_BIASED_EXP_0) );\n\tk += ( i>>20 )|0; // asm type annotation\n\tf = x - 1.0;\n\tif ( (HIGH_SIGNIFICAND_MASK&(2+hx)) < 3 ) {\n\t\t// Case: -2**-20 <= f < 2**-20\n\t\tif ( f === 0.0 ) {\n\t\t\tif ( k === 0 ) {\n\t\t\t\treturn 0.0;\n\t\t\t}\n\t\t\treturn (k * LN2_HI) + (k * LN2_LO);\n\t\t}\n\t\tR = f * f * ( 0.5 - (ONE_THIRD*f) );\n\t\tif ( k === 0 ) {\n\t\t\treturn f - R;\n\t\t}\n\t\treturn (k * LN2_HI) - ( (R-(k*LN2_LO)) - f );\n\t}\n\ts = f / (2.0 + f);\n\tz = s * s;\n\ti = ( hx - 0x6147a )|0; // asm type annotation\n\tw = z * z;\n\tj = ( 0x6b851 - hx )|0; // asm type annotation\n\tt1 = w * polyvalP( w );\n\tt2 = z * polyvalQ( w );\n\ti |= j;\n\tR = t2 + t1;\n\tif ( i > 0 ) {\n\t\thfsq = 0.5 * f * f;\n\t\tif ( k === 0 ) {\n\t\t\treturn f - ( hfsq - (s * (hfsq+R)) );\n\t\t}\n\t\treturn (k * LN2_HI) - ( hfsq - ((s*(hfsq+R))+(k*LN2_LO)) - f );\n\t}\n\tif ( k === 0 ) {\n\t\treturn f - (s*(f-R));\n\t}\n\treturn (k * LN2_HI) - ( ( (s*(f-R)) - (k*LN2_LO) ) - f );\n}\n\n\n// EXPORTS //\n\nexport default ln;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.3999999999940942;\n\t}\n\treturn 0.3999999999940942 + (x * (0.22222198432149784 + (x * 0.15313837699209373))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.6666666666666735;\n\t}\n\treturn 0.6666666666666735 + (x * (0.2857142874366239 + (x * (0.1818357216161805 + (x * 0.14798198605116586))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport ln from '@stdlib/math-base-special-ln';\nimport FOURTH_PI from '@stdlib/constants-float64-fourth-pi';\n\n\n// VARIABLES //\n\nvar LN_FOURTH_PI = ln( FOURTH_PI );\n\n\n// MAIN //\n\n/**\n* Returns the differential entropy of an arcsine distribution.\n*\n* @param {number} a - minimum support\n* @param {number} b - maximum support\n* @returns {number} entropy\n*\n* @example\n* var v = entropy( 0.0, 1.0 );\n* // returns ~-0.242\n*\n* @example\n* var v = entropy( 4.0, 12.0 );\n* // returns ~1.838\n*\n* @example\n* var v = entropy( -4.0, 4.0 );\n* // returns ~1.838\n*\n* @example\n* var v = entropy( 1.0, -0.1 );\n* // returns NaN\n*\n* @example\n* var v = entropy( 2.0, NaN );\n* // returns NaN\n*\n* @example\n* var v = entropy( NaN, 2.0 );\n* // returns NaN\n*/\nfunction entropy( a, b ) {\n\tif (\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\ta >= b\n\t) {\n\t\treturn NaN;\n\t}\n\treturn LN_FOURTH_PI + ln( b - a );\n}\n\n\n// EXPORTS //\n\nexport default entropy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns the excess kurtosis of an arcsine distribution.\n*\n* @param {number} a - minimum support\n* @param {number} b - maximum support\n* @returns {number} excess kurtosis\n*\n* @example\n* var v = kurtosis( 0.0, 1.0 );\n* // returns -1.5\n*\n* @example\n* var v = kurtosis( 4.0, 12.0 );\n* // returns -1.5\n*\n* @example\n* var v = kurtosis( -4.0, 4.0 );\n* // returns -1.5\n*\n* @example\n* var v = kurtosis( 1.0, -0.1 );\n* // returns NaN\n*\n* @example\n* var v = kurtosis( 2.0, NaN );\n* // returns NaN\n*\n* @example\n* var v = kurtosis( NaN, 2.0 );\n* // returns NaN\n*/\nfunction kurtosis( a, b ) {\n\tif (\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\ta >= b\n\t) {\n\t\treturn NaN;\n\t}\n\treturn -1.5;\n}\n\n\n// EXPORTS //\n\nexport default kurtosis;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns the expected value of an arcsine distribution.\n*\n* @param {number} a - minimum support\n* @param {number} b - maximum support\n* @returns {number} expected value\n*\n* @example\n* var v = mean( 0.0, 1.0 );\n* // returns 0.5\n*\n* @example\n* var v = mean( 4.0, 12.0 );\n* // returns 8.0\n*\n* @example\n* var v = mean( -4.0, 4.0 );\n* // returns 0.0\n*\n* @example\n* var v = mean( 1.0, -0.1 );\n* // returns NaN\n*\n* @example\n* var v = mean( 2.0, NaN );\n* // returns NaN\n*\n* @example\n* var v = mean( NaN, 2.0 );\n* // returns NaN\n*/\nfunction mean( a, b ) {\n\tif (\n\t\ta >= b\n\t) {\n\t\treturn NaN;\n\t}\n\treturn 0.5 * ( a + b );\n}\n\n\n// EXPORTS //\n\nexport default mean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns the median of an arcsine distribution.\n*\n* @param {number} a - minimum support\n* @param {number} b - maximum support\n* @returns {number} median\n*\n* @example\n* var v = median( 0.0, 1.0 );\n* // returns 0.5\n*\n* @example\n* var v = median( 4.0, 12.0 );\n* // returns 8.0\n*\n* @example\n* var v = median( -4.0, 4.0 );\n* // returns 0.0\n*\n* @example\n* var v = median( 1.0, -0.1 );\n* // returns NaN\n*\n* @example\n* var v = median( 2.0, NaN );\n* // returns NaN\n*\n* @example\n* var v = median( NaN, 2.0 );\n* // returns NaN\n*/\nfunction median( a, b ) {\n\tif (\n\t\ta >= b\n\t) {\n\t\treturn NaN;\n\t}\n\treturn 0.5 * ( a + b );\n}\n\n\n// EXPORTS //\n\nexport default median;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns the mode of an arcsine distribution.\n*\n* @param {number} a - minimum support\n* @param {number} b - maximum support\n* @returns {number} mode\n*\n* @example\n* var v = mode( 0.0, 1.0 );\n* // returns 0.0\n*\n* @example\n* var v = mode( 4.0, 12.0 );\n* // returns 4.0\n*\n* @example\n* var v = mode( -4.0, 4.0 );\n* // returns -4.0\n*\n* @example\n* var v = mode( 1.0, -0.1 );\n* // returns NaN\n*\n* @example\n* var v = mode( 2.0, NaN );\n* // returns NaN\n*\n* @example\n* var v = mode( NaN, 2.0 );\n* // returns NaN\n*/\nfunction mode( a, b ) {\n\tif (\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\ta >= b\n\t) {\n\t\treturn NaN;\n\t}\n\treturn a;\n}\n\n\n// EXPORTS //\n\nexport default mode;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns the skewness of an arcsine distribution.\n*\n* @param {number} a - minimum support\n* @param {number} b - maximum support\n* @returns {number} skewness\n*\n* @example\n* var v = skewness( 0.0, 1.0 );\n* // returns 0.0\n*\n* @example\n* var v = skewness( 4.0, 12.0 );\n* // returns 0.0\n*\n* @example\n* var v = skewness( -4.0, 4.0 );\n* // returns 0.0\n*\n* @example\n* var v = skewness( 1.0, -0.1 );\n* // returns NaN\n*\n* @example\n* var v = skewness( 2.0, NaN );\n* // returns NaN\n*\n* @example\n* var v = skewness( NaN, 2.0 );\n* // returns NaN\n*/\nfunction skewness( a, b ) {\n\tif (\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\ta >= b\n\t) {\n\t\treturn NaN;\n\t}\n\treturn 0.0;\n}\n\n\n// EXPORTS //\n\nexport default skewness;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar SQRT1OVER8 = 0.35355339059327373; // sqrt( 1.0/8.0 )\n\n\n// MAIN //\n\n/**\n* Returns the standard deviation of an arcsine distribution.\n*\n* @param {number} a - minimum support\n* @param {number} b - maximum support\n* @returns {PositiveNumber} standard deviation\n*\n* @example\n* var v = stdev( 0.0, 1.0 );\n* // returns ~0.354\n*\n* @example\n* var v = stdev( 4.0, 12.0 );\n* // returns ~2.828\n*\n* @example\n* var v = stdev( -4.0, 4.0 );\n* // returns ~2.828\n*\n* @example\n* var v = stdev( 1.0, -0.1 );\n* // returns NaN\n*\n* @example\n* var v = stdev( 2.0, NaN );\n* // returns NaN\n*\n* @example\n* var v = stdev( NaN, 2.0 );\n* // returns NaN\n*/\nfunction stdev( a, b ) {\n\tif ( a >= b ) {\n\t\treturn NaN;\n\t}\n\treturn SQRT1OVER8 * ( b-a );\n}\n\n\n// EXPORTS //\n\nexport default stdev;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// TODO: implementation (?)\n\n/**\n* Rounds a double-precision floating-point number toward negative infinity.\n*\n* @param {number} x - input value\n* @returns {number} rounded value\n*\n* @example\n* var v = floor( -4.2 );\n* // returns -5.0\n*\n* @example\n* var v = floor( 9.99999 );\n* // returns 9.0\n*\n* @example\n* var v = floor( 0.0 );\n* // returns 0.0\n*\n* @example\n* var v = floor( NaN );\n* // returns NaN\n*/\nvar floor = Math.floor; // eslint-disable-line stdlib/no-builtin-math\n\n\n// EXPORTS //\n\nexport default floor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math-base-special-floor';\n\n\n// MAIN //\n\n/**\n* Tests if a finite double-precision floating-point number is an integer.\n*\n* @param {number} x - value to test\n* @returns {boolean} boolean indicating whether the value is an integer\n*\n* @example\n* var bool = isInteger( 1.0 );\n* // returns true\n*\n* @example\n* var bool = isInteger( 3.14 );\n* // returns false\n*/\nfunction isInteger( x ) {\n\treturn (floor(x) === x);\n}\n\n\n// EXPORTS //\n\nexport default isInteger;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isInteger from '@stdlib/math-base-assert-is-integer';\n\n\n// MAIN //\n\n/**\n* Tests if a finite numeric value is an even number.\n*\n* @param {number} x - value to test\n* @returns {boolean} boolean indicating whether the value is an even number\n*\n* @example\n* var bool = isEven( 5.0 );\n* // returns false\n*\n* @example\n* var bool = isEven( -2.0 );\n* // returns true\n*\n* @example\n* var bool = isEven( 0.0 );\n* // returns true\n*\n* @example\n* var bool = isEven( NaN );\n* // returns false\n*/\nfunction isEven( x ) {\n\treturn isInteger( x/2.0 );\n}\n\n\n// EXPORTS //\n\nexport default isEven;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isEven from '@stdlib/math-base-assert-is-even';\n\n\n// MAIN //\n\n/**\n* Tests if a finite numeric value is an odd number.\n*\n* @param {number} x - value to test\n* @returns {boolean} boolean indicating whether the value is an odd number\n*\n* @example\n* var bool = isOdd( 5.0 );\n* // returns true\n*\n* @example\n* var bool = isOdd( -2.0 );\n* // returns false\n*\n* @example\n* var bool = isOdd( 0.0 );\n* // returns false\n*\n* @example\n* var bool = isOdd( NaN );\n* // returns false\n*/\nfunction isOdd( x ) {\n\t// Check sign to prevent overflow...\n\tif ( x > 0.0 ) {\n\t\treturn isEven( x-1.0 );\n\t}\n\treturn isEven( x+1.0 );\n}\n\n\n// EXPORTS //\n\nexport default isOdd;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Double-precision floating-point positive infinity.\n*\n* @module @stdlib/constants-float64-pinf\n* @type {number}\n*\n* @example\n* import FLOAT64_PINF from '@stdlib/constants-float64-pinf';\n* // returns Infinity\n*/\n\n\n// MAIN //\n\n/**\n* Double-precision floating-point positive infinity.\n*\n* ## Notes\n*\n* Double-precision floating-point positive infinity has the bit sequence\n*\n* ```binarystring\n* 0 11111111111 00000000000000000000 00000000000000000000000000000000\n* ```\n*\n* @constant\n* @type {number}\n* @default Number.POSITIVE_INFINITY\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_PINF = Number.POSITIVE_INFINITY; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default FLOAT64_PINF;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isLittleEndian from '@stdlib/assert-is-little-endian';\n\n\n// MAIN //\n\nvar indices;\nvar HIGH;\nvar LOW;\n\nif ( isLittleEndian === true ) {\n\tHIGH = 1; // second index\n\tLOW = 0; // first index\n} else {\n\tHIGH = 0; // first index\n\tLOW = 1; // second index\n}\nindices = {\n\t'HIGH': HIGH,\n\t'LOW': LOW\n};\n\n\n// EXPORTS //\n\nexport default indices;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport PINF from '@stdlib/constants-float64-pinf';\nimport NINF from '@stdlib/constants-float64-ninf';\n\n\n// MAIN //\n\n/**\n* Tests if a double-precision floating-point numeric value is infinite.\n*\n* @param {number} x - value to test\n* @returns {boolean} boolean indicating whether the value is infinite\n*\n* @example\n* var bool = isInfinite( Infinity );\n* // returns true\n*\n* @example\n* var bool = isInfinite( -Infinity );\n* // returns true\n*\n* @example\n* var bool = isInfinite( 5.0 );\n* // returns false\n*\n* @example\n* var bool = isInfinite( NaN );\n* // returns false\n*/\nfunction isInfinite( x ) {\n\treturn (x === PINF || x === NINF);\n}\n\n\n// EXPORTS //\n\nexport default isInfinite;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Computes the absolute value of a double-precision floating-point number `x`.\n*\n* @param {number} x - input value\n* @returns {number} absolute value\n*\n* @example\n* var v = abs( -1.0 );\n* // returns 1.0\n*\n* @example\n* var v = abs( 2.0 );\n* // returns 2.0\n*\n* @example\n* var v = abs( 0.0 );\n* // returns 0.0\n*\n* @example\n* var v = abs( -0.0 );\n* // returns 0.0\n*\n* @example\n* var v = abs( NaN );\n* // returns NaN\n*/\nfunction abs( x ) {\n\treturn Math.abs( x ); // eslint-disable-line stdlib/no-builtin-math\n}\n\n\n// EXPORTS //\n\nexport default abs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Uint32Array from '@stdlib/array-uint32';\nimport Float64Array from '@stdlib/array-float64';\nimport indices from './indices.js';\n\n\n// VARIABLES //\n\nvar FLOAT64_VIEW = new Float64Array( 1 );\nvar UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );\n\nvar HIGH = indices.HIGH;\nvar LOW = indices.LOW;\n\n\n// MAIN //\n\n/**\n* Splits a double-precision floating-point number into a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).\n*\n* ## Notes\n*\n* ```text\n* float64 (64 bits)\n* f := fraction (significand/mantissa) (52 bits)\n* e := exponent (11 bits)\n* s := sign bit (1 bit)\n*\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |                                Float64                                |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |              Uint32               |               Uint32              |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* ```\n*\n* If little endian (more significant bits last):\n*\n* ```text\n*                         <-- lower      higher -->\n* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |\n* ```\n*\n* If big endian (more significant bits first):\n*\n* ```text\n*                         <-- higher      lower -->\n* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |\n* ```\n*\n* In which Uint32 can we find the higher order bits? If little endian, the second; if big endian, the first.\n*\n*\n* ## References\n*\n* -   [Open Group][1]\n*\n* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm\n*\n*\n* @private\n* @param {number} x - input value\n* @param {Collection} out - output array\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array index offset\n* @returns {Collection} output array\n*\n* @example\n* import Uint32Array from '@stdlib/array-uint32';\n*\n* var out = new Uint32Array( 2 );\n*\n* var w = toWords( 3.14e201, out, 1, 0 );\n* // returns <Uint32Array>[ 1774486211, 2479577218 ]\n*\n* var bool = ( w === out );\n* // returns true\n*/\nfunction toWords( x, out, stride, offset ) {\n\tFLOAT64_VIEW[ 0 ] = x;\n\tout[ offset ] = UINT32_VIEW[ HIGH ];\n\tout[ offset + stride ] = UINT32_VIEW[ LOW ];\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default toWords;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport fcn from './assign.js';\n\n\n// MAIN //\n\n/**\n* Splits a double-precision floating-point number into a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).\n*\n* @param {number} x - input value\n* @returns {Array<number>} output array\n*\n* @example\n* var w = toWords( 3.14e201 );\n* // returns [ 1774486211, 2479577218 ]\n*/\nfunction toWords( x ) {\n\treturn fcn( x, [ 0>>>0, 0>>>0 ], 1, 0 );\n}\n\n\n// EXPORTS //\n\nexport default toWords;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Split a double-precision floating-point number into a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).\n*\n* @module @stdlib/number-float64-base-to-words\n*\n* @example\n* import toWords from '@stdlib/number-float64-base-to-words';\n*\n* var w = toWords( 3.14e201 );\n* // returns [ 1774486211, 2479577218 ]\n*\n* @example\n* import Uint32Array from '@stdlib/array-uint32';\n* import toWords from '@stdlib/number-float64-base-to-words';\n*\n* var out = new Uint32Array( 2 );\n*\n* var w = toWords.assign( 3.14e201, out, 1, 0 );\n* // returns <Uint32Array>[ 1774486211, 2479577218 ]\n*\n* var bool = ( w === out );\n* // returns true\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport assign from './assign.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isLittleEndian from '@stdlib/assert-is-little-endian';\n\n\n// MAIN //\n\nvar LOW;\nif ( isLittleEndian === true ) {\n\tLOW = 0; // first index\n} else {\n\tLOW = 1; // second index\n}\n\n\n// EXPORTS //\n\nexport default LOW;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Uint32Array from '@stdlib/array-uint32';\nimport Float64Array from '@stdlib/array-float64';\nimport LOW from './low.js';\n\n\n// VARIABLES //\n\nvar FLOAT64_VIEW = new Float64Array( 1 );\nvar UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );\n\n\n// MAIN //\n\n/**\n* Sets the less significant 32 bits of a double-precision floating-point number.\n*\n* ## Notes\n*\n* ```text\n* float64 (64 bits)\n* f := fraction (significand/mantissa) (52 bits)\n* e := exponent (11 bits)\n* s := sign bit (1 bit)\n*\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |                                Float64                                |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |              Uint32               |               Uint32              |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* ```\n*\n* If little endian (more significant bits last):\n*\n* ```text\n*                         <-- lower      higher -->\n* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |\n* ```\n*\n* If big endian (more significant bits first):\n*\n* ```text\n*                         <-- higher      lower -->\n* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |\n* ```\n*\n* In which Uint32 can we find the lower order bits? If little endian, the first; if big endian, the second.\n*\n*\n* ## References\n*\n* -   [Open Group][1]\n*\n* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm\n*\n* @param {number} x - double\n* @param {uinteger32} low - unsigned 32-bit integer to replace the lower order word of `x`\n* @returns {number} double having the same higher order word as `x`\n*\n* @example\n* var low = 5 >>> 0; // => 00000000000000000000000000000101\n*\n* var x = 3.14e201; // => 0 11010011100 01001000001011000011 10010011110010110101100010000010\n*\n* var y = setLowWord( x, low ); // => 0 11010011100 01001000001011000011 00000000000000000000000000000101\n* // returns 3.139998651394392e+201\n*\n* @example\n* import PINF from '@stdlib/constants-float64-pinf';\n* import NINF from '@stdlib/constants-float64-ninf';\n*\n* var low = 12345678;\n*\n* var y = setLowWord( PINF, low );\n* // returns NaN\n*\n* y = setLowWord( NINF, low );\n* // returns NaN\n*\n* y = setLowWord( NaN, low );\n* // returns NaN\n*/\nfunction setLowWord( x, low ) {\n\tFLOAT64_VIEW[ 0 ] = x;\n\tUINT32_VIEW[ LOW ] = ( low >>> 0 ); // identity bit shift to ensure integer\n\treturn FLOAT64_VIEW[ 0 ];\n}\n\n\n// EXPORTS //\n\nexport default setLowWord;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Converts an unsigned 32-bit integer to a signed 32-bit integer.\n*\n* @param {uinteger32} x - unsigned 32-bit integer\n* @returns {integer32} signed 32-bit integer\n*\n* @example\n* import float64ToUint32 from '@stdlib/number-float64-base-to-uint32';\n* var y = uint32ToInt32( float64ToUint32( 4294967295 ) );\n* // returns -1\n*\n* @example\n* import float64ToUint32 from '@stdlib/number-float64-base-to-uint32';\n* var y = uint32ToInt32( float64ToUint32( 3 ) );\n* // returns 3\n*/\nfunction uint32ToInt32( x ) {\n\t// NOTE: we could also use typed-arrays to achieve the same end.\n\treturn x|0; // asm type annotation\n}\n\n\n// EXPORTS //\n\nexport default uint32ToInt32;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* High word mask for excluding the sign bit of a double-precision floating-point number.\n*\n* @module @stdlib/constants-float64-high-word-abs-mask\n* @type {uinteger32}\n*\n* @example\n* import FLOAT64_HIGH_WORD_ABS_MASK from '@stdlib/constants-float64-high-word-abs-mask';\n* // returns 2147483647\n*/\n\n\n// MAIN //\n\n/**\n* High word mask for excluding the sign bit of a double-precision floating-point number.\n*\n* ## Notes\n*\n* The high word mask for excluding the sign bit of a double-precision floating-point number is an unsigned 32-bit integer with the value \\\\( 2147483647 \\\\), which corresponds to the bit sequence\n*\n* ```binarystring\n* 0 11111111111 11111111111111111111\n* ```\n*\n* @constant\n* @type {uinteger32}\n* @default 0x7fffffff\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_HIGH_WORD_ABS_MASK = 0x7fffffff>>>0; // eslint-disable-line id-length\n\n\n// EXPORTS //\n\nexport default FLOAT64_HIGH_WORD_ABS_MASK;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isLittleEndian from '@stdlib/assert-is-little-endian';\n\n\n// MAIN //\n\nvar indices;\nvar HIGH;\nvar LOW;\n\nif ( isLittleEndian === true ) {\n\tHIGH = 1; // second index\n\tLOW = 0; // first index\n} else {\n\tHIGH = 0; // first index\n\tLOW = 1; // second index\n}\nindices = {\n\t'HIGH': HIGH,\n\t'LOW': LOW\n};\n\n\n// EXPORTS //\n\nexport default indices;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Uint32Array from '@stdlib/array-uint32';\nimport Float64Array from '@stdlib/array-float64';\nimport indices from './indices.js';\n\n\n// VARIABLES //\n\nvar FLOAT64_VIEW = new Float64Array( 1 );\nvar UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );\n\nvar HIGH = indices.HIGH;\nvar LOW = indices.LOW;\n\n\n// MAIN //\n\n/**\n* Creates a double-precision floating-point number from a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).\n*\n* ## Notes\n*\n* ```text\n* float64 (64 bits)\n* f := fraction (significand/mantissa) (52 bits)\n* e := exponent (11 bits)\n* s := sign bit (1 bit)\n*\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |                                Float64                                |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |              Uint32               |               Uint32              |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* ```\n*\n* If little endian (more significant bits last):\n*\n* ```text\n*                         <-- lower      higher -->\n* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |\n* ```\n*\n* If big endian (more significant bits first):\n*\n* ```text\n*                         <-- higher      lower -->\n* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |\n* ```\n*\n*\n* In which Uint32 should we place the higher order bits? If little endian, the second; if big endian, the first.\n*\n*\n* ## References\n*\n* -   [Open Group][1]\n*\n* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm\n*\n* @param {uinteger32} high - higher order word (unsigned 32-bit integer)\n* @param {uinteger32} low - lower order word (unsigned 32-bit integer)\n* @returns {number} floating-point number\n*\n* @example\n* var v = fromWords( 1774486211, 2479577218 );\n* // returns 3.14e201\n*\n* @example\n* var v = fromWords( 3221823995, 1413754136 );\n* // returns -3.141592653589793\n*\n* @example\n* var v = fromWords( 0, 0 );\n* // returns 0.0\n*\n* @example\n* var v = fromWords( 2147483648, 0 );\n* // returns -0.0\n*\n* @example\n* var v = fromWords( 2146959360, 0 );\n* // returns NaN\n*\n* @example\n* var v = fromWords( 2146435072, 0 );\n* // returns Infinity\n*\n* @example\n* var v = fromWords( 4293918720, 0 );\n* // returns -Infinity\n*/\nfunction fromWords( high, low ) {\n\tUINT32_VIEW[ HIGH ] = high;\n\tUINT32_VIEW[ LOW ] = low;\n\treturn FLOAT64_VIEW[ 0 ];\n}\n\n\n// EXPORTS //\n\nexport default fromWords;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport SIGN_MASK from '@stdlib/constants-float64-high-word-sign-mask';\nimport ABS_MASK from '@stdlib/constants-float64-high-word-abs-mask';\nimport toWords from '@stdlib/number-float64-base-to-words';\nimport getHighWord from '@stdlib/number-float64-base-get-high-word';\nimport fromWords from '@stdlib/number-float64-base-from-words';\n\n\n// VARIABLES //\n\n// High/low words workspace:\nvar WORDS = [ 0, 0 ];\n\n\n// MAIN //\n\n/**\n* Returns a double-precision floating-point number with the magnitude of `x` and the sign of `y`.\n*\n* @param {number} x - number from which to derive a magnitude\n* @param {number} y - number from which to derive a sign\n* @returns {number} a double-precision floating-point number\n*\n* @example\n* var z = copysign( -3.14, 10.0 );\n* // returns 3.14\n*\n* @example\n* var z = copysign( 3.14, -1.0 );\n* // returns -3.14\n*\n* @example\n* var z = copysign( 1.0, -0.0 );\n* // returns -1.0\n*\n* @example\n* var z = copysign( -3.14, -0.0 );\n* // returns -3.14\n*\n* @example\n* var z = copysign( -0.0, 1.0 );\n* // returns 0.0\n*/\nfunction copysign( x, y ) {\n\tvar hx;\n\tvar hy;\n\n\t// Split `x` into higher and lower order words:\n\ttoWords.assign( x, WORDS, 1, 0 );\n\thx = WORDS[ 0 ];\n\n\t// Turn off the sign bit of `x`:\n\thx &= ABS_MASK;\n\n\t// Extract the higher order word from `y`:\n\thy = getHighWord( y );\n\n\t// Leave only the sign bit of `y` turned on:\n\thy &= SIGN_MASK;\n\n\t// Copy the sign bit of `y` to `x`:\n\thx |= hy;\n\n\t// Return a new value having the same magnitude as `x`, but with the sign of `y`:\n\treturn fromWords( hx, WORDS[ 1 ] );\n}\n\n\n// EXPORTS //\n\nexport default copysign;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* High word mask for the sign bit of a double-precision floating-point number.\n*\n* @module @stdlib/constants-float64-high-word-sign-mask\n* @type {uinteger32}\n*\n* @example\n* import FLOAT64_HIGH_WORD_SIGN_MASK from '@stdlib/constants-float64-high-word-sign-mask';\n* // returns 2147483648\n*/\n\n\n// MAIN //\n\n/**\n* High word mask for the sign bit of a double-precision floating-point number.\n*\n* ## Notes\n*\n* The high word mask for the sign bot of a double-precision floating-point number is an unsigned 32-bit integer with the value \\\\( 2147483648 \\\\), which corresponds to the bit sequence\n*\n* ```binarystring\n* 1 00000000000 00000000000000000000\n* ```\n*\n* @constant\n* @type {uinteger32}\n* @default 0x80000000\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_HIGH_WORD_SIGN_MASK = 0x80000000>>>0; // eslint-disable-line id-length\n\n\n// EXPORTS //\n\nexport default FLOAT64_HIGH_WORD_SIGN_MASK;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_pow.c}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport getHighWord from '@stdlib/number-float64-base-get-high-word';\nimport setLowWord from '@stdlib/number-float64-base-set-low-word';\nimport setHighWord from '@stdlib/number-float64-base-set-high-word';\nimport BIAS from '@stdlib/constants-float64-exponent-bias';\nimport polyvalL from './polyval_l.js';\n\n\n// VARIABLES //\n\n// 0x000fffff = 1048575 => 0 00000000000 11111111111111111111\nvar HIGH_SIGNIFICAND_MASK = 0x000fffff|0; // asm type annotation\n\n// 0x00100000 = 1048576 => 0 00000000001 00000000000000000000 => biased exponent: 1 = -1022+1023 => 2^-1022\nvar HIGH_MIN_NORMAL_EXP = 0x00100000|0; // asm type annotation\n\n// 0x3ff00000 = 1072693248 => 0 01111111111 00000000000000000000 => biased exponent: 1023 = 0+1023 => 2^0 = 1\nvar HIGH_BIASED_EXP_0 = 0x3ff00000|0; // asm type annotation\n\n// 0x20000000 = 536870912 => 0 01000000000 00000000000000000000 => biased exponent: 512 = -511+1023\nvar HIGH_BIASED_EXP_NEG_512 = 0x20000000|0; // asm type annotation\n\n// 0x00080000 = 524288 => 0 00000000000 10000000000000000000\nvar HIGH_SIGNIFICAND_HALF = 0x00080000|0; // asm type annotation\n\n// TODO: consider making an external constant\nvar HIGH_NUM_SIGNIFICAND_BITS = 20|0; // asm type annotation\n\nvar TWO53 = 9007199254740992.0;\t// 0x43400000, 0x00000000\n\n// 2/(3*LN2)\nvar CP = 9.61796693925975554329e-01; // 0x3FEEC709, 0xDC3A03FD\n\n// (float)CP\nvar CP_HI = 9.61796700954437255859e-01; // 0x3FEEC709, 0xE0000000\n\n// Low: CP_HI\nvar CP_LO = -7.02846165095275826516e-09; // 0xBE3E2FE0, 0x145B01F5\n\nvar BP = [\n\t1.0,\n\t1.5\n];\nvar DP_HI = [\n\t0.0,\n\t5.84962487220764160156e-01 // 0x3FE2B803, 0x40000000\n];\nvar DP_LO = [\n\t0.0,\n\t1.35003920212974897128e-08 // 0x3E4CFDEB, 0x43CFD006\n];\n\n\n// MAIN //\n\n/**\n* Computes \\\\(\\operatorname{log2}(ax)\\\\).\n*\n* @private\n* @param {Array} out - output array\n* @param {number} ax - absolute value of `x`\n* @param {number} ahx - high word of `ax`\n* @returns {Array} output array containing a tuple comprised of high and low parts\n*\n* @example\n* var t = log2ax( [ 0.0, 0.0 ], 9.0, 1075970048 ); // => [ t1, t2 ]\n* // returns [ 3.169923782348633, 0.0000012190936795504075 ]\n*/\nfunction log2ax( out, ax, ahx ) {\n\tvar tmp;\n\tvar ss; // `hs + ls`\n\tvar s2; // `ss` squared\n\tvar hs;\n\tvar ls;\n\tvar ht;\n\tvar lt;\n\tvar bp; // `BP` constant\n\tvar dp; // `DP` constant\n\tvar hp;\n\tvar lp;\n\tvar hz;\n\tvar lz;\n\tvar t1;\n\tvar t2;\n\tvar t;\n\tvar r;\n\tvar u;\n\tvar v;\n\tvar n;\n\tvar j;\n\tvar k;\n\n\tn = 0|0; // asm type annotation\n\n\t// Check if `x` is subnormal...\n\tif ( ahx < HIGH_MIN_NORMAL_EXP ) {\n\t\tax *= TWO53;\n\t\tn -= 53|0; // asm type annotation\n\t\tahx = getHighWord( ax );\n\t}\n\t// Extract the unbiased exponent of `x`:\n\tn += ((ahx >> HIGH_NUM_SIGNIFICAND_BITS) - BIAS)|0; // asm type annotation\n\n\t// Isolate the significand bits of `x`:\n\tj = (ahx & HIGH_SIGNIFICAND_MASK)|0; // asm type annotation\n\n\t// Normalize `ahx` by setting the (biased) exponent to `1023`:\n\tahx = (j | HIGH_BIASED_EXP_0)|0; // asm type annotation\n\n\t// Determine the interval of `|x|` by comparing significand bits...\n\n\t// |x| < sqrt(3/2)\n\tif ( j <= 0x3988E ) { // 0 00000000000 00111001100010001110\n\t\tk = 0;\n\t}\n\t// |x| < sqrt(3)\n\telse if ( j < 0xBB67A ) { // 0 00000000000 10111011011001111010\n\t\tk = 1;\n\t}\n\t// |x| >= sqrt(3)\n\telse {\n\t\tk = 0;\n\t\tn += 1|0; // asm type annotation\n\t\tahx -= HIGH_MIN_NORMAL_EXP;\n\t}\n\t// Load the normalized high word into `|x|`:\n\tax = setHighWord( ax, ahx );\n\n\t// Compute `ss = hs + ls = (x-1)/(x+1)` or `(x-1.5)/(x+1.5)`:\n\tbp = BP[ k ]; // BP[0] = 1.0, BP[1] = 1.5\n\tu = ax - bp; // (x-1) || (x-1.5)\n\tv = 1.0 / (ax + bp); // 1/(x+1) || 1/(x+1.5)\n\tss = u * v;\n\ths = setLowWord( ss, 0 ); // set all low word (less significant significand) bits to 0s\n\n\t// Compute `ht = ax + bp` (via manipulation, i.e., bit flipping, of the high word):\n\ttmp = ((ahx>>1) | HIGH_BIASED_EXP_NEG_512) + HIGH_SIGNIFICAND_HALF;\n\ttmp += (k << 18); // `(k<<18)` can be considered the word equivalent of `1.0` or `1.5`\n\tht = setHighWord( 0.0, tmp );\n\tlt = ax - (ht - bp);\n\tls = v * ( ( u - (hs*ht) ) - ( hs*lt ) );\n\n\t// Compute `log(ax)`...\n\n\ts2 = ss * ss;\n\tr = s2 * s2 * polyvalL( s2 );\n\tr += ls * (hs + ss);\n\ts2 = hs * hs;\n\tht = 3.0 + s2 + r;\n\tht = setLowWord( ht, 0 );\n\tlt = r - ((ht-3.0) - s2);\n\n\t// u+v = ss*(1+...):\n\tu = hs * ht;\n\tv = ( ls*ht ) + ( lt*ss );\n\n\t// 2/(3LN2) * (ss+...):\n\thp = u + v;\n\thp = setLowWord( hp, 0 );\n\tlp = v - (hp - u);\n\thz = CP_HI * hp; // CP_HI+CP_LO = 2/(3*LN2)\n\tlz = ( CP_LO*hp ) + ( lp*CP ) + DP_LO[ k ];\n\n\t// log2(ax) = (ss+...)*2/(3*LN2) = n + dp + hz + lz\n\tdp = DP_HI[ k ];\n\tt = n;\n\tt1 = ((hz+lz) + dp) + t; // log2(ax)\n\tt1 = setLowWord( t1, 0 );\n\tt2 = lz - (((t1-t) - dp) - hz);\n\n\tout[ 0 ] = t1;\n\tout[ 1 ] = t2;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default log2ax;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* The maximum biased base 2 exponent for a double-precision floating-point number.\n*\n* @module @stdlib/constants-float64-max-base2-exponent\n* @type {integer32}\n*\n* @example\n* import FLOAT64_MAX_BASE2_EXPONENT from '@stdlib/constants-float64-max-base2-exponent';\n* // returns 1023\n*/\n\n\n// MAIN //\n\n/**\n* The maximum biased base 2 exponent for a double-precision floating-point number.\n*\n* ```text\n* 11111111110 => 2046 - BIAS = 1023\n* ```\n*\n* where `BIAS = 1023`.\n*\n* @constant\n* @type {integer32}\n* @default 1023\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_MAX_BASE2_EXPONENT = 1023|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default FLOAT64_MAX_BASE2_EXPONENT;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Smallest positive double-precision floating-point normal number.\n*\n* @module @stdlib/constants-float64-smallest-normal\n* @type {number}\n*\n* @example\n* import FLOAT64_SMALLEST_NORMAL from '@stdlib/constants-float64-smallest-normal';\n* // returns 2.2250738585072014e-308\n*/\n\n\n// MAIN //\n\n/**\n* The smallest positive double-precision floating-point normal number.\n*\n* ## Notes\n*\n* The number has the value\n*\n* ```tex\n* \\frac{1}{2^{1023-1}}\n* ```\n*\n* which corresponds to the bit sequence\n*\n* ```binarystring\n* 0 00000000001 00000000000000000000 00000000000000000000000000000000\n* ```\n*\n* @constant\n* @type {number}\n* @default 2.2250738585072014e-308\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_SMALLEST_NORMAL = 2.2250738585072014e-308;\n\n\n// EXPORTS //\n\nexport default FLOAT64_SMALLEST_NORMAL;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport FLOAT64_SMALLEST_NORMAL from '@stdlib/constants-float64-smallest-normal';\nimport isInfinite from '@stdlib/math-base-assert-is-infinite';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport abs from '@stdlib/math-base-special-abs';\n\n\n// VARIABLES //\n\n// (1<<52)\nvar SCALAR = 4503599627370496;\n\n\n// MAIN //\n\n/**\n* Returns a normal number `y` and exponent `exp` satisfying \\\\(x = y \\cdot 2^\\mathrm{exp}\\\\) and assigns results to a provided output array.\n*\n* @param {number} x - input value\n* @param {Collection} out - output array\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array index offset\n* @returns {Collection} output array\n*\n* @example\n* import pow from '@stdlib/math-base-special-pow';\n*\n* var out = normalize( 3.14e-319, [ 0.0, 0 ], 1, 0 );\n* // returns [ 1.4141234400356668e-303, -52 ]\n*\n* var y = out[ 0 ];\n* var exp = out[ 1 ];\n*\n* var bool = ( y*pow(2.0,exp) === 3.14e-319 );\n* // returns true\n*\n* @example\n* var out = normalize( 0.0, [ 0.0, 0 ], 1, 0 );\n* // returns [ 0.0, 0 ];\n*\n* @example\n* import PINF from '@stdlib/constants-float64-pinf';\n*\n* var out = normalize( PINF, [ 0.0, 0 ], 1, 0 );\n* // returns [ Infinity, 0 ]\n*\n* @example\n* import NINF from '@stdlib/constants-float64-ninf';\n*\n* var out = normalize( NINF, [ 0.0, 0 ], 1, 0 );\n* // returns [ -Infinity, 0 ]\n*\n* @example\n* var out = normalize( NaN, [ 0.0, 0 ], 1, 0 );\n* // returns [ NaN, 0 ]\n*/\nfunction normalize( x, out, stride, offset ) {\n\tif ( isnan( x ) || isInfinite( x ) ) {\n\t\tout[ offset ] = x;\n\t\tout[ offset + stride ] = 0;\n\t\treturn out;\n\t}\n\tif ( x !== 0.0 && abs( x ) < FLOAT64_SMALLEST_NORMAL ) {\n\t\tout[ offset ] = x * SCALAR;\n\t\tout[ offset + stride ] = -52;\n\t\treturn out;\n\t}\n\tout[ offset ] = x;\n\tout[ offset + stride ] = 0;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default normalize;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a normal number `y` and exponent `exp` satisfying \\\\(x = y \\cdot 2^\\mathrm{exp}\\\\).\n*\n* @module @stdlib/number-float64-base-normalize\n*\n* @example\n* import normalize from '@stdlib/number-float64-base-normalize';\n* import pow from '@stdlib/math-base-special-pow';\n*\n* var out = normalize( 3.14e-319 );\n* // returns [ 1.4141234400356668e-303, -52 ]\n*\n* var y = out[ 0 ];\n* var exp = out[ 1 ];\n*\n* var bool = ( y*pow(2.0, exp) === 3.14e-319 );\n* // returns true\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import normalize from '@stdlib/number-float64-base-normalize';\n*\n* var out = new Float64Array( 2 );\n*\n* var v = normalize.assign( 3.14e-319, out, 1, 0 );\n* // returns <Float64Array>[ 1.4141234400356668e-303, -52 ]\n*\n* var bool = ( v === out );\n* // returns true\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport assign from './assign.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport fcn from './assign.js';\n\n\n// MAIN //\n\n/**\n* Returns a normal number `y` and exponent `exp` satisfying \\\\(x = y \\cdot 2^\\mathrm{exp}\\\\).\n*\n* @param {number} x - input value\n* @returns {NumberArray} output array\n*\n* @example\n* import pow from '@stdlib/math-base-special-pow';\n*\n* var out = normalize( 3.14e-319 );\n* // returns [ 1.4141234400356668e-303, -52 ]\n*\n* var y = out[ 0 ];\n* var exp = out[ 1 ];\n*\n* var bool = ( y*pow(2.0,exp) === 3.14e-319 );\n* // returns true\n*\n* @example\n* var out = normalize( 0.0 );\n* // returns [ 0.0, 0 ]\n*\n* @example\n* import PINF from '@stdlib/constants-float64-pinf';\n*\n* var out = normalize( PINF );\n* // returns [ Infinity, 0 ]\n*\n* @example\n* import NINF from '@stdlib/constants-float64-ninf';\n*\n* var out = normalize( NINF );\n* // returns [ -Infinity, 0 ]\n*\n* @example\n* var out = normalize( NaN );\n* // returns [ NaN, 0 ]\n*/\nfunction normalize( x ) {\n\treturn fcn( x, [ 0.0, 0 ], 1, 0 );\n}\n\n\n// EXPORTS //\n\nexport default normalize;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// NOTES //\n\n/*\n* => ldexp: load exponent (see [The Open Group]{@link http://pubs.opengroup.org/onlinepubs/9699919799/functions/ldexp.html} and [cppreference]{@link http://en.cppreference.com/w/c/numeric/math/ldexp}).\n*/\n\n\n// MODULES //\n\nimport PINF from '@stdlib/constants-float64-pinf';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport BIAS from '@stdlib/constants-float64-exponent-bias';\nimport MAX_EXPONENT from '@stdlib/constants-float64-max-base2-exponent';\nimport MAX_SUBNORMAL_EXPONENT from '@stdlib/constants-float64-max-base2-exponent-subnormal';\nimport MIN_SUBNORMAL_EXPONENT from '@stdlib/constants-float64-min-base2-exponent-subnormal';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isInfinite from '@stdlib/math-base-assert-is-infinite';\nimport copysign from '@stdlib/math-base-special-copysign';\nimport { assign as normalize } from '@stdlib/number-float64-base-normalize';\nimport floatExp from '@stdlib/number-float64-base-exponent';\nimport toWords from '@stdlib/number-float64-base-to-words';\nimport fromWords from '@stdlib/number-float64-base-from-words';\n\n\n// VARIABLES //\n\n// 1/(1<<52) = 1/(2**52) = 1/4503599627370496\nvar TWO52_INV = 2.220446049250313e-16;\n\n// Exponent all 0s: 1 00000000000 11111111111111111111 => 2148532223\nvar CLEAR_EXP_MASK = 0x800fffff>>>0; // asm type annotation\n\n// Normalization workspace:\nvar FRAC = [ 0.0, 0.0 ];\n\n// High/low words workspace:\nvar WORDS = [ 0, 0 ];\n\n\n// MAIN //\n\n/**\n* Multiplies a double-precision floating-point number by an integer power of two.\n*\n* @param {number} frac - fraction\n* @param {integer} exp - exponent\n* @returns {number} double-precision floating-point number\n*\n* @example\n* var x = ldexp( 0.5, 3 ); // => 0.5 * 2^3 = 0.5 * 8\n* // returns 4.0\n*\n* @example\n* var x = ldexp( 4.0, -2 ); // => 4 * 2^(-2) = 4 * (1/4)\n* // returns 1.0\n*\n* @example\n* var x = ldexp( 0.0, 20 );\n* // returns 0.0\n*\n* @example\n* var x = ldexp( -0.0, 39 );\n* // returns -0.0\n*\n* @example\n* var x = ldexp( NaN, -101 );\n* // returns NaN\n*\n* @example\n* var x = ldexp( Infinity, 11 );\n* // returns Infinity\n*\n* @example\n* var x = ldexp( -Infinity, -118 );\n* // returns -Infinity\n*/\nfunction ldexp( frac, exp ) {\n\tvar high;\n\tvar m;\n\tif (\n\t\texp === 0 ||\n\t\tfrac === 0.0 || // handles +-0\n\t\tisnan( frac ) ||\n\t\tisInfinite( frac )\n\t) {\n\t\treturn frac;\n\t}\n\t// Normalize the input fraction:\n\tnormalize( frac, FRAC, 1, 0 );\n\tfrac = FRAC[ 0 ];\n\texp += FRAC[ 1 ];\n\n\t// Extract the exponent from `frac` and add it to `exp`:\n\texp += floatExp( frac );\n\n\t// Check for underflow/overflow...\n\tif ( exp < MIN_SUBNORMAL_EXPONENT ) {\n\t\treturn copysign( 0.0, frac );\n\t}\n\tif ( exp > MAX_EXPONENT ) {\n\t\tif ( frac < 0.0 ) {\n\t\t\treturn NINF;\n\t\t}\n\t\treturn PINF;\n\t}\n\t// Check for a subnormal and scale accordingly to retain precision...\n\tif ( exp <= MAX_SUBNORMAL_EXPONENT ) {\n\t\texp += 52;\n\t\tm = TWO52_INV;\n\t} else {\n\t\tm = 1.0;\n\t}\n\t// Split the fraction into higher and lower order words:\n\ttoWords.assign( frac, WORDS, 1, 0 );\n\thigh = WORDS[ 0 ];\n\n\t// Clear the exponent bits within the higher order word:\n\thigh &= CLEAR_EXP_MASK;\n\n\t// Set the exponent bits to the new exponent:\n\thigh |= ((exp+BIAS) << 20);\n\n\t// Create a new floating-point number:\n\treturn m * fromWords( high, WORDS[ 1 ] );\n}\n\n\n// EXPORTS //\n\nexport default ldexp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport getHighWord from '@stdlib/number-float64-base-get-high-word';\nimport EXP_MASK from '@stdlib/constants-float64-high-word-exponent-mask';\nimport BIAS from '@stdlib/constants-float64-exponent-bias';\n\n\n// MAIN //\n\n/**\n* Returns an integer corresponding to the unbiased exponent of a double-precision floating-point number.\n*\n* @param {number} x - input value\n* @returns {integer32} unbiased exponent\n*\n* @example\n* var exp = exponent( 3.14e-307 ); // => 2**-1019 ~ 1e-307\n* // returns -1019\n*\n* @example\n* var exp = exponent( -3.14 );\n* // returns 1\n*\n* @example\n* var exp = exponent( 0.0 );\n* // returns -1023\n*\n* @example\n* var exp = exponent( NaN );\n* // returns 1024\n*/\nfunction exponent( x ) {\n\t// Extract from the input value a higher order word (unsigned 32-bit integer) which contains the exponent:\n\tvar high = getHighWord( x );\n\n\t// Apply a mask to isolate only the exponent bits and then shift off all bits which are part of the fraction:\n\thigh = ( high & EXP_MASK ) >>> 20;\n\n\t// Remove the bias and return:\n\treturn (high - BIAS)|0; // asm type annotation\n}\n\n\n// EXPORTS //\n\nexport default exponent;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* High word mask for the exponent of a double-precision floating-point number.\n*\n* @module @stdlib/constants-float64-high-word-exponent-mask\n* @type {uinteger32}\n*\n* @example\n* import FLOAT64_HIGH_WORD_EXPONENT_MASK from '@stdlib/constants-float64-high-word-exponent-mask';\n* // returns 2146435072\n*/\n\n\n// MAIN //\n\n/**\n* High word mask for the exponent of a double-precision floating-point number.\n*\n* ## Notes\n*\n* The high word mask for the exponent of a double-precision floating-point number is an unsigned 32-bit integer with the value \\\\( 2146435072 \\\\), which corresponds to the bit sequence\n*\n* ```binarystring\n* 0 11111111111 00000000000000000000\n* ```\n*\n* @constant\n* @type {uinteger32}\n* @default 0x7ff00000\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_HIGH_WORD_EXPONENT_MASK = 0x7ff00000;\n\n\n// EXPORTS //\n\nexport default FLOAT64_HIGH_WORD_EXPONENT_MASK;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* The minimum biased base 2 exponent for a subnormal double-precision floating-point number.\n*\n* @module @stdlib/constants-float64-min-base2-exponent-subnormal\n* @type {integer32}\n*\n* @example\n* import FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL from '@stdlib/constants-float64-min-base2-exponent-subnormal';\n* // returns -1074\n*/\n\n\n// MAIN //\n\n/**\n* The minimum biased base 2 exponent for a subnormal double-precision floating-point number.\n*\n* ```text\n* -(BIAS+(52-1)) = -(1023+51) = -1074\n* ```\n*\n* where `BIAS = 1023` and `52` is the number of digits in the significand.\n*\n* @constant\n* @type {integer32}\n* @default -1074\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL = -1074|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* The maximum biased base 2 exponent for a subnormal double-precision floating-point number.\n*\n* @module @stdlib/constants-float64-max-base2-exponent-subnormal\n* @type {integer32}\n*\n* @example\n* import FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL from '@stdlib/constants-float64-max-base2-exponent-subnormal';\n* // returns -1023\n*/\n\n\n// MAIN //\n\n/**\n* The maximum biased base 2 exponent for a subnormal double-precision floating-point number.\n*\n* ```text\n* 00000000000 => 0 - BIAS = -1023\n* ```\n*\n* where `BIAS = 1023`.\n*\n* @constant\n* @type {integer32}\n* @default -1023\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL = -1023|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Natural logarithm of `2`.\n*\n* @module @stdlib/constants-float64-ln-two\n* @type {number}\n*\n* @example\n* import LN2 from '@stdlib/constants-float64-ln-two';\n* // returns 0.6931471805599453\n*/\n\n\n// MAIN //\n\n/**\n* Natural logarithm of `2`.\n*\n* ```tex\n* \\ln 2\n* ```\n*\n* @constant\n* @type {number}\n* @default 0.6931471805599453\n*/\nvar LN2 = 6.93147180559945309417232121458176568075500134360255254120680009493393621969694715605863326996418687542001481021e-01; // eslint-disable-line max-len\n\n\n// EXPORTS //\n\nexport default LN2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* High word mask for the significand of a double-precision floating-point number.\n*\n* @module @stdlib/constants-float64-high-word-significand-mask\n* @type {uinteger32}\n*\n* @example\n* import FLOAT64_HIGH_WORD_SIGNIFICAND_MASK from '@stdlib/constants-float64-high-word-significand-mask';\n* // returns 1048575\n*/\n\n\n// MAIN //\n\n/**\n* High word mask for the significand of a double-precision floating-point number.\n*\n* ## Notes\n*\n* The high word mask for the significand of a double-precision floating-point number is an unsigned 32-bit integer with the value \\\\( 1048575 \\\\), which corresponds to the bit sequence\n*\n* ```binarystring\n* 0 00000000000 11111111111111111111\n* ```\n*\n* @constant\n* @type {uinteger32}\n* @default 0x000fffff\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_HIGH_WORD_SIGNIFICAND_MASK = 0x000fffff;\n\n\n// EXPORTS //\n\nexport default FLOAT64_HIGH_WORD_SIGNIFICAND_MASK;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_pow.c}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport getHighWord from '@stdlib/number-float64-base-get-high-word';\nimport setHighWord from '@stdlib/number-float64-base-set-high-word';\nimport setLowWord from '@stdlib/number-float64-base-set-low-word';\nimport uint32ToInt32 from '@stdlib/number-uint32-base-to-int32';\nimport ldexp from '@stdlib/math-base-special-ldexp';\nimport LN2 from '@stdlib/constants-float64-ln-two';\nimport BIAS from '@stdlib/constants-float64-exponent-bias';\nimport ABS_MASK from '@stdlib/constants-float64-high-word-abs-mask';\nimport HIGH_SIGNIFICAND_MASK from '@stdlib/constants-float64-high-word-significand-mask';\nimport polyvalP from './polyval_p.js';\n\n\n// VARIABLES //\n\n// 0x00100000 = 1048576 => 0 00000000001 00000000000000000000 => biased exponent: 1 = -1022+1023 => 2^-1022\nvar HIGH_MIN_NORMAL_EXP = 0x00100000|0; // asm type annotation\n\n// 0x3fe00000 = 1071644672 => 0 01111111110 00000000000000000000 => biased exponent: 1022 = -1+1023 => 2^-1\nvar HIGH_BIASED_EXP_NEG_1 = 0x3fe00000|0; // asm type annotation\n\n// TODO: consider making into an external constant\nvar HIGH_NUM_SIGNIFICAND_BITS = 20|0; // asm type annotation\n\n// High: LN2\nvar LN2_HI = 6.93147182464599609375e-01; // 0x3FE62E43, 0x00000000\n\n// Low: LN2\nvar LN2_LO = -1.90465429995776804525e-09; // 0xBE205C61, 0x0CA86C39\n\n\n// MAIN //\n\n/**\n* Computes \\\\(2^{\\mathrm{hp} + \\mathrm{lp}\\\\).\n*\n* @private\n* @param {number} j - high word of `hp + lp`\n* @param {number} hp - first power summand\n* @param {number} lp - second power summand\n* @returns {number} function value\n*\n* @example\n* var z = pow2( 1065961648, -0.3398475646972656, -0.000002438187359100815 );\n* // returns ~0.79\n*/\nfunction pow2( j, hp, lp ) {\n\tvar tmp;\n\tvar t1;\n\tvar t;\n\tvar r;\n\tvar u;\n\tvar v;\n\tvar w;\n\tvar z;\n\tvar n;\n\tvar i;\n\tvar k;\n\n\ti = (j & ABS_MASK)|0; // asm type annotation\n\tk = ((i>>HIGH_NUM_SIGNIFICAND_BITS) - BIAS)|0; // asm type annotation\n\tn = 0;\n\n\t// `|z| > 0.5`, set `n = z+0.5`\n\tif ( i > HIGH_BIASED_EXP_NEG_1 ) {\n\t\tn = (j + (HIGH_MIN_NORMAL_EXP>>(k+1)))>>>0; // asm type annotation\n\t\tk = (((n & ABS_MASK)>>HIGH_NUM_SIGNIFICAND_BITS) - BIAS)|0; // new k for n\n\t\ttmp = ((n & ~(HIGH_SIGNIFICAND_MASK >> k)))>>>0; // asm type annotation\n\t\tt = setHighWord( 0.0, tmp );\n\t\tn = (((n & HIGH_SIGNIFICAND_MASK)|HIGH_MIN_NORMAL_EXP) >> (HIGH_NUM_SIGNIFICAND_BITS-k))>>>0; // eslint-disable-line max-len\n\t\tif ( j < 0 ) {\n\t\t\tn = -n;\n\t\t}\n\t\thp -= t;\n\t}\n\tt = lp + hp;\n\tt = setLowWord( t, 0 );\n\tu = t * LN2_HI;\n\tv = ( (lp - (t-hp))*LN2 ) + ( t*LN2_LO );\n\tz = u + v;\n\tw = v - (z - u);\n\tt = z * z;\n\tt1 = z - ( t*polyvalP( t ) );\n\tr = ( (z*t1) / (t1-2.0) ) - ( w + (z*w) );\n\tz = 1.0 - (r - z);\n\tj = getHighWord( z );\n\tj = uint32ToInt32( j );\n\tj += (n << HIGH_NUM_SIGNIFICAND_BITS)>>>0; // asm type annotation\n\n\t// Check for subnormal output...\n\tif ( (j>>HIGH_NUM_SIGNIFICAND_BITS) <= 0 ) {\n\t\tz = ldexp( z, n );\n\t} else {\n\t\tz = setHighWord( z, j );\n\t}\n\treturn z;\n}\n\n\n// EXPORTS //\n\nexport default pow2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_pow.c}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isOdd from '@stdlib/math-base-assert-is-odd';\nimport isInfinite from '@stdlib/math-base-assert-is-infinite';\nimport isInteger from '@stdlib/math-base-assert-is-integer';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport abs from '@stdlib/math-base-special-abs';\nimport toWords from '@stdlib/number-float64-base-to-words';\nimport setLowWord from '@stdlib/number-float64-base-set-low-word';\nimport uint32ToInt32 from '@stdlib/number-uint32-base-to-int32';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport ABS_MASK from '@stdlib/constants-float64-high-word-abs-mask';\nimport xIsZero from './x_is_zero.js';\nimport yIsHuge from './y_is_huge.js';\nimport yIsInfinite from './y_is_infinite.js';\nimport log2ax from './log2ax.js';\nimport logx from './logx.js';\nimport pow2 from './pow2.js';\n\n\n// VARIABLES //\n\n// 0x3fefffff = 1072693247 => 0 01111111110 11111111111111111111 => biased exponent: 1022 = -1+1023 => 2^-1\nvar HIGH_MAX_NEAR_UNITY = 0x3fefffff|0; // asm type annotation\n\n// 0x41e00000 = 1105199104 => 0 10000011110 00000000000000000000 => biased exponent: 1054 = 31+1023 => 2^31\nvar HIGH_BIASED_EXP_31 = 0x41e00000|0; // asm type annotation\n\n// 0x43f00000 = 1139802112 => 0 10000111111 00000000000000000000 => biased exponent: 1087 = 64+1023 => 2^64\nvar HIGH_BIASED_EXP_64 = 0x43f00000|0; // asm type annotation\n\n// 0x40900000 = 1083179008 => 0 10000001001 00000000000000000000 => biased exponent: 1033 = 10+1023 => 2^10 = 1024\nvar HIGH_BIASED_EXP_10 = 0x40900000|0; // asm type annotation\n\n// 0x3ff00000 = 1072693248 => 0 01111111111 00000000000000000000 => biased exponent: 1023 = 0+1023 => 2^0 = 1\nvar HIGH_BIASED_EXP_0 = 0x3ff00000|0; // asm type annotation\n\n// 0x4090cc00 = 1083231232 => 0 10000001001 00001100110000000000\nvar HIGH_1075 = 0x4090cc00|0; // asm type annotation\n\n// 0xc090cc00 = 3230714880 => 1 10000001001 00001100110000000000\nvar HIGH_NEG_1075 = 0xc090cc00>>>0; // asm type annotation\n\nvar HIGH_NUM_NONSIGN_BITS = 31|0; // asm type annotation\n\nvar HUGE = 1.0e300;\nvar TINY = 1.0e-300;\n\n// -(1024-log2(ovfl+.5ulp))\nvar OVT = 8.0085662595372944372e-17;\n\n// High/low words workspace:\nvar WORDS = [ 0|0, 0|0 ];\n\n// Log workspace:\nvar LOG_WORKSPACE = [ 0.0, 0.0 ];\n\n\n// MAIN //\n\n/**\n* Evaluates the exponential function.\n*\n* ## Method\n*\n* 1.  Let \\\\(x = 2^n (1+f)\\\\).\n*\n* 2.  Compute \\\\(\\operatorname{log2}(x)\\\\) as\n*\n*     ```tex\n*     \\operatorname{log2}(x) = w_1 + w_2\n*     ```\n*\n*     where \\\\(w_1\\\\) has \\\\(53 - 24 = 29\\\\) bit trailing zeros.\n*\n* 3.  Compute\n*\n*     ```tex\n*     y \\cdot \\operatorname{log2}(x) = n + y^\\prime\n*     ```\n*\n*     by simulating multi-precision arithmetic, where \\\\(|y^\\prime| \\leq 0.5\\\\).\n*\n* 4.  Return\n*\n*     ```tex\n*     x^y = 2^n e^{y^\\prime \\cdot \\mathrm{log2}}\n*     ```\n*\n* ## Special Cases\n*\n* ```tex\n* \\begin{align*}\n* x^{\\mathrm{NaN}} &= \\mathrm{NaN} & \\\\\n* (\\mathrm{NaN})^y &= \\mathrm{NaN} & \\\\\n* 1^y &= 1 & \\\\\n* x^0 &= 1 & \\\\\n* x^1 &= x & \\\\\n* (\\pm 0)^\\infty &= +0 & \\\\\n* (\\pm 0)^{-\\infty} &= +\\infty & \\\\\n* (+0)^y &= +0 & \\mathrm{if}\\ y > 0 \\\\\n* (+0)^y &= +\\infty & \\mathrm{if}\\ y < 0 \\\\\n* (-0)^y &= -\\infty & \\mathrm{if}\\ y\\ \\mathrm{is\\ an\\ odd\\ integer\\ and}\\ y < 0 \\\\\n* (-0)^y &= +\\infty & \\mathrm{if}\\ y\\ \\mathrm{is\\ not\\ an\\ odd\\ integer\\ and}\\ y < 0 \\\\\n* (-0)^y &= -0 & \\mathrm{if}\\ y\\ \\mathrm{is\\ an\\ odd\\ integer\\ and}\\ y > 0 \\\\\n* (-0)^y &= +0 & \\mathrm{if}\\ y\\ \\mathrm{is\\ not\\ an\\ odd\\ integer\\ and}\\ y > 0 \\\\\n* (-1)^{\\pm\\infty} &= \\mathrm{NaN} & \\\\\n* x^{\\infty} &= +\\infty & |x| > 1 \\\\\n* x^{\\infty} &= +0 & |x| < 1 \\\\\n* x^{-\\infty} &= +0 & |x| > 1 \\\\\n* x^{-\\infty} &= +\\infty & |x| < 1 \\\\\n* (-\\infty)^y &= (-0)^y & \\\\\n* \\infty^y &= +0 & y < 0 \\\\\n* \\infty^y &= +\\infty & y > 0 \\\\\n* x^y &= \\mathrm{NaN} & \\mathrm{if}\\ y\\ \\mathrm{is\\ not\\ a\\ finite\\ integer\\ and}\\ x < 0\n* \\end{align*}\n* ```\n*\n* ## Notes\n*\n* -   \\\\(\\operatorname{pow}(x,y)\\\\) returns \\\\(x^y\\\\) nearly rounded. In particular, \\\\(\\operatorname{pow}(<\\mathrm{integer}>,<\\mathrm{integer}>)\\\\) **always** returns the correct integer, provided the value is representable.\n* -   The hexadecimal values shown in the source code are the intended values for used constants. Decimal values may be used, provided the compiler will accurately convert decimal to binary in order to produce the hexadecimal values.\n*\n*\n* @param {number} x - base\n* @param {number} y - exponent\n* @returns {number} function value\n*\n* @example\n* var v = pow( 2.0, 3.0 );\n* // returns 8.0\n*\n* @example\n* var v = pow( 4.0, 0.5 );\n* // returns 2.0\n*\n* @example\n* var v = pow( 100.0, 0.0 );\n* // returns 1.0\n*\n* @example\n* var v = pow( 3.141592653589793, 5.0 );\n* // returns ~306.0197\n*\n* @example\n* var v = pow( 3.141592653589793, -0.2 );\n* // returns ~0.7954\n*\n* @example\n* var v = pow( NaN, 3.0 );\n* // returns NaN\n*\n* @example\n* var v = pow( 5.0, NaN );\n* // returns NaN\n*\n* @example\n* var v = pow( NaN, NaN );\n* // returns NaN\n*/\nfunction pow( x, y ) {\n\tvar ahx; // absolute value high word `x`\n\tvar ahy; // absolute value high word `y`\n\tvar ax;  // absolute value `x`\n\tvar hx;  // high word `x`\n\tvar lx;  // low word `x`\n\tvar hy;  // high word `y`\n\tvar ly;  // low word `y`\n\tvar sx;  // sign `x`\n\tvar sy;  // sign `y`\n\tvar y1;\n\tvar hp;\n\tvar lp;\n\tvar t;\n\tvar z;   // y prime\n\tvar j;\n\tvar i;\n\tif ( isnan( x ) || isnan( y ) ) {\n\t\treturn NaN;\n\t}\n\t// Split `y` into high and low words:\n\ttoWords.assign( y, WORDS, 1, 0 );\n\thy = WORDS[ 0 ];\n\tly = WORDS[ 1 ];\n\n\t// Special cases `y`...\n\tif ( ly === 0 ) {\n\t\tif ( y === 0.0 ) {\n\t\t\treturn 1.0;\n\t\t}\n\t\tif ( y === 1.0 ) {\n\t\t\treturn x;\n\t\t}\n\t\tif ( y === -1.0 ) {\n\t\t\treturn 1.0 / x;\n\t\t}\n\t\tif ( y === 0.5 ) {\n\t\t\treturn sqrt( x );\n\t\t}\n\t\tif ( y === -0.5 ) {\n\t\t\treturn 1.0 / sqrt( x );\n\t\t}\n\t\tif ( y === 2.0 ) {\n\t\t\treturn x * x;\n\t\t}\n\t\tif ( y === 3.0 ) {\n\t\t\treturn x * x * x;\n\t\t}\n\t\tif ( y === 4.0 ) {\n\t\t\tx *= x;\n\t\t\treturn x * x;\n\t\t}\n\t\tif ( isInfinite( y ) ) {\n\t\t\treturn yIsInfinite( x, y );\n\t\t}\n\t}\n\t// Split `x` into high and low words:\n\ttoWords.assign( x, WORDS, 1, 0 );\n\thx = WORDS[ 0 ];\n\tlx = WORDS[ 1 ];\n\n\t// Special cases `x`...\n\tif ( lx === 0 ) {\n\t\tif ( hx === 0 ) {\n\t\t\treturn xIsZero( x, y );\n\t\t}\n\t\tif ( x === 1.0 ) {\n\t\t\treturn 1.0;\n\t\t}\n\t\tif (\n\t\t\tx === -1.0 &&\n\t\t\tisOdd( y )\n\t\t) {\n\t\t\treturn -1.0;\n\t\t}\n\t\tif ( isInfinite( x ) ) {\n\t\t\tif ( x === NINF ) {\n\t\t\t\t// `pow( 1/x, -y )`\n\t\t\t\treturn pow( -0.0, -y );\n\t\t\t}\n\t\t\tif ( y < 0.0 ) {\n\t\t\t\treturn 0.0;\n\t\t\t}\n\t\t\treturn PINF;\n\t\t}\n\t}\n\tif (\n\t\tx < 0.0 &&\n\t\tisInteger( y ) === false\n\t) {\n\t\t// Signal NaN...\n\t\treturn (x-x)/(x-x);\n\t}\n\tax = abs( x );\n\n\t// Remove the sign bits (i.e., get absolute values):\n\tahx = (hx & ABS_MASK)|0; // asm type annotation\n\tahy = (hy & ABS_MASK)|0; // asm type annotation\n\n\t// Extract the sign bits:\n\tsx = (hx >>> HIGH_NUM_NONSIGN_BITS)|0; // asm type annotation\n\tsy = (hy >>> HIGH_NUM_NONSIGN_BITS)|0; // asm type annotation\n\n\t// Determine the sign of the result...\n\tif ( sx && isOdd( y ) ) {\n\t\tsx = -1.0;\n\t} else {\n\t\tsx = 1.0;\n\t}\n\t// Case 1: `|y|` is huge...\n\n\t// |y| > 2^31\n\tif ( ahy > HIGH_BIASED_EXP_31 ) {\n\t\t// `|y| > 2^64`, then must over- or underflow...\n\t\tif ( ahy > HIGH_BIASED_EXP_64 ) {\n\t\t\treturn yIsHuge( x, y );\n\t\t}\n\t\t// Over- or underflow if `x` is not close to unity...\n\n\t\tif ( ahx < HIGH_MAX_NEAR_UNITY ) {\n\t\t\t// y < 0\n\t\t\tif ( sy === 1 ) {\n\t\t\t\t// Signal overflow...\n\t\t\t\treturn sx * HUGE * HUGE;\n\t\t\t}\n\t\t\t// Signal underflow...\n\t\t\treturn sx * TINY * TINY;\n\t\t}\n\t\tif ( ahx > HIGH_BIASED_EXP_0 ) {\n\t\t\t// y > 0\n\t\t\tif ( sy === 0 ) {\n\t\t\t\t// Signal overflow...\n\t\t\t\treturn sx * HUGE * HUGE;\n\t\t\t}\n\t\t\t// Signal underflow...\n\t\t\treturn sx * TINY * TINY;\n\t\t}\n\t\t// At this point, `|1-x|` is tiny (`<= 2^-20`). Suffice to compute `log(x)` by `x - x^2/2 + x^3/3 - x^4/4`.\n\t\tt = logx( LOG_WORKSPACE, ax );\n\t}\n\t// Case 2: `|y|` is not huge...\n\telse {\n\t\tt = log2ax( LOG_WORKSPACE, ax, ahx );\n\t}\n\t// Split `y` into `y1 + y2` and compute `(y1+y2) * (t1+t2)`...\n\ty1 = setLowWord( y, 0 );\n\tlp = ( (y-y1)*t[0] ) + ( y*t[1] );\n\thp = y1 * t[0];\n\tz = lp + hp;\n\n\t// Note: *can* be more performant to use `getHighWord` and `getLowWord` directly, but using `toWords` looks cleaner.\n\ttoWords.assign( z, WORDS, 1, 0 );\n\tj = uint32ToInt32( WORDS[0] );\n\ti = uint32ToInt32( WORDS[1] );\n\n\t// z >= 1024\n\tif ( j >= HIGH_BIASED_EXP_10 ) {\n\t\t// z > 1024\n\t\tif ( ((j-HIGH_BIASED_EXP_10)|i) !== 0 ) {\n\t\t\t// Signal overflow...\n\t\t\treturn sx * HUGE * HUGE;\n\t\t}\n\t\tif ( (lp+OVT) > (z-hp) ) {\n\t\t\t// Signal overflow...\n\t\t\treturn sx * HUGE * HUGE;\n\t\t}\n\t}\n\t// z <= -1075\n\telse if ( (j&ABS_MASK) >= HIGH_1075 ) {\n\t\t// z < -1075\n\t\tif ( ((j-HIGH_NEG_1075)|i) !== 0 ) {\n\t\t\t// Signal underflow...\n\t\t\treturn sx * TINY * TINY;\n\t\t}\n\t\tif ( lp <= (z-hp) ) {\n\t\t\t// Signal underflow...\n\t\t\treturn sx * TINY * TINY;\n\t\t}\n\t}\n\t// Compute `2^(hp+lp)`...\n\tz = pow2( j, hp, lp );\n\n\treturn sx * z;\n}\n\n\n// EXPORTS //\n\nexport default pow;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math-base-special-abs';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Evaluates the exponential function when \\\\( y = \\pm \\infty\\\\).\n*\n* @private\n* @param {number} x - base\n* @param {number} y - exponent\n* @returns {number} function value\n*\n* @example\n* var v = pow( -1.0, Infinity );\n* // returns NaN\n*\n* @example\n* var v = pow( -1.0, -Infinity  );\n* // returns NaN\n*\n* @example\n* var v = pow( 1.0, Infinity );\n* // returns 1.0\n*\n* @example\n* var v = pow( 1.0, -Infinity  );\n* // returns 1.0\n*\n* @example\n* var v = pow( 0.5, Infinity );\n* // returns 0.0\n*\n* @example\n* var v = pow( 0.5, -Infinity  );\n* // returns Infinity\n*\n* @example\n* var v = pow( 1.5, -Infinity  );\n* // returns 0.0\n*\n* @example\n* var v = pow( 1.5, Infinity );\n* // returns Infinity\n*/\nfunction pow( x, y ) {\n\tif ( x === -1.0 ) {\n\t\t// Julia (0.4.2) and Python (2.7.9) return `1.0` (WTF???). JavaScript (`Math.pow`), R, and libm return `NaN`. We choose `NaN`, as the value is indeterminate; i.e., we cannot determine whether `y` is odd, even, or somewhere in between.\n\t\treturn (x-x)/(x-x); // signal NaN\n\t}\n\tif ( x === 1.0 ) {\n\t\treturn 1.0;\n\t}\n\t// (|x| > 1 && y === NINF) || (|x| < 1 && y === PINF)\n\tif ( (abs(x) < 1.0) === (y === PINF) ) {\n\t\treturn 0.0;\n\t}\n\t// (|x| > 1 && y === PINF) || (|x| < 1 && y === NINF)\n\treturn PINF;\n}\n\n\n// EXPORTS //\n\nexport default pow;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_pow.c}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isOdd from '@stdlib/math-base-assert-is-odd';\nimport copysign from '@stdlib/math-base-special-copysign';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Evaluates the exponential function when \\\\(|x| = 0\\\\).\n*\n* @private\n* @param {number} x - base\n* @param {number} y - exponent\n* @returns {number} function value\n*\n* @example\n* var v = pow( 0.0, 2 );\n* // returns 0.0\n*\n* @example\n* var v = pow( -0.0, -9 );\n* // returns -Infinity\n*\n* @example\n* var v = pow( 0.0, -9 );\n* // returns Infinity\n*\n* @example\n* var v = pow( -0.0, 9 );\n* // returns 0.0\n*\n* @example\n* var v = pow( 0.0, -Infinity  );\n* // returns Infinity\n*\n* @example\n* var v = pow( 0.0, Infinity );\n* // returns 0.0\n*/\nfunction pow( x, y ) {\n\tif ( y === NINF ) {\n\t\treturn PINF;\n\t}\n\tif ( y === PINF ) {\n\t\treturn 0.0;\n\t}\n\tif ( y > 0.0 ) {\n\t\tif ( isOdd( y ) ) {\n\t\t\treturn x; // handles +-0\n\t\t}\n\t\treturn 0.0;\n\t}\n\t// y < 0.0\n\tif ( isOdd( y ) ) {\n\t\treturn copysign( PINF, x ); // handles +-0\n\t}\n\treturn PINF;\n}\n\n\n// EXPORTS //\n\nexport default pow;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_pow.c}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport ABS_MASK from '@stdlib/constants-float64-high-word-abs-mask';\nimport getHighWord from '@stdlib/number-float64-base-get-high-word';\n\n\n// VARIABLES //\n\n// 0x3fefffff = 1072693247 => 0 01111111110 11111111111111111111 => biased exponent: 1022 = -1+1023 => 2^-1\nvar HIGH_MAX_NEAR_UNITY = 0x3fefffff|0; // asm type annotation\n\nvar HUGE = 1.0e300;\nvar TINY = 1.0e-300;\n\n\n// MAIN //\n\n/**\n* Evaluates the exponential function when \\\\(|y| > 2^64\\\\).\n*\n* @private\n* @param {number} x - base\n* @param {number} y - exponent\n* @returns {number} overflow or underflow result\n*\n* @example\n* var v = pow( 9.0, 3.6893488147419103e19 );\n* // returns Infinity\n*\n* @example\n* var v = pow( -3.14, -3.6893488147419103e19 );\n* // returns 0.0\n*/\nfunction pow( x, y ) {\n\tvar ahx;\n\tvar hx;\n\n\thx = getHighWord( x );\n\tahx = (hx & ABS_MASK);\n\n\tif ( ahx <= HIGH_MAX_NEAR_UNITY ) {\n\t\tif ( y < 0 ) {\n\t\t\t// Signal overflow...\n\t\t\treturn HUGE * HUGE;\n\t\t}\n\t\t// Signal underflow...\n\t\treturn TINY * TINY;\n\t}\n\t// `x` has a biased exponent greater than or equal to `0`...\n\n\tif ( y > 0 ) {\n\t\t// Signal overflow...\n\t\treturn HUGE * HUGE;\n\t}\n\t// Signal underflow...\n\treturn TINY * TINY;\n}\n\n\n// EXPORTS //\n\nexport default pow;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_pow.c}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setLowWord from '@stdlib/number-float64-base-set-low-word';\nimport polyvalW from './polyval_w.js';\n\n\n// VARIABLES //\n\n// 1/LN2\nvar INV_LN2 = 1.44269504088896338700e+00; // 0x3FF71547, 0x652B82FE\n\n// High (24 bits): 1/LN2\nvar INV_LN2_HI = 1.44269502162933349609e+00; // 0x3FF71547, 0x60000000\n\n// Low: 1/LN2\nvar INV_LN2_LO = 1.92596299112661746887e-08; // 0x3E54AE0B, 0xF85DDF44\n\n\n// MAIN //\n\n/**\n* Computes \\\\(\\operatorname{log}(x)\\\\) assuming \\\\(|1-x|\\\\) is small and using the approximation \\\\(x - x^2/2 + x^3/3 - x^4/4\\\\).\n*\n* @private\n* @param {Array} out - output array\n* @param {number} ax - absolute value of `x`\n* @returns {Array} output array containing a tuple comprised of high and low parts\n*\n* @example\n* var t = logx( [ 0.0, 0.0 ], 9.0 ); // => [ t1, t2 ]\n* // returns [ -1265.7236328125, -0.0008163940840404393 ]\n*/\nfunction logx( out, ax ) {\n\tvar t2;\n\tvar t1;\n\tvar t;\n\tvar w;\n\tvar u;\n\tvar v;\n\n\tt = ax - 1.0; // `t` has `20` trailing zeros\n\tw = t * t * polyvalW( t );\n\tu = INV_LN2_HI * t; // `INV_LN2_HI` has `21` significant bits\n\tv = ( t*INV_LN2_LO ) - ( w*INV_LN2 );\n\tt1 = u + v;\n\tt1 = setLowWord( t1, 0 );\n\tt2 = v - (t1 - u);\n\n\tout[ 0 ] = t1;\n\tout[ 1 ] = t2;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default logx;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.5;\n\t}\n\treturn 0.5 + (x * (-0.3333333333333333 + (x * 0.25)));\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.5999999999999946;\n\t}\n\treturn 0.5999999999999946 + (x * (0.4285714285785502 + (x * (0.33333332981837743 + (x * (0.272728123808534 + (x * (0.23066074577556175 + (x * 0.20697501780033842))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.16666666666666602;\n\t}\n\treturn 0.16666666666666602 + (x * (-0.0027777777777015593 + (x * (0.00006613756321437934 + (x * (-0.0000016533902205465252 + (x * 4.1381367970572385e-8))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport pow from '@stdlib/math-base-special-pow';\n\n\n// MAIN //\n\n/**\n* Returns the variance of an arcsine distribution.\n*\n* @param {number} a - minimum support\n* @param {number} b - maximum support\n* @returns {PositiveNumber} variance\n*\n* @example\n* var v = variance( 0.0, 1.0 );\n* // returns ~0.125\n*\n* @example\n* var v = variance( 4.0, 12.0 );\n* // returns 8.0\n*\n* @example\n* var v = variance( -4.0, 4.0 );\n* // returns 8.0\n*\n* @example\n* var v = variance( 1.0, -0.1 );\n* // returns NaN\n*\n* @example\n* var v = variance( 2.0, NaN );\n* // returns NaN\n*\n* @example\n* var v = variance( NaN, 2.0 );\n* // returns NaN\n*/\nfunction variance( a, b ) {\n\tif ( a >= b ) {\n\t\treturn NaN;\n\t}\n\treturn 0.125 * pow( b-a, 2.0 );\n}\n\n\n// EXPORTS //\n\nexport default variance;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Natural logarithm of the mathematical constant `π`.\n*\n* @module @stdlib/constants-float64-ln-pi\n* @type {number}\n*\n* @example\n* import LN_PI from '@stdlib/constants-float64-ln-pi';\n* // returns 1.1447298858494002\n*/\n\n\n// MAIN //\n\n/**\n* Natural logarithm of the mathematical constant `π`.\n*\n* @constant\n* @type {number}\n* @default 1.1447298858494002\n* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Pi}\n*/\nvar LN_PI = 1.1447298858494002;\n\n\n// EXPORTS //\n\nexport default LN_PI;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport asin from '@stdlib/math-base-special-asin';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport ln from '@stdlib/math-base-special-ln';\nimport LN_PI from '@stdlib/constants-float64-ln-pi';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport LN2 from '@stdlib/constants-float64-ln-two';\n\n\n// MAIN //\n\n/**\n* Evaluates the logarithm of the cumulative distribution function (CDF) for an arcsine distribution with minimum support `a` and maximum support `b` at a value `x`.\n*\n* @param {number} x - input value\n* @param {number} a - minimum support\n* @param {number} b - maximum support\n* @returns {number} evaluated logCDF\n*\n* @example\n* var y = logcdf( 9.0, 0.0, 10.0 );\n* // returns ~-0.23\n*\n* @example\n* var y = logcdf( 0.5, 0.0, 2.0 );\n* // returns ~-1.1\n*\n* @example\n* var y = logcdf( +Infinity, 2.0, 4.0 );\n* // returns 0.0\n*\n* @example\n* var y = logcdf( -Infinity, 2.0, 4.0 );\n* // returns -Infinity\n*\n* @example\n* var y = logcdf( NaN, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = logcdf( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = logcdf( 0.0, 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = logcdf( 2.0, 1.0, 0.0 );\n* // returns NaN\n*/\nfunction logcdf( x, a, b ) {\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\ta >= b\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x < a ) {\n\t\treturn NINF;\n\t}\n\tif ( x >= b ) {\n\t\treturn 0.0;\n\t}\n\treturn LN2 - LN_PI + ln( asin( sqrt( ( x-a ) / ( b-a ) ) ) );\n}\n\n\n// EXPORTS //\n\nexport default logcdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport ln from '@stdlib/math-base-special-ln';\nimport LN_PI from '@stdlib/constants-float64-ln-pi';\nimport NINF from '@stdlib/constants-float64-ninf';\n\n\n// MAIN //\n\n/**\n* Evaluates the logarithm of the probability density function (PDF) for an arcsine distribution with minimum support `a` and maximum support `b` at a value `x`.\n*\n* @param {number} x - input value\n* @param {number} a - minimum support\n* @param {number} b - maximum support\n* @returns {number} evaluated logPDF\n*\n* @example\n* var y = logpdf( 2.0, 0.0, 4.0 );\n* // returns ~-1.838\n*\n* @example\n* var y = logpdf( 5.0, 0.0, 4.0 );\n* // returns -Infinity\n*\n* @example\n* var y = logpdf( 0.25, 0.0, 1.0 );\n* // returns ~-0.308\n*\n* @example\n* var y = logpdf( NaN, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = logpdf( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = logpdf( 0.0, 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = logpdf( 2.0, 3.0, 1.0 );\n* // returns NaN\n*/\nfunction logpdf( x, a, b ) {\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\ta >= b\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x < a || x > b ) {\n\t\treturn NINF;\n\t}\n\treturn -( LN_PI + ( ln( ( x-a ) * ( b-x ) ) / 2.0 ) );\n}\n\n\n// EXPORTS //\n\nexport default logpdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport PI from '@stdlib/constants-float64-pi';\n\n\n// MAIN //\n\n/**\n* Evaluates the probability density function (PDF) for an arcsine distribution with minimum support `a` and maximum support `b` at a value `x`.\n*\n* @param {number} x - input value\n* @param {number} a - minimum support\n* @param {number} b - maximum support\n* @returns {number} evaluated PDF\n*\n* @example\n* var y = pdf( 2.0, 0.0, 4.0 );\n* // returns ~0.159\n*\n* @example\n* var y = pdf( 5.0, 0.0, 4.0 );\n* // returns 0.0\n*\n* @example\n* var y = pdf( 0.25, 0.0, 1.0 );\n* // returns ~0.735\n*\n* @example\n* var y = pdf( NaN, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = pdf( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = pdf( 0.0, 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = pdf( 2.0, 3.0, 1.0 );\n* // returns NaN\n*/\nfunction pdf( x, a, b ) {\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\ta >= b\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x < a || x > b ) {\n\t\treturn 0.0;\n\t}\n\treturn 1.0 / ( PI * sqrt( ( x-a ) * ( b-x ) ) );\n}\n\n\n// EXPORTS //\n\nexport default pdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_cos.c}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport polyval13 from './polyval_c13.js';\nimport polyval46 from './polyval_c46.js';\n\n\n// MAIN //\n\n/**\n* Computes the cosine on \\\\( \\[-\\pi/4, \\pi/4] \\\\), where \\\\( \\pi/4 \\approx 0.785398164 \\\\).\n*\n* ## Method\n*\n* -   Since \\\\( \\cos(-x) = \\cos(x) \\\\), we need only to consider positive \\\\(x\\\\).\n*\n* -   If \\\\( x < 2^{-27} \\\\), return \\\\(1\\\\) which is inexact if \\\\( x \\ne 0 \\\\).\n*\n* -   \\\\( cos(x) \\\\) is approximated by a polynomial of degree \\\\(14\\\\) on \\\\( \\[0,\\pi/4] \\\\).\n*\n*     ```tex\n*     \\cos(x) \\approx 1 - \\frac{x \\cdot x}{2} + C_1 \\cdot x^4 + \\ldots + C_6 \\cdot x^{14}\n*     ```\n*\n*     where the Remez error is\n*\n*     ```tex\n*     \\left| \\cos(x) - \\left( 1 - \\frac{x^2}{2} + C_1x^4 + C_2x^6 + C_3x^8 + C_4x^{10} + C_5x^{12} + C_6x^{15} \\right) \\right| \\le 2^{-58}\n*     ```\n*\n* -   Let \\\\( C_1x^4 + C_2x^6 + C_3x^8 + C_4x^{10} + C_5x^{12} + C_6x^{14} \\\\), then\n*\n*     ```tex\n*     \\cos(x) \\approx 1 - \\frac{x \\cdot x}{2} + r\n*     ```\n*\n*     Since\n*\n*     ```tex\n*     \\cos(x+y) \\approx \\cos(x) - \\sin(x) \\cdot y \\approx \\cos(x) - x \\cdot y\n*     ```\n*\n*     a correction term is necessary in \\\\( \\cos(x) \\\\). Hence,\n*\n*     ```tex\n*     \\cos(x+y) = 1 - \\left( \\frac{x \\cdot x}{2} - (r - x \\cdot y) \\right)\n*     ```\n*\n*     For better accuracy, rearrange to\n*\n*     ```tex\n*     \\cos(x+y) \\approx w + \\left( t + ( r - x \\cdot y ) \\right)\n*     ```\n*\n*     where \\\\( w = 1 - \\frac{x \\cdot x}{2} \\\\) and \\\\( t \\\\) is a tiny correction term (\\\\( 1 - \\frac{x \\cdot x}{2} = w + t \\\\) exactly in infinite precision). The exactness of \\\\(w + t\\\\) in infinite precision depends on \\\\(w\\\\) and \\\\(t\\\\) having the same precision as \\\\(x\\\\).\n*\n*\n* @param {number} x - input value (in radians, assumed to be bounded by ~pi/4 in magnitude)\n* @param {number} y - tail of `x`\n* @returns {number} cosine\n*\n* @example\n* var v = kernelCos( 0.0, 0.0 );\n* // returns ~1.0\n*\n* @example\n* var v = kernelCos( 3.141592653589793/6.0, 0.0 );\n* // returns ~0.866\n*\n* @example\n* var v = kernelCos( 0.785, -1.144e-17 );\n* // returns ~0.707\n*\n* @example\n* var v = kernelCos( NaN, 0.0 );\n* // returns NaN\n*/\nfunction kernelCos( x, y ) {\n\tvar hz;\n\tvar r;\n\tvar w;\n\tvar z;\n\n\tz = x * x;\n\tw = z * z;\n\tr = z * polyval13( z );\n\tr += w * w * polyval46( z );\n\thz = 0.5 * z;\n\tw = 1.0 - hz;\n\treturn w + ( ((1.0-w) - hz) + ((z*r) - (x*y)) );\n}\n\n\n// EXPORTS //\n\nexport default kernelCos;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.0416666666666666;\n\t}\n\treturn 0.0416666666666666 + (x * (-0.001388888888887411 + (x * 0.00002480158728947673))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn -2.7557314351390663e-7;\n\t}\n\treturn -2.7557314351390663e-7 + (x * (2.087572321298175e-9 + (x * -1.1359647557788195e-11))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Arcsine distribution logarithm of cumulative distribution function (CDF).\n*\n* @module @stdlib/stats-base-dists-arcsine-logcdf\n*\n* @example\n* import logcdf from '@stdlib/stats-base-dists-arcsine-logcdf';\n*\n* var y = logcdf( 5.0, 0.0, 4.0 );\n* // returns 0.0\n*\n* var mylogcdf = logcdf.factory( 0.0, 10.0 );\n* y = mylogcdf( 0.5 );\n* // returns ~-1.938\n*\n* y = mylogcdf( 8.0 );\n* // returns ~-0.35\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport logcdf from './logcdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( logcdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default logcdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport asin from '@stdlib/math-base-special-asin';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport ln from '@stdlib/math-base-special-ln';\nimport LN_PI from '@stdlib/constants-float64-ln-pi';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport LN2 from '@stdlib/constants-float64-ln-two';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the logarithm of the cumulative distribution function (CDF) for an arcsine distribution with minimum support `a` and maximum support `b`.\n*\n* @param {number} a - minimum support\n* @param {number} b - maximum support\n* @returns {Function} logCDF\n*\n* @example\n* var logcdf = factory( 0.0, 10.0 );\n* var y = logcdf( 0.5 );\n* // returns ~-1.941\n*\n* y = logcdf( 8.0 );\n* // returns ~-0.35\n*/\nfunction factory( a, b ) {\n\tif (\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\ta >= b\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn logcdf;\n\n\t/**\n\t* Evaluates the logarithm of the cumulative distribution function (CDF) for an arcsine distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {number} evaluated logCDF\n\t*\n\t* @example\n\t* var y = logcdf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction logcdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x < a ) {\n\t\t\treturn NINF;\n\t\t}\n\t\tif ( x >= b ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn LN2 - LN_PI + ln( asin( sqrt( ( x-a ) / ( b-a ) ) ) );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Arcsine distribution logarithm of probability density function (PDF).\n*\n* @module @stdlib/stats-base-dists-arcsine-logpdf\n*\n* @example\n* import logpdf from '@stdlib/stats-base-dists-arcsine-logpdf';\n*\n* var y = logpdf( 3.0, 2.0, 6.0 );\n* // returns ~-1.694\n*\n* var mylogPDF = logpdf.factory( 6.0, 7.0 );\n* y = mylogPDF( 7.0 );\n* // returns Infinity\n*\n* y = mylogPDF( 5.0 );\n* // returns -Infinity\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport logpdf from './logpdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( logpdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default logpdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport ln from '@stdlib/math-base-special-ln';\nimport LN_PI from '@stdlib/constants-float64-ln-pi';\nimport NINF from '@stdlib/constants-float64-ninf';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the logarithm of the probability density function (PDF) for an arcsine distribution with minimum support `a` and maximum support `b`.\n*\n* @param {number} a - minimum support\n* @param {number} b - maximum support\n* @returns {Function} logPDF\n*\n* @example\n* var logpdf = factory( 0.0, 10.0 );\n* var y = logpdf( 2.0 );\n* // returns ~-2.531\n*\n* y = logpdf( 12.0 );\n* // returns -Infinity\n*/\nfunction factory( a, b ) {\n\tif (\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\ta >= b\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn logpdf;\n\n\t/**\n\t* Evaluates the logarithm of the probability density function (PDF) for an arcsine distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {number} evaluated logPDF\n\t*\n\t* @example\n\t* var y = logpdf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction logpdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x < a || x > b ) {\n\t\t\treturn NINF;\n\t\t}\n\t\treturn -( LN_PI + ( ln( ( x-a ) * ( b-x ) ) / 2.0 ) );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Arcsine distribution probability density function (PDF).\n*\n* @module @stdlib/stats-base-dists-arcsine-pdf\n*\n* @example\n* import pdf from '@stdlib/stats-base-dists-arcsine-pdf';\n*\n* var y = pdf( 3.0, 2.0, 6.0 );\n* // returns ~0.184\n*\n* var myPDF = pdf.factory( 6.0, 7.0 );\n* y = myPDF( 7.0 );\n* // returns Infinity\n*\n* y = myPDF( 5.0 );\n* // returns 0.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport pdf from './pdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( pdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default pdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport PI from '@stdlib/constants-float64-pi';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the probability density function (PDF) for an arcsine distribution with minimum support `a` and maximum support `b`.\n*\n* @param {number} a - minimum support\n* @param {number} b - maximum support\n* @returns {Function} PDF\n*\n* @example\n* var pdf = factory( 0.0, 10.0 );\n* var y = pdf( 2.0 );\n* // returns ~0.08\n*\n* y = pdf( 12.0 );\n* // returns 0.0\n*/\nfunction factory( a, b ) {\n\tif (\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\ta >= b\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn pdf;\n\n\t/**\n\t* Evaluates the probability density function (PDF) for an arcsine distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {number} evaluated PDF\n\t*\n\t* @example\n\t* var y = pdf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction pdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x < a || x > b ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn 1.0 / ( PI * sqrt( ( x-a ) * ( b-x ) ) );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_sin.c}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar S1 = -1.66666666666666324348e-01; // 0xBFC55555, 0x55555549\nvar S2 = 8.33333333332248946124e-03;  // 0x3F811111, 0x1110F8A6\nvar S3 = -1.98412698298579493134e-04; // 0xBF2A01A0, 0x19C161D5\nvar S4 = 2.75573137070700676789e-06;  // 0x3EC71DE3, 0x57B1FE7D\nvar S5 = -2.50507602534068634195e-08; // 0xBE5AE5E6, 0x8A2B9CEB\nvar S6 = 1.58969099521155010221e-10;  // 0x3DE5D93A, 0x5ACFD57C\n\n\n// MAIN //\n\n/**\n* Computes the sine on \\\\( \\approx \\[-\\pi/4, \\pi/4] \\\\) (except on \\\\(-0\\\\)), where \\\\( \\pi/4 \\approx 0.7854 \\\\).\n*\n* ## Method\n*\n* -   Since \\\\( \\sin(-x) = -\\sin(x) \\\\), we need only to consider positive \\\\(x\\\\).\n*\n* -   Callers must return \\\\( \\sin(-0) = -0 \\\\) without calling here since our odd polynomial is not evaluated in a way that preserves \\\\(-0\\\\). Callers may do the optimization \\\\( \\sin(x) \\approx x \\\\) for tiny \\\\(x\\\\).\n*\n* -   \\\\( \\sin(x) \\\\) is approximated by a polynomial of degree \\\\(13\\\\) on \\\\( \\left\\[0,\\tfrac{pi}{4}\\right] \\\\)\n*\n*     ```tex\n*     \\sin(x) \\approx x + S_1 \\cdot x^3 + \\ldots + S_6 \\cdot x^{13}\n*     ```\n*\n*     where\n*\n*     ```tex\n*     \\left| \\frac{\\sin(x)}{x} \\left( 1 + S_1 \\cdot x + S_2 \\cdot x + S_3 \\cdot x + S_4 \\cdot x + S_5 \\cdot x + S_6 \\cdot x \\right) \\right| \\le 2^{-58}\n*     ```\n*\n* -   We have\n*\n*     ```tex\n*     \\sin(x+y) = \\sin(x) + \\sin'(x') \\cdot y \\approx \\sin(x) + (1-x*x/2) \\cdot y\n*     ```\n*\n*     For better accuracy, let\n*\n*     ```tex\n*     r = x^3 * \\left( S_2 + x^2 \\cdot \\left( S_3 + x^2 * \\left( S_4 + x^2 \\cdot ( S_5+x^2 \\cdot S_6 ) \\right) \\right) \\right)\n*     ```\n*\n*     then\n*\n*     ```tex\n*     \\sin(x) = x + \\left( S_1 \\cdot x + ( x \\cdot (r-y/2) + y ) \\right)\n*     ```\n*\n*\n* @param {number} x - input value (in radians, assumed to be bounded by `~pi/4` in magnitude)\n* @param {number} y - tail of `x`\n* @returns {number} sine\n*\n* @example\n* var v = kernelSin( 0.0, 0.0 );\n* // returns ~0.0\n*\n* @example\n* var v = kernelSin( 3.141592653589793/6.0, 0.0 );\n* // returns ~0.5\n*\n* @example\n* var v = kernelSin( 0.619, 9.279e-18 );\n* // returns ~0.58\n*\n* @example\n* var v = kernelSin( NaN, 0.0 );\n* // returns NaN\n*\n* @example\n* var v = kernelSin( 3.0, NaN );\n* // returns NaN\n*\n* @example\n* var v = kernelSin( NaN, NaN );\n* // returns NaN\n*/\nfunction kernelSin( x, y ) {\n\tvar r;\n\tvar v;\n\tvar w;\n\tvar z;\n\n\tz = x * x;\n\tw = z * z;\n\tr = S2 + (z * (S3 + (z*S4))) + (z * w * (S5 + (z*S6)));\n\tv = z * x;\n\tif ( y === 0.0 ) {\n\t\treturn x + (v * (S1 + (z*r)));\n\t}\n\treturn x - (((z*((0.5*y) - (v*r))) - y) - (v*S1));\n}\n\n\n// EXPORTS //\n\nexport default kernelSin;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isLittleEndian from '@stdlib/assert-is-little-endian';\n\n\n// MAIN //\n\nvar LOW;\nif ( isLittleEndian === true ) {\n\tLOW = 0; // first index\n} else {\n\tLOW = 1; // second index\n}\n\n\n// EXPORTS //\n\nexport default LOW;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Uint32Array from '@stdlib/array-uint32';\nimport Float64Array from '@stdlib/array-float64';\nimport LOW from './low.js';\n\n\n// VARIABLES //\n\nvar FLOAT64_VIEW = new Float64Array( 1 );\nvar UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );\n\n\n// MAIN //\n\n/**\n* Returns a 32-bit unsigned integer corresponding to the less significant 32 bits of a double-precision floating-point number.\n*\n* ## Notes\n*\n* ```text\n* float64 (64 bits)\n* f := fraction (significand/mantissa) (52 bits)\n* e := exponent (11 bits)\n* s := sign bit (1 bit)\n*\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |                                Float64                                |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |              Uint32               |               Uint32              |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* ```\n*\n* If little endian (more significant bits last):\n*\n* ```text\n*                         <-- lower      higher -->\n* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |\n* ```\n*\n* If big endian (more significant bits first):\n*\n* ```text\n*                         <-- higher      lower -->\n* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |\n* ```\n*\n* In which Uint32 can we find the lower order bits? If little endian, the first; if big endian, the second.\n*\n*\n* ## References\n*\n* -   [Open Group][1]\n*\n* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm\n*\n* @param {number} x - input value\n* @returns {uinteger32} lower order word\n*\n* @example\n* var w = getLowWord( 3.14e201 ); // => 10010011110010110101100010000010\n* // returns 2479577218\n*/\nfunction getLowWord( x ) {\n\tFLOAT64_VIEW[ 0 ] = x;\n\treturn UINT32_VIEW[ LOW ];\n}\n\n\n// EXPORTS //\n\nexport default getLowWord;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport filled from '@stdlib/array-base-filled';\n\n\n// MAIN //\n\n/**\n* Returns a zero-filled \"generic\" array.\n*\n* @param {NonNegativeInteger} len - array length\n* @returns {Array} output array\n*\n* @example\n* var out = zeros( 3 );\n* // returns [ 0.0, 0.0, 0.0 ]\n*/\nfunction zeros( len ) {\n\treturn filled( 0.0, len );\n}\n\n\n// EXPORTS //\n\nexport default zeros;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns a filled \"generic\" array.\n*\n* @param {*} value - fill value\n* @param {NonNegativeInteger} len - array length\n* @returns {Array} filled array\n*\n* @example\n* var out = filled( 0.0, 3 );\n* // returns [ 0.0, 0.0, 0.0 ]\n*\n* @example\n* var out = filled( 'beep', 3 );\n* // returns [ 'beep', 'beep', 'beep' ]\n*/\nfunction filled( value, len ) {\n\tvar arr;\n\tvar i;\n\n\t// Manually push elements in order to ensure \"fast\" elements...\n\tarr = [];\n\tfor ( i = 0; i < len; i++ ) {\n\t\tarr.push( value );\n\t}\n\treturn arr;\n}\n\n\n// EXPORTS //\n\nexport default filled;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_rem_pio2.c}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n/* eslint-disable array-element-newline */\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math-base-special-floor';\nimport ldexp from '@stdlib/math-base-special-ldexp';\nimport zeros from '@stdlib/array-base-zeros';\n\n\n// VARIABLES //\n\n/*\n* Table of constants for `2/π` (`396` hex digits, `476` decimal).\n*\n* Integer array which contains the (`24*i`)-th to (`24*i+23`)-th bit of `2/π` after binary point. The corresponding floating value is\n*\n* ```tex\n* \\operatorname{ipio2}[i] \\cdot 2^{-24(i+1)}\n* ```\n*\n* This table must have at least `(e0-3)/24 + jk` terms. For quad precision (`e0 <= 16360`, `jk = 6`), this is `686`.\n*/\nvar IPIO2 = [\n\t0xA2F983, 0x6E4E44, 0x1529FC, 0x2757D1, 0xF534DD, 0xC0DB62,\n\t0x95993C, 0x439041, 0xFE5163, 0xABDEBB, 0xC561B7, 0x246E3A,\n\t0x424DD2, 0xE00649, 0x2EEA09, 0xD1921C, 0xFE1DEB, 0x1CB129,\n\t0xA73EE8, 0x8235F5, 0x2EBB44, 0x84E99C, 0x7026B4, 0x5F7E41,\n\t0x3991D6, 0x398353, 0x39F49C, 0x845F8B, 0xBDF928, 0x3B1FF8,\n\t0x97FFDE, 0x05980F, 0xEF2F11, 0x8B5A0A, 0x6D1F6D, 0x367ECF,\n\t0x27CB09, 0xB74F46, 0x3F669E, 0x5FEA2D, 0x7527BA, 0xC7EBE5,\n\t0xF17B3D, 0x0739F7, 0x8A5292, 0xEA6BFB, 0x5FB11F, 0x8D5D08,\n\t0x560330, 0x46FC7B, 0x6BABF0, 0xCFBC20, 0x9AF436, 0x1DA9E3,\n\t0x91615E, 0xE61B08, 0x659985, 0x5F14A0, 0x68408D, 0xFFD880,\n\t0x4D7327, 0x310606, 0x1556CA, 0x73A8C9, 0x60E27B, 0xC08C6B\n];\n\n// Double precision array, obtained by cutting `π/2` into `24` bits chunks...\nvar PIO2 = [\n\t1.57079625129699707031e+00, // 0x3FF921FB, 0x40000000\n\t7.54978941586159635335e-08, // 0x3E74442D, 0x00000000\n\t5.39030252995776476554e-15, // 0x3CF84698, 0x80000000\n\t3.28200341580791294123e-22, // 0x3B78CC51, 0x60000000\n\t1.27065575308067607349e-29, // 0x39F01B83, 0x80000000\n\t1.22933308981111328932e-36, // 0x387A2520, 0x40000000\n\t2.73370053816464559624e-44, // 0x36E38222, 0x80000000\n\t2.16741683877804819444e-51  // 0x3569F31D, 0x00000000\n];\nvar TWO24 = 1.67772160000000000000e+07;  // 0x41700000, 0x00000000\nvar TWON24 = 5.96046447753906250000e-08; // 0x3E700000, 0x00000000\n\n// Arrays for storing temporary values (note that, in C, this is not thread safe):\nvar F = zeros( 20 );\nvar Q = zeros( 20 );\nvar FQ = zeros( 20 );\nvar IQ = zeros( 20 );\n\n\n// FUNCTIONS //\n\n/**\n* Performs the computation for `kernelRempio2()`.\n*\n* @private\n* @param {PositiveNumber} x - input value\n* @param {(Array|TypedArray|Object)} y - output object for storing double precision numbers\n* @param {integer} jz - number of terms of `ipio2[]` used\n* @param {Array<integer>} q - array with integral values, representing the 24-bits chunk of the product of `x` and `2/π`\n* @param {integer} q0 - the corresponding exponent of `q[0]` (the exponent for `q[i]` would be `q0-24*i`)\n* @param {integer} jk - `jk+1` is the initial number of terms of `IPIO2[]` needed in the computation\n* @param {integer} jv - index for pointing to the suitable `ipio2[]` for the computation\n* @param {integer} jx - `nx - 1`\n* @param {Array<number>} f - `IPIO2[]` in floating point\n* @returns {number} last three binary digits of `N`\n*/\nfunction compute( x, y, jz, q, q0, jk, jv, jx, f ) {\n\tvar carry;\n\tvar fw;\n\tvar ih;\n\tvar jp;\n\tvar i;\n\tvar k;\n\tvar n;\n\tvar j;\n\tvar z;\n\n\t// `jp+1` is the number of terms in `PIO2[]` needed:\n\tjp = jk;\n\n\t// Distill `q[]` into `IQ[]` in reverse order...\n\tz = q[ jz ];\n\tj = jz;\n\tfor ( i = 0; j > 0; i++ ) {\n\t\tfw = ( TWON24 * z )|0;\n\t\tIQ[ i ] = ( z - (TWO24*fw) )|0;\n\t\tz = q[ j-1 ] + fw;\n\t\tj -= 1;\n\t}\n\t// Compute `n`...\n\tz = ldexp( z, q0 );\n\tz -= 8.0 * floor( z*0.125 ); // Trim off integer >= 8\n\tn = z|0;\n\tz -= n;\n\tih = 0;\n\tif ( q0 > 0 ) {\n\t\t// Need `IQ[jz-1]` to determine `n`...\n\t\ti = ( IQ[ jz-1 ] >> (24-q0) );\n\t\tn += i;\n\t\tIQ[ jz-1 ] -= ( i << (24-q0) );\n\t\tih = ( IQ[ jz-1 ] >> (23-q0) );\n\t}\n\telse if ( q0 === 0 ) {\n\t\tih = ( IQ[ jz-1 ] >> 23 );\n\t}\n\telse if ( z >= 0.5 ) {\n\t\tih = 2;\n\t}\n\t// Case: q > 0.5\n\tif ( ih > 0 ) {\n\t\tn += 1;\n\t\tcarry = 0;\n\n\t\t// Compute `1-q`:\n\t\tfor ( i = 0; i < jz; i++ ) {\n\t\t\tj = IQ[ i ];\n\t\t\tif ( carry === 0 ) {\n\t\t\t\tif ( j !== 0 ) {\n\t\t\t\t\tcarry = 1;\n\t\t\t\t\tIQ[ i ] = 0x1000000 - j;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tIQ[ i ] = 0xffffff - j;\n\t\t\t}\n\t\t}\n\t\tif ( q0 > 0 ) {\n\t\t\t// Rare case: chance is 1 in 12...\n\t\t\tswitch ( q0 ) { // eslint-disable-line default-case\n\t\t\tcase 1:\n\t\t\t\tIQ[ jz-1 ] &= 0x7fffff;\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tIQ[ jz-1 ] &= 0x3fffff;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif ( ih === 2 ) {\n\t\t\tz = 1.0 - z;\n\t\t\tif ( carry !== 0 ) {\n\t\t\t\tz -= ldexp( 1.0, q0 );\n\t\t\t}\n\t\t}\n\t}\n\t// Check if re-computation is needed...\n\tif ( z === 0.0 ) {\n\t\tj = 0;\n\t\tfor ( i = jz-1; i >= jk; i-- ) {\n\t\t\tj |= IQ[ i ];\n\t\t}\n\t\tif ( j === 0 ) {\n\t\t\t// Need re-computation...\n\t\t\tfor ( k = 1; IQ[ jk-k ] === 0; k++ ) {\n\t\t\t\t// `k` is the number of terms needed...\n\t\t\t}\n\t\t\tfor ( i = jz+1; i <= jz+k; i++ ) {\n\t\t\t\t// Add `q[jz+1]` to `q[jz+k]`...\n\t\t\t\tf[ jx+i ] = IPIO2[ jv+i ];\n\t\t\t\tfw = 0.0;\n\t\t\t\tfor ( j = 0; j <= jx; j++ ) {\n\t\t\t\t\tfw += x[ j ] * f[ jx + (i-j) ];\n\t\t\t\t}\n\t\t\t\tq[ i ] = fw;\n\t\t\t}\n\t\t\tjz += k;\n\t\t\treturn compute( x, y, jz, q, q0, jk, jv, jx, f );\n\t\t}\n\t}\n\t// Chop off zero terms...\n\tif ( z === 0.0 ) {\n\t\tjz -= 1;\n\t\tq0 -= 24;\n\t\twhile ( IQ[ jz ] === 0 ) {\n\t\t\tjz -= 1;\n\t\t\tq0 -= 24;\n\t\t}\n\t} else {\n\t\t// Break `z` into 24-bit if necessary...\n\t\tz = ldexp( z, -q0 );\n\t\tif ( z >= TWO24 ) {\n\t\t\tfw = (TWON24*z)|0;\n\t\t\tIQ[ jz ] = ( z - (TWO24*fw) )|0;\n\t\t\tjz += 1;\n\t\t\tq0 += 24;\n\t\t\tIQ[ jz ] = fw;\n\t\t} else {\n\t\t\tIQ[ jz ] = z|0;\n\t\t}\n\t}\n\t// Convert integer \"bit\" chunk to floating-point value...\n\tfw = ldexp( 1.0, q0 );\n\tfor ( i = jz; i >= 0; i-- ) {\n\t\tq[ i ] = fw * IQ[i];\n\t\tfw *= TWON24;\n\t}\n\t// Compute `PIO2[0,...,jp]*q[jz,...,0]`...\n\tfor ( i = jz; i >= 0; i-- ) {\n\t\tfw = 0.0;\n\t\tfor ( k = 0; k <= jp && k <= jz-i; k++ ) {\n\t\t\tfw += PIO2[ k ] * q[ i+k ];\n\t\t}\n\t\tFQ[ jz-i ] = fw;\n\t}\n\t// Compress `FQ[]` into `y[]`...\n\tfw = 0.0;\n\tfor ( i = jz; i >= 0; i-- ) {\n\t\tfw += FQ[ i ];\n\t}\n\tif ( ih === 0 ) {\n\t\ty[ 0 ] = fw;\n\t} else {\n\t\ty[ 0 ] = -fw;\n\t}\n\tfw = FQ[ 0 ] - fw;\n\tfor ( i = 1; i <= jz; i++ ) {\n\t\tfw += FQ[i];\n\t}\n\tif ( ih === 0 ) {\n\t\ty[ 1 ] = fw;\n\t} else {\n\t\ty[ 1 ] = -fw;\n\t}\n\treturn ( n & 7 );\n}\n\n\n// MAIN //\n\n/**\n* Returns the last three binary digits of `N` with `y = x - Nπ/2` so that `|y| < π/2`.\n*\n* ## Method\n*\n* -   The method is to compute the integer (`mod 8`) and fraction parts of `2x/π` without doing the full multiplication. In general, we skip the part of the product that is known to be a huge integer (more accurately, equals `0 mod 8` ). Thus, the number of operations is independent of the exponent of the input.\n*\n* @private\n* @param {PositiveNumber} x - input value\n* @param {(Array|TypedArray|Object)} y - remainder elements\n* @param {PositiveInteger} e0 - the exponent of `x[0]` (must be <= 16360)\n* @param {PositiveInteger} nx - dimension of `x[]`\n* @returns {number} last three binary digits of `N`\n*/\nfunction kernelRempio2( x, y, e0, nx ) {\n\tvar fw;\n\tvar jk;\n\tvar jv;\n\tvar jx;\n\tvar jz;\n\tvar q0;\n\tvar i;\n\tvar j;\n\tvar m;\n\n\t// Initialize `jk` for double-precision floating-point numbers:\n\tjk = 4;\n\n\t// Determine `jx`, `jv`, `q0` (note that `q0 < 3`):\n\tjx = nx - 1;\n\tjv = ( (e0 - 3) / 24 )|0;\n\tif ( jv < 0 ) {\n\t\tjv = 0;\n\t}\n\tq0 = e0 - (24 * (jv + 1));\n\n\t// Set up `F[0]` to `F[jx+jk]` where `F[jx+jk] = IPIO2[jv+jk]`:\n\tj = jv - jx;\n\tm = jx + jk;\n\tfor ( i = 0; i <= m; i++ ) {\n\t\tif ( j < 0 ) {\n\t\t\tF[ i ] = 0.0;\n\t\t} else {\n\t\t\tF[ i ] = IPIO2[ j ];\n\t\t}\n\t\tj += 1;\n\t}\n\t// Compute `Q[0],Q[1],...,Q[jk]`:\n\tfor ( i = 0; i <= jk; i++ ) {\n\t\tfw = 0.0;\n\t\tfor ( j = 0; j <= jx; j++ ) {\n\t\t\tfw += x[ j ] * F[ jx + (i-j) ];\n\t\t}\n\t\tQ[ i ] = fw;\n\t}\n\tjz = jk;\n\treturn compute( x, y, jz, Q, q0, jk, jv, jx, F );\n}\n\n\n// EXPORTS //\n\nexport default kernelRempio2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// TODO: implementation\n\n/**\n* Rounds a numeric value to the nearest integer.\n*\n* @param {number} x - input value\n* @returns {number} function value\n*\n* @example\n* var v = round( -4.2 );\n* // returns -4.0\n*\n* @example\n* var v = round( -4.5 );\n* // returns -4.0\n*\n* @example\n* var v = round( -4.6 );\n* // returns -5.0\n*\n* @example\n* var v = round( 9.99999 );\n* // returns 10.0\n*\n* @example\n* var v = round( 9.5 );\n* // returns 10.0\n*\n* @example\n* var v = round( 9.2 );\n* // returns 9.0\n*\n* @example\n* var v = round( 0.0 );\n* // returns 0.0\n*\n* @example\n* var v = round( -0.0 );\n* // returns -0.0\n*\n* @example\n* var v = round( Infinity );\n* // returns Infinity\n*\n* @example\n* var v = round( -Infinity );\n* // returns -Infinity\n*\n* @example\n* var v = round( NaN );\n* // returns NaN\n*/\nvar round = Math.round; // eslint-disable-line stdlib/no-builtin-math\n\n\n// EXPORTS //\n\nexport default round;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_rem_pio2.c}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport round from '@stdlib/math-base-special-round';\nimport getHighWord from '@stdlib/number-float64-base-get-high-word';\n\n\n// VARIABLES //\n\n// 53 bits of 2/π:\nvar INVPIO2 = 6.36619772367581382433e-01; // 0x3FE45F30, 0x6DC9C883\n\n// First 33 bits of π/2:\nvar PIO2_1 = 1.57079632673412561417e+00;  // 0x3FF921FB, 0x54400000\n\n// PIO2_1T = π/2 - PIO2_1:\nvar PIO2_1T = 6.07710050650619224932e-11; // 0x3DD0B461, 0x1A626331\n\n// Another 33 bits of π/2:\nvar PIO2_2 = 6.07710050630396597660e-11;  // 0x3DD0B461, 0x1A600000\n\n// PIO2_2T = π/2 - ( PIO2_1 + PIO2_2 ):\nvar PIO2_2T = 2.02226624879595063154e-21; // 0x3BA3198A, 0x2E037073\n\n// Another 33 bits of π/2:\nvar PIO2_3 = 2.02226624871116645580e-21;  // 0x3BA3198A, 0x2E000000\n\n// PIO2_3T = π/2 - ( PIO2_1 + PIO2_2 + PIO2_3 ):\nvar PIO2_3T = 8.47842766036889956997e-32; // 0x397B839A, 0x252049C1\n\n// Exponent mask (2047 => 0x7ff):\nvar EXPONENT_MASK = 0x7ff|0; // asm type annotation\n\n\n// MAIN //\n\n/**\n* Computes `x - nπ/2 = r` for medium-sized inputs.\n*\n* @private\n* @param {number} x - input value\n* @param {uint32} ix - high word of `x`\n* @param {(Array|TypedArray|Object)} y - remainder elements\n* @returns {integer} factor of `π/2`\n*/\nfunction rempio2Medium( x, ix, y ) {\n\tvar high;\n\tvar n;\n\tvar t;\n\tvar r;\n\tvar w;\n\tvar i;\n\tvar j;\n\n\tn = round( x * INVPIO2 );\n\tr = x - ( n * PIO2_1 );\n\tw = n * PIO2_1T;\n\n\t// First rounding (good to 85 bits)...\n\tj = (ix >> 20)|0; // asm type annotation\n\ty[ 0 ] = r - w;\n\thigh = getHighWord( y[0] );\n\ti = j - ( (high >> 20) & EXPONENT_MASK );\n\n\t// Check if a second iteration is needed (good to 118 bits)...\n\tif ( i > 16 ) {\n\t\tt = r;\n\t\tw = n * PIO2_2;\n\t\tr = t - w;\n\t\tw = (n * PIO2_2T) - ((t-r) - w);\n\t\ty[ 0 ] = r - w;\n\t\thigh = getHighWord( y[0] );\n\t\ti = j - ( (high >> 20) & EXPONENT_MASK );\n\n\t\t// Check if a third iteration is needed (151 bits accumulated)...\n\t\tif ( i > 49 ) {\n\t\t\tt = r;\n\t\t\tw = n * PIO2_3;\n\t\t\tr = t - w;\n\t\t\tw = (n * PIO2_3T) - ((t-r) - w);\n\t\t\ty[ 0 ] = r - w;\n\t\t}\n\t}\n\ty[ 1 ] = (r - y[0]) - w;\n\treturn n;\n}\n\n\n// EXPORTS //\n\nexport default rempio2Medium;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/e_rem_pio2.c}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n*\n* Optimized by Bruce D. Evans.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport getHighWord from '@stdlib/number-float64-base-get-high-word';\nimport getLowWord from '@stdlib/number-float64-base-get-low-word';\nimport fromWords from '@stdlib/number-float64-base-from-words';\nimport rempio2Kernel from './kernel_rempio2.js';\nimport rempio2Medium from './rempio2_medium.js';\n\n\n// VARIABLES //\n\nvar ZERO = 0.00000000000000000000e+00;    // 0x00000000, 0x00000000\nvar TWO24 = 1.67772160000000000000e+07;   // 0x41700000, 0x00000000\n\n// 33 bits of π/2:\nvar PIO2_1 = 1.57079632673412561417e+00;  // 0x3FF921FB, 0x54400000\n\n// PIO2_1T = π/2 - PIO2_1:\nvar PIO2_1T = 6.07710050650619224932e-11; // 0x3DD0B461, 0x1A626331\nvar TWO_PIO2_1T = 2.0 * PIO2_1T;\nvar THREE_PIO2_1T = 3.0 * PIO2_1T;\nvar FOUR_PIO2_1T = 4.0 * PIO2_1T;\n\n// Absolute value mask: 0x7fffffff = 2147483647 => 01111111111111111111111111111111\nvar ABS_MASK = 0x7fffffff|0; // asm type annotation\n\n// Exponent mask: 0x7ff00000 = 2146435072 => 01111111111100000000000000000000\nvar EXPONENT_MASK = 0x7ff00000|0; // asm type annotation\n\n// High word significand mask: 0xfffff = 1048575 => 00000000000011111111111111111111\nvar SIGNIFICAND_MASK = 0xfffff|0; // asm type annotation\n\n// High word significand for π and π/2: 0x921fb = 598523 => 00000000000010010010000111111011\nvar PI_HIGH_WORD_SIGNIFICAND = 0x921fb|0; // asm type annotation\n\n// High word for π/4: 0x3fe921fb = 1072243195 => 00111111111010010010000111111011\nvar PIO4_HIGH_WORD = 0x3fe921fb|0; // asm type annotation\n\n// High word for 3π/4: 0x4002d97c = 1073928572 => 01000000000000101101100101111100\nvar THREE_PIO4_HIGH_WORD = 0x4002d97c|0; // asm type annotation\n\n// High word for 5π/4: 0x400f6a7a = 1074752122 => 01000000000011110110101001111010\nvar FIVE_PIO4_HIGH_WORD = 0x400f6a7a|0; // asm type annotation\n\n// High word for 6π/4: 0x4012d97c = 1074977148 => 01000000000100101101100101111100\nvar THREE_PIO2_HIGH_WORD = 0x4012d97c|0; // asm type annotation\n\n// High word for 7π/4: 0x4015fdbc = 1075183036 => 01000000000101011111110110111100\nvar SEVEN_PIO4_HIGH_WORD = 0x4015fdbc|0; // asm type annotation\n\n// High word for 8π/4: 0x401921fb = 1075388923 => 01000000000110010010000111111011\nvar TWO_PI_HIGH_WORD = 0x401921fb|0; // asm type annotation\n\n// High word for 9π/4: 0x401c463b = 1075594811 => 01000000000111000100011000111011\nvar NINE_PIO4_HIGH_WORD = 0x401c463b|0; // asm type annotation\n\n// 2^20*π/2 = 1647099.3291652855 => 0100000100111001001000011111101101010100010001000010110100011000 => high word => 0x413921fb = 1094263291 => 01000001001110010010000111111011\nvar MEDIUM = 0x413921fb|0; // asm type annotation\n\n// Arrays for storing temporary values:\nvar TX = [ 0.0, 0.0, 0.0 ]; // WARNING: not thread safe\nvar TY = [ 0.0, 0.0 ]; // WARNING: not thread safe\n\n\n// MAIN //\n\n/**\n* Computes `x - nπ/2 = r`.\n*\n* ## Notes\n*\n* -   Returns `n` and stores the remainder `r` as two numbers `y[0]` and `y[1]`, such that `y[0]+y[1] = r`.\n*\n*\n* @param {number} x - input value\n* @param {(Array|TypedArray|Object)} y - remainder elements\n* @returns {integer} factor of `π/2`\n*\n* @example\n* var y = [ 0.0, 0.0 ];\n* var n = rempio2( 128.0, y );\n* // returns 81\n*\n* var y1 = y[ 0 ];\n* // returns ~0.765\n*\n* var y2 = y[ 1 ];\n* // returns ~3.618e-17\n*\n* @example\n* var y = [ 0.0, 0.0 ];\n* var n = rempio2( NaN, y );\n* // returns 0\n*\n* var y1 = y[ 0 ];\n* // returns NaN\n*\n* var y2 = y[ 1 ];\n* // returns NaN\n*/\nfunction rempio2( x, y ) {\n\tvar low;\n\tvar e0;\n\tvar hx;\n\tvar ix;\n\tvar nx;\n\tvar i;\n\tvar n;\n\tvar z;\n\n\thx = getHighWord( x );\n\tix = (hx & ABS_MASK)|0; // asm type annotation\n\n\t// Case: |x| ~<= π/4 (no need for reduction)\n\tif ( ix <= PIO4_HIGH_WORD ) {\n\t\ty[ 0 ] = x;\n\t\ty[ 1 ] = 0.0;\n\t\treturn 0;\n\t}\n\t// Case: |x| ~<= 5π/4\n\tif ( ix <= FIVE_PIO4_HIGH_WORD ) {\n\t\t// Case: |x| ~= π/2 or π\n\t\tif ( (ix & SIGNIFICAND_MASK) === PI_HIGH_WORD_SIGNIFICAND ) {\n\t\t\t// Cancellation => use medium case\n\t\t\treturn rempio2Medium( x, ix, y );\n\t\t}\n\t\t// Case: |x| ~<= 3π/4\n\t\tif ( ix <= THREE_PIO4_HIGH_WORD ) {\n\t\t\tif ( x > 0.0 ) {\n\t\t\t\tz = x - PIO2_1;\n\t\t\t\ty[ 0 ] = z - PIO2_1T;\n\t\t\t\ty[ 1 ] = (z - y[0]) - PIO2_1T;\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\tz = x + PIO2_1;\n\t\t\ty[ 0 ] = z + PIO2_1T;\n\t\t\ty[ 1 ] = (z - y[0]) + PIO2_1T;\n\t\t\treturn -1;\n\t\t}\n\t\tif ( x > 0.0 ) {\n\t\t\tz = x - ( 2.0*PIO2_1 );\n\t\t\ty[ 0 ] = z - TWO_PIO2_1T;\n\t\t\ty[ 1 ] = (z - y[0]) - TWO_PIO2_1T;\n\t\t\treturn 2;\n\t\t}\n\t\tz = x + ( 2.0*PIO2_1 );\n\t\ty[ 0 ] = z + TWO_PIO2_1T;\n\t\ty[ 1 ] = (z - y[0]) + TWO_PIO2_1T;\n\t\treturn -2;\n\t}\n\t// Case: |x| ~<= 9π/4\n\tif ( ix <= NINE_PIO4_HIGH_WORD ) {\n\t\t// Case: |x| ~<= 7π/4\n\t\tif ( ix <= SEVEN_PIO4_HIGH_WORD ) {\n\t\t\t// Case: |x| ~= 3π/2\n\t\t\tif ( ix === THREE_PIO2_HIGH_WORD ) {\n\t\t\t\treturn rempio2Medium( x, ix, y );\n\t\t\t}\n\t\t\tif ( x > 0.0 ) {\n\t\t\t\tz = x - ( 3.0*PIO2_1 );\n\t\t\t\ty[ 0 ] = z - THREE_PIO2_1T;\n\t\t\t\ty[ 1 ] = (z - y[0]) - THREE_PIO2_1T;\n\t\t\t\treturn 3;\n\t\t\t}\n\t\t\tz = x + ( 3.0*PIO2_1 );\n\t\t\ty[ 0 ] = z + THREE_PIO2_1T;\n\t\t\ty[ 1 ] = (z - y[0]) + THREE_PIO2_1T;\n\t\t\treturn -3;\n\t\t}\n\t\t// Case: |x| ~= 4π/2\n\t\tif ( ix === TWO_PI_HIGH_WORD ) {\n\t\t\treturn rempio2Medium( x, ix, y );\n\t\t}\n\t\tif ( x > 0.0 ) {\n\t\t\tz = x - ( 4.0*PIO2_1 );\n\t\t\ty[ 0 ] = z - FOUR_PIO2_1T;\n\t\t\ty[ 1 ] = (z - y[0]) - FOUR_PIO2_1T;\n\t\t\treturn 4;\n\t\t}\n\t\tz = x + ( 4.0*PIO2_1 );\n\t\ty[ 0 ] = z + FOUR_PIO2_1T;\n\t\ty[ 1 ] = (z - y[0]) + FOUR_PIO2_1T;\n\t\treturn -4;\n\t}\n\t// Case: |x| ~< 2^20*π/2 (medium size)\n\tif ( ix < MEDIUM ) {\n\t\treturn rempio2Medium( x, ix, y );\n\t}\n\t// Case: x is NaN or infinity\n\tif ( ix >= EXPONENT_MASK ) {\n\t\ty[ 0 ] = NaN;\n\t\ty[ 1 ] = NaN;\n\t\treturn 0.0;\n\t}\n\t// Set z = scalbn(|x|, ilogb(x)-23)...\n\tlow = getLowWord( x );\n\te0 = (ix >> 20) - 1046; // `e0 = ilogb(z) - 23` => unbiased exponent minus 23\n\tz = fromWords( ix - ((e0 << 20)|0), low );\n\tfor ( i = 0; i < 2; i++ ) {\n\t\tTX[ i ] = z|0;\n\t\tz = (z - TX[i]) * TWO24;\n\t}\n\tTX[ 2 ] = z;\n\tnx = 3;\n\twhile ( TX[ nx-1 ] === ZERO ) {\n\t\t// Skip zero term...\n\t\tnx -= 1;\n\t}\n\tn = rempio2Kernel( TX, TY, e0, nx, 1 );\n\tif ( x < 0.0 ) {\n\t\ty[ 0 ] = -TY[ 0 ];\n\t\ty[ 1 ] = -TY[ 1 ];\n\t\treturn -n;\n\t}\n\ty[ 0 ] = TY[ 0 ];\n\ty[ 1 ] = TY[ 1 ];\n\treturn n;\n}\n\n\n// EXPORTS //\n\nexport default rempio2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_sin.c}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport getHighWord from '@stdlib/number-float64-base-get-high-word';\nimport kernelCos from '@stdlib/math-base-special-kernel-cos';\nimport kernelSin from '@stdlib/math-base-special-kernel-sin';\nimport rempio2 from '@stdlib/math-base-special-rempio2';\n\n\n// VARIABLES //\n\n// Absolute value mask: 0x7fffffff = 2147483647 => 01111111111111111111111111111111\nvar ABS_MASK = 0x7fffffff|0; // asm type annotation\n\n// Exponent mask: 0x7ff00000 = 2146435072 => 01111111111100000000000000000000\nvar EXPONENT_MASK = 0x7ff00000|0; // asm type annotation\n\n// High word for PI/4: 0x3fe921fb = 1072243195 => 00111111111010010010000111111011\nvar PIO4_HIGH_WORD = 0x3fe921fb|0; // asm type annotation\n\n// 2^-26 = 1.4901161193847656e-8 => 0011111001010000000000000000000000000000000000000000000000000000 => high word => 00111110010100000000000000000000 => 0x3e500000 = 1045430272\nvar SMALL_HIGH_WORD = 0x3e500000|0; // asm type annotation\n\n// Array for storing remainder elements:\nvar Y = [ 0.0, 0.0 ]; // WARNING: not thread safe\n\n\n// MAIN //\n\n/**\n* Computes the sine of a number.\n*\n* ## Method\n*\n* -   Let \\\\(S\\\\), \\\\(C\\\\), and \\\\(T\\\\) denote the \\\\(\\sin\\\\), \\\\(\\cos\\\\), and \\\\(\\tan\\\\), respectively, on \\\\(\\[-\\pi/4, +\\pi/4\\]\\\\).\n*\n* -   Reduce the argument \\\\(x\\\\) to \\\\(y1+y2 = x-k\\pi/2\\\\) in \\\\(\\[-\\pi/4, +\\pi/4\\]\\\\), and let \\\\(n = k \\mod 4\\\\).\n*\n* -   We have\n*\n*     | n | sin(x) | cos(x) | tan(x) |\n*     | - | ------ | ------ | ------ |\n*     | 0 |   S    |   C    |    T   |\n*     | 1 |   C    |  -S    |  -1/T  |\n*     | 2 |  -S    |  -C    |    T   |\n*     | 3 |  -C    |   S    |  -1/T  |\n*\n*\n* @param {number} x - input value (in radians)\n* @returns {number} sine\n*\n* @example\n* var v = sin( 0.0 );\n* // returns ~0.0\n*\n* @example\n* var v = sin( 3.141592653589793/2.0 );\n* // returns ~1.0\n*\n* @example\n* var v = sin( -3.141592653589793/6.0 );\n* // returns ~-0.5\n*\n* @example\n* var v = sin( NaN );\n* // returns NaN\n*/\nfunction sin( x ) {\n\tvar ix;\n\tvar n;\n\n\tix = getHighWord( x );\n\tix &= ABS_MASK;\n\n\t// Case: |x| ~< π/4\n\tif ( ix <= PIO4_HIGH_WORD ) {\n\t\t// Case: |x| ~< 2^-26\n\t\tif ( ix < SMALL_HIGH_WORD ) {\n\t\t\treturn x;\n\t\t}\n\t\treturn kernelSin( x, 0.0 );\n\t}\n\t// Case: x is NaN or infinity\n\tif ( ix >= EXPONENT_MASK ) {\n\t\treturn NaN;\n\t}\n\t// Argument reduction...\n\tn = rempio2( x, Y );\n\tswitch ( n & 3 ) {\n\tcase 0:\n\t\treturn kernelSin( Y[ 0 ], Y[ 1 ] );\n\tcase 1:\n\t\treturn kernelCos( Y[ 0 ], Y[ 1 ] );\n\tcase 2:\n\t\treturn -kernelSin( Y[ 0 ], Y[ 1 ] );\n\tdefault:\n\t\treturn -kernelCos( Y[ 0 ], Y[ 1 ] );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default sin;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* One half times the mathematical constant `π`.\n*\n* @module @stdlib/constants-float64-half-pi\n* @type {number}\n*\n* @example\n* import HALF_PI from '@stdlib/constants-float64-half-pi';\n* // returns 1.5707963267948966\n*/\n\n\n// MAIN //\n\n/**\n* One half times the mathematical constant `π`.\n*\n* @constant\n* @type {number}\n* @default 1.5707963267948966\n* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Pi}\n*/\nvar HALF_PI = 1.5707963267948966;\n\n\n// EXPORTS //\n\nexport default HALF_PI;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport pow from '@stdlib/math-base-special-pow';\nimport sin from '@stdlib/math-base-special-sin';\nimport HALF_PI from '@stdlib/constants-float64-half-pi';\n\n\n// MAIN //\n\n/**\n* Evaluates the quantile function for an arcsine distribution with minimum support `a` and maximum support `b` at a probability `p`.\n*\n* @param {Probability} p - input value\n* @param {number} a - minimum support\n* @param {number} b - maximum support\n* @returns {number} evaluated quantile function\n*\n* @example\n* var y = quantile( 0.8, 0.0, 1.0 );\n* // returns ~0.905\n*\n* @example\n* var y = quantile( 0.5, 0.0, 10.0 );\n* // returns ~5.0\n*\n* @example\n* var y = quantile( 1.1, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( -0.2, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( NaN, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.0, 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.5, 2.0, 1.0 );\n* // returns NaN\n*/\nfunction quantile( p, a, b ) {\n\tif (\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\ta >= b\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( isnan( p ) || p < 0.0 || p > 1.0 ) {\n\t\treturn NaN;\n\t}\n\treturn a + ( pow( sin( HALF_PI*p ), 2.0 ) * ( b-a ) );\n}\n\n\n// EXPORTS //\n\nexport default quantile;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Tests if a value is a number primitive.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a number primitive\n*\n* @example\n* var bool = isNumber( 3.14 );\n* // returns true\n*\n* @example\n* var bool = isNumber( NaN );\n* // returns true\n*\n* @example\n* var bool = isNumber( new Number( 3.14 ) );\n* // returns false\n*/\nfunction isNumber( value ) {\n\treturn ( typeof value === 'number' );  // NOTE: we inline the `isNumber.isPrimitive` function from `@stdlib/assert/is-number` in order to avoid circular dependencies.\n}\n\n\n// EXPORTS //\n\nexport default isNumber;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// FUNCTIONS //\n\n/**\n* Tests if a string starts with a minus sign (`-`).\n*\n* @private\n* @param {string} str - input string\n* @returns {boolean} boolean indicating if a string starts with a minus sign (`-`)\n*/\nfunction startsWithMinus( str ) {\n\treturn str[ 0 ] === '-';\n}\n\n/**\n* Returns a string of `n` zeros.\n*\n* @private\n* @param {number} n - number of zeros\n* @returns {string} string of zeros\n*/\nfunction zeros( n ) {\n\tvar out = '';\n\tvar i;\n\tfor ( i = 0; i < n; i++ ) {\n\t\tout += '0';\n\t}\n\treturn out;\n}\n\n\n// MAIN //\n\n/**\n* Pads a token with zeros to the specified width.\n*\n* @private\n* @param {string} str - token argument\n* @param {number} width - token width\n* @param {boolean} [right=false] - boolean indicating whether to pad to the right\n* @returns {string} padded token argument\n*/\nfunction zeroPad( str, width, right ) {\n\tvar negative = false;\n\tvar pad = width - str.length;\n\tif ( pad < 0 ) {\n\t\treturn str;\n\t}\n\tif ( startsWithMinus( str ) ) {\n\t\tnegative = true;\n\t\tstr = str.substr( 1 );\n\t}\n\tstr = ( right ) ?\n\t\tstr + zeros( pad ) :\n\t\tzeros( pad ) + str;\n\tif ( negative ) {\n\t\tstr = '-' + str;\n\t}\n\treturn str;\n}\n\n\n// EXPORTS //\n\nexport default zeroPad;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Arcsine distribution quantile function.\n*\n* @module @stdlib/stats-base-dists-arcsine-quantile\n*\n* @example\n* import quantile from '@stdlib/stats-base-dists-arcsine-quantile';\n*\n* var y = quantile( 0.5, 0.0, 10.0 );\n* // returns ~5.0\n*\n* var myQuantile = quantile.factory( 0.0, 4.0 );\n* y = myQuantile( 0.8 );\n* // returns ~3.618\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport quantile from './quantile.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( quantile, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default quantile;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport pow from '@stdlib/math-base-special-pow';\nimport sin from '@stdlib/math-base-special-sin';\nimport HALF_PI from '@stdlib/constants-float64-half-pi';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the quantile function for an arcsine distribution with minimum support `a` an maximum support `b`.\n*\n* @param {number} a - minimum support\n* @param {number} b - maximum support\n* @returns {Function} quantile function\n*\n* @example\n* var quantile = factory( 2.0, 4.0 );\n* var y = quantile( 0.4 );\n* // returns ~2.691\n*\n* y = quantile( 0.8 );\n* // returns ~3.809\n*/\nfunction factory( a, b ) {\n\tif (\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\ta >= b\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn quantile;\n\n\t/**\n\t* Evaluates the quantile function for an arcsine distribution.\n\t*\n\t* @private\n\t* @param {Probability} p - input value\n\t* @returns {number} evaluated quantile function\n\t*\n\t* @example\n\t* var y = quantile( 0.3 );\n\t* // returns <number>\n\t*/\n\tfunction quantile( p ) {\n\t\tif ( isnan( p ) || p < 0.0 || p > 1.0 ) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn a + ( pow( sin( HALF_PI*p ), 2.0 ) * ( b-a ) );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNumber from './is_number.js';\nimport zeroPad from './zero_pad.js';\n\n// NOTE: for the following, we explicitly avoid using stdlib packages in this particular package in order to avoid circular dependencies.\nvar lowercase = String.prototype.toLowerCase;\nvar uppercase = String.prototype.toUpperCase;\n\n\n// MAIN //\n\n/**\n* Formats a token object argument as an integer.\n*\n* @private\n* @param {Object} token - token object\n* @throws {Error} must provide a valid integer\n* @returns {string} formatted token argument\n*/\nfunction formatInteger( token ) {\n\tvar base;\n\tvar out;\n\tvar i;\n\n\tswitch ( token.specifier ) {\n\tcase 'b':\n\t\t// Case: %b (binary)\n\t\tbase = 2;\n\t\tbreak;\n\tcase 'o':\n\t\t// Case: %o (octal)\n\t\tbase = 8;\n\t\tbreak;\n\tcase 'x':\n\tcase 'X':\n\t\t// Case: %x, %X (hexadecimal)\n\t\tbase = 16;\n\t\tbreak;\n\tcase 'd':\n\tcase 'i':\n\tcase 'u':\n\tdefault:\n\t\t// Case: %d, %i, %u (decimal)\n\t\tbase = 10;\n\t\tbreak;\n\t}\n\tout = token.arg;\n\ti = parseInt( out, 10 );\n\tif ( !isFinite( i ) ) { // NOTE: We use the global `isFinite` function here instead of `@stdlib/math/base/assert/is-finite` in order to avoid circular dependencies.\n\t\tif ( !isNumber( out ) ) {\n\t\t\tthrow new Error( 'invalid integer. Value: ' + out );\n\t\t}\n\t\ti = 0;\n\t}\n\tif ( i < 0 && ( token.specifier === 'u' || base !== 10 ) ) {\n\t\ti = 0xffffffff + i + 1;\n\t}\n\tif ( i < 0 ) {\n\t\tout = ( -i ).toString( base );\n\t\tif ( token.precision ) {\n\t\t\tout = zeroPad( out, token.precision, token.padRight );\n\t\t}\n\t\tout = '-' + out;\n\t} else {\n\t\tout = i.toString( base );\n\t\tif ( !i && !token.precision ) {\n\t\t\tout = '';\n\t\t} else if ( token.precision ) {\n\t\t\tout = zeroPad( out, token.precision, token.padRight );\n\t\t}\n\t\tif ( token.sign ) {\n\t\t\tout = token.sign + out;\n\t\t}\n\t}\n\tif ( base === 16 ) {\n\t\tif ( token.alternate ) {\n\t\t\tout = '0x' + out;\n\t\t}\n\t\tout = ( token.specifier === uppercase.call( token.specifier ) ) ?\n\t\t\tuppercase.call( out ) :\n\t\t\tlowercase.call( out );\n\t}\n\tif ( base === 8 ) {\n\t\tif ( token.alternate && out.charAt( 0 ) !== '0' ) {\n\t\t\tout = '0' + out;\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default formatInteger;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Tests if a value is a string primitive.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a string primitive\n*\n* @example\n* var bool = isString( 'beep' );\n* // returns true\n*\n* @example\n* var bool = isString( new String( 'beep' ) );\n* // returns false\n*/\nfunction isString( value ) {\n\treturn ( typeof value === 'string' ); // NOTE: we inline the `isString.isPrimitive` function from `@stdlib/assert/is-string` in order to avoid circular dependencies.\n}\n\n\n// EXPORTS //\n\nexport default isString;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNumber from './is_number.js';\n\n// NOTE: for the following, we explicitly avoid using stdlib packages in this particular package in order to avoid circular dependencies.\nvar abs = Math.abs; // eslint-disable-line stdlib/no-builtin-math\nvar lowercase = String.prototype.toLowerCase;\nvar uppercase = String.prototype.toUpperCase;\nvar replace = String.prototype.replace;\n\n\n// VARIABLES //\n\nvar RE_EXP_POS_DIGITS = /e\\+(\\d)$/;\nvar RE_EXP_NEG_DIGITS = /e-(\\d)$/;\nvar RE_ONLY_DIGITS = /^(\\d+)$/;\nvar RE_DIGITS_BEFORE_EXP = /^(\\d+)e/;\nvar RE_TRAILING_PERIOD_ZERO = /\\.0$/;\nvar RE_PERIOD_ZERO_EXP = /\\.0*e/;\nvar RE_ZERO_BEFORE_EXP = /(\\..*[^0])0*e/;\n\n\n// MAIN //\n\n/**\n* Formats a token object argument as a floating-point number.\n*\n* @private\n* @param {Object} token - token object\n* @throws {Error} must provide a valid floating-point number\n* @returns {string} formatted token argument\n*/\nfunction formatDouble( token ) {\n\tvar digits;\n\tvar out;\n\tvar f = parseFloat( token.arg );\n\tif ( !isFinite( f ) ) { // NOTE: We use the global `isFinite` function here instead of `@stdlib/math/base/assert/is-finite` in order to avoid circular dependencies.\n\t\tif ( !isNumber( token.arg ) ) {\n\t\t\tthrow new Error( 'invalid floating-point number. Value: ' + out );\n\t\t}\n\t\t// Case: NaN, Infinity, or -Infinity\n\t\tf = token.arg;\n\t}\n\tswitch ( token.specifier ) {\n\tcase 'e':\n\tcase 'E':\n\t\tout = f.toExponential( token.precision );\n\t\tbreak;\n\tcase 'f':\n\tcase 'F':\n\t\tout = f.toFixed( token.precision );\n\t\tbreak;\n\tcase 'g':\n\tcase 'G':\n\t\tif ( abs( f ) < 0.0001 ) {\n\t\t\tdigits = token.precision;\n\t\t\tif ( digits > 0 ) {\n\t\t\t\tdigits -= 1;\n\t\t\t}\n\t\t\tout = f.toExponential( digits );\n\t\t} else {\n\t\t\tout = f.toPrecision( token.precision );\n\t\t}\n\t\tif ( !token.alternate ) {\n\t\t\tout = replace.call( out, RE_ZERO_BEFORE_EXP, '$1e' );\n\t\t\tout = replace.call( out, RE_PERIOD_ZERO_EXP, 'e');\n\t\t\tout = replace.call( out, RE_TRAILING_PERIOD_ZERO, '' );\n\t\t}\n\t\tbreak;\n\tdefault:\n\t\tthrow new Error( 'invalid double notation. Value: ' + token.specifier );\n\t}\n\tout = replace.call( out, RE_EXP_POS_DIGITS, 'e+0$1' );\n\tout = replace.call( out, RE_EXP_NEG_DIGITS, 'e-0$1' );\n\tif ( token.alternate ) {\n\t\tout = replace.call( out, RE_ONLY_DIGITS, '$1.' );\n\t\tout = replace.call( out, RE_DIGITS_BEFORE_EXP, '$1.e' );\n\t}\n\tif ( f >= 0 && token.sign ) {\n\t\tout = token.sign + out;\n\t}\n\tout = ( token.specifier === uppercase.call( token.specifier ) ) ?\n\t\tuppercase.call( out ) :\n\t\tlowercase.call( out );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default formatDouble;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// FUNCTIONS //\n\n/**\n* Returns `n` spaces.\n*\n* @private\n* @param {number} n - number of spaces\n* @returns {string} string of spaces\n*/\nfunction spaces( n ) {\n\tvar out = '';\n\tvar i;\n\tfor ( i = 0; i < n; i++ ) {\n\t\tout += ' ';\n\t}\n\treturn out;\n}\n\n\n// MAIN //\n\n/**\n* Pads a token with spaces to the specified width.\n*\n* @private\n* @param {string} str - token argument\n* @param {number} width - token width\n* @param {boolean} [right=false] - boolean indicating whether to pad to the right\n* @returns {string} padded token argument\n*/\nfunction spacePad( str, width, right ) {\n\tvar pad = width - str.length;\n\tif ( pad < 0 ) {\n\t\treturn str;\n\t}\n\tstr = ( right ) ?\n\t\tstr + spaces( pad ) :\n\t\tspaces( pad ) + str;\n\treturn str;\n}\n\n\n// EXPORTS //\n\nexport default spacePad;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport formatInteger from './format_integer.js';\nimport isString from './is_string.js';\nimport formatDouble from './format_double.js';\nimport spacePad from './space_pad.js';\nimport zeroPad from './zero_pad.js';\n\n\n// VARIABLES //\n\nvar fromCharCode = String.fromCharCode;\nvar isnan = isNaN; // NOTE: We use the global `isNaN` function here instead of `@stdlib/math/base/assert/is-nan` to avoid circular dependencies.\nvar isArray = Array.isArray; // NOTE: We use the global `Array.isArray` function here instead of `@stdlib/assert/is-array` to avoid circular dependencies.\n\n\n// FUNCTIONS //\n\n/**\n* Initializes token object with properties of supplied format identifier object or default values if not present.\n*\n* @private\n* @param {Object} token - format identifier object\n* @returns {Object} token object\n*/\nfunction initialize( token ) {\n\tvar out = {};\n\tout.specifier = token.specifier;\n\tout.precision = ( token.precision === void 0 ) ? 1 : token.precision;\n\tout.width = token.width;\n\tout.flags = token.flags || '';\n\tout.mapping = token.mapping;\n\treturn out;\n}\n\n\n// MAIN //\n\n/**\n* Generates string from a token array by interpolating values.\n*\n* @param {Array} tokens - string parts and format identifier objects\n* @param {Array} ...args - variable values\n* @throws {TypeError} first argument must be an array\n* @throws {Error} invalid flags\n* @returns {string} formatted string\n*\n* @example\n* var tokens = [ 'beep ', { 'specifier': 's' } ];\n* var out = formatInterpolate( tokens, 'boop' );\n* // returns 'beep boop'\n*/\nfunction formatInterpolate( tokens ) {\n\tvar hasPeriod;\n\tvar flags;\n\tvar token;\n\tvar flag;\n\tvar num;\n\tvar out;\n\tvar pos;\n\tvar i;\n\tvar j;\n\n\tif ( !isArray( tokens ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be an array. Value: `' + tokens + '`.' );\n\t}\n\tout = '';\n\tpos = 1;\n\tfor ( i = 0; i < tokens.length; i++ ) {\n\t\ttoken = tokens[ i ];\n\t\tif ( isString( token ) ) {\n\t\t\tout += token;\n\t\t} else {\n\t\t\thasPeriod = token.precision !== void 0;\n\t\t\ttoken = initialize( token );\n\t\t\tif ( !token.specifier ) {\n\t\t\t\tthrow new TypeError( 'invalid argument. Token is missing `specifier` property. Index: `'+ i +'`. Value: `' + token + '`.' );\n\t\t\t}\n\t\t\tif ( token.mapping ) {\n\t\t\t\tpos = token.mapping;\n\t\t\t}\n\t\t\tflags = token.flags;\n\t\t\tfor ( j = 0; j < flags.length; j++ ) {\n\t\t\t\tflag = flags.charAt( j );\n\t\t\t\tswitch ( flag ) {\n\t\t\t\tcase ' ':\n\t\t\t\t\ttoken.sign = ' ';\n\t\t\t\t\tbreak;\n\t\t\t\tcase '+':\n\t\t\t\t\ttoken.sign = '+';\n\t\t\t\t\tbreak;\n\t\t\t\tcase '-':\n\t\t\t\t\ttoken.padRight = true;\n\t\t\t\t\ttoken.padZeros = false;\n\t\t\t\t\tbreak;\n\t\t\t\tcase '0':\n\t\t\t\t\ttoken.padZeros = flags.indexOf( '-' ) < 0; // NOTE: We use built-in `Array.prototype.indexOf` here instead of `@stdlib/assert/contains` in order to avoid circular dependencies.\n\t\t\t\t\tbreak;\n\t\t\t\tcase '#':\n\t\t\t\t\ttoken.alternate = true;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error( 'invalid flag: ' + flag );\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( token.width === '*' ) {\n\t\t\t\ttoken.width = parseInt( arguments[ pos ], 10 );\n\t\t\t\tpos += 1;\n\t\t\t\tif ( isnan( token.width ) ) {\n\t\t\t\t\tthrow new TypeError( 'the argument for * width at position ' + pos + ' is not a number. Value: `' + token.width + '`.' );\n\t\t\t\t}\n\t\t\t\tif ( token.width < 0 ) {\n\t\t\t\t\ttoken.padRight = true;\n\t\t\t\t\ttoken.width = -token.width;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( hasPeriod ) {\n\t\t\t\tif ( token.precision === '*' ) {\n\t\t\t\t\ttoken.precision = parseInt( arguments[ pos ], 10 );\n\t\t\t\t\tpos += 1;\n\t\t\t\t\tif ( isnan( token.precision ) ) {\n\t\t\t\t\t\tthrow new TypeError( 'the argument for * precision at position ' + pos + ' is not a number. Value: `' + token.precision + '`.' );\n\t\t\t\t\t}\n\t\t\t\t\tif ( token.precision < 0 ) {\n\t\t\t\t\t\ttoken.precision = 1;\n\t\t\t\t\t\thasPeriod = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\ttoken.arg = arguments[ pos ];\n\t\t\tswitch ( token.specifier ) {\n\t\t\tcase 'b':\n\t\t\tcase 'o':\n\t\t\tcase 'x':\n\t\t\tcase 'X':\n\t\t\tcase 'd':\n\t\t\tcase 'i':\n\t\t\tcase 'u':\n\t\t\t\t// Case: %b (binary), %o (octal), %x, %X (hexadecimal), %d, %i (decimal), %u (unsigned decimal)\n\t\t\t\tif ( hasPeriod ) {\n\t\t\t\t\ttoken.padZeros = false;\n\t\t\t\t}\n\t\t\t\ttoken.arg = formatInteger( token );\n\t\t\t\tbreak;\n\t\t\tcase 's':\n\t\t\t\t// Case: %s (string)\n\t\t\t\ttoken.maxWidth = ( hasPeriod ) ? token.precision : -1;\n\t\t\t\tbreak;\n\t\t\tcase 'c':\n\t\t\t\t// Case: %c (character)\n\t\t\t\tif ( !isnan( token.arg ) ) {\n\t\t\t\t\tnum = parseInt( token.arg, 10 );\n\t\t\t\t\tif ( num < 0 || num > 127 ) {\n\t\t\t\t\t\tthrow new Error( 'invalid character code. Value: ' + token.arg );\n\t\t\t\t\t}\n\t\t\t\t\ttoken.arg = ( isnan( num ) ) ?\n\t\t\t\t\t\tString( token.arg ) :\n\t\t\t\t\t\tfromCharCode( num );\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'e':\n\t\t\tcase 'E':\n\t\t\tcase 'f':\n\t\t\tcase 'F':\n\t\t\tcase 'g':\n\t\t\tcase 'G':\n\t\t\t\t// Case: %e, %E (scientific notation), %f, %F (decimal floating point), %g, %G (uses the shorter of %e/E or %f/F)\n\t\t\t\tif ( !hasPeriod ) {\n\t\t\t\t\ttoken.precision = 6;\n\t\t\t\t}\n\t\t\t\ttoken.arg = formatDouble( token );\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error( 'invalid specifier: ' + token.specifier );\n\t\t\t}\n\t\t\t// Fit argument into field width...\n\t\t\tif ( token.maxWidth >= 0 && token.arg.length > token.maxWidth ) {\n\t\t\t\ttoken.arg = token.arg.substring( 0, token.maxWidth );\n\t\t\t}\n\t\t\tif ( token.padZeros ) {\n\t\t\t\ttoken.arg = zeroPad( token.arg, token.width || token.precision, token.padRight ); // eslint-disable-line max-len\n\t\t\t} else if ( token.width ) {\n\t\t\t\ttoken.arg = spacePad( token.arg, token.width, token.padRight );\n\t\t\t}\n\t\t\tout += token.arg || '';\n\t\t\tpos += 1;\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default formatInterpolate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar RE = /%(?:([1-9]\\d*)\\$)?([0 +\\-#]*)(\\*|\\d+)?(?:(\\.)(\\*|\\d+)?)?[hlL]?([%A-Za-z])/g;\n\n\n// FUNCTIONS //\n\n/**\n* Parses a delimiter.\n*\n* @private\n* @param {Array} match - regular expression match\n* @returns {Object} delimiter token object\n*/\nfunction parse( match ) {\n\tvar token = {\n\t\t'mapping': ( match[ 1 ] ) ? parseInt( match[ 1 ], 10 ) : void 0,\n\t\t'flags': match[ 2 ],\n\t\t'width': match[ 3 ],\n\t\t'precision': match[ 5 ],\n\t\t'specifier': match[ 6 ]\n\t};\n\tif ( match[ 4 ] === '.' && match[ 5 ] === void 0 ) {\n\t\ttoken.precision = '1';\n\t}\n\treturn token;\n}\n\n\n// MAIN //\n\n/**\n* Tokenizes a string into an array of string parts and format identifier objects.\n*\n* @param {string} str - input string\n* @returns {Array} tokens\n*\n* @example\n* var tokens = formatTokenize( 'Hello %s!' );\n* // returns [ 'Hello ', {...}, '!' ]\n*/\nfunction formatTokenize( str ) {\n\tvar content;\n\tvar tokens;\n\tvar match;\n\tvar prev;\n\n\ttokens = [];\n\tprev = 0;\n\tmatch = RE.exec( str );\n\twhile ( match ) {\n\t\tcontent = str.slice( prev, RE.lastIndex - match[ 0 ].length );\n\t\tif ( content.length ) {\n\t\t\ttokens.push( content );\n\t\t}\n\t\ttokens.push( parse( match ) );\n\t\tprev = RE.lastIndex;\n\t\tmatch = RE.exec( str );\n\t}\n\tcontent = str.slice( prev );\n\tif ( content.length ) {\n\t\ttokens.push( content );\n\t}\n\treturn tokens;\n}\n\n\n// EXPORTS //\n\nexport default formatTokenize;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Tests if a value is a string primitive.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a string primitive\n*\n* @example\n* var bool = isString( 'beep' );\n* // returns true\n*\n* @example\n* var bool = isString( new String( 'beep' ) );\n* // returns false\n*/\nfunction isString( value ) {\n\treturn ( typeof value === 'string' ); // NOTE: we inline the `isString.isPrimitive` function from `@stdlib/assert/is-string` in order to avoid circular dependencies.\n}\n\n\n// EXPORTS //\n\nexport default isString;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport interpolate from '@stdlib/string-base-format-interpolate';\nimport tokenize from '@stdlib/string-base-format-tokenize';\nimport isString from './is_string.js';\n\n\n// MAIN //\n\n/**\n* Inserts supplied variable values into a format string.\n*\n* @param {string} str - input string\n* @param {Array} ...args - variable values\n* @throws {TypeError} first argument must be a string\n* @throws {Error} invalid flags\n* @returns {string} formatted string\n*\n* @example\n* var str = format( 'Hello %s!', 'world' );\n* // returns 'Hello world!'\n*\n* @example\n* var str = format( 'Pi: ~%.2f', 3.141592653589793 );\n* // returns 'Pi: ~3.14'\n*/\nfunction format( str ) {\n\tvar tokens;\n\tvar args;\n\tvar i;\n\n\tif ( !isString( str ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a string. Value: `%s`.', str ) );\n\t}\n\ttokens = tokenize( str );\n\targs = new Array( arguments.length );\n\targs[ 0 ] = tokens;\n\tfor ( i = 1; i < args.length; i++ ) {\n\t\targs[ i ] = arguments[ i ];\n\t}\n\treturn interpolate.apply( null, args );\n}\n\n\n// EXPORTS //\n\nexport default format;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nimport defineProperty from '@stdlib/utils-define-property';\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport setReadOnlyAccessor from '@stdlib/utils-define-nonenumerable-read-only-accessor';\nimport { isPrimitive as isNumber } from '@stdlib/assert-is-number';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport entropy from '@stdlib/stats-base-dists-arcsine-entropy';\nimport kurtosis from '@stdlib/stats-base-dists-arcsine-kurtosis';\nimport mean from '@stdlib/stats-base-dists-arcsine-mean';\nimport median from '@stdlib/stats-base-dists-arcsine-median';\nimport mode from '@stdlib/stats-base-dists-arcsine-mode';\nimport skewness from '@stdlib/stats-base-dists-arcsine-skewness';\nimport stdev from '@stdlib/stats-base-dists-arcsine-stdev';\nimport variance from '@stdlib/stats-base-dists-arcsine-variance';\nimport cdf from '@stdlib/stats-base-dists-arcsine-cdf';\nimport logcdf from '@stdlib/stats-base-dists-arcsine-logcdf';\nimport logpdf from '@stdlib/stats-base-dists-arcsine-logpdf';\nimport pdf from '@stdlib/stats-base-dists-arcsine-pdf';\nimport quantile from '@stdlib/stats-base-dists-arcsine-quantile';\nimport format from '@stdlib/string-format';\n\n\n// FUNCTIONS //\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {Probability} evaluated CDF\n*/\nfunction arcsineCDF( x ) {\n\treturn cdf( x, this.a, this.b );\n}\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logCDF\n*/\nfunction arcsineLogCDF( x ) {\n\treturn logcdf( x, this.a, this.b );\n}\n\n/**\n* Evaluates the natural logarithm of the probability density function (logPDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n*/\nfunction arcsineLogPDF( x ) {\n\treturn logpdf( x, this.a, this.b );\n}\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n*/\nfunction arcsinePDF( x ) {\n\treturn pdf( x, this.a, this.b );\n}\n\n/**\n* Evaluates the quantile function.\n*\n* @private\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n*/\nfunction arcsineQuantile( p ) {\n\treturn quantile( p, this.a, this.b );\n}\n\n\n// MAIN //\n\n/**\n* Arcsine distribution constructor.\n*\n* @constructor\n* @param {number} [a=0.0] - minimum support\n* @param {number} [b=1.0] - maximum support\n* @throws {TypeError} `a` must be a number\n* @throws {TypeError} `b` must be a number\n* @throws {RangeError} `a` must be less than `b`\n* @returns {Arcsine} distribution instance\n*\n* @example\n* var arcsine = new Arcsine( 0.0, 1.0 );\n*\n* var y = arcsine.cdf( 0.8 );\n* // returns ~0.705\n*\n* var mu = arcsine.mean;\n* // returns 0.5\n*/\nfunction Arcsine() {\n\tvar a;\n\tvar b;\n\tif ( !(this instanceof Arcsine) ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn new Arcsine();\n\t\t}\n\t\treturn new Arcsine( arguments[ 0 ], arguments[ 1 ] );\n\t}\n\tif ( arguments.length ) {\n\t\ta = arguments[ 0 ];\n\t\tb = arguments[ 1 ];\n\t\tif ( !isNumber( a ) || isnan( a ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Minimum support must be a number. Value: `%s`.', a ) );\n\t\t}\n\t\tif ( !isNumber( b ) || isnan( b ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Maximum support must be a number. Value: `%s`.', b ) );\n\t\t}\n\t\tif ( a >= b ) {\n\t\t\tthrow new RangeError( format( 'invalid arguments. Minimum support must be less than maximum support. Value: `(%f, %f)`.', a, b ) );\n\t\t}\n\t} else {\n\t\ta = 0.0;\n\t\tb = 1.0;\n\t}\n\tdefineProperty( this, 'a', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn a;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isNumber( value ) || isnan( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid assignment. Must be a number. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\tif ( value >= b ) {\n\t\t\t\tthrow new RangeError( format( 'invalid assignment. Must be less than %f. Value: `%f`.', b, value ) );\n\t\t\t}\n\t\t\ta = value;\n\t\t}\n\t});\n\tdefineProperty( this, 'b', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn b;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isNumber( value ) || isnan( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid assignment. Must be a number. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\tif ( value <= a ) {\n\t\t\t\tthrow new RangeError( format( 'invalid assignment. Must be greater than %f. Value: `%f`.', a, value ) );\n\t\t\t}\n\t\t\tb = value;\n\t\t}\n\t});\n\treturn this;\n}\n\n/**\n* Arcsine distribution differential entropy.\n*\n* @name entropy\n* @memberof Arcsine.prototype\n* @type {number}\n* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}\n*\n* @example\n* var arcsine = new Arcsine( 4.0, 12.0 );\n*\n* var v = arcsine.entropy;\n* // returns ~1.838\n*/\nsetReadOnlyAccessor( Arcsine.prototype, 'entropy', function get() {\n\treturn entropy( this.a, this.b );\n});\n\n/**\n* Arcsine distribution excess kurtosis.\n*\n* @name kurtosis\n* @memberof Arcsine.prototype\n* @type {number}\n* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}\n*\n* @example\n* var arcsine = new Arcsine( 4.0, 12.0 );\n*\n* var v = arcsine.kurtosis;\n* // returns -1.5\n*/\nsetReadOnlyAccessor( Arcsine.prototype, 'kurtosis', function get() {\n\treturn kurtosis( this.a, this.b );\n});\n\n/**\n* Arcsine distribution expected value.\n*\n* @name mean\n* @memberof Arcsine.prototype\n* @type {number}\n* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}\n*\n* @example\n* var arcsine = new Arcsine( 4.0, 12.0 );\n*\n* var v = arcsine.mean;\n* // returns 8.0\n*/\nsetReadOnlyAccessor( Arcsine.prototype, 'mean', function get() {\n\treturn mean( this.a, this.b );\n});\n\n/**\n* Arcsine distribution median.\n*\n* @name median\n* @memberof Arcsine.prototype\n* @type {number}\n* @see [median]{@link https://en.wikipedia.org/wiki/Median}\n*\n* @example\n* var arcsine = new Arcsine( 4.0, 12.0 );\n*\n* var v = arcsine.median;\n* // returns 8.0\n*/\nsetReadOnlyAccessor( Arcsine.prototype, 'median', function get() {\n\treturn median( this.a, this.b );\n});\n\n/**\n* Arcsine distribution mode.\n*\n* @name mode\n* @memberof Arcsine.prototype\n* @type {number}\n* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}\n*\n* @example\n* var arcsine = new Arcsine( 4.0, 12.0 );\n*\n* var v = arcsine.mode;\n* // returns 4.0\n*/\nsetReadOnlyAccessor( Arcsine.prototype, 'mode', function get() {\n\treturn mode( this.a, this.b );\n});\n\n/**\n* Arcsine distribution skewness.\n*\n* @name skewness\n* @memberof Arcsine.prototype\n* @type {number}\n* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}\n*\n* @example\n* var arcsine = new Arcsine( 4.0, 12.0 );\n*\n* var v = arcsine.skewness;\n* // returns 0.0\n*/\nsetReadOnlyAccessor( Arcsine.prototype, 'skewness', function get() {\n\treturn skewness( this.a, this.b );\n});\n\n/**\n* Arcsine distribution standard deviation.\n*\n* @name stdev\n* @memberof Arcsine.prototype\n* @type {number}\n* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}\n*\n* @example\n* var arcsine = new Arcsine( 4.0, 12.0 );\n*\n* var v = arcsine.stdev;\n* // returns ~2.828\n*/\nsetReadOnlyAccessor( Arcsine.prototype, 'stdev', function get() {\n\treturn stdev( this.a, this.b );\n});\n\n/**\n* Arcsine distribution variance.\n*\n* @name variance\n* @memberof Arcsine.prototype\n* @type {number}\n* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}\n*\n* @example\n* var arcsine = new Arcsine( 4.0, 12.0 );\n*\n* var v = arcsine.variance;\n* // returns 8.0\n*/\nsetReadOnlyAccessor( Arcsine.prototype, 'variance', function get() {\n\treturn variance( this.a, this.b );\n});\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @name cdf\n* @memberof Arcsine.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var arcsine = new Arcsine( 2.0, 4.0 );\n*\n* var v = arcsine.cdf( 3.0 );\n* // returns ~0.5\n*/\nsetReadOnly( Arcsine.prototype, 'cdf', arcsineCDF );\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (CDF).\n*\n* @name logcdf\n* @memberof Arcsine.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logCDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var arcsine = new Arcsine( 2.0, 4.0 );\n*\n* var v = arcsine.logcdf( 3.0 );\n* // returns ~-0.693\n*/\nsetReadOnly( Arcsine.prototype, 'logcdf', arcsineLogCDF );\n\n/**\n* Evaluates the natural logarithm of the probability density function (logPDF).\n*\n* @name logpdf\n* @memberof Arcsine.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var arcsine = new Arcsine( 2.0, 4.0 );\n*\n* var v = arcsine.logpdf( 2.5 );\n* // returns ~-1.0\n*/\nsetReadOnly( Arcsine.prototype, 'logpdf', arcsineLogPDF );\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @name pdf\n* @memberof Arcsine.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var arcsine = new Arcsine( 2.0, 4.0 );\n*\n* var v = arcsine.pdf( 2.4 );\n* // returns ~0.398\n*/\nsetReadOnly( Arcsine.prototype, 'pdf', arcsinePDF );\n\n/**\n* Evaluates the quantile function.\n*\n* @name quantile\n* @memberof Arcsine.prototype\n* @type {Function}\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}\n*\n* @example\n* var arcsine = new Arcsine( 2.0, 4.0 );\n*\n* var v = arcsine.quantile( 0.5 );\n* // returns 3.0\n*/\nsetReadOnly( Arcsine.prototype, 'quantile', arcsineQuantile );\n\n\n// EXPORTS //\n\nexport default Arcsine;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace arcsine\n*/\nvar arcsine = {};\n\n/**\n* @name cdf\n* @memberof arcsine\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/arcsine/cdf}\n*/\nimport cdf from '@stdlib/stats-base-dists-arcsine-cdf';\nsetReadOnly( arcsine, 'cdf', cdf );\n\n/**\n* @name Arcsine\n* @memberof arcsine\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/arcsine/ctor}\n*/\nimport Arcsine from '@stdlib/stats-base-dists-arcsine-ctor';\nsetReadOnly( arcsine, 'Arcsine', Arcsine );\n\n/**\n* @name entropy\n* @memberof arcsine\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/arcsine/entropy}\n*/\nimport entropy from '@stdlib/stats-base-dists-arcsine-entropy';\nsetReadOnly( arcsine, 'entropy', entropy );\n\n/**\n* @name kurtosis\n* @memberof arcsine\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/arcsine/kurtosis}\n*/\nimport kurtosis from '@stdlib/stats-base-dists-arcsine-kurtosis';\nsetReadOnly( arcsine, 'kurtosis', kurtosis );\n\n/**\n* @name logcdf\n* @memberof arcsine\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/arcsine/logcdf}\n*/\nimport logcdf from '@stdlib/stats-base-dists-arcsine-logcdf';\nsetReadOnly( arcsine, 'logcdf', logcdf );\n\n/**\n* @name logpdf\n* @memberof arcsine\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/arcsine/logpdf}\n*/\nimport logpdf from '@stdlib/stats-base-dists-arcsine-logpdf';\nsetReadOnly( arcsine, 'logpdf', logpdf );\n\n/**\n* @name mean\n* @memberof arcsine\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/arcsine/mean}\n*/\nimport mean from '@stdlib/stats-base-dists-arcsine-mean';\nsetReadOnly( arcsine, 'mean', mean );\n\n/**\n* @name median\n* @memberof arcsine\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/arcsine/median}\n*/\nimport median from '@stdlib/stats-base-dists-arcsine-median';\nsetReadOnly( arcsine, 'median', median );\n\n/**\n* @name mode\n* @memberof arcsine\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/arcsine/mode}\n*/\nimport mode from '@stdlib/stats-base-dists-arcsine-mode';\nsetReadOnly( arcsine, 'mode', mode );\n\n/**\n* @name pdf\n* @memberof arcsine\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/arcsine/pdf}\n*/\nimport pdf from '@stdlib/stats-base-dists-arcsine-pdf';\nsetReadOnly( arcsine, 'pdf', pdf );\n\n/**\n* @name quantile\n* @memberof arcsine\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/arcsine/quantile}\n*/\nimport quantile from '@stdlib/stats-base-dists-arcsine-quantile';\nsetReadOnly( arcsine, 'quantile', quantile );\n\n/**\n* @name skewness\n* @memberof arcsine\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/arcsine/skewness}\n*/\nimport skewness from '@stdlib/stats-base-dists-arcsine-skewness';\nsetReadOnly( arcsine, 'skewness', skewness );\n\n/**\n* @name stdev\n* @memberof arcsine\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/arcsine/stdev}\n*/\nimport stdev from '@stdlib/stats-base-dists-arcsine-stdev';\nsetReadOnly( arcsine, 'stdev', stdev );\n\n/**\n* @name variance\n* @memberof arcsine\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/arcsine/variance}\n*/\nimport variance from '@stdlib/stats-base-dists-arcsine-variance';\nsetReadOnly( arcsine, 'variance', variance );\n\n\n// EXPORTS //\n\nexport default arcsine;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Evaluates the cumulative distribution function (CDF) for a Bernoulli distribution with success probability `p` at a value `x`.\n*\n* @param {number} x - input value\n* @param {Probability} p - success probability\n* @returns {Probability} evaluated CDF\n*\n* @example\n* var y = cdf( 0.5, 0.5 );\n* // returns 0.5\n*\n* @example\n* var y = cdf( 2.0, 0.1 );\n* // returns 1.0\n*\n* @example\n* var y = cdf( -1.0, 0.3 );\n* // returns 0.0\n*\n* @example\n* var y = cdf( NaN, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* // Invalid probability\n* var y = cdf( 0.5, 1.4 );\n* // returns NaN\n*/\nfunction cdf( x, p ) {\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( p ) ||\n\t\tp < 0.0 ||\n\t\tp > 1.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x < 0.0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( x >= 1.0 ) {\n\t\treturn 1.0;\n\t}\n\treturn 1.0 - p;\n}\n\n\n// EXPORTS //\n\nexport default cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isNumber } from '@stdlib/assert-is-number';\n\n\n// MAIN //\n\n/**\n* Tests if a value is a number primitive having a value which is a probability.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a number primitive having a value which is a probability\n*\n* @example\n* var bool = isProbability( 0.66 );\n* // returns true\n*\n* @example\n* var bool = isProbability( new Number( 0.66 ) );\n* // returns false\n*/\nfunction isProbability( value ) {\n\treturn (\n\t\tisNumber( value ) &&\n\t\tvalue >= 0.0 &&\n\t\tvalue <= 1.0\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isProbability;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isObject as isNumber } from '@stdlib/assert-is-number';\n\n\n// MAIN //\n\n/**\n* Tests if a value is a number object having a value which is a probability.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a number object having a value which is a probability\n*\n* @example\n* var bool = isProbability( 0.5 );\n* // returns false\n*\n* @example\n* var bool = isProbability( new Number( 0.5 ) );\n* // returns true\n*/\nfunction isProbability( value ) {\n\treturn (\n\t\tisNumber( value ) &&\n\t\tvalue.valueOf() >= 0.0 &&\n\t\tvalue.valueOf() <= 1.0\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isProbability;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPrimitive from './primitive.js';\nimport isObject from './object.js';\n\n\n// MAIN //\n\n/**\n* Tests if a value is a probability.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is a probability\n*\n* @example\n* var bool = isProbability( 0.5 );\n* // returns true\n*\n* @example\n* var bool = isProbability( new Number( 0.5 ) );\n* // returns true\n*\n* @example\n* var bool = isProbability( 3.14 );\n* // returns false\n*\n* @example\n* var bool = isProbability( -5.0 );\n* // returns false\n*\n* @example\n* var bool = isProbability( null );\n* // returns false\n*/\nfunction isProbability( value ) {\n\treturn ( isPrimitive( value ) || isObject( value ) );\n}\n\n\n// EXPORTS //\n\nexport default isProbability;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport ln from '@stdlib/math-base-special-ln';\n\n\n// MAIN //\n\n/**\n* Returns the entropy of a Bernoulli distribution.\n*\n* @param {Probability} p - success probability\n* @returns {PositiveNumber} entropy\n*\n* @example\n* var v = entropy( 0.1 );\n* // returns ~0.325\n*\n* @example\n* var v = entropy( 0.5 );\n* // returns ~0.693\n*\n* @example\n* var v = entropy( 0.9 );\n* // returns ~0.325\n*\n* @example\n* var v = entropy( 1.1 );\n* // returns NaN\n*\n* @example\n* var v = entropy( NaN );\n* // returns NaN\n*/\nfunction entropy( p ) {\n\tvar q;\n\tif (\n\t\tisnan( p ) ||\n\t\tp < 0.0 ||\n\t\tp > 1.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( p === 0.0 || p === 1.0 ) {\n\t\treturn 0.0;\n\t}\n\tq = 1.0 - p;\n\treturn ( -q * ln( q ) ) - ( p * ln( p ) );\n}\n\n\n// EXPORTS //\n\nexport default entropy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns the excess kurtosis of a Bernoulli distribution.\n*\n* @param {Probability} p - success probability\n* @returns {PositiveNumber} kurtosis\n*\n* @example\n* var v = kurtosis( 0.1 );\n* // returns ~5.111\n*\n* @example\n* var v = kurtosis( 0.5 );\n* // returns -2.0\n*\n* @example\n* var v = kurtosis( 1.1 );\n* // returns NaN\n*\n* @example\n* var v = kurtosis( NaN );\n* // returns NaN\n*/\nfunction kurtosis( p ) {\n\tvar pq;\n\tif (\n\t\tisnan( p ) ||\n\t\tp < 0.0 ||\n\t\tp > 1.0\n\t) {\n\t\treturn NaN;\n\t}\n\tpq = p * ( 1.0 - p );\n\treturn ( 1.0/pq ) - 6.0;\n}\n\n\n// EXPORTS //\n\nexport default kurtosis;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns the expected value of a Bernoulli distribution.\n*\n* @param {Probability} p - success probability\n* @returns {NonNegativeNumber} expected value\n*\n* @example\n* var v = mean( 0.1 );\n* // returns 0.1\n*\n* @example\n* var v = mean( 0.5 );\n* // returns 0.5\n*\n* @example\n* var v = mean( 1.1 );\n* // returns NaN\n*\n* @example\n* var v = mean( NaN );\n* // returns NaN\n*/\nfunction mean( p ) {\n\tif (\n\t\tisnan( p ) ||\n\t\tp < 0.0 ||\n\t\tp > 1.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn p;\n}\n\n\n// EXPORTS //\n\nexport default mean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns the mode of a Bernoulli distribution.\n*\n* ## Notes\n*\n* -   For `p = 0.5`, the mode is either `0` or `1`. This implementation returns `0` for `p = 0.5`.\n*\n* @param {Probability} p - success probability\n* @returns {NonNegativeInteger} mode\n*\n* @example\n* var v = mode( 0.1 );\n* // returns 0\n*\n* @example\n* var v = mode( 0.8 );\n* // returns 1\n*\n* @example\n* var v = mode( 0.5 );\n* // returns 0\n*\n* @example\n* var v = mode( 1.1 );\n* // returns NaN\n*\n* @example\n* var v = mode( NaN );\n* // returns NaN\n*/\nfunction mode( p ) {\n\tif (\n\t\tisnan( p ) ||\n\t\tp < 0.0 ||\n\t\tp > 1.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn ( p <= 0.5 ) ? 0 : 1;\n}\n\n\n// EXPORTS //\n\nexport default mode;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns the median of a Bernoulli distribution.\n*\n* @param {Probability} p - success probability\n* @returns {NonNegativeInteger} median\n*\n* @example\n* var v = median( 0.1 );\n* // returns 0\n*\n* @example\n* var v = median( 0.8 );\n* // returns 1\n*\n* @example\n* var v = median( 1.1 );\n* // returns NaN\n*\n* @example\n* var v = median( NaN );\n* // returns NaN\n*/\nfunction median( p ) {\n\tif (\n\t\tisnan( p ) ||\n\t\tp < 0.0 ||\n\t\tp > 1.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn ( p <= 0.5 ) ? 0 : 1;\n}\n\n\n// EXPORTS //\n\nexport default median;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport NINF from '@stdlib/constants-float64-ninf';\n\n\n// MAIN //\n\n/**\n* Returns the skewness of a Bernoulli distribution.\n*\n* @param {Probability} p - success probability\n* @returns {PositiveNumber} skewness\n*\n* @example\n* var v = skewness( 0.1 );\n* // returns ~2.667\n*\n* @example\n* var v = skewness( 0.5 );\n* // returns 0.0\n*\n* @example\n* var v = skewness( 1.1 );\n* // returns NaN\n*\n* @example\n* var v = skewness( NaN );\n* // returns NaN\n*/\nfunction skewness( p ) {\n\tif (\n\t\tisnan( p ) ||\n\t\tp < 0.0 ||\n\t\tp > 1.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( p === 0.0 ) {\n\t\treturn PINF;\n\t}\n\tif ( p === 1.0 ) {\n\t\treturn NINF;\n\t}\n\treturn ( 1.0 - ( 2.0*p ) ) / sqrt( p * ( 1.0-p ) );\n}\n\n\n// EXPORTS //\n\nexport default skewness;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport sqrt from '@stdlib/math-base-special-sqrt';\n\n\n// MAIN //\n\n/**\n* Returns the standard deviation of a Bernoulli distribution.\n*\n* @param {Probability} p - success probability\n* @returns {NonNegativeNumber} standard deviation\n*\n* @example\n* var v = stdev( 0.1 );\n* // returns ~0.3\n*\n* @example\n* var v = stdev( 0.5 );\n* // returns 0.5\n*\n* @example\n* var v = stdev( 1.1 );\n* // returns NaN\n*\n* @example\n* var v = stdev( NaN );\n* // returns NaN\n*/\nfunction stdev( p ) {\n\tif (\n\t\tisnan( p ) ||\n\t\tp < 0.0 ||\n\t\tp > 1.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn sqrt( ( 1.0-p ) * p );\n}\n\n\n// EXPORTS //\n\nexport default stdev;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns the variance of a Bernoulli distribution.\n*\n* @param {Probability} p - success probability\n* @returns {NonNegativeNumber} variance\n*\n* @example\n* var v = variance( 0.1 );\n* // returns ~0.09\n*\n* @example\n* var v = variance( 0.5 );\n* // returns 0.25\n*\n* @example\n* var v = variance( 1.1 );\n* // returns NaN\n*\n* @example\n* var v = variance( NaN );\n* // returns NaN\n*/\nfunction variance( p ) {\n\tif (\n\t\tisnan( p ) ||\n\t\tp < 0.0 ||\n\t\tp > 1.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn p * ( 1.0-p );\n}\n\n\n// EXPORTS //\n\nexport default variance;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Tests if a numeric value is a probability.\n*\n* @param {number} x - value to test\n* @returns {boolean} boolean indicating whether the value is a probability\n*\n* @example\n* var bool = isProbability( 0.5 );\n* // returns true\n*\n* @example\n* var bool = isProbability( 3.14 );\n* // returns false\n*\n* @example\n* var bool = isProbability( NaN );\n* // returns false\n*/\nfunction isProbability( x ) {\n\treturn ( x >= 0.0 && x <= 1.0 );\n}\n\n\n// EXPORTS //\n\nexport default isProbability;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Bernoulli distribution cumulative distribution function (CDF).\n*\n* @module @stdlib/stats-base-dists-bernoulli-cdf\n*\n* @example\n* import cdf from '@stdlib/stats-base-dists-bernoulli-cdf';\n*\n* var y = cdf( 1.0, 0.5 );\n* // returns 1.0\n*\n* y = cdf( 0.5, 0.1 );\n* // returns 0.9\n*\n* var mycdf = cdf.factory( 0.5 );\n* y = mycdf( 3.0 );\n* // returns 1.0\n*\n* y = mycdf( -1.0 );\n* // returns 0.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport cdf from './cdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( cdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the cumulative distribution function (CDF) for a Bernoulli distribution with success probability `p`.\n*\n* @param {Probability} p - success probability\n* @returns {Function} CDF\n*\n* @example\n* var cdf = factory( 0.5 );\n* var y = cdf( 3.0 );\n* // returns 1.0\n*\n* y = cdf( 0.7 );\n* // returns 0.5\n*/\nfunction factory( p ) {\n\tif ( isnan( p ) || p < 0.0 || p > 1.0 ) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn cdf;\n\n\t/**\n\t* Evaluates the cumulative distribution function (CDF) for a Bernoulli distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated CDF\n\t*\n\t* @example\n\t* var y = cdf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction cdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x < 0.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\tif ( x >= 1.0 ) {\n\t\t\treturn 1.0;\n\t\t}\n\t\treturn 1.0 - p;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if a value is a probability.\n*\n* @module @stdlib/assert-is-probability\n*\n* @example\n* import isProbability from '@stdlib/assert-is-probability';\n*\n* var bool = isProbability( 0.5 );\n* // returns true\n*\n* bool = isProbability( new Number( 0.5 ) );\n* // returns true\n*\n* bool = isProbability( 3.14 );\n* // returns false\n*\n* bool = isProbability( -5.0 );\n* // returns false\n*\n* bool = isProbability( null );\n* // returns false\n*\n* @example\n* import { isPrimitive as isProbability } from '@stdlib/assert-is-probability';\n*\n* var bool = isProbability( 0.3 );\n* // returns true\n*\n* bool = isProbability( new Number( 0.3 ) );\n* // returns false\n*\n* @example\n* import { isObject as isProbability } from '@stdlib/assert-is-probability';\n*\n* var bool = isProbability( 0.77 );\n* // returns false\n*\n* bool = isProbability( new Number( 0.77 ) );\n* // returns true\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport isProbability from './main.js';\nimport isPrimitive from './primitive.js';\nimport isObject from './object.js';\n\n\n// MAIN //\n\nsetReadOnly( isProbability, 'isPrimitive', isPrimitive );\nsetReadOnly( isProbability, 'isObject', isObject );\n\n\n// EXPORTS //\n\nexport default isProbability;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// TODO: implementation (?)\n\n/**\n* Rounds a double-precision floating-point number toward positive infinity.\n*\n* @param {number} x - input value\n* @returns {number} rounded value\n*\n* @example\n* var v = ceil( -4.2 );\n* // returns -4.0\n*\n* @example\n* var v = ceil( 9.99999 );\n* // returns 10.0\n*\n* @example\n* var v = ceil( 0.0 );\n* // returns 0.0\n*\n* @example\n* var v = ceil( NaN );\n* // returns NaN\n*/\nvar ceil = Math.ceil; // eslint-disable-line stdlib/no-builtin-math\n\n\n// EXPORTS //\n\nexport default ceil;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math-base-special-floor';\nimport ceil from '@stdlib/math-base-special-ceil';\n\n\n// MAIN //\n\n/**\n* Rounds a double-precision floating-point number toward zero.\n*\n* @param {number} x - input value\n* @returns {number} rounded value\n*\n* @example\n* var v = trunc( -4.2 );\n* // returns -4.0\n*\n* @example\n* var v = trunc( 9.99999 );\n* // returns 9.0\n*\n* @example\n* var v = trunc( 0.0 );\n* // returns 0.0\n*\n* @example\n* var v = trunc( -0.0 );\n* // returns -0.0\n*\n* @example\n* var v = trunc( NaN );\n* // returns NaN\n*\n* @example\n* var v = trunc( Infinity );\n* // returns Infinity\n*\n* @example\n* var v = trunc( -Infinity );\n* // returns -Infinity\n*/\nfunction trunc( x ) {\n\tif ( x < 0.0 ) {\n\t\treturn ceil( x );\n\t}\n\treturn floor( x );\n}\n\n\n// EXPORTS //\n\nexport default trunc;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/e_exp.c}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport trunc from '@stdlib/math-base-special-trunc';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport expmulti from './expmulti.js';\n\n\n// VARIABLES //\n\nvar LN2_HI = 6.93147180369123816490e-01;\nvar LN2_LO = 1.90821492927058770002e-10;\nvar LOG2_E = 1.44269504088896338700e+00;\nvar OVERFLOW = 7.09782712893383973096e+02;\nvar UNDERFLOW = -7.45133219101941108420e+02;\nvar NEARZERO = 1.0 / (1 << 28); // 2^-28;\nvar NEG_NEARZERO = -NEARZERO;\n\n\n// MAIN //\n\n/**\n* Evaluates the natural exponential function.\n*\n* ## Method\n*\n* 1.  We reduce \\\\( x \\\\) to an \\\\( r \\\\) so that \\\\( |r| \\leq 0.5 \\cdot \\ln(2) \\approx 0.34658 \\\\). Given \\\\( x \\\\), we find an \\\\( r \\\\) and integer \\\\( k \\\\) such that\n*\n*     ```tex\n*     \\begin{align*}\n*     x &= k \\cdot \\ln(2) + r \\\\\n*     |r| &\\leq 0.5 \\cdot \\ln(2)\n*     \\end{align*}\n*     ```\n*\n*     <!-- <note> -->\n*\n*     \\\\( r \\\\) can be represented as \\\\( r = \\mathrm{hi} - \\mathrm{lo} \\\\) for better accuracy.\n*\n*     <!-- </note> -->\n*\n* 2.  We approximate of \\\\( e^{r} \\\\) by a special rational function on the interval \\\\(\\[0,0.34658]\\\\):\n*\n*     ```tex\n*     \\begin{align*}\n*     R\\left(r^2\\right) &= r \\cdot \\frac{ e^{r}+1 }{ e^{r}-1 } \\\\\n*     &= 2 + \\frac{r^2}{6} - \\frac{r^4}{360} + \\ldots\n*     \\end{align*}\n*     ```\n*\n*     We use a special Remes algorithm on \\\\(\\[0,0.34658]\\\\) to generate a polynomial of degree \\\\(5\\\\) to approximate \\\\(R\\\\). The maximum error of this polynomial approximation is bounded by \\\\(2^{-59}\\\\). In other words,\n*\n*     ```tex\n*     R(z) \\sim 2 + P_1 z + P_2 z^2 + P_3 z^3 + P_4 z^4 + P_5 z^5\n*     ```\n*\n*     where \\\\( z = r^2 \\\\) and\n*\n*     ```tex\n*     \\left|  2 + P_1 z + \\ldots + P_5 z^5  - R(z) \\right| \\leq 2^{-59}\n*     ```\n*\n*     <!-- <note> -->\n*\n*     The values of \\\\( P_1 \\\\) to \\\\( P_5 \\\\) are listed in the source code.\n*\n*     <!-- </note> -->\n*\n*     The computation of \\\\( e^{r} \\\\) thus becomes\n*\n*     ```tex\n*     \\begin{align*}\n*     e^{r} &= 1 + \\frac{2r}{R-r} \\\\\n*           &= 1 + r + \\frac{r \\cdot R_1(r)}{2 - R_1(r)}\\ \\text{for better accuracy}\n*     \\end{align*}\n*     ```\n*\n*     where\n*\n*     ```tex\n*     R_1(r) = r - P_1\\ r^2 + P_2\\ r^4 + \\ldots + P_5\\ r^{10}\n*     ```\n*\n* 3.  We scale back to obtain \\\\( e^{x} \\\\). From step 1, we have\n*\n*     ```tex\n*     e^{x} = 2^k e^{r}\n*     ```\n*\n*\n* ## Special Cases\n*\n* ```tex\n* \\begin{align*}\n* e^\\infty &= \\infty \\\\\n* e^{-\\infty} &= 0 \\\\\n* e^{\\mathrm{NaN}} &= \\mathrm{NaN} \\\\\n* e^0 &= 1\\ \\mathrm{is\\ exact\\ for\\ finite\\ argument\\ only}\n* \\end{align*}\n* ```\n*\n* ## Notes\n*\n* -   According to an error analysis, the error is always less than \\\\(1\\\\) ulp (unit in the last place).\n*\n* -   For an IEEE double,\n*\n*     -   if \\\\(x > 7.09782712893383973096\\mbox{e+}02\\\\), then \\\\(e^{x}\\\\) overflows\n*     -   if \\\\(x < -7.45133219101941108420\\mbox{e+}02\\\\), then \\\\(e^{x}\\\\) underflows\n*\n* -   The hexadecimal values included in the source code are the intended ones for the used constants. Decimal values may be used, provided that the compiler will convert from decimal to binary accurately enough to produce the intended hexadecimal values.\n*\n*\n* @param {number} x - input value\n* @returns {number} function value\n*\n* @example\n* var v = exp( 4.0 );\n* // returns ~54.5982\n*\n* @example\n* var v = exp( -9.0 );\n* // returns ~1.234e-4\n*\n* @example\n* var v = exp( 0.0 );\n* // returns 1.0\n*\n* @example\n* var v = exp( NaN );\n* // returns NaN\n*/\nfunction exp( x ) {\n\tvar hi;\n\tvar lo;\n\tvar k;\n\n\tif ( isnan( x ) || x === PINF ) {\n\t\treturn x;\n\t}\n\tif ( x === NINF ) {\n\t\treturn 0.0;\n\t}\n\tif ( x > OVERFLOW ) {\n\t\treturn PINF;\n\t}\n\tif ( x < UNDERFLOW ) {\n\t\treturn 0.0;\n\t}\n\tif (\n\t\tx > NEG_NEARZERO &&\n\t\tx < NEARZERO\n\t) {\n\t\treturn 1.0 + x;\n\t}\n\t// Reduce and compute `r = hi - lo` for extra precision.\n\tif ( x < 0.0 ) {\n\t\tk = trunc( (LOG2_E*x) - 0.5 );\n\t} else {\n\t\tk = trunc( (LOG2_E*x) + 0.5 );\n\t}\n\thi = x - (k*LN2_HI);\n\tlo = k * LN2_LO;\n\n\treturn expmulti( hi, lo, k );\n}\n\n\n// EXPORTS //\n\nexport default exp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/e_exp.c}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport ldexp from '@stdlib/math-base-special-ldexp';\nimport polyvalP from './polyval_p.js';\n\n\n// MAIN //\n\n/**\n* Computes \\\\(e^{r} 2^k\\\\) where \\\\(r = \\mathrm{hi} - \\mathrm{lo}\\\\) and \\\\(|r| \\leq \\ln(2)/2\\\\).\n*\n* @private\n* @param {number} hi - upper bound\n* @param {number} lo - lower bound\n* @param {integer} k - power of 2\n* @returns {number} function value\n*/\nfunction expmulti( hi, lo, k ) {\n\tvar r;\n\tvar t;\n\tvar c;\n\tvar y;\n\n\tr = hi - lo;\n\tt = r * r;\n\tc = r - ( t*polyvalP( t ) );\n\ty = 1.0 - ( lo - ( (r*c)/(2.0-c) ) - hi);\n\n\treturn ldexp( y, k );\n}\n\n\n// EXPORTS //\n\nexport default expmulti;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.16666666666666602;\n\t}\n\treturn 0.16666666666666602 + (x * (-0.0027777777777015593 + (x * (0.00006613756321437934 + (x * (-0.0000016533902205465252 + (x * 4.1381367970572385e-8))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isProbability from '@stdlib/math-base-assert-is-probability';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport exp from '@stdlib/math-base-special-exp';\n\n\n// MAIN //\n\n/**\n* Evaluates the moment-generating function (MGF) for a Bernoulli distribution with success probability `p` at a value `t`.\n*\n* @param {number} t - input value\n* @param {Probability} p - success probability\n* @returns {number} evaluated MGF\n*\n* @example\n* var y = mgf( 0.2, 0.5 );\n* // returns ~1.111\n*\n* @example\n* var y = mgf( 0.4, 0.5 );\n* // returns ~1.246\n*\n* @example\n* var y = mgf( NaN, 0.0 );\n* // returns NaN\n*\n* @example\n* var y = mgf( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = mgf( -2.0, -1.0 );\n* // returns NaN\n*\n* @example\n* var y = mgf( 0.2, 2.0 );\n* // returns NaN\n*/\nfunction mgf( t, p ) {\n\tif ( isnan( t ) || !isProbability( p ) ) {\n\t\treturn NaN;\n\t}\n\treturn ( 1.0-p ) + ( p * exp( t ) );\n}\n\n\n// EXPORTS //\n\nexport default mgf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Evaluates the probability mass function (PMF) for a Bernoulli distribution with success probability `p` at a value `x`.\n*\n* @param {number} x - input value\n* @param {Probability} p - success probability\n* @returns {Probability} evaluated PMF\n*\n* @example\n* var y = pmf( 1.0, 0.3 );\n* // returns 0.3\n*\n* @example\n* var y = pmf( 0.0, 0.3 );\n* // returns 0.7\n*\n* @example\n* var y = pmf( -1.0, 0.5 );\n* // returns 0.0\n*\n* @example\n* var y = pmf( 0.8, 0.5 );\n* // returns 0.0\n*\n* @example\n* var y = pmf( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = pmf( NaN, 0.5 );\n* // returns NaN\n*\n* @example\n* // Invalid success probability:\n* var y = pmf( 1.0, 1.5 );\n* // returns NaN\n*/\nfunction pmf( x, p ) {\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( p ) ||\n\t\tp < 0.0 ||\n\t\tp > 1.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x === 0.0 ) {\n\t\treturn 1.0 - p;\n\t}\n\tif ( x === 1.0 ) {\n\t\treturn p;\n\t}\n\treturn 0.0;\n}\n\n\n// EXPORTS //\n\nexport default pmf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Evaluates the quantile function for a Bernoulli distribution with success probability `p` at a probability `r`.\n*\n* @param {Probability} r - input value\n* @param {Probability} p - success probability\n* @returns {NonNegativeInteger} evaluated quantile function\n*\n* @example\n* var y = quantile( 0.8, 0.4 );\n* // returns 1\n*\n* @example\n* var y = quantile( 0.5, 0.4 );\n* // returns 0\n*\n* @example\n* var y = quantile( 0.8, 0.1 );\n* // returns 0\n*\n* @example\n* var y = quantile( -0.2, 0.1 );\n* // returns NaN\n*\n* @example\n* var y = quantile( NaN, 0.8 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.4, NaN );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.5, -1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.5, 1.5 );\n* // returns NaN\n*/\nfunction quantile( r, p ) {\n\tif (\n\t\tisnan( p ) ||\n\t\tisnan( r ) ||\n\t\tp < 0.0 ||\n\t\tp > 1.0 ||\n\t\tr < 0.0 ||\n\t\tr > 1.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( r <= 1.0 - p ) {\n\t\treturn 0;\n\t}\n\treturn 1;\n}\n\n\n// EXPORTS //\n\nexport default quantile;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nimport defineProperty from '@stdlib/utils-define-property';\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport setReadOnlyAccessor from '@stdlib/utils-define-nonenumerable-read-only-accessor';\nimport { isPrimitive as isProbability } from '@stdlib/assert-is-probability';\nimport entropy from '@stdlib/stats-base-dists-bernoulli-entropy';\nimport kurtosis from '@stdlib/stats-base-dists-bernoulli-kurtosis';\nimport mean from '@stdlib/stats-base-dists-bernoulli-mean';\nimport mode from '@stdlib/stats-base-dists-bernoulli-mode';\nimport median from '@stdlib/stats-base-dists-bernoulli-median';\nimport skewness from '@stdlib/stats-base-dists-bernoulli-skewness';\nimport stdev from '@stdlib/stats-base-dists-bernoulli-stdev';\nimport variance from '@stdlib/stats-base-dists-bernoulli-variance';\nimport cdf from '@stdlib/stats-base-dists-bernoulli-cdf';\nimport mgf from '@stdlib/stats-base-dists-bernoulli-mgf';\nimport pmf from '@stdlib/stats-base-dists-bernoulli-pmf';\nimport quantile from '@stdlib/stats-base-dists-bernoulli-quantile';\nimport format from '@stdlib/string-format';\n\n\n// FUNCTIONS //\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n*/\nfunction bernoulliCDF( x ) {\n\treturn cdf( x, this.p );\n}\n\n/**\n* Evaluates the moment-generating function (MGF).\n*\n* @private\n* @param {number} t - input value\n* @returns {number} evaluated MGF\n*/\nfunction bernoulliMGF( t ) {\n\treturn mgf( t, this.p );\n}\n\n/**\n* Evaluates the probability mass function (PMF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated PMF\n*/\nfunction bernoulliPMF( x ) {\n\treturn pmf( x, this.p );\n}\n\n/**\n* Evaluates the quantile function.\n*\n* @private\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n*/\nfunction bernoulliQuantile( p ) {\n\treturn quantile( p, this.p );\n}\n\n\n// MAIN //\n\n/**\n* Bernoulli distribution constructor.\n*\n* @constructor\n* @param {Probability} [p=0.5] - success probability\n* @throws {TypeError} `p` must be a probability\n* @returns {Bernoulli} distribution instance\n*\n* @example\n* var bernoulli = new Bernoulli();\n*\n* var y = bernoulli.cdf( 1.8 );\n* // returns 1.0\n*\n* var v = bernoulli.median;\n* // returns 0.0\n*/\nfunction Bernoulli() {\n\tvar p;\n\tif ( !(this instanceof Bernoulli) ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn new Bernoulli();\n\t\t}\n\t\treturn new Bernoulli( arguments[ 0 ] );\n\t}\n\tif ( arguments.length ) {\n\t\tp = arguments[ 0 ];\n\t\tif ( !isProbability( p ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Mean parameter must be a probability. Value: `%s`.', p ) );\n\t\t}\n\t} else {\n\t\tp = 0.5;\n\t}\n\tdefineProperty( this, 'p', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn p;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isProbability( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid assignment. Must be a probability. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\tp = value;\n\t\t}\n\t});\n\treturn this;\n}\n\n/**\n* Bernoulli distribution differential entropy.\n*\n* @name entropy\n* @memberof Bernoulli.prototype\n* @type {number}\n* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}\n*\n* @example\n* var bernoulli = new Bernoulli( 0.4 );\n*\n* var v = bernoulli.entropy;\n* // returns ~0.673\n*/\nsetReadOnlyAccessor( Bernoulli.prototype, 'entropy', function get() {\n\treturn entropy( this.p );\n});\n\n/**\n* Bernoulli distribution excess kurtosis.\n*\n* @name kurtosis\n* @memberof Bernoulli.prototype\n* @type {number}\n* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}\n*\n* @example\n* var bernoulli = new Bernoulli( 0.4 );\n*\n* var v = bernoulli.kurtosis;\n* // returns ~-1.833\n*/\nsetReadOnlyAccessor( Bernoulli.prototype, 'kurtosis', function get() {\n\treturn kurtosis( this.p );\n});\n\n/**\n* Bernoulli distribution expected value.\n*\n* @name mean\n* @memberof Bernoulli.prototype\n* @type {number}\n* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}\n*\n* @example\n* var bernoulli = new Bernoulli( 0.4 );\n*\n* var v = bernoulli.mean;\n* // returns 0.4\n*/\nsetReadOnlyAccessor( Bernoulli.prototype, 'mean', function get() {\n\treturn mean( this.p );\n});\n\n/**\n* Bernoulli distribution median.\n*\n* @name median\n* @memberof Bernoulli.prototype\n* @type {number}\n* @see [median]{@link https://en.wikipedia.org/wiki/Median}\n*\n* @example\n* var bernoulli = new Bernoulli( 0.4 );\n*\n* var v = bernoulli.median;\n* // returns 0.0\n*/\nsetReadOnlyAccessor( Bernoulli.prototype, 'median', function get() {\n\treturn median( this.p );\n});\n\n/**\n* Bernoulli distribution mode.\n*\n* @name mode\n* @memberof Bernoulli.prototype\n* @type {number}\n* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}\n*\n* @example\n* var bernoulli = new Bernoulli( 0.4 );\n*\n* var v = bernoulli.mode;\n* // returns 0.0\n*/\nsetReadOnlyAccessor( Bernoulli.prototype, 'mode', function get() {\n\treturn mode( this.p );\n});\n\n/**\n* Bernoulli distribution skewness.\n*\n* @name skewness\n* @memberof Bernoulli.prototype\n* @type {number}\n* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}\n*\n* @example\n* var bernoulli = new Bernoulli( 0.4 );\n*\n* var v = bernoulli.skewness;\n* // returns ~0.408\n*/\nsetReadOnlyAccessor( Bernoulli.prototype, 'skewness', function get() {\n\treturn skewness( this.p );\n});\n\n/**\n* Bernoulli distribution standard deviation.\n*\n* @name stdev\n* @memberof Bernoulli.prototype\n* @type {PositiveNumber}\n* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}\n*\n* @example\n* var bernoulli = new Bernoulli( 0.4 );\n*\n* var v = bernoulli.stdev;\n* // returns ~0.49\n*/\nsetReadOnlyAccessor( Bernoulli.prototype, 'stdev', function get() {\n\treturn stdev( this.p );\n});\n\n/**\n* Bernoulli distribution variance.\n*\n* @name variance\n* @memberof Bernoulli.prototype\n* @type {PositiveNumber}\n* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}\n*\n* @example\n* var bernoulli = new Bernoulli( 0.4 );\n*\n* var v = bernoulli.variance;\n* // returns 0.24\n*/\nsetReadOnlyAccessor( Bernoulli.prototype, 'variance', function get() {\n\treturn variance( this.p );\n});\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @name cdf\n* @memberof Bernoulli.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var bernoulli = new Bernoulli( 0.2 );\n*\n* var v = bernoulli.cdf( 1.5 );\n* // returns 1.0\n*/\nsetReadOnly( Bernoulli.prototype, 'cdf', bernoulliCDF );\n\n/**\n* Evaluates the moment-generating function (MGF).\n*\n* @name mgf\n* @memberof Bernoulli.prototype\n* @type {Function}\n* @param {number} t - input value\n* @returns {number} evaluated MGF\n* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}\n*\n* @example\n* var bernoulli = new Bernoulli( 0.2 );\n*\n* var v = bernoulli.mgf( -3.0 );\n* // returns ~0.81\n*/\nsetReadOnly( Bernoulli.prototype, 'mgf', bernoulliMGF );\n\n/**\n* Evaluates the probability mass function (PMF).\n*\n* @name pmf\n* @memberof Bernoulli.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated PMF\n* @see [pmf]{@link https://en.wikipedia.org/wiki/Probability_mass_function}\n*\n* @example\n* var bernoulli = new Bernoulli( 0.2 );\n*\n* var v = bernoulli.pmf( 1.0 );\n* // returns 0.2\n*\n* v = bernoulli.pmf( 0.0 );\n* // returns 0.8\n*/\nsetReadOnly( Bernoulli.prototype, 'pmf', bernoulliPMF );\n\n/**\n* Evaluates the quantile function.\n*\n* @name quantile\n* @memberof Bernoulli.prototype\n* @type {Function}\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}\n*\n* @example\n* var bernoulli = new Bernoulli( 0.2 );\n*\n* var v = bernoulli.quantile( 0.9 );\n* // returns 1\n*/\nsetReadOnly( Bernoulli.prototype, 'quantile', bernoulliQuantile );\n\n\n// EXPORTS //\n\nexport default Bernoulli;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate the moment-generating function (MGF) for a Bernoulli distribution.\n*\n* @module @stdlib/stats-base-dists-bernoulli-mgf\n*\n* @example\n* import mgf from '@stdlib/stats-base-dists-bernoulli-mgf';\n*\n* var y = mgf( 0.2, 0.5 );\n* // returns ~1.111\n*\n* y = mgf( 0.4, 0.5 );\n* // returns ~1.246\n*\n* var mymgf = mgf.factory( 0.8 );\n* y = mymgf( -0.2 );\n* // returns ~0.855\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport mgf from './mgf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( mgf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default mgf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isProbability from '@stdlib/math-base-assert-is-probability';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport exp from '@stdlib/math-base-special-exp';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the moment-generating function (MGF) of a Bernoulli distribution with success probability `p`.\n*\n* @param {Probability} p - success probability\n* @returns {Function} MGF\n*\n* @example\n* var mgf = factory( 0.8 );\n* var y = mgf( -0.2 );\n* // returns ~0.855\n*/\nfunction factory( p ) {\n\tif ( !isProbability( p ) ) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn mgf;\n\n\t/**\n\t* Evaluates the moment-generating function (MGF) for a Bernoulli distribution.\n\t*\n\t* @private\n\t* @param {number} t - input value\n\t* @returns {number} evaluated MGF\n\t*\n\t* @example\n\t* var y = mgf( 0.5 );\n\t* // returns <number>\n\t*/\n\tfunction mgf( t ) {\n\t\tif ( isnan( t ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn ( 1.0-p ) + ( p * exp( t ) );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Bernoulli distribution probability mass function (PMF).\n*\n* @module @stdlib/stats-base-dists-bernoulli-pmf\n*\n* @example\n* import pmf from '@stdlib/stats-base-dists-bernoulli-pmf';\n*\n* var y = pmf( 0.0, 0.3 );\n* // returns 0.7\n*\n* y = pmf( 1.0, 0.7 );\n* // returns 0.7\n*\n* y = pmf( -1.0, 0.5 );\n* // returns 0.0\n*\n* var mypmf = pmf.factory( 0.5 );\n* y = mypmf( 2.0 );\n* // returns 0.0\n*\n* y = mypmf( 1.0 );\n* // returns 0.5\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport pmf from './pmf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( pmf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default pmf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the probability mass function (PMF) for a Bernoulli distribution with success probability `p`.\n*\n* @param {Probability} p - success probability\n* @returns {Function} PMF\n*\n* @example\n* var pmf = factory( 0.8 );\n* var y = pmf( 0.0 );\n* // returns 0.2\n*\n* y = pmf( 1.0 );\n* // returns 0.8\n*/\nfunction factory( p ) {\n\tif (\n\t\tisnan( p ) ||\n\t\tp < 0.0 ||\n\t\tp > 1.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn pmf;\n\n\t/**\n\t* Evaluates the probability mass function (PMF) for a Bernoulli distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated PMF\n\t*\n\t* @example\n\t* var y = pmf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction pmf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x === 0.0 ) {\n\t\t\treturn 1.0 - p;\n\t\t}\n\t\tif ( x === 1.0 ) {\n\t\t\treturn p;\n\t\t}\n\t\treturn 0.0;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Bernoulli distribution quantile function.\n*\n* @module @stdlib/stats-base-dists-bernoulli-quantile\n*\n* @example\n* import quantile from '@stdlib/stats-base-dists-bernoulli-quantile';\n*\n* var y = quantile( 0.8, 0.4 );\n* // returns 1\n*\n* y = quantile( 0.5, 0.4 );\n* // returns 0\n*\n* var myquantile = quantile.factory( 0.4 );\n* y = myquantile( 0.4 );\n* // returns 0\n*\n* y = myquantile( 0.8 );\n* // returns 1\n*\n* y = myquantile( 1.0 );\n* // returns 1\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport quantile from './quantile.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( quantile, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default quantile;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the quantile function for a Bernoulli distribution with success probability `p`.\n*\n* @param {Probability} p - success probability\n* @returns {Function} quantile function\n*\n* @example\n* var quantile = factory( 0.4 );\n* var y = quantile( 0.4 );\n* // returns 0\n*\n* y = quantile( 0.8 );\n* // returns 1\n*\n* y = quantile( 1.0 );\n* // returns 1\n*/\nfunction factory( p ) {\n\tif ( isnan( p ) || p < 0.0 || p > 1.0 ) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn quantile;\n\n\t/**\n\t* Evaluates the quantile function for a Bernoulli distribution.\n\t*\n\t* @private\n\t* @param {Probability} r - input value\n\t* @returns {NonNegativeInteger} evaluated quantile function\n\t*\n\t* @example\n\t* var y = quantile( 0.3 );\n\t* // returns <number>\n\t*/\n\tfunction quantile( r ) {\n\t\tif ( isnan( r ) || r < 0.0 || r > 1.0 ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( r <= 1.0 - p ) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn 1;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace bernoulli\n*/\nvar bernoulli = {};\n\n/**\n* @name cdf\n* @memberof bernoulli\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/bernoulli/cdf}\n*/\nimport cdf from '@stdlib/stats-base-dists-bernoulli-cdf';\nsetReadOnly( bernoulli, 'cdf', cdf );\n\n/**\n* @name Bernoulli\n* @memberof bernoulli\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/bernoulli/ctor}\n*/\nimport Bernoulli from '@stdlib/stats-base-dists-bernoulli-ctor';\nsetReadOnly( bernoulli, 'Bernoulli', Bernoulli );\n\n/**\n* @name entropy\n* @memberof bernoulli\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/bernoulli/entropy}\n*/\nimport entropy from '@stdlib/stats-base-dists-bernoulli-entropy';\nsetReadOnly( bernoulli, 'entropy', entropy );\n\n/**\n* @name kurtosis\n* @memberof bernoulli\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/bernoulli/kurtosis}\n*/\nimport kurtosis from '@stdlib/stats-base-dists-bernoulli-kurtosis';\nsetReadOnly( bernoulli, 'kurtosis', kurtosis );\n\n/**\n* @name mean\n* @memberof bernoulli\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/bernoulli/mean}\n*/\nimport mean from '@stdlib/stats-base-dists-bernoulli-mean';\nsetReadOnly( bernoulli, 'mean', mean );\n\n/**\n* @name median\n* @memberof bernoulli\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/bernoulli/median}\n*/\nimport median from '@stdlib/stats-base-dists-bernoulli-median';\nsetReadOnly( bernoulli, 'median', median );\n\n/**\n* @name mgf\n* @memberof bernoulli\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/bernoulli/mgf}\n*/\nimport mgf from '@stdlib/stats-base-dists-bernoulli-mgf';\nsetReadOnly( bernoulli, 'mgf', mgf );\n\n/**\n* @name mode\n* @memberof bernoulli\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/bernoulli/mode}\n*/\nimport mode from '@stdlib/stats-base-dists-bernoulli-mode';\nsetReadOnly( bernoulli, 'mode', mode );\n\n/**\n* @name pmf\n* @memberof bernoulli\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/bernoulli/pmf}\n*/\nimport pmf from '@stdlib/stats-base-dists-bernoulli-pmf';\nsetReadOnly( bernoulli, 'pmf', pmf );\n\n/**\n* @name quantile\n* @memberof bernoulli\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/bernoulli/quantile}\n*/\nimport quantile from '@stdlib/stats-base-dists-bernoulli-quantile';\nsetReadOnly( bernoulli, 'quantile', quantile );\n\n/**\n* @name skewness\n* @memberof bernoulli\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/bernoulli/skewness}\n*/\nimport skewness from '@stdlib/stats-base-dists-bernoulli-skewness';\nsetReadOnly( bernoulli, 'skewness', skewness );\n\n/**\n* @name stdev\n* @memberof bernoulli\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/bernoulli/stdev}\n*/\nimport stdev from '@stdlib/stats-base-dists-bernoulli-stdev';\nsetReadOnly( bernoulli, 'stdev', stdev );\n\n/**\n* @name variance\n* @memberof bernoulli\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/bernoulli/variance}\n*/\nimport variance from '@stdlib/stats-base-dists-bernoulli-variance';\nsetReadOnly( bernoulli, 'variance', variance );\n\n\n// EXPORTS //\n\nexport default bernoulli;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright, license, and long comment were part of the original implementation available as part of [FDLIBM]{@link http://www.netlib.org/fdlibm/s_expm1.c}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport getHighWord from '@stdlib/number-float64-base-get-high-word';\nimport setHighWord from '@stdlib/number-float64-base-set-high-word';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport FLOAT64_EXPONENT_BIAS from '@stdlib/constants-float64-exponent-bias';\nimport HALF_LN2 from '@stdlib/constants-float64-half-ln-two';\nimport polyval from './polyval_q.js';\n\n\n// VARIABLES //\n\nvar OVERFLOW_THRESHOLD = 7.09782712893383973096e+02; // 0x40862E42 0xFEFA39EF\n\n// High and low words of ln(2):\nvar LN2_HI = 6.93147180369123816490e-01; // 0x3FE62E42 0xFEE00000\nvar LN2_LO = 1.90821492927058770002e-10; // 0x3DEA39EF 0x35793C76\n\n// 1 / ln(2):\nvar LN2_INV = 1.44269504088896338700e+00; // 0x3FF71547 0x652B82FE\n\n// ln(2) * 56:\nvar LN2x56 = 3.88162421113569373274e+01; // 0x4043687A 0x9F1AF2B1\n\n// ln(2) * 1.5:\nvar LN2_HALFX3 = 1.03972077083991796413e+00; // 0x3FF0A2B2 0x3F3BAB73\n\n\n// MAIN //\n\n/**\n* Computes `exp(x) - 1`.\n*\n* ## Method\n*\n* 1.  Given \\\\(x\\\\), we use argument reduction to find \\\\(r\\\\) and an integer \\\\(k\\\\) such that\n*\n*     ```tex\n*     x = k \\cdot \\ln(2) + r\n*     ```\n*\n*     where\n*\n*     ```tex\n*     |r| \\leq \\frac{\\ln(2)}{2} \\approx 0.34658\n*     ```\n*\n*     <!-- <note> -->\n*\n*     A correction term \\\\(c\\\\) will need to be computed to compensate for the error in \\\\(r\\\\) when rounded to a floating-point number.\n*\n*     <!-- </note> -->\n*\n* 2.  To approximate \\\\(\\operatorname{expm1}(r)\\\\), we use a special rational function on the interval \\\\(\\[0,0.34658]\\\\). Since\n*\n*     ```tex\n*     r \\frac{e^r + 1}{e^r - 1} = 2 + \\frac{r^2}{6} - \\frac{r^4}{360} + \\ldots\n*     ```\n*\n*     we define \\\\(\\operatorname{R1}(r^2)\\\\) by\n*\n*     ```tex\n*     r \\frac{e^r + 1}{e^r - 1} = 2 + \\frac{r^2}{6} \\operatorname{R1}(r^2)\n*     ```\n*\n*     That is,\n*\n*     ```tex\n*     \\begin{align*}\n*     \\operatorname{R1}(r^2) &= \\frac{6}{r} \\biggl(\\frac{e^r+1}{e^r-1} - \\frac{2}{r}\\biggr) \\\\\n*     &= \\frac{6}{r} \\biggl( 1 + 2 \\biggl(\\frac{1}{e^r-1} - \\frac{1}{r}\\biggr)\\biggr) \\\\\n*     &= 1 - \\frac{r^2}{60} + \\frac{r^4}{2520} - \\frac{r^6}{100800} + \\ldots\n*     \\end{align*}\n*     ```\n*\n*     We use a special Remes algorithm on \\\\(\\[0,0.347]\\\\) to generate a polynomial of degree \\\\(5\\\\) in \\\\(r^2\\\\) to approximate \\\\(\\mathrm{R1}\\\\). The maximum error of this polynomial approximation is bounded by \\\\(2^{-61}\\\\). In other words,\n*\n*     ```tex\n*     \\operatorname{R1}(z) \\approx 1 + \\mathrm{Q1} \\cdot z + \\mathrm{Q2} \\cdot z^2 + \\mathrm{Q3} \\cdot z^3 + \\mathrm{Q4} \\cdot z^4 + \\mathrm{Q5} \\cdot z^5\n*     ```\n*\n*     where\n*\n*     ```tex\n*     \\begin{align*}\n*     \\mathrm{Q1} &= -1.6666666666666567384\\mbox{e-}2 \\\\\n*     \\mathrm{Q2} &= 3.9682539681370365873\\mbox{e-}4 \\\\\n*     \\mathrm{Q3} &= -9.9206344733435987357\\mbox{e-}6 \\\\\n*     \\mathrm{Q4} &= 2.5051361420808517002\\mbox{e-}7 \\\\\n*     \\mathrm{Q5} &= -6.2843505682382617102\\mbox{e-}9\n*     \\end{align*}\n*     ```\n*\n*     where \\\\(z = r^2\\\\) and the values of \\\\(\\mathrm{Q1}\\\\) to \\\\(\\mathrm{Q5}\\\\) are listed in the source. The error is bounded by\n*\n*     ```tex\n*     \\biggl| 1 + \\mathrm{Q1} \\cdot z + \\ldots + \\mathrm{Q5} \\cdot z - \\operatorname{R1}(z) \\biggr| \\leq 2^{-61}\n*     ```\n*\n*     \\\\(\\operatorname{expm1}(r) = e^r - 1\\\\) is then computed by the following specific way which minimizes the accumulated rounding error\n*\n*     ```tex\n*     \\operatorname{expm1}(r) = r + \\frac{r^2}{2} + \\frac{r^3}{2} \\biggl( \\frac{3 - (\\mathrm{R1} + \\mathrm{R1} \\cdot \\frac{r}{2})}{6 - r ( 3 - \\mathrm{R1} \\cdot \\frac{r}{2})} \\biggr)\n*     ```\n*\n*     To compensate for the error in the argument reduction, we use\n*\n*     ```tex\n*     \\begin{align*}\n*     \\operatorname{expm1}(r+c) &= \\operatorname{expm1}(r) + c + \\operatorname{expm1}(r) \\cdot c \\\\\n*     &\\approx \\operatorname{expm1}(r) + c + rc\n*     \\end{align*}\n*     ```\n*\n*     Thus, \\\\(c + rc\\\\) will be added in as the correction terms for \\\\(\\operatorname{expm1}(r+c)\\\\). Now, we can rearrange the term to avoid optimization screw up.\n*\n*     ```tex\n*     \\begin{align*}\n*     \\operatorname{expm1}(r+c) &\\approx r - \\biggl( \\biggl( r + \\biggl( \\frac{r^2}{2} \\biggl( \\frac{\\mathrm{R1} - (3 - \\mathrm{R1} \\cdot \\frac{r}{2})}{6 - r (3 - \\mathrm{R1} \\cdot \\frac{r}{2})} \\biggr) - c \\biggr) - c \\biggr) - \\frac{r^2}{2} \\biggr) \\\\\n*     &= r - \\mathrm{E}\n*     \\end{align*}\n*     ```\n*\n* 3.  To scale back to obtain \\\\(\\operatorname{expm1}(x)\\\\), we have (from step 1)\n*\n*     ```tex\n*     \\operatorname{expm1}(x) = \\begin{cases}\n*     2^k  (\\operatorname{expm1}(r) + 1) - 1 \\\\\n*     2^k (\\operatorname{expm1}(r) + (1-2^{-k}))\n*     \\end{cases}\n*     ```\n*\n* ## Special Cases\n*\n* ```tex\n* \\begin{align*}\n* \\operatorname{expm1}(\\infty) &= \\infty \\\\\n* \\operatorname{expm1}(-\\infty) &= -1 \\\\\n* \\operatorname{expm1}(\\mathrm{NaN}) &= \\mathrm{NaN}\n* \\end{align*}\n* ```\n*\n*\n* ## Notes\n*\n* -   For finite arguments, only \\\\(\\operatorname{expm1}(0) = 0\\\\) is exact.\n*\n* -   To save one multiplication, we scale the coefficient \\\\(\\mathrm{Qi}\\\\) to \\\\(\\mathrm{Qi} \\cdot {2^i}\\\\) and replace \\\\(z\\\\) by \\\\(\\frac{x^2}{2}\\\\).\n*\n* -   To achieve maximum accuracy, we compute \\\\(\\operatorname{expm1}(x)\\\\) by\n*\n*     -   if \\\\(x < -56 \\cdot \\ln(2)\\\\), return \\\\(-1.0\\\\) (raise inexact if \\\\(x\\\\) does not equal \\\\(\\infty\\\\))\n*\n*     -   if \\\\(k = 0\\\\), return \\\\(r-\\mathrm{E}\\\\)\n*\n*     -   if \\\\(k = -1\\\\), return \\\\(\\frac{(r-\\mathrm{E})-1}{2}\\\\)\n*\n*     -   if \\\\(k = 1\\\\),\n*\n*         -   if \\\\(r < -0.25\\\\), return \\\\(2((r+0.5)- \\mathrm{E})\\\\)\n*         -   else return \\\\(1+2(r-\\mathrm{E})\\\\)\n*\n*     -   if \\\\(k < -2\\\\) or \\\\(k > 56\\\\), return \\\\(2^k(1-(\\mathrm{E}-r)) - 1\\\\) (or \\\\(e^x-1\\\\))\n*\n*     -   if \\\\(k \\leq 20\\\\), return \\\\(2^k((1-2^{-k})-(\\mathrm{E}-r))\\\\)\n*\n*     -   else return \\\\(2^k(1-((\\mathrm{E}+2^{-k})-r))\\\\)\n*\n* -   For IEEE 754 double, if \\\\(x > 7.09782712893383973096\\mbox{e+}02\\\\), then \\\\(\\operatorname{expm1}(x)\\\\) will overflow.\n*\n* -   The hexadecimal values listed in the source are the intended ones for the implementation constants. Decimal values may be used, provided that the compiler will convert from decimal to binary accurately enough to produce the intended hexadecimal values.\n*\n* -   According to an error analysis, the error is always less than \\\\(1\\\\) ulp (unit in the last place).\n*\n*\n* @param {number} x - input value\n* @returns {number} function value\n*\n* @example\n* var v = expm1( 0.2 );\n* // returns ~0.221\n*\n* @example\n* var v = expm1( -9.0 );\n* // returns ~-0.9999\n*\n* @example\n* var v = expm1( 0.0 );\n* // returns 0.0\n*\n* @example\n* var v = expm1( NaN );\n* // returns NaN\n*/\nfunction expm1( x ) {\n\tvar halfX;\n\tvar sign;\n\tvar hi;\n\tvar lo;\n\tvar hx;\n\tvar r1;\n\tvar y;\n\tvar z;\n\tvar c;\n\tvar t;\n\tvar e;\n\tvar k;\n\n\tif ( x === PINF || isnan( x ) ) {\n\t\treturn x;\n\t}\n\tif ( x === NINF ) {\n\t\treturn -1.0;\n\t}\n\tif ( x === 0.0 ) {\n\t\treturn x; // handles +-0 (IEEE 754-2008)\n\t}\n\t// Set y = |x|:\n\tif ( x < 0.0 ) {\n\t\tsign = true;\n\t\ty = -x;\n\t} else {\n\t\tsign = false;\n\t\ty = x;\n\t}\n\t// Filter out huge and non-finite arguments...\n\tif ( y >= LN2x56 ) { // if |x| >= 56*ln(2)\n\t\tif ( sign ) { // if x <= -56*ln(2)\n\t\t\treturn -1.0;\n\t\t}\n\t\tif ( y >= OVERFLOW_THRESHOLD ) { // if |x| >= 709.78...\n\t\t\treturn PINF;\n\t\t}\n\t}\n\t// Extract the more significant bits from |x|:\n\thx = getHighWord( y )|0; // asm type annotation\n\n\t// Argument reduction...\n\tif ( y > HALF_LN2 ) { // if |x| > 0.5*ln(2)\n\t\tif ( y < LN2_HALFX3 ) { // if |x| < 1.5*ln(2)\n\t\t\tif ( sign ) {\n\t\t\t\thi = x + LN2_HI;\n\t\t\t\tlo = -LN2_LO;\n\t\t\t\tk = -1;\n\t\t\t} else {\n\t\t\t\thi = x - LN2_HI;\n\t\t\t\tlo = LN2_LO;\n\t\t\t\tk = 1;\n\t\t\t}\n\t\t} else {\n\t\t\tif ( sign ) {\n\t\t\t\tk = (LN2_INV*x) - 0.5;\n\t\t\t} else {\n\t\t\t\tk = (LN2_INV*x) + 0.5;\n\t\t\t}\n\t\t\tk |= 0; // use a bitwise OR to cast `k` to an integer (see also asm.js type annotations: http://asmjs.org/spec/latest/#annotations)\n\t\t\tt = k;\n\t\t\thi = x - (t*LN2_HI); // t*ln2_hi is exact here\n\t\t\tlo = t * LN2_LO;\n\t\t}\n\t\tx = hi - lo;\n\t\tc = (hi-x) - lo;\n\t}\n\t// if |x| < 2**-54 => high word: 0 01111001001 00000000000000000000 => 0x3c900000 = 1016070144  => exponent = 01111001001 = 969 = 1023-54\n\telse if ( hx < 1016070144 ) {\n\t\treturn x;\n\t}\n\telse {\n\t\tk = 0;\n\t}\n\t// x is now in primary range...\n\thalfX = 0.5 * x;\n\tz = x * halfX;\n\n\tr1 = 1.0 + ( z * polyval( z ) );\n\n\tt = 3.0 - (r1*halfX);\n\te = z * ( (r1-t) / (6.0 - (x*t)) );\n\tif ( k === 0 ) {\n\t\treturn x - ( (x*e) - z );\t// c is 0\n\t}\n\te = ( x * (e-c) ) - c;\n\te -= z;\n\tif ( k === -1 ) {\n\t\treturn ( 0.5*(x-e) )- 0.5;\n\t}\n\tif ( k === 1 ) {\n\t\tif ( x < -0.25 ) {\n\t\t\treturn -2.0 * ( e - (x+0.5) );\n\t\t}\n\t\treturn 1 + ( 2.0 * (x-e) );\n\t}\n\tif ( k <= -2 || k > 56 ) { // suffice to return exp(x)-1\n\t\ty = 1.0 - (e-x);\n\n\t\t// Add k to y's exponent:\n\t\thi = (getHighWord( y ) + (k<<20))|0; // asm type annotation\n\t\ty = setHighWord( y, hi );\n\n\t\treturn y - 1.0;\n\t}\n\tt = 1.0;\n\tif ( k < 20 ) {\n\t\t// 0x3ff00000 - (0x200000>>k) = 1072693248 - (0x200000>>k) => 0x200000 = 0 00000000010 00000000000000000000\n\t\thi = (1072693248 - (0x200000>>k))|0; // asm type annotation\n\t\tt = setHighWord( t, hi ); // t=1-2^-k\n\t\ty = t - (e-x);\n\t} else {\n\t\thi = ( (FLOAT64_EXPONENT_BIAS-k)<<20 )|0; // asm type annotation\n\t\tt = setHighWord( t, hi ); // t=2^-k\n\t\ty = x - (e+t);\n\t\ty += 1.0;\n\t}\n\t// Add k to y's exponent:\n\thi = (getHighWord( y ) + (k<<20))|0; // asm type annotation\n\treturn setHighWord( y, hi );\n}\n\n\n// EXPORTS //\n\nexport default expm1;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* One half times the natural logarithm of 2.\n*\n* @module @stdlib/constants-float64-half-ln-two\n* @type {number}\n*\n* @example\n* import HALF_LN2 from '@stdlib/constants-float64-half-ln-two';\n* // returns 3.46573590279972654709e-01\n*/\n\n// MAIN //\n\n/**\n* One half times the natural logarithm of 2.\n*\n* ```tex\n* \\frac{\\ln 2}{2}\n* ```\n*\n* @constant\n* @type {number}\n* @default 3.46573590279972654709e-01\n*/\nvar HALF_LN2 = 3.46573590279972654709e-01; // 0x3FD62E42 0xFEFA39EF\n\n\n// EXPORTS //\n\nexport default HALF_LN2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn -0.03333333333333313;\n\t}\n\treturn -0.03333333333333313 + (x * (0.0015873015872548146 + (x * (-0.0000793650757867488 + (x * (0.000004008217827329362 + (x * -2.0109921818362437e-7))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright, license, and long comment were part of the original implementation available as part of [FDLIBM]{@link http://www.netlib.org/fdlibm/s_log1p.c}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport getHighWord from '@stdlib/number-float64-base-get-high-word';\nimport setHighWord from '@stdlib/number-float64-base-set-high-word';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport FLOAT64_EXPONENT_BIAS from '@stdlib/constants-float64-exponent-bias';\nimport polyval from './polyval_lp.js';\n\n\n// VARIABLES //\n\n// High and low words of ln(2):\nvar LN2_HI = 6.93147180369123816490e-01; // 0x3fe62e42 0xfee00000\nvar LN2_LO = 1.90821492927058770002e-10; // 0x3dea39ef 0x35793c76\n\n// sqrt(2)-1:\nvar SQRT2M1 = 4.142135623730950488017e-01; // 0x3fda8279 0x99fcef34\n\n// sqrt(2)/2-1:\nvar SQRT2HALFM1 = -2.928932188134524755992e-01; // 0xbfd2bec3 0x33018866\n\n// 2**-29:\nvar SMALL = 1.862645149230957e-09; // 0x3e200000 0x00000000\n\n// 2**-54:\nvar TINY = 5.551115123125783e-17;\n\n// Max integer (unsafe) => 2**53:\nvar TWO53 = 9007199254740992;\n\n// 2/3:\nvar TWO_THIRDS = 6.666666666666666666e-01;\n\n\n// MAIN //\n\n/**\n* Evaluates the natural logarithm of \\\\(1+x\\\\).\n*\n* ## Method\n*\n* 1.  Argument Reduction: find \\\\(k\\\\) and \\\\(f\\\\) such that\n*\n*     ```tex\n*     1+x = 2^k (1+f)\n*     ```\n*\n*     where\n*\n*     ```tex\n*     \\frac{\\sqrt{2}}{2} < 1+f < \\sqrt{2}\n*     ```\n*\n*     <!-- <note> -->\n*\n*     If \\\\(k=0\\\\), then \\\\(f=x\\\\) is exact. However, if \\\\(k \\neq 0\\\\), then \\\\(f\\\\) may not be representable exactly. In that case, a correction term is needed. Let\n*\n*     ```tex\n*     u = \\operatorname{round}(1+x)\n*     ```\n*\n*     and\n*\n*     ```tex\n*     c = (1+x) - u\n*     ```\n*\n*     then\n*\n*     ```tex\n*     \\ln (1+x) - \\ln u \\approx \\frac{c}{u}\n*     ```\n*\n*     We can thus proceed to compute \\\\(\\ln(u)\\\\), and add back the correction term \\\\(c/u\\\\).\n*\n*     <!-- </note> -->\n*\n*     <!-- <note> -->\n*\n*     When \\\\(x > 2^{53}\\\\), one can simply return \\\\(\\ln(x)\\\\).\n*\n*     <!-- </note> -->\n*\n* 2.  Approximation of \\\\(\\operatorname{log1p}(f)\\\\). Let\n*\n*     ```tex\n*     s = \\frac{f}{2+f}\n*     ```\n*\n*     based on\n*\n*     ```tex\n*     \\begin{align*}\n*     \\ln 1+f &= \\ln (1+s) - \\ln (1-s) \\\\\n*             &= 2s + \\frac{2}{3} s^3 + \\frac{2}{5} s^5 + ... \\\\\n*             &= 2s + sR \\\\\n*     \\end{align*}\n*     ```\n*\n*     We use a special Reme algorithm on \\\\(\\[0,0.1716\\]\\\\) to generate a polynomial of degree \\\\(14\\\\) to approximate \\\\(R\\\\). The maximum error of this polynomial approximation is bounded by \\\\(2^{-58.45}\\\\). In other words,\n*\n*     ```tex\n*     R(z) \\approx \\mathrm{Lp}_1 s^2 + \\mathrm{Lp}_2 s^4 + \\mathrm{Lp}_3 s^6 + \\mathrm{Lp}_4 s^8 + \\mathrm{Lp}_5 s^{10} + \\mathrm{Lp}_6 s^{12} + \\mathrm{Lp}_7 s^{14}\n*     ```\n*\n*     and\n*\n*     ```tex\n*     | \\mathrm{Lp}_1 s^2 + \\ldots + \\mathrm{Lp}_7 s^14 - R(z) | \\leq 2^{-58.45}\n*     ```\n*\n*     <!-- <note> -->\n*\n*     The values of \\\\(Lp1\\\\) to \\\\(Lp7\\\\) may be found in the source.\n*\n*     <!-- </note> -->\n*\n*     Note that\n*\n*     ```tex\n*     \\begin{align*}\n*     2s &= f - sf \\\\\n*        &= f - \\frac{f^2}{2} + s \\frac{f^2}{2} \\\\\n*     \\end{align*}\n*     ```\n*\n*     In order to guarantee error in \\\\(\\ln\\\\) below \\\\(1\\ \\mathrm{ulp}\\\\), we compute the log by\n*\n*     ```tex\n*     \\operatorname{log1p}(f) = f - \\biggl(\\frac{f^2}{2} - s\\biggl(\\frac{f^2}{2}+R\\biggr)\\biggr)\n*     ```\n*\n* 3.  Finally,\n*\n*     ```tex\n*     \\begin{align*}\n*     \\operatorname{log1p}(x) &= k \\cdot \\mathrm{ln2} + \\operatorname{log1p}(f) \\\\\n*     &= k \\cdot \\mathrm{ln2}_{hi}+\\biggl(f-\\biggl(\\frac{f^2}{2}-\\biggl(s\\biggl(\\frac{f^2}{2}+R\\biggr)+k \\cdot \\mathrm{ln2}_{lo}\\biggr)\\biggr)\\biggr) \\\\\n*     \\end{align*}\n*     ```\n*\n*     Here \\\\(\\mathrm{ln2}\\\\) is split into two floating point numbers:\n*\n*     ```tex\n*     \\mathrm{ln2}_{hi} + \\mathrm{ln2}_{lo}\n*     ```\n*\n*     where \\\\(n \\cdot \\mathrm{ln2}_{hi}\\\\) is always exact for \\\\(|n| < 2000\\\\).\n*\n*\n* ## Special Cases\n*\n* -   \\\\(\\operatorname{log1p}(x) = \\mathrm{NaN}\\\\) with signal if \\\\(x < -1\\\\) (including \\\\(-\\infty\\\\))\n* -   \\\\(\\operatorname{log1p}(+\\infty) = +\\infty\\\\)\n* -   \\\\(\\operatorname{log1p}(-1) = -\\infty\\\\) with signal\n* -   \\\\(\\operatorname{log1p}(\\mathrm{NaN})= \\mathrm{NaN}\\\\) with no signal\n*\n*\n* ## Notes\n*\n* -   According to an error analysis, the error is always less than \\\\(1\\\\) ulp (unit in the last place).\n*\n* -   The hexadecimal values are the intended ones for the used constants. The decimal values may be used, provided that the compiler will convert from decimal to binary accurately enough to produce the hexadecimal values shown.\n*\n* -   Assuming \\\\(\\ln(x)\\\\) is accurate, the following algorithm can be used to evaluate \\\\(\\operatorname{log1p}(x)\\\\) to within a few ULP:\n*\n*     ```javascript\n*     var u = 1.0 + x;\n*     if ( u === 1.0 ) {\n*         return x;\n*     } else {\n*         return ln(u) * (x/(u-1.0));\n*     }\n*     ```\n*\n*     See HP-15C Advanced Functions Handbook, p.193.\n*\n*\n* @param {number} x - input value\n* @returns {number} the natural logarithm of `1+x`\n*\n* @example\n* var v = log1p( 4.0 );\n* // returns ~1.609\n*\n* @example\n* var v = log1p( -1.0 );\n* // returns -Infinity\n*\n* @example\n* var v = log1p( 0.0 );\n* // returns 0.0\n*\n* @example\n* var v = log1p( -0.0 );\n* // returns -0.0\n*\n* @example\n* var v = log1p( -2.0 );\n* // returns NaN\n*\n* @example\n* var v = log1p( NaN );\n* // returns NaN\n*/\nfunction log1p( x ) {\n\tvar hfsq;\n\tvar hu;\n\tvar y;\n\tvar f;\n\tvar c;\n\tvar s;\n\tvar z;\n\tvar R;\n\tvar u;\n\tvar k;\n\n\tif ( x < -1.0 || isnan( x ) ) {\n\t\treturn NaN;\n\t}\n\tif ( x === -1.0 ) {\n\t\treturn NINF;\n\t}\n\tif ( x === PINF ) {\n\t\treturn x;\n\t}\n\tif ( x === 0.0 ) {\n\t\treturn x; // handle +-0 (IEEE 754-2008 spec)\n\t}\n\t// Set y = |x|:\n\tif ( x < 0.0 ) {\n\t\ty = -x;\n\t} else {\n\t\ty = x;\n\t}\n\t// Argument reduction...\n\tk = 1;\n\n\t// Check if argument reduction is needed and if we can just return a small value approximation requiring less computation but with equivalent accuracy...\n\tif ( y < SQRT2M1 ) { // if |x| < sqrt(2)-1 => ~0.41422\n\t\tif ( y < SMALL ) { // if |x| < 2**-29\n\t\t\tif ( y < TINY ) { // if |x| < 2**-54\n\t\t\t\treturn x;\n\t\t\t}\n\t\t\t// Use a simple two-term Taylor series...\n\t\t\treturn x - ( x*x*0.5 );\n\t\t}\n\t\t// Check if `f=x` can be represented exactly (no need for correction terms), allowing us to bypass argument reduction...\n\t\tif ( x > SQRT2HALFM1 ) { // if x > sqrt(2)/2-1 => ~-0.2929\n\t\t\t// -0.2929 < x < 0.41422\n\t\t\tk = 0;\n\t\t\tf = x; // exact\n\t\t\thu = 1;\n\t\t}\n\t}\n\t// Address case where `f` cannot be represented exactly...\n\tif ( k !== 0 ) {\n\t\tif ( y < TWO53 ) {\n\t\t\tu = 1.0 + x;\n\t\t\thu = getHighWord( u );\n\n\t\t\t// Bit shift to isolate the exponent and then subtract the bias:\n\t\t\tk = (hu>>20) - FLOAT64_EXPONENT_BIAS;\n\n\t\t\t// Correction term...\n\t\t\tif ( k > 0 ) { // positive unbiased exponent\n\t\t\t\tc = 1.0 - (u-x);\n\t\t\t} else { // nonpositive unbiased exponent\n\t\t\t\tc = x - (u-1.0);\n\t\t\t}\n\t\t\tc /= u;\n\t\t} else {\n\t\t\tu = x;\n\t\t\thu = getHighWord( u );\n\n\t\t\t// Bit shift to isolate the exponent and then subtract the bias:\n\t\t\tk = (hu>>20) - FLOAT64_EXPONENT_BIAS;\n\n\t\t\t// Correction term is zero:\n\t\t\tc = 0;\n\t\t}\n\t\t// Apply a bit mask (0 00000000000 11111111111111111111) to remove the exponent:\n\t\thu &= 0x000fffff; // max value => 1048575\n\n\t\t// Check if u significand is less than sqrt(2) significand => 0x6a09e => 01101010000010011110\n\t\tif ( hu < 434334 ) {\n\t\t\t// Normalize u by setting the exponent to 1023 (bias) => 0x3ff00000 => 0 01111111111 00000000000000000000\n\t\t\tu = setHighWord( u, hu|0x3ff00000 );\n\t\t} else {\n\t\t\tk += 1;\n\n\t\t\t// Normalize u/2 by setting the exponent to 1022 (bias-1 => 2**-1 = 1/2) => 0x3fe00000 => 0 01111111110 00000000000000000000\n\t\t\tu = setHighWord( u, hu|0x3fe00000 );\n\n\t\t\t// Subtract hu significand from next largest hu => 0 00000000001 00000000000000000000 => 0x00100000 => 1048576\n\t\t\thu = (1048576-hu)>>2;\n\t\t}\n\t\tf = u - 1.0;\n\t}\n\t// Approximation of log1p(f)...\n\thfsq = 0.5 * f * f;\n\tif ( hu === 0 ) { // if |f| < 2**-20\n\t\tif ( f === 0.0 ) {\n\t\t\tc += k * LN2_LO;\n\t\t\treturn ( k * LN2_HI ) + c;\n\t\t}\n\t\tR = hfsq * (1.0 - ( TWO_THIRDS*f ) ); // avoid division\n\t\treturn ( k*LN2_HI ) - ( (R - ( (k*LN2_LO) + c)) - f );\n\t}\n\ts = f / (2.0 + f);\n\tz = s * s;\n\n\tR = z * polyval( z );\n\n\tif ( k === 0 ) {\n\t\treturn f - ( hfsq - ( s*(hfsq+R) ) );\n\t}\n\treturn ( k*LN2_HI ) - ( (hfsq - ( (s*(hfsq+R)) + ((k*LN2_LO) + c))) - f );\n}\n\n\n// EXPORTS //\n\nexport default log1p;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.6666666666666735;\n\t}\n\treturn 0.6666666666666735 + (x * (0.3999999999940942 + (x * (0.2857142874366239 + (x * (0.22222198432149784 + (x * (0.1818357216161805 + (x * (0.15313837699209373 + (x * 0.14798198605116586))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Euler's number.\n*\n* @module @stdlib/constants-float64-e\n* @type {number}\n*\n* @example\n* import E from '@stdlib/constants-float64-e';\n* // returns 2.718281828459045\n*/\n\n\n// MAIN //\n\n/**\n* Euler's number.\n*\n* @constant\n* @type {number}\n* @default 2.718281828459045\n* @see [OEIS]{@link https://oeis.org/A001113}\n* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/E_(mathematical_constant)}\n*/\nvar E = 2.718281828459045235360287471352662497757247093699959574966;\n\n\n// EXPORTS //\n\nexport default E;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Difference between one and the smallest value greater than one that can be represented as a double-precision floating-point number.\n*\n* @module @stdlib/constants-float64-eps\n* @type {number}\n*\n* @example\n* import FLOAT64_EPSILON from '@stdlib/constants-float64-eps';\n* // returns 2.220446049250313e-16\n*/\n\n\n// MAIN //\n\n/**\n* Difference between one and the smallest value greater than one that can be represented as a double-precision floating-point number.\n*\n* ## Notes\n*\n* The difference is\n*\n* ```tex\n* \\frac{1}{2^{52}}\n* ```\n*\n* @constant\n* @type {number}\n* @default 2.220446049250313e-16\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n* @see [Machine Epsilon]{@link https://en.wikipedia.org/wiki/Machine_epsilon}\n*/\nvar FLOAT64_EPSILON = 2.2204460492503130808472633361816E-16;\n\n\n// EXPORTS //\n\nexport default FLOAT64_EPSILON;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn Infinity;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = 709811.662581658 + (x * (679979.8474157227 + (x * (293136.7857211597 + (x * (74887.54032914672 + (x * (12555.290582413863 + (x * (1443.4299244417066 + (x * (115.24194596137347 + (x * (6.309239205732627 + (x * (0.22668404630224365 + (x * (0.004826466289237662 + (x * 0.00004624429436045379))))))))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 0.0 + (x * (362880.0 + (x * (1026576.0 + (x * (1172700.0 + (x * (723680.0 + (x * (269325.0 + (x * (63273.0 + (x * (9450.0 + (x * (870.0 + (x * (45.0 + (x * 1.0))))))))))))))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = 0.00004624429436045379 + (x * (0.004826466289237662 + (x * (0.22668404630224365 + (x * (6.309239205732627 + (x * (115.24194596137347 + (x * (1443.4299244417066 + (x * (12555.290582413863 + (x * (74887.54032914672 + (x * (293136.7857211597 + (x * (679979.8474157227 + (x * 709811.662581658))))))))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (45.0 + (x * (870.0 + (x * (9450.0 + (x * (63273.0 + (x * (269325.0 + (x * (723680.0 + (x * (1172700.0 + (x * (1026576.0 + (x * (362880.0 + (x * 0.0))))))))))))))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/beta.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport log1p from '@stdlib/math-base-special-log1p';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport abs from '@stdlib/math-base-special-abs';\nimport exp from '@stdlib/math-base-special-exp';\nimport pow from '@stdlib/math-base-special-pow';\nimport E from '@stdlib/constants-float64-e';\nimport EPSILON from '@stdlib/constants-float64-eps';\nimport lanczosSumExpGScaled from './lanczos_sum_expg_scaled.js'; // Lanczos approximation scaled by exp(G)\n\n\n// VARIABLES //\n\nvar G = 10.90051099999999983936049829935654997826;\n\n\n// MAIN //\n\n/**\n* Evaluate the beta function.\n*\n* @param {NonNegativeNumber} a - input value\n* @param {NonNegativeNumber} b - input value\n* @returns {number} evaluated beta function\n*\n* @example\n* var v = beta( 0.0, 0.5 );\n* // returns Infinity\n*\n* @example\n* var v = beta( 1.0, 1.0 );\n* // returns 1.0\n*\n* @example\n* var v = beta( -1.0, 2.0 );\n* // returns NaN\n*\n* @example\n* var v = beta( 5.0, 0.2 );\n* // returns ~3.382\n*\n* @example\n* var v = beta( 4.0, 1.0 );\n* // returns 0.25\n*\n* @example\n* var v = beta( NaN, 2.0 );\n* // returns NaN\n*/\nfunction beta( a, b ) {\n\tvar ambh;\n\tvar agh;\n\tvar bgh;\n\tvar cgh;\n\tvar res;\n\tvar tmp;\n\tvar c;\n\n\tif ( isnan( a ) || isnan( b ) ) {\n\t\treturn NaN;\n\t}\n\tif ( a < 0.0 || b < 0.0 ) {\n\t\treturn NaN;\n\t}\n\tif ( b === 1.0 ) {\n\t\treturn 1.0 / a;\n\t}\n\tif ( a === 1.0 ) {\n\t\treturn 1.0 / b;\n\t}\n\tc = a + b;\n\tif ( c < EPSILON ) {\n\t\tres = c / a;\n\t\tres /= b;\n\t\treturn res;\n\t}\n\n\t// Special cases:\n\tif ( c === a && b < EPSILON ) {\n\t\treturn 1.0 / b;\n\t}\n\tif ( c === b && a < EPSILON ) {\n\t\treturn 1.0 / a;\n\t}\n\n\tif ( a < b ) {\n\t\t// Swap `a` and `b`:\n\t\ttmp = b;\n\t\tb = a;\n\t\ta = tmp;\n\t}\n\n\t// Lanczos calculation:\n\tagh = a + G - 0.5;\n\tbgh = b + G - 0.5;\n\tcgh = c + G - 0.5;\n\tres = lanczosSumExpGScaled( a ) * ( lanczosSumExpGScaled( b )/lanczosSumExpGScaled( c ) ); // eslint-disable-line max-len\n\tambh = a - 0.5 - b;\n\tif ( ( abs( b*ambh ) < ( cgh*100.0 ) ) && a > 100.0 ) {\n\t\t// Special case where the base of the power term is close to 1; compute `(1+x)^y` instead:\n\t\tres *= exp( ambh * log1p( -b/cgh ) );\n\t} else {\n\t\tres *= pow( agh/cgh, ambh );\n\t}\n\tif ( cgh > 1.0e10 ) {\n\t\t// This avoids possible overflow, but appears to be marginally less accurate:\n\t\tres *= pow( (agh/cgh)*(bgh/cgh), b );\n\t} else {\n\t\tres *= pow( (agh*bgh)/(cgh*cgh), b );\n\t}\n\tres *= sqrt( E/bgh);\n\treturn res;\n}\n\n\n// EXPORTS //\n\nexport default beta;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Tests if a double-precision floating-point numeric value is positive zero.\n*\n* @param {number} x - value to test\n* @returns {boolean} boolean indicating whether the value is positive zero\n*\n* @example\n* var bool = isPositiveZero( 0.0 );\n* // returns true\n*\n* @example\n* var bool = isPositiveZero( -0.0 );\n* // returns false\n*/\nfunction isPositiveZero( x ) {\n\treturn (x === 0.0 && 1.0/x === PINF);\n}\n\n\n// EXPORTS //\n\nexport default isPositiveZero;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPositiveZero from '@stdlib/math-base-assert-is-positive-zero';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Returns the maximum value.\n*\n* @param {number} [x] - first number\n* @param {number} [y] - second number\n* @param {...number} [args] - numbers\n* @returns {number} maximum value\n*\n* @example\n* var v = max( 3.14, 4.2 );\n* // returns 4.2\n*\n* @example\n* var v = max( 5.9, 3.14, 4.2 );\n* // returns 5.9\n*\n* @example\n* var v = max( 3.14, NaN );\n* // returns NaN\n*\n* @example\n* var v = max( +0.0, -0.0 );\n* // returns +0.0\n*/\nfunction max( x, y ) {\n\tvar len;\n\tvar m;\n\tvar v;\n\tvar i;\n\n\tlen = arguments.length;\n\tif ( len === 2 ) {\n\t\tif ( isnan( x ) || isnan( y ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x === PINF || y === PINF ) {\n\t\t\treturn PINF;\n\t\t}\n\t\tif ( x === y && x === 0.0 ) {\n\t\t\tif ( isPositiveZero( x ) ) {\n\t\t\t\treturn x;\n\t\t\t}\n\t\t\treturn y;\n\t\t}\n\t\tif ( x > y ) {\n\t\t\treturn x;\n\t\t}\n\t\treturn y;\n\t}\n\tm = NINF;\n\tfor ( i = 0; i < len; i++ ) {\n\t\tv = arguments[ i ];\n\t\tif ( isnan( v ) || v === PINF ) {\n\t\t\treturn v;\n\t\t}\n\t\tif ( v > m ) {\n\t\t\tm = v;\n\t\t} else if (\n\t\t\tv === m &&\n\t\t\tv === 0.0 &&\n\t\t\tisPositiveZero( v )\n\t\t) {\n\t\t\tm = v;\n\t\t}\n\t}\n\treturn m;\n}\n\n\n// EXPORTS //\n\nexport default max;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport NINF from '@stdlib/constants-float64-ninf';\n\n\n// MAIN //\n\n/**\n* Tests if a double-precision floating-point numeric value is negative zero.\n*\n* @param {number} x - value to test\n* @returns {boolean} boolean indicating whether the value is negative zero\n*\n* @example\n* var bool = isNegativeZero( -0.0 );\n* // returns true\n*\n* @example\n* var bool = isNegativeZero( 0.0 );\n* // returns false\n*/\nfunction isNegativeZero( x ) {\n\treturn (x === 0.0 && 1.0/x === NINF);\n}\n\n\n// EXPORTS //\n\nexport default isNegativeZero;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNegativeZero from '@stdlib/math-base-assert-is-negative-zero';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Returns the minimum value.\n*\n* @param {number} [x] - first number\n* @param {number} [y] - second number\n* @param {...number} [args] - numbers\n* @returns {number} minimum value\n*\n* @example\n* var v = min( 3.14, 4.2 );\n* // returns 3.14\n*\n* @example\n* var v = min( 5.9, 3.14, 4.2 );\n* // returns 3.14\n*\n* @example\n* var v = min( 3.14, NaN );\n* // returns NaN\n*\n* @example\n* var v = min( +0.0, -0.0 );\n* // returns -0.0\n*/\nfunction min( x, y ) {\n\tvar len;\n\tvar m;\n\tvar v;\n\tvar i;\n\n\tlen = arguments.length;\n\tif ( len === 2 ) {\n\t\tif ( isnan( x ) || isnan( y ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x === NINF || y === NINF ) {\n\t\t\treturn NINF;\n\t\t}\n\t\tif ( x === y && x === 0.0 ) {\n\t\t\tif ( isNegativeZero( x ) ) {\n\t\t\t\treturn x;\n\t\t\t}\n\t\t\treturn y;\n\t\t}\n\t\tif ( x < y ) {\n\t\t\treturn x;\n\t\t}\n\t\treturn y;\n\t}\n\tm = PINF;\n\tfor ( i = 0; i < len; i++ ) {\n\t\tv = arguments[ i ];\n\t\tif ( isnan( v ) || v === NINF ) {\n\t\t\treturn v;\n\t\t}\n\t\tif ( v < m ) {\n\t\t\tm = v;\n\t\t} else if (\n\t\t\tv === m &&\n\t\t\tv === 0.0 &&\n\t\t\tisNegativeZero( v )\n\t\t) {\n\t\t\tm = v;\n\t\t}\n\t}\n\treturn m;\n}\n\n\n// EXPORTS //\n\nexport default min;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Maximum double-precision floating-point number.\n*\n* @module @stdlib/constants-float64-max\n* @type {number}\n*\n* @example\n* import FLOAT64_MAX from '@stdlib/constants-float64-max';\n* // returns 1.7976931348623157e+308\n*/\n\n\n// MAIN //\n\n/**\n* Maximum double-precision floating-point number.\n*\n* ## Notes\n*\n* The maximum is given by\n*\n* ```tex\n* 2^{1023} (2 - 2^{-52})\n* ```\n*\n* @constant\n* @type {number}\n* @default 1.7976931348623157e+308\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_MAX = 1.7976931348623157e+308;\n\n\n// EXPORTS //\n\nexport default FLOAT64_MAX;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Square root of the mathematical constant `π` times `2`.\n*\n* @module @stdlib/constants-float64-sqrt-two-pi\n* @type {number}\n*\n* @example\n* import SQRT_TWO_PI from '@stdlib/constants-float64-sqrt-two-pi';\n* // returns 2.5066282746310007\n*/\n\n\n// MAIN //\n\n/**\n* Square root of the mathematical constant `π` times `2`.\n*\n* @constant\n* @type {number}\n* @default 2.5066282746310007\n* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Pi}\n*/\nvar SQRT_TWO_PI = 2.506628274631000502415765284811045253e+00;\n\n\n// EXPORTS //\n\nexport default SQRT_TWO_PI;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C code, copyright, license, and constants are from [Cephes]{@link http://www.netlib.org/cephes}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright 1984, 1987, 1989, 1992, 2000 by Stephen L. Moshier\n*\n* Some software in this archive may be from the book _Methods and Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster International, 1989) or from the Cephes Mathematical Library, a commercial product. In either event, it is copyrighted by the author. What you see here may be used freely but it comes with no support or guarantee.\n*\n* Stephen L. Moshier\n* moshier@na-net.ornl.gov\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport SQRT_TWO_PI from '@stdlib/constants-float64-sqrt-two-pi';\nimport pow from '@stdlib/math-base-special-pow';\nimport exp from '@stdlib/math-base-special-exp';\nimport polyval from './polyval_s.js';\n\n\n// VARIABLES //\n\nvar MAX_STIRLING = 143.01608;\n\n\n// MAIN //\n\n/**\n* Evaluates the gamma function using Stirling's formula. The polynomial is valid for \\\\(33 \\leq x \\leq 172\\\\).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} function value\n*/\nfunction gamma( x ) {\n\tvar w;\n\tvar y;\n\tvar v;\n\n\tw = 1.0 / x;\n\tw = 1.0 + ( w * polyval( w ) );\n\ty = exp( x );\n\n\t// Check `x` to avoid `pow()` overflow...\n\tif ( x > MAX_STIRLING ) {\n\t\tv = pow( x, ( 0.5*x ) - 0.25 );\n\t\ty = v * (v/y);\n\t} else {\n\t\ty = pow( x, x-0.5 ) / y;\n\t}\n\treturn SQRT_TWO_PI * y * w;\n}\n\n\n// EXPORTS //\n\nexport default gamma;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.08333333333334822;\n\t}\n\treturn 0.08333333333334822 + (x * (0.0034722222160545866 + (x * (-0.0026813261780578124 + (x * (-0.00022954996161337813 + (x * 0.0007873113957930937))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* The Euler-Mascheroni constant.\n*\n* @module @stdlib/constants-float64-eulergamma\n* @type {number}\n*\n* @example\n* import GAMMA from '@stdlib/constants-float64-eulergamma';\n* // returns 0.5772156649015329\n*/\n\n\n// MAIN //\n\n/**\n* The Euler-Mascheroni constant.\n*\n* @constant\n* @type {number}\n* @default 0.5772156649015329\n* @see [OEIS]{@link http://oeis.org/A001620}\n* @see [Mathworld]{@link http://mathworld.wolfram.com/Euler-MascheroniConstant.html}\n*/\nvar GAMMA = 0.577215664901532860606512090082402431042;\n\n\n// EXPORTS //\n\nexport default GAMMA;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C code, copyright, license, and constants are from [Cephes]{@link http://www.netlib.org/cephes}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright 1984, 1987, 1989, 1992, 2000 by Stephen L. Moshier\n*\n* Some software in this archive may be from the book _Methods and Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster International, 1989) or from the Cephes Mathematical Library, a commercial product. In either event, it is copyrighted by the author. What you see here may be used freely but it comes with no support or guarantee.\n*\n* Stephen L. Moshier\n* moshier@na-net.ornl.gov\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport EULER from '@stdlib/constants-float64-eulergamma';\n\n\n// MAIN //\n\n/**\n* Evaluates the gamma function using a small-value approximation.\n*\n* @private\n* @param {number} x - input value\n* @param {number} z - scale factor\n* @returns {number} function value\n*/\nfunction gamma( x, z ) {\n\treturn z / ( (1.0+( EULER*x )) * x );\n}\n\n\n// EXPORTS //\n\nexport default gamma;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C code, long comment, copyright, license, and constants are from [Cephes]{@link http://www.netlib.org/cephes}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright 1984, 1987, 1989, 1992, 2000 by Stephen L. Moshier\n*\n* Some software in this archive may be from the book _Methods and Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster International, 1989) or from the Cephes Mathematical Library, a commercial product. In either event, it is copyrighted by the author. What you see here may be used freely but it comes with no support or guarantee.\n*\n* Stephen L. Moshier\n* moshier@na-net.ornl.gov\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isInteger from '@stdlib/math-base-assert-is-integer';\nimport isNegativeZero from '@stdlib/math-base-assert-is-negative-zero';\nimport abs from '@stdlib/math-base-special-abs';\nimport floor from '@stdlib/math-base-special-floor';\nimport sin from '@stdlib/math-base-special-sin';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport PI from '@stdlib/constants-float64-pi';\nimport stirlingApprox from './stirling_approximation.js';\nimport smallApprox from './small_approximation.js';\nimport rateval from './rational_pq.js';\n\n\n// MAIN //\n\n/**\n* Evaluates the gamma function.\n*\n* ## Method\n*\n* 1.  Arguments \\\\(|x| \\leq 34\\\\) are reduced by recurrence and the function approximated by a rational function of degree \\\\(6/7\\\\) in the interval \\\\((2,3)\\\\).\n* 2.  Large negative arguments are made positive using a reflection formula.\n* 3.  Large arguments are handled by Stirling's formula.\n*\n*\n* ## Notes\n*\n* -   Relative error:\n*\n*     | arithmetic | domain    | # trials | peak    | rms     |\n*     |:----------:|:---------:|:--------:|:-------:|:-------:|\n*     | DEC        | -34,34    | 10000    | 1.3e-16 | 2.5e-17 |\n*     | IEEE       | -170,-33  | 20000    | 2.3e-15 | 3.3e-16 |\n*     | IEEE       | -33, 33   | 20000    | 9.4e-16 | 2.2e-16 |\n*     | IEEE       | 33, 171.6 | 20000    | 2.3e-15 | 3.2e-16 |\n*\n* -   Error for arguments outside the test range will be larger owing to error amplification by the exponential function.\n*\n*\n* @param {number} x - input value\n* @returns {number} function value\n*\n* @example\n* var v = gamma( 4.0 );\n* // returns 6.0\n*\n* @example\n* var v = gamma( -1.5 );\n* // returns ~2.363\n*\n* @example\n* var v = gamma( -0.5 );\n* // returns ~-3.545\n*\n* @example\n* var v = gamma( 0.5 );\n* // returns ~1.772\n*\n* @example\n* var v = gamma( 0.0 );\n* // returns Infinity\n*\n* @example\n* var v = gamma( -0.0 );\n* // returns -Infinity\n*\n* @example\n* var v = gamma( NaN );\n* // returns NaN\n*/\nfunction gamma( x ) {\n\tvar sign;\n\tvar q;\n\tvar p;\n\tvar z;\n\tif (\n\t\t(isInteger( x ) && x < 0) ||\n\t\tx === NINF ||\n\t\tisnan( x )\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x === 0.0 ) {\n\t\tif ( isNegativeZero( x ) ) {\n\t\t\treturn NINF;\n\t\t}\n\t\treturn PINF;\n\t}\n\tif ( x > 171.61447887182298 ) {\n\t\treturn PINF;\n\t}\n\tif ( x < -170.5674972726612 ) {\n\t\treturn 0.0;\n\t}\n\tq = abs( x );\n\tif ( q > 33.0 ) {\n\t\tif ( x >= 0.0 ) {\n\t\t\treturn stirlingApprox( x );\n\t\t}\n\t\tp = floor( q );\n\n\t\t// Check whether `x` is even...\n\t\tif ( (p&1) === 0 ) {\n\t\t\tsign = -1.0;\n\t\t} else {\n\t\t\tsign = 1.0;\n\t\t}\n\t\tz = q - p;\n\t\tif ( z > 0.5 ) {\n\t\t\tp += 1.0;\n\t\t\tz = q - p;\n\t\t}\n\t\tz = q * sin( PI * z );\n\t\treturn sign * PI / ( abs(z)*stirlingApprox(q) );\n\t}\n\t// Reduce `x`...\n\tz = 1.0;\n\twhile ( x >= 3.0 ) {\n\t\tx -= 1.0;\n\t\tz *= x;\n\t}\n\twhile ( x < 0.0 ) {\n\t\tif ( x > -1.0e-9 ) {\n\t\t\treturn smallApprox( x, z );\n\t\t}\n\t\tz /= x;\n\t\tx += 1.0;\n\t}\n\twhile ( x < 2.0 ) {\n\t\tif ( x < 1.0e-9 ) {\n\t\t\treturn smallApprox( x, z );\n\t\t}\n\t\tz /= x;\n\t\tx += 1.0;\n\t}\n\tif ( x === 2.0 ) {\n\t\treturn z;\n\t}\n\tx -= 2.0;\n\treturn z * rateval( x );\n}\n\n\n// EXPORTS //\n\nexport default gamma;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn 1.0;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = 1.0 + (x * (0.4942148268014971 + (x * (0.20744822764843598 + (x * (0.04763678004571372 + (x * (0.010421379756176158 + (x * (0.0011913514700658638 + (x * (0.00016011952247675185 + (x * 0.0))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (0.0714304917030273 + (x * (-0.23459179571824335 + (x * (0.035823639860549865 + (x * (0.011813978522206043 + (x * (-0.004456419138517973 + (x * (0.0005396055804933034 + (x * -0.000023158187332412014))))))))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = 0.0 + (x * (0.00016011952247675185 + (x * (0.0011913514700658638 + (x * (0.010421379756176158 + (x * (0.04763678004571372 + (x * (0.20744822764843598 + (x * (0.4942148268014971 + (x * 1.0))))))))))))); // eslint-disable-line max-len\n\t\ts2 = -0.000023158187332412014 + (x * (0.0005396055804933034 + (x * (-0.004456419138517973 + (x * (0.011813978522206043 + (x * (0.035823639860549865 + (x * (-0.23459179571824335 + (x * (0.0714304917030273 + (x * 1.0))))))))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isInteger from '@stdlib/math-base-assert-is-integer';\nimport gamma from '@stdlib/math-base-special-gamma';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport FACTORIALS from './factorials.json';\n\n\n// VARIABLES //\n\nvar MAX_FACTORIAL = 170; // TODO: consider extracting as a constant\n\n\n// MAIN //\n\n/**\n* Evaluates the factorial of `x`.\n*\n* @param {number} x - input value\n* @returns {number} factorial\n*\n* @example\n* var v = factorial( 3.0 );\n* // returns 6.0\n*\n* @example\n* var v = factorial( -1.5 );\n* // returns ~-3.545\n*\n* @example\n* var v = factorial( -0.5 );\n* // returns ~1.772\n*\n* @example\n* var v = factorial( 0.5 );\n* // returns ~0.886\n*\n* @example\n* var v = factorial( -10.0 );\n* // returns NaN\n*\n* @example\n* var v = factorial( 171.0 );\n* // returns Infinity\n*\n* @example\n* var v = factorial( NaN );\n* // returns NaN\n*/\nfunction factorial( x ) {\n\tif ( isnan( x ) ) {\n\t\treturn NaN;\n\t}\n\tif ( isInteger( x ) ) {\n\t\tif ( x < 0 ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x <= MAX_FACTORIAL ) {\n\t\t\treturn FACTORIALS[ x ];\n\t\t}\n\t\treturn PINF;\n\t}\n\treturn gamma( x + 1.0 );\n}\n\n\n// EXPORTS //\n\nexport default factorial;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn Infinity;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = 38474670393.31777 + (x * (36857665043.51951 + (x * (15889202453.72942 + (x * (4059208354.298835 + (x * (680547661.1834733 + (x * (78239755.00312005 + (x * (6246580.776401795 + (x * (341986.3488721347 + (x * (12287.194511824551 + (x * (261.61404416416684 + (x * 2.5066282746310007))))))))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 0.0 + (x * (362880.0 + (x * (1026576.0 + (x * (1172700.0 + (x * (723680.0 + (x * (269325.0 + (x * (63273.0 + (x * (9450.0 + (x * (870.0 + (x * (45.0 + (x * 1.0))))))))))))))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = 2.5066282746310007 + (x * (261.61404416416684 + (x * (12287.194511824551 + (x * (341986.3488721347 + (x * (6246580.776401795 + (x * (78239755.00312005 + (x * (680547661.1834733 + (x * (4059208354.298835 + (x * (15889202453.72942 + (x * (36857665043.51951 + (x * 38474670393.31777))))))))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (45.0 + (x * (870.0 + (x * (9450.0 + (x * (63273.0 + (x * (269325.0 + (x * (723680.0 + (x * (1172700.0 + (x * (1026576.0 + (x * (362880.0 + (x * 0.0))))))))))))))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Arbitrary constant `g` to be used in Lanczos approximation functions.\n*\n* @module @stdlib/constants-float64-gamma-lanczos-g\n* @type {number}\n*\n* @example\n* import FLOAT64_GAMMA_LANCZOS_G from '@stdlib/constants-float64-gamma-lanczos-g';\n* // returns 10.900511\n*/\n\n\n// MAIN //\n\n/**\n* Arbitrary constant `g` to be used in Lanczos approximation functions.\n*\n* @constant\n* @type {number}\n* @default 10.900511\n* @see [Lanczos Approximation]{@link https://en.wikipedia.org/wiki/Lanczos_approximation}\n*/\nvar FLOAT64_GAMMA_LANCZOS_G = 10.90051099999999983936049829935654997826;\n\n\n// EXPORTS //\n\nexport default FLOAT64_GAMMA_LANCZOS_G;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* Copyright John Maddock 2006-7, 2013-14.\n* Copyright Paul A. Bristow 2007, 2013-14.\n* Copyright Nikhar Agrawal 2013-14.\n* Copyright Christopher Kormanyos 2013-14.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport lanczosSum from '@stdlib/math-base-special-gamma-lanczos-sum';\nimport gamma from '@stdlib/math-base-special-gamma';\nimport log1p from '@stdlib/math-base-special-log1p';\nimport abs from '@stdlib/math-base-special-abs';\nimport exp from '@stdlib/math-base-special-exp';\nimport pow from '@stdlib/math-base-special-pow';\nimport EPSILON from '@stdlib/constants-float64-eps';\nimport E from '@stdlib/constants-float64-e';\nimport G from '@stdlib/constants-float64-gamma-lanczos-g';\n\n\n// VARIABLES //\n\nvar MAX_FACTORIAL = 170; // TODO: consider moving to pkg\nvar FACTORIAL_169 = 4.269068009004705e+304;\n\n\n// MAIN //\n\n/**\n* Calculates the ratio of two gamma functions via Lanczos approximation.\n*\n* ## Notes\n*\n* -   When \\\\( z < \\epsilon \\\\), we get spurious numeric overflow unless we're very careful. This can occur either inside `lanczosSum(z)` or in the final combination of terms. To avoid this, split the product up into 2 (or 3) parts:\n*\n*     ```tex\n*     \\begin{align*}\n*     G(z) / G(L) &= 1 / (z \\cdot G(L)) ; z < \\eps, L = z + \\delta = \\delta \\\\\n*     z * G(L) &= z * G(lim) \\cdot (G(L)/G(lim)) ; lim = \\text{largest factorial}\n*     \\end{align*}\n*     ```\n*\n* @private\n* @param {number} z - first gamma parameter\n* @param {number} delta - difference\n* @returns {number} gamma ratio\n*/\nfunction gammaDeltaRatioLanczos( z, delta ) {\n\tvar result;\n\tvar ratio;\n\tvar zgh;\n\n\tif ( z < EPSILON ) {\n\t\tif ( delta > MAX_FACTORIAL ) {\n\t\t\tratio = gammaDeltaRatioLanczos( delta, MAX_FACTORIAL-delta );\n\t\t\tratio *= z;\n\t\t\tratio *= FACTORIAL_169;\n\t\t\treturn 1.0 / ratio;\n\t\t}\n\t\treturn 1.0 / ( z * gamma( z+delta ) );\n\t}\n\tzgh = z + G - 0.5;\n\tif ( z + delta === z ) {\n\t\tif ( abs(delta) < 10.0 ) {\n\t\t\tresult = exp( ( 0.5-z ) * log1p( delta/zgh ) );\n\t\t} else {\n\t\t\tresult = 1.0;\n\t\t}\n\t} else {\n\t\tif ( abs(delta) < 10.0 ) {\n\t\t\tresult = exp( ( 0.5-z ) * log1p( delta/zgh ));\n\t\t} else {\n\t\t\tresult = pow( zgh / (zgh+delta), z-0.5 );\n\t\t}\n\t\t// Split up the calculation to avoid spurious overflow:\n\t\tresult *= lanczosSum( z ) / lanczosSum( z + delta );\n\t}\n\tresult *= pow( E / ( zgh+delta ), delta );\n\treturn result;\n}\n\n\n// EXPORTS //\n\nexport default gammaDeltaRatioLanczos;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* Copyright John Maddock 2006-7, 2013-14.\n* Copyright Paul A. Bristow 2007, 2013-14.\n* Copyright Nikhar Agrawal 2013-14.\n* Copyright Christopher Kormanyos 2013-14.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math-base-special-abs';\nimport floor from '@stdlib/math-base-special-floor';\nimport gamma from '@stdlib/math-base-special-gamma';\nimport factorial from '@stdlib/math-base-special-factorial';\nimport gammaDeltaRatioLanczos from './gamma_delta_ratio_lanczos.js';\n\n\n// VARIABLES //\n\nvar MAX_FACTORIAL = 170; // TODO: consider moving to pkg\n\n\n// MAIN //\n\n/**\n* Computes the ratio of two gamma functions.\n*\n* ## Notes\n*\n* -   Specifically, the function evaluates\n*\n*     ```tex\n*     \\frac{ \\Gamma( z ) }{ \\Gamma( z + \\delta ) }\n*     ```\n*\n* @param {number} z - first gamma parameter\n* @param {number} delta - difference\n* @returns {number} gamma ratio\n*\n* @example\n* var y = gammaDeltaRatio( 2.0, 3.0 );\n* // returns ~0.042\n*\n* @example\n* var y = gammaDeltaRatio( 4.0, 0.5 );\n* // returns ~0.516\n*\n* @example\n* var y = gammaDeltaRatio( 100.0, 0.0 );\n* // returns 1.0\n*/\nfunction gammaDeltaRatio( z, delta ) {\n\tvar result;\n\tvar idelta;\n\tvar iz;\n\n\tif ( z <= 0.0 || z + delta <= 0.0 ) {\n\t\t// This isn't very sophisticated, or accurate, but it does work:\n\t\treturn gamma( z ) / gamma( z + delta );\n\t}\n\tidelta = floor( delta );\n\tif ( idelta === delta ) {\n\t\tiz = floor( z );\n\t\tif ( iz === z ) {\n\t\t\t// As both `z` and `delta` are integers, see if we can use a table lookup:\n\t\t\tif ( z <= MAX_FACTORIAL && ( z + delta <= MAX_FACTORIAL ) ) {\n\t\t\t\treturn factorial( iz - 1.0 ) / factorial( idelta + iz - 1.0 );\n\t\t\t}\n\t\t}\n\t\tif ( abs(delta) < 20.0 ) {\n\t\t\t// As `delta` is a small integer, we can use a finite product:\n\t\t\tif ( delta === 0.0 ) {\n\t\t\t\treturn 1.0;\n\t\t\t}\n\t\t\tif ( delta < 0.0 ) {\n\t\t\t\tz -= 1.0;\n\t\t\t\tresult = z;\n\t\t\t\tdelta += 1.0;\n\t\t\t\twhile ( delta !== 0.0 ) {\n\t\t\t\t\tz -= 1.0;\n\t\t\t\t\tresult *= z;\n\t\t\t\t\tdelta += 1.0;\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\tresult = 1.0 / z;\n\t\t\tdelta -= 1.0;\n\t\t\twhile ( delta !== 0.0 ) {\n\t\t\t\tz += 1.0;\n\t\t\t\tresult /= z;\n\t\t\t\tdelta -= 1.0;\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t}\n\treturn gammaDeltaRatioLanczos( z, delta );\n}\n\n\n// EXPORTS //\n\nexport default gammaDeltaRatio;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_cos.c}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport getHighWord from '@stdlib/number-float64-base-get-high-word';\nimport kernelCos from '@stdlib/math-base-special-kernel-cos';\nimport kernelSin from '@stdlib/math-base-special-kernel-sin';\nimport rempio2 from '@stdlib/math-base-special-rempio2';\n\n\n// VARIABLES //\n\n// Scratch array for storing temporary values:\nvar buffer = [ 0.0, 0.0 ]; // WARNING: not thread safe\n\n// High word absolute value mask: 0x7fffffff => 01111111111111111111111111111111\nvar HIGH_WORD_ABS_MASK = 0x7fffffff|0; // asm type annotation\n\n// High word of π/4: 0x3fe921fb => 00111111111010010010000111111011\nvar HIGH_WORD_PIO4 = 0x3fe921fb|0; // asm type annotation\n\n// High word of 2^-27: 0x3e400000 => 00111110010000000000000000000000\nvar HIGH_WORD_TWO_NEG_27 = 0x3e400000|0; // asm type annotation\n\n// High word exponent mask: 0x7ff00000 => 01111111111100000000000000000000\nvar HIGH_WORD_EXPONENT_MASK = 0x7ff00000|0; // asm type annotation\n\n\n// MAIN //\n\n/**\n* Computes the cosine of a number.\n*\n* @param {number} x - input value (in radians)\n* @returns {number} cosine\n*\n* @example\n* var v = cos( 0.0 );\n* // returns 1.0\n*\n* @example\n* var v = cos( 3.141592653589793/4.0 );\n* // returns ~0.707\n*\n* @example\n* var v = cos( -3.141592653589793/6.0 );\n* // returns ~0.866\n*\n* @example\n* var v = cos( NaN );\n* // returns NaN\n*/\nfunction cos( x ) {\n\tvar ix;\n\tvar n;\n\n\tix = getHighWord( x );\n\tix &= HIGH_WORD_ABS_MASK;\n\n\t// Case: |x| ~< pi/4\n\tif ( ix <= HIGH_WORD_PIO4 ) {\n\t\t// Case: x < 2**-27\n\t\tif ( ix < HIGH_WORD_TWO_NEG_27 ) {\n\t\t\treturn 1.0;\n\t\t}\n\t\treturn kernelCos( x, 0.0 );\n\t}\n\t// Case: cos(Inf or NaN) is NaN */\n\tif ( ix >= HIGH_WORD_EXPONENT_MASK ) {\n\t\treturn NaN;\n\t}\n\t// Case: Argument reduction needed...\n\tn = rempio2( x, buffer );\n\tswitch ( n & 3 ) {\n\tcase 0:\n\t\treturn kernelCos( buffer[ 0 ], buffer[ 1 ] );\n\tcase 1:\n\t\treturn -kernelSin( buffer[ 0 ], buffer[ 1 ] );\n\tcase 2:\n\t\treturn -kernelCos( buffer[ 0 ], buffer[ 1 ] );\n\tdefault:\n\t\treturn kernelSin( buffer[ 0 ], buffer[ 1 ] );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default cos;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* Notes:\n*\t=> sin(-x) = -sin(x)\n*\t=> sin(+n) = +0, where `n` is a positive integer\n*\t=> sin(-n) = -sin(+n) = -0, where `n` is a positive integer\n*\t=> cos(-x) = cos(x)\n*/\n\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isInfinite from '@stdlib/math-base-assert-is-infinite';\nimport cos from '@stdlib/math-base-special-cos';\nimport sin from '@stdlib/math-base-special-sin';\nimport abs from '@stdlib/math-base-special-abs';\nimport copysign from '@stdlib/math-base-special-copysign';\nimport PI from '@stdlib/constants-float64-pi';\n\n\n// MAIN //\n\n/**\n* Computes the value of `sin(πx)`.\n*\n* @param {number} x - input value\n* @returns {number} function value\n*\n* @example\n* var y = sinpi( 0.0 );\n* // returns 0.0\n*\n* @example\n* var y = sinpi( 0.5 );\n* // returns 1.0\n*\n* @example\n* var y = sinpi( 0.9 );\n* // returns ~0.309\n*\n* @example\n* var y = sinpi( NaN );\n* // returns NaN\n*/\nfunction sinpi( x ) {\n\tvar ar;\n\tvar r;\n\tif ( isnan( x ) ) {\n\t\treturn NaN;\n\t}\n\tif ( isInfinite( x ) ) {\n\t\treturn NaN;\n\t}\n\t// Argument reduction (reduce to [0,2))...\n\tr = x % 2.0; // sign preserving\n\tar = abs( r );\n\n\t// If `x` is an integer, the mod is an integer...\n\tif ( ar === 0.0 || ar === 1.0 ) {\n\t\treturn copysign( 0.0, r );\n\t}\n\tif ( ar < 0.25 ) {\n\t\treturn sin( PI*r );\n\t}\n\t// In each of the following, we further reduce to [-π/4,π/4)...\n\tif ( ar < 0.75 ) {\n\t\tar = 0.5 - ar;\n\t\treturn copysign( cos( PI*ar ), r );\n\t}\n\tif ( ar < 1.25 ) {\n\t\tr = copysign( 1.0, r ) - r;\n\t\treturn sin( PI*r );\n\t}\n\tif ( ar < 1.75 ) {\n\t\tar -= 1.5;\n\t\treturn -copysign( cos( PI*ar ), r );\n\t}\n\tr -= copysign( 2.0, r );\n\treturn sin( PI*r );\n}\n\n\n// EXPORTS //\n\nexport default sinpi;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/e_lgamma_r.c}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isInfinite from '@stdlib/math-base-assert-is-infinite';\nimport abs from '@stdlib/math-base-special-abs';\nimport ln from '@stdlib/math-base-special-ln';\nimport trunc from '@stdlib/math-base-special-trunc';\nimport sinpi from '@stdlib/math-base-special-sinpi';\nimport PI from '@stdlib/constants-float64-pi';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport polyvalA1 from './polyval_a1.js';\nimport polyvalA2 from './polyval_a2.js';\nimport polyvalR from './polyval_r.js';\nimport polyvalS from './polyval_s.js';\nimport polyvalT1 from './polyval_t1.js';\nimport polyvalT2 from './polyval_t2.js';\nimport polyvalT3 from './polyval_t3.js';\nimport polyvalU from './polyval_u.js';\nimport polyvalV from './polyval_v.js';\nimport polyvalW from './polyval_w.js';\n\n\n// VARIABLES //\n\nvar A1C = 7.72156649015328655494e-02; // 0x3FB3C467E37DB0C8\nvar A2C = 3.22467033424113591611e-01; // 0x3FD4A34CC4A60FAD\nvar RC = 1.0;\nvar SC = -7.72156649015328655494e-02; // 0xBFB3C467E37DB0C8\nvar T1C = 4.83836122723810047042e-01; // 0x3FDEF72BC8EE38A2\nvar T2C = -1.47587722994593911752e-01; // 0xBFC2E4278DC6C509\nvar T3C = 6.46249402391333854778e-02; // 0x3FB08B4294D5419B\nvar UC = -7.72156649015328655494e-02; // 0xBFB3C467E37DB0C8\nvar VC = 1.0;\nvar WC = 4.18938533204672725052e-01; // 0x3FDACFE390C97D69\nvar YMIN = 1.461632144968362245;\nvar TWO52 = 4503599627370496; // 2**52\nvar TWO58 = 288230376151711744; // 2**58\nvar TINY = 8.470329472543003e-22;\nvar TC = 1.46163214496836224576e+00; // 0x3FF762D86356BE3F\nvar TF = -1.21486290535849611461e-01; // 0xBFBF19B9BCC38A42\nvar TT = -3.63867699703950536541e-18; // 0xBC50C7CAA48A971F => TT = -(tail of TF)\n\n\n// MAIN //\n\n/**\n* Evaluates the natural logarithm of the gamma function.\n*\n* ## Method\n*\n* 1.  Argument reduction for \\\\(0 < x \\leq 8\\\\). Since \\\\(\\Gamma(1+s) = s \\Gamma(s)\\\\), for \\\\(x \\in \\[0,8]\\\\), we may reduce \\\\(x\\\\) to a number in \\\\(\\[1.5,2.5]\\\\) by\n*\n*     ```tex\n*     \\operatorname{lgamma}(1+s) = \\ln(s) + \\operatorname{lgamma}(s)\n*     ```\n*\n*     For example,\n*\n*     ```tex\n*     \\begin{align*}\n*     \\operatorname{lgamma}(7.3) &= \\ln(6.3) + \\operatorname{lgamma}(6.3) \\\\\n*     &= \\ln(6.3 \\cdot 5.3) + \\operatorname{lgamma}(5.3) \\\\\n*     &= \\ln(6.3 \\cdot 5.3 \\cdot 4.3 \\cdot 3.3 \\cdot2.3) + \\operatorname{lgamma}(2.3)\n*     \\end{align*}\n*     ```\n*\n* 2.  Compute a polynomial approximation of \\\\(\\mathrm{lgamma}\\\\) around its minimum (\\\\(\\mathrm{ymin} = 1.461632144968362245\\\\)) to maintain monotonicity. On the interval \\\\(\\[\\mathrm{ymin} - 0.23, \\mathrm{ymin} + 0.27]\\\\) (i.e., \\\\(\\[1.23164,1.73163]\\\\)), we let \\\\(z = x - \\mathrm{ymin}\\\\) and use\n*\n*     ```tex\n*     \\operatorname{lgamma}(x) = -1.214862905358496078218 + z^2 \\cdot \\operatorname{poly}(z)\n*     ```\n*\n*     where \\\\(\\operatorname{poly}(z)\\\\) is a \\\\(14\\\\) degree polynomial.\n*\n* 3.  Compute a rational approximation in the primary interval \\\\(\\[2,3]\\\\). Let \\\\( s = x - 2.0 \\\\). We can thus use the approximation\n*\n*     ```tex\n*     \\operatorname{lgamma}(x) = \\frac{s}{2} + s\\frac{\\operatorname{P}(s)}{\\operatorname{Q}(s)}\n*     ```\n*\n*     with accuracy\n*\n*     ```tex\n*     \\biggl|\\frac{\\mathrm{P}}{\\mathrm{Q}} - \\biggr(\\operatorname{lgamma}(x)-\\frac{s}{2}\\biggl)\\biggl| < 2^{-61.71}\n*     ```\n*\n*     The algorithms are based on the observation\n*\n*     ```tex\n*     \\operatorname{lgamma}(2+s) = s(1 - \\gamma) + \\frac{\\zeta(2) - 1}{2} s^2 - \\frac{\\zeta(3) - 1}{3} s^3 + \\ldots\n*     ```\n*\n*     where \\\\(\\zeta\\\\) is the zeta function and \\\\(\\gamma = 0.5772156649...\\\\) is the Euler-Mascheroni constant, which is very close to \\\\(0.5\\\\).\n*\n* 4.  For \\\\(x \\geq 8\\\\),\n*\n*     ```tex\n*     \\operatorname{lgamma}(x) \\approx \\biggl(x-\\frac{1}{2}\\biggr) \\ln(x) - x + \\frac{\\ln(2\\pi)}{2} + \\frac{1}{12x} - \\frac{1}{360x^3} + \\ldots\n*     ```\n*\n*     which can be expressed\n*\n*     ```tex\n*     \\operatorname{lgamma}(x) \\approx \\biggl(x-\\frac{1}{2}\\biggr)(\\ln(x)-1)-\\frac{\\ln(2\\pi)-1}{2} + \\ldots\n*     ```\n*\n*     Let \\\\(z = \\frac{1}{x}\\\\). We can then use the approximation\n*\n*     ```tex\n*     f(z) = \\operatorname{lgamma}(x) - \\biggl(x-\\frac{1}{2}\\biggr)(\\ln(x)-1)\n*     ```\n*\n*     by\n*\n*     ```tex\n*     w = w_0 + w_1 z + w_2 z^3 + w_3 z^5 + \\ldots + w_6 z^{11}\n*     ```\n*\n*     where\n*\n*     ```tex\n*     |w - f(z)| < 2^{-58.74}\n*     ```\n*\n* 5.  For negative \\\\(x\\\\), since\n*\n*     ```tex\n*     -x \\Gamma(-x) \\Gamma(x) = \\frac{\\pi}{\\sin(\\pi x)}\n*     ```\n*\n*     where \\\\(\\Gamma\\\\) is the gamma function, we have\n*\n*     ```tex\n*     \\Gamma(x) = \\frac{\\pi}{\\sin(\\pi x)(-x)\\Gamma(-x)}\n*     ```\n*\n*     Since \\\\(\\Gamma(-x)\\\\) is positive,\n*\n*     ```tex\n*     \\operatorname{sign}(\\Gamma(x)) = \\operatorname{sign}(\\sin(\\pi x))\n*     ```\n*\n*     for \\\\(x < 0\\\\). Hence, for \\\\(x < 0\\\\),\n*\n*     ```tex\n*     \\mathrm{signgam} = \\operatorname{sign}(\\sin(\\pi x))\n*     ```\n*\n*     and\n*\n*     ```tex\n*     \\begin{align*}\n*     \\operatorname{lgamma}(x) &= \\ln(|\\Gamma(x)|) \\\\\n*     &= \\ln\\biggl(\\frac{\\pi}{|x \\sin(\\pi x)|}\\biggr) - \\operatorname{lgamma}(-x)\n*     \\end{align*}\n*     ```\n*\n*     <!-- <note> -->\n*\n*     Note that one should avoid computing \\\\(\\pi (-x)\\\\) directly in the computation of \\\\(\\sin(\\pi (-x))\\\\).\n*\n*     <!-- </note> -->\n*\n*\n* ## Special Cases\n*\n* ```tex\n* \\begin{align*}\n* \\operatorname{lgamma}(2+s) &\\approx s (1-\\gamma) & \\mathrm{for\\ tiny\\ s} \\\\\n* \\operatorname{lgamma}(x) &\\approx -\\ln(x) & \\mathrm{for\\ tiny\\ x} \\\\\n* \\operatorname{lgamma}(1) &= 0 & \\\\\n* \\operatorname{lgamma}(2) &= 0 & \\\\\n* \\operatorname{lgamma}(0) &= \\infty & \\\\\n* \\operatorname{lgamma}(\\infty) &= \\infty & \\\\\n* \\operatorname{lgamma}(-\\mathrm{integer}) &= \\pm \\infty\n* \\end{align*}\n* ```\n*\n*\n* @param {number} x - input value\n* @returns {number} function value\n*\n* @example\n* var v = gammaln( 1.0 );\n* // returns 0.0\n*\n* @example\n* var v = gammaln( 2.0 );\n* // returns 0.0\n*\n* @example\n* var v = gammaln( 4.0 );\n* // returns ~1.792\n*\n* @example\n* var v = gammaln( -0.5 );\n* // returns ~1.266\n*\n* @example\n* var v = gammaln( 0.5 );\n* // returns ~0.572\n*\n* @example\n* var v = gammaln( 0.0 );\n* // returns Infinity\n*\n* @example\n* var v = gammaln( NaN );\n* // returns NaN\n*/\nfunction gammaln( x ) {\n\tvar isNegative;\n\tvar nadj;\n\tvar flg;\n\tvar p3;\n\tvar p2;\n\tvar p1;\n\tvar p;\n\tvar q;\n\tvar t;\n\tvar w;\n\tvar y;\n\tvar z;\n\tvar r;\n\n\t// Special cases: NaN, +-infinity\n\tif ( isnan( x ) || isInfinite( x ) ) {\n\t\treturn x;\n\t}\n\t// Special case: 0\n\tif ( x === 0.0 ) {\n\t\treturn PINF;\n\t}\n\tif ( x < 0.0 ) {\n\t\tisNegative = true;\n\t\tx = -x;\n\t} else {\n\t\tisNegative = false;\n\t}\n\t// If |x| < 2**-70, return -ln(|x|)\n\tif ( x < TINY ) {\n\t\treturn -ln( x );\n\t}\n\tif ( isNegative ) {\n\t\t// If |x| >= 2**52, must be -integer\n\t\tif ( x >= TWO52 ) {\n\t\t\treturn PINF;\n\t\t}\n\t\tt = sinpi( x );\n\t\tif ( t === 0.0 ) {\n\t\t\treturn PINF;\n\t\t}\n\t\tnadj = ln( PI / abs( t*x ) );\n\t}\n\t// If x equals 1 or 2, return 0\n\tif ( x === 1.0 || x === 2.0 ) {\n\t\treturn 0.0;\n\t}\n\t// If x < 2, use lgamma(x) = lgamma(x+1) - log(x)\n\tif ( x < 2.0 ) {\n\t\tif ( x <= 0.9 ) {\n\t\t\tr = -ln( x );\n\n\t\t\t// 0.7316 <= x <=  0.9\n\t\t\tif ( x >= ( YMIN - 1.0 + 0.27 ) ) {\n\t\t\t\ty = 1.0 - x;\n\t\t\t\tflg = 0;\n\t\t\t}\n\t\t\t// 0.2316 <= x < 0.7316\n\t\t\telse if ( x >= (YMIN - 1.0 - 0.27) ) {\n\t\t\t\ty = x - (TC - 1.0);\n\t\t\t\tflg = 1;\n\t\t\t}\n\t\t\t// 0 < x < 0.2316\n\t\t\telse {\n\t\t\t\ty = x;\n\t\t\t\tflg = 2;\n\t\t\t}\n\t\t} else {\n\t\t\tr = 0.0;\n\n\t\t\t// 1.7316 <= x < 2\n\t\t\tif ( x >= (YMIN + 0.27) ) {\n\t\t\t\ty = 2.0 - x;\n\t\t\t\tflg = 0;\n\t\t\t}\n\t\t\t// 1.2316 <= x < 1.7316\n\t\t\telse if ( x >= (YMIN - 0.27) ) {\n\t\t\t\ty = x - TC;\n\t\t\t\tflg = 1;\n\t\t\t}\n\t\t\t// 0.9 < x < 1.2316\n\t\t\telse {\n\t\t\t\ty = x - 1.0;\n\t\t\t\tflg = 2;\n\t\t\t}\n\t\t}\n\t\tswitch ( flg ) { // eslint-disable-line default-case\n\t\tcase 0:\n\t\t\tz = y * y;\n\t\t\tp1 = A1C + (z*polyvalA1( z ));\n\t\t\tp2 = z * (A2C + (z*polyvalA2( z )));\n\t\t\tp = (y*p1) + p2;\n\t\t\tr += ( p - (0.5*y) );\n\t\t\tbreak;\n\t\tcase 1:\n\t\t\tz = y * y;\n\t\t\tw = z * y;\n\t\t\tp1 = T1C + (w*polyvalT1( w ));\n\t\t\tp2 = T2C + (w*polyvalT2( w ));\n\t\t\tp3 = T3C + (w*polyvalT3( w ));\n\t\t\tp = (z*p1) - (TT - (w*(p2+(y*p3))));\n\t\t\tr += ( TF + p );\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tp1 = y * (UC + (y*polyvalU( y )));\n\t\t\tp2 = VC + (y*polyvalV( y ));\n\t\t\tr += (-0.5*y) + (p1/p2);\n\t\t\tbreak;\n\t\t}\n\t}\n\t// 2 <= x < 8\n\telse if ( x < 8.0 ) {\n\t\tflg = trunc( x );\n\t\ty = x - flg;\n\t\tp = y * (SC + (y*polyvalS( y )));\n\t\tq = RC + (y*polyvalR( y ));\n\t\tr = (0.5*y) + (p/q);\n\t\tz = 1.0; // gammaln(1+s) = ln(s) + gammaln(s)\n\t\tswitch ( flg ) { // eslint-disable-line default-case\n\t\tcase 7:\n\t\t\tz *= y + 6.0;\n\n\t\t\t/* falls through */\n\t\tcase 6:\n\t\t\tz *= y + 5.0;\n\n\t\t\t/* falls through */\n\t\tcase 5:\n\t\t\tz *= y + 4.0;\n\n\t\t\t/* falls through */\n\t\tcase 4:\n\t\t\tz *= y + 3.0;\n\n\t\t\t/* falls through */\n\t\tcase 3:\n\t\t\tz *= y + 2.0;\n\t\t\tr += ln( z );\n\t\t}\n\t}\n\t// 8 <= x < 2**58\n\telse if ( x < TWO58 ) {\n\t\tt = ln( x );\n\t\tz = 1.0 / x;\n\t\ty = z * z;\n\t\tw = WC + (z*polyvalW( y ));\n\t\tr = ((x-0.5)*(t-1.0)) + w;\n\t}\n\t// 2**58 <= x <= Inf\n\telse {\n\t\tr = x * ( ln(x)-1.0 );\n\t}\n\tif ( isNegative ) {\n\t\tr = nadj - r;\n\t}\n\treturn r;\n}\n\n\n// EXPORTS //\n\nexport default gammaln;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.06735230105312927;\n\t}\n\treturn 0.06735230105312927 + (x * (0.007385550860814029 + (x * (0.0011927076318336207 + (x * (0.00022086279071390839 + (x * 0.000025214456545125733))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.020580808432516733;\n\t}\n\treturn 0.020580808432516733 + (x * (0.0028905138367341563 + (x * (0.0005100697921535113 + (x * (0.00010801156724758394 + (x * 0.000044864094961891516))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn -0.032788541075985965;\n\t}\n\treturn -0.032788541075985965 + (x * (0.006100538702462913 + (x * (-0.0014034646998923284 + (x * 0.00031563207090362595))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.01797067508118204;\n\t}\n\treturn 0.01797067508118204 + (x * (-0.0036845201678113826 + (x * (0.000881081882437654 + (x * -0.00031275416837512086))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn -0.010314224129834144;\n\t}\n\treturn -0.010314224129834144 + (x * (0.0022596478090061247 + (x * (-0.0005385953053567405 + (x * 0.0003355291926355191))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.6328270640250934;\n\t}\n\treturn 0.6328270640250934 + (x * (1.4549225013723477 + (x * (0.9777175279633727 + (x * (0.22896372806469245 + (x * 0.013381091853678766))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 2.4559779371304113;\n\t}\n\treturn 2.4559779371304113 + (x * (2.128489763798934 + (x * (0.7692851504566728 + (x * (0.10422264559336913 + (x * 0.003217092422824239))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.21498241596060885;\n\t}\n\treturn 0.21498241596060885 + (x * (0.325778796408931 + (x * (0.14635047265246445 + (x * (0.02664227030336386 + (x * (0.0018402845140733772 + (x * 0.00003194753265841009))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 1.3920053346762105;\n\t}\n\treturn 1.3920053346762105 + (x * (0.7219355475671381 + (x * (0.17193386563280308 + (x * (0.01864591917156529 + (x * (0.0007779424963818936 + (x * 0.000007326684307446256))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.08333333333333297;\n\t}\n\treturn 0.08333333333333297 + (x * (-0.0027777777772877554 + (x * (0.0007936505586430196 + (x * (-0.00059518755745034 + (x * (0.0008363399189962821 + (x * -0.0016309293409657527))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Square root of double-precision floating-point epsilon.\n*\n* @module @stdlib/constants-float64-sqrt-eps\n* @type {number}\n*\n* @example\n* import FLOAT64_SQRT_EPSILON from '@stdlib/constants-float64-sqrt-eps';\n* // returns 0.14901161193847656e-7\n*/\n\n\n// MAIN //\n\n/**\n* Square root of double-precision floating-point epsilon.\n*\n* ```tex\n* \\sqrt{\\frac{1}{2^{52}}}\n* ```\n*\n* @constant\n* @type {number}\n* @default 0.14901161193847656e-7\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n* @see [Machine Epsilon]{@link https://en.wikipedia.org/wiki/Machine_epsilon}\n*/\nvar FLOAT64_SQRT_EPSILON = 0.1490116119384765625e-7;\n\n\n// EXPORTS //\n\nexport default FLOAT64_SQRT_EPSILON;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Natural logarithm of the maximum double-precision floating-point number.\n*\n* @module @stdlib/constants-float64-max-ln\n* @type {number}\n*\n* @example\n* import FLOAT64_MAX_LN from '@stdlib/constants-float64-max-ln';\n* // returns 709.782712893384\n*/\n\n\n// MAIN //\n\n/**\n* Natural logarithm of the maximum double-precision floating-point number.\n*\n* ## Notes\n*\n* The natural logarithm of the maximum is given by\n*\n* ```tex\n* \\ln \\left( 2^{1023} (2 - 2^{-52}) \\right)\n* ```\n*\n* @constant\n* @type {number}\n* @default 709.782712893384\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_MAX_LN = 709.782712893384;\n\n\n// EXPORTS //\n\nexport default FLOAT64_MAX_LN;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_erf.c}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport exp from '@stdlib/math-base-special-exp';\nimport setLowWord from '@stdlib/number-float64-base-set-low-word';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport polyvalPP from './polyval_pp.js';\nimport polyvalQQ from './polyval_qq.js';\nimport polyvalPA from './polyval_pa.js';\nimport polyvalQA from './polyval_qa.js';\nimport polyvalRA from './polyval_ra.js';\nimport polyvalSA from './polyval_sa.js';\nimport polyvalRB from './polyval_rb.js';\nimport polyvalSB from './polyval_sb.js';\n\n\n// VARIABLES //\n\nvar TINY = 1.0e-300;\n\n// 2**-56 = 1/(2**56) = 1/72057594037927940\nvar SMALL = 1.3877787807814457e-17;\n\nvar ERX = 8.45062911510467529297e-1;  // 0x3FEB0AC1, 0x60000000\n\nvar PPC = 1.28379167095512558561e-1;  // 0x3FC06EBA, 0x8214DB68\nvar QQC = 1.0;\n\nvar PAC = -2.36211856075265944077e-3; // 0xBF6359B8, 0xBEF77538\nvar QAC = 1.0;\n\nvar RAC = -9.86494403484714822705e-3; // 0xBF843412, 0x600D6435\nvar SAC = 1.0;\n\nvar RBC = -9.86494292470009928597e-3; // 0xBF843412, 0x39E86F4A\nvar SBC = 1.0;\n\n\n// MAIN //\n\n/**\n* Evaluates the complementary error function.\n*\n* ```tex\n* \\operatorname{erf}(x) = \\frac{2}{\\sqrt{\\pi}} \\int^{x}_{0} e^{-t^2}\\ \\mathrm{dt}\n* ```\n*\n* Note that\n*\n* ```tex\n* \\begin{align*}\n* \\operatorname{erfc}(x) &= 1 - \\operatorname{erf}(x) \\\\\n* \\operatorname{erf}(-x) &= -\\operatorname{erf}(x) \\\\\n* \\operatorname{erfc}(-x) &= 2 - \\operatorname{erfc}(x)\n* \\end{align*}\n* ```\n*\n* ## Method\n*\n* 1.  For \\\\(|x| \\in [0, 0.84375)\\\\),\n*\n*     ```tex\n*     \\operatorname{erf}(x) = x + x \\cdot \\operatorname{R}(x^2)\n*     ```\n*\n*     and\n*\n*     ```tex\n*     \\operatorname{erfc}(x) = \\begin{cases}\n*     1 - \\operatorname{erf}(x) & \\textrm{if}\\ x \\in (-.84375,0.25) \\\\\n*     0.5 + ((0.5-x)-x \\mathrm{R}) & \\textrm{if}\\ x \\in [0.25,0.84375)\n*     \\end{cases}\n*     ```\n*\n*     where \\\\(R = P/Q\\\\) and where \\\\(P\\\\) is an odd polynomial of degree \\\\(8\\\\) and \\\\(Q\\\\) is an odd polynomial of degree \\\\(10\\\\).\n*\n*     ```tex\n*     \\biggl| \\mathrm{R} - \\frac{\\operatorname{erf}(x)-x}{x} \\biggr| \\leq 2^{-57.90}\n*     ```\n*\n*     <!-- <note> -->\n*\n*     The formula is derived by noting\n*\n*     ```tex\n*     \\operatorname{erf}(x) = \\frac{2}{\\sqrt{\\pi}}\\biggl(x - \\frac{x^3}{3} + \\frac{x^5}{10} - \\frac{x^7}{42} + \\ldots \\biggr)\n*     ```\n*\n*     and that\n*\n*     ```tex\n*     \\frac{2}{\\sqrt{\\pi}} = 1.128379167095512573896158903121545171688\n*     ```\n*\n*     is close to unity. The interval is chosen because the fix point of \\\\(\\operatorname{erf}(x)\\\\) is near \\\\(0.6174\\\\) (i.e., \\\\(\\operatorname{erf(x)} = x\\\\) when \\\\(x\\\\) is near \\\\(0.6174\\\\)), and, by some experiment, \\\\(0.84375\\\\) is chosen to guarantee the error is less than one ulp for \\\\(\\operatorname{erf}(x)\\\\).\n*\n*     <!-- </note> -->\n*\n* 2.  For \\\\(|x| \\in [0.84375,1.25)\\\\), let \\\\(s = |x|-1\\\\), and \\\\(c = 0.84506291151\\\\) rounded to single (\\\\(24\\\\) bits)\n*\n*     ```tex\n*     \\operatorname{erf}(x) = \\operatorname{sign}(x) \\cdot \\biggl(c + \\frac{\\operatorname{P1}(s)}{\\operatorname{Q1}(s)}\\biggr)\n*     ```\n*\n*     and\n*\n*     ```tex\n*     \\operatorname{erfc}(x) = \\begin{cases}\n*     (1-c) - \\frac{\\operatorname{P1}(s)}{\\operatorname{Q1}(s)} & \\textrm{if}\\ x > 0 \\\\\n*     1 + \\biggl(c + \\frac{\\operatorname{P1}(s)}{\\operatorname{Q1}(s)}\\biggr) & \\textrm{if}\\ x < 0\n*     \\end{cases}\n*     ```\n*\n*     where\n*\n*     ```tex\n*     \\biggl|\\frac{\\mathrm{P1}}{\\mathrm{Q1}} - (\\operatorname{erf}(|x|)-c)\\biggr| \\leq 2^{-59.06}\n*     ```\n*\n*     <!-- <note> -->\n*\n*     Here, we use the Taylor series expansion at \\\\(x = 1\\\\)\n*\n*     ```tex\n*     \\begin{align*}\n*     \\operatorname{erf}(1+s) &= \\operatorname{erf}(1) + s\\cdot \\operatorname{poly}(s) \\\\\n*     &= 0.845.. + \\frac{\\operatorname{P1}(s)}{\\operatorname{Q1}(s)}\n*     \\end{align*}\n*     ```\n*\n*     using a rational approximation to approximate\n*\n*     ```tex\n*     \\operatorname{erf}(1+s) - (c = (\\mathrm{single})0.84506291151)\n*     ```\n*\n*     <!-- </note> -->\n*\n*     Note that, for \\\\(x \\in [0.84375,1.25)\\\\), \\\\(|\\mathrm{P1}/\\mathrm{Q1}| < 0.078\\\\), where\n*\n*     -   \\\\(\\operatorname{P1}(s)\\\\) is a degree \\\\(6\\\\) polynomial in \\\\(s\\\\)\n*     -   \\\\(\\operatorname{Q1}(s)\\\\) is a degree \\\\(6\\\\) polynomial in \\\\(s\\\\)\n*\n* 3.  For \\\\(x \\in [1.25,1/0.35)\\\\),\n*\n*     ```tex\n*     \\begin{align*}\n*     \\operatorname{erfc}(x) &= \\frac{1}{x}e^{-x^2-0.5625+(\\mathrm{R1}/\\mathrm{S1})} \\\\\n*     \\operatorname{erf}(x) &= 1 - \\operatorname{erfc}(x)\n*     \\end{align*}\n*     ```\n*\n*     where\n*\n*     -   \\\\(\\operatorname{R1}(z)\\\\) is a degree \\\\(7\\\\) polynomial in \\\\(z\\\\), where \\\\(z = 1/x^2\\\\)\n*     -   \\\\(\\operatorname{S1}(z)\\\\) is a degree \\\\(8\\\\) polynomial in \\\\(z\\\\)\n*\n* 4.  For \\\\(x \\in [1/0.35,28)\\\\),\n*\n*     ```tex\n*     \\operatorname{erfc}(x) = \\begin{cases}\n*     \\frac{1}{x} e^{-x^2-0.5625+(\\mathrm{R2}/\\mathrm{S2})} & \\textrm{if}\\ x > 0 \\\\\n*     2.0 - \\frac{1}{x} e^{-x^2-0.5625+(\\mathrm{R2}/\\mathrm{S2})} & \\textrm{if}\\ -6 < x < 0 \\\\\n*     2.0 - \\mathrm{tiny} & \\textrm{if}\\ x \\leq -6\n*     \\end{cases}\n*     ```\n*\n*     and\n*\n*     ```tex\n*     \\operatorname{erf}(x) = \\begin{cases}\n*     \\operatorname{sign}(x) \\cdot (1.0 - \\operatorname{erfc}(x)) & \\textrm{if}\\ x < 6 \\\\\n*     \\operatorname{sign}(x) \\cdot (1.0 - \\mathrm{tiny}) & \\textrm{otherwise}\n*     \\end{cases}\n*     ```\n*\n*     where\n*\n*     -   \\\\(\\operatorname{R2}(z)\\\\) is a degree \\\\(6\\\\) polynomial in \\\\(z\\\\), where \\\\(z = 1/x^2\\\\)\n*     -   \\\\(\\operatorname{S2}(z)\\\\) is a degree \\\\(7\\\\) polynomial in \\\\(z\\\\)\n*\n* 5.  For \\\\(x \\in [28, \\infty)\\\\),\n*\n*     ```tex\n*     \\begin{align*}\n*     \\operatorname{erf}(x) &= \\operatorname{sign}(x) \\cdot (1 - \\mathrm{tiny}) & \\textrm{(raise inexact)}\n*     \\end{align*}\n*     ```\n*\n*     and\n*\n*     ```tex\n*     \\operatorname{erfc}(x) = \\begin{cases}\n*     \\mathrm{tiny} \\cdot \\mathrm{tiny} & \\textrm{if}\\ x > 0\\ \\textrm{(raise underflow)} \\\\\n*     2 - \\mathrm{tiny} & \\textrm{if}\\ x < 0\n*     \\end{cases}\n*     ```\n*\n*\n* ## Special Cases\n*\n* ```tex\n* \\begin{align*}\n* \\operatorname{erf}(0) &= 0 \\\\\n* \\operatorname{erf}(-0) &= -0 \\\\\n* \\operatorname{erf}(\\infty) &= 1 \\\\\n* \\operatorname{erf}(-\\infty) &= -1 \\\\\n* \\operatorname{erfc}(0) &= 1 \\\\\n* \\operatorname{erfc}(\\infty) &= 0 \\\\\n* \\operatorname{erfc}(-\\infty) &= 2 \\\\\n* \\operatorname{erf}(\\mathrm{NaN}) &= \\mathrm{NaN} \\\\\n* \\operatorname{erfc}(\\mathrm{NaN}) &= \\mathrm{NaN}\n* \\end{align*}\n* ```\n*\n*\n* ## Notes\n*\n* -   To compute \\\\(\\exp(-x^2-0.5625+(\\mathrm{R}/\\mathrm{S}))\\\\), let \\\\(s\\\\) be a single precision number and \\\\(s := x\\\\); then\n*\n*     ```tex\n*     -x^2 = -s^2 + (s-x)(s+x)\n*     ```\n*\n*     and\n*\n*     ```tex\n*     e^{-x^2-0.5626+(\\mathrm{R}/\\mathrm{S})} = e^{-s^2-0.5625} e^{(s-x)(s+x)+(\\mathrm{R}/\\mathrm{S})}\n*     ```\n*\n* -   `#4` and `#5` make use of the asymptotic series\n*\n*     ```tex\n*     \\operatorname{erfc}(x) \\approx \\frac{e^{-x^2}}{x\\sqrt{\\pi}} (1 + \\operatorname{poly}(1/x^2))\n*     ```\n*\n*     We use a rational approximation to approximate\n*\n*     ```tex\n*     g(s) = f(1/x^2) = \\ln(\\operatorname{erfc}(x) \\cdot x) - x^2 + 0.5625\n*     ```\n*\n* -   The error bound for \\\\(\\mathrm{R1}/\\mathrm{S1}\\\\) is\n*\n*     ```tex\n*     |\\mathrm{R1}/\\mathrm{S1} - f(x)| < 2^{-62.57}\n*     ```\n*\n*     and for \\\\(\\mathrm{R2}/\\mathrm{S2}\\\\) is\n*\n*     ```tex\n*     |\\mathrm{R2}/\\mathrm{S2} - f(x)| < 2^{-61.52}\n*     ```\n*\n* @param {number} x - input value\n* @returns {number} function value\n*\n* @example\n* var y = erfc( 2.0 );\n* // returns ~0.0047\n*\n* @example\n* var y = erfc( -1.0 );\n* // returns ~1.8427\n*\n* @example\n* var y = erfc( 0.0 );\n* // returns 1.0\n*\n* @example\n* var y = erfc( Infinity );\n* // returns 0.0\n*\n* @example\n* var y = erfc( -Infinity );\n* // returns 2.0\n*\n* @example\n* var y = erfc( NaN );\n* // returns NaN\n*/\nfunction erfc( x ) {\n\tvar sign;\n\tvar ax;\n\tvar z;\n\tvar r;\n\tvar s;\n\tvar y;\n\tvar p;\n\tvar q;\n\n\t// Special case: NaN\n\tif ( isnan( x ) ) {\n\t\treturn NaN;\n\t}\n\t// Special case: +infinity\n\tif ( x === PINF ) {\n\t\treturn 0.0;\n\t}\n\t// Special case: -infinity\n\tif ( x === NINF ) {\n\t\treturn 2.0;\n\t}\n\t// Special case: +-0\n\tif ( x === 0.0 ) {\n\t\treturn 1.0;\n\t}\n\tif ( x < 0.0 ) {\n\t\tsign = true;\n\t\tax = -x;\n\t} else {\n\t\tsign = false;\n\t\tax = x;\n\t}\n\t// |x| < 0.84375\n\tif ( ax < 0.84375 ) {\n\t\tif ( ax < SMALL ) {\n\t\t\treturn 1.0 - x; // raise inexact\n\t\t}\n\t\tz = x * x;\n\t\tr = PPC + ( z*polyvalPP( z ) );\n\t\ts = QQC + ( z*polyvalQQ( z ) );\n\t\ty = r / s;\n\n\t\t// x < 1/4\n\t\tif ( x < 0.25 ) {\n\t\t\treturn 1.0 - ( x + (x*y) );\n\t\t}\n\t\tr = x * y;\n\t\tr += x - 0.5;\n\t\treturn 0.5 - r;\n\t}\n\t// 0.84375 <= |x| < 1.25\n\tif ( ax < 1.25 ) {\n\t\ts = ax - 1.0;\n\t\tp = PAC + ( s*polyvalPA( s ) );\n\t\tq = QAC + ( s*polyvalQA( s ) );\n\t\tif ( sign ) {\n\t\t\treturn 1.0 + ERX + (p/q);\n\t\t}\n\t\treturn 1.0 - ERX - (p/q);\n\t}\n\t// |x| < 28\n\tif ( ax < 28.0 ) {\n\t\ts = 1.0 / (ax*ax);\n\n\t\t// |x| < 1/0.35 ~ 2.857143\n\t\tif ( ax < 2.857142857142857 ) {\n\t\t\tr = RAC + ( s*polyvalRA( s ) );\n\t\t\ts = SAC + ( s*polyvalSA( s ) );\n\t\t}\n\t\t// |x| >= 1/0.35 ~ 2.857143\n\t\telse {\n\t\t\t// x < -6\n\t\t\tif ( x < -6.0 ) {\n\t\t\t\treturn 2.0 - TINY; // raise inexact\n\t\t\t}\n\t\t\tr = RBC + ( s*polyvalRB( s ) );\n\t\t\ts = SBC + ( s*polyvalSB( s ) );\n\t\t}\n\t\tz = setLowWord( ax, 0 ); // pseudo-single (20-bit) precision x\n\t\tr = exp( -(z*z) - 0.5625 ) * exp( ((z-ax)*(z+ax)) + (r/s) );\n\t\tif ( sign ) {\n\t\t\treturn 2.0 - (r/ax);\n\t\t}\n\t\treturn r/ax;\n\t}\n\tif ( sign ) {\n\t\treturn 2.0 - TINY; // raise inexact; ~2\n\t}\n\treturn TINY * TINY; // raise inexact; ~0\n}\n\n\n// EXPORTS //\n\nexport default erfc;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn -0.3250421072470015;\n\t}\n\treturn -0.3250421072470015 + (x * (-0.02848174957559851 + (x * (-0.005770270296489442 + (x * -0.000023763016656650163))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.39791722395915535;\n\t}\n\treturn 0.39791722395915535 + (x * (0.0650222499887673 + (x * (0.005081306281875766 + (x * (0.00013249473800432164 + (x * -0.000003960228278775368))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.41485611868374833;\n\t}\n\treturn 0.41485611868374833 + (x * (-0.3722078760357013 + (x * (0.31834661990116175 + (x * (-0.11089469428239668 + (x * (0.035478304325618236 + (x * -0.002166375594868791))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.10642088040084423;\n\t}\n\treturn 0.10642088040084423 + (x * (0.540397917702171 + (x * (0.07182865441419627 + (x * (0.12617121980876164 + (x * (0.01363708391202905 + (x * 0.011984499846799107))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn -0.6938585727071818;\n\t}\n\treturn -0.6938585727071818 + (x * (-10.558626225323291 + (x * (-62.375332450326006 + (x * (-162.39666946257347 + (x * (-184.60509290671104 + (x * (-81.2874355063066 + (x * -9.814329344169145))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 19.651271667439257;\n\t}\n\treturn 19.651271667439257 + (x * (137.65775414351904 + (x * (434.56587747522923 + (x * (645.3872717332679 + (x * (429.00814002756783 + (x * (108.63500554177944 + (x * (6.570249770319282 + (x * -0.0604244152148581))))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn -0.799283237680523;\n\t}\n\treturn -0.799283237680523 + (x * (-17.757954917754752 + (x * (-160.63638485582192 + (x * (-637.5664433683896 + (x * (-1025.0951316110772 + (x * -483.5191916086514))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 30.33806074348246;\n\t}\n\treturn 30.33806074348246 + (x * (325.7925129965739 + (x * (1536.729586084437 + (x * (3199.8582195085955 + (x * (2553.0504064331644 + (x * (474.52854120695537 + (x * -22.44095244658582))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Natural logarithm of the smallest normalized double-precision floating-point number.\n*\n* @module @stdlib/constants-float64-min-ln\n* @type {number}\n*\n* @example\n* import FLOAT64_MIN_LN from '@stdlib/constants-float64-min-ln';\n* // returns -708.3964185322641\n*/\n\n\n// MAIN //\n\n/**\n* Natural logarithm of the smallest normalized double-precision floating-point number.\n*\n* ## Notes\n*\n* The number has the value\n*\n* ```tex\n* -\\ln \\left( 2^{1023-1} \\right)\n* ```\n*\n* @constant\n* @type {number}\n* @default -708.3964185322641\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_MIN_LN = -708.3964185322641;\n\n\n// EXPORTS //\n\nexport default FLOAT64_MIN_LN;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006.\n* (C) Copyright Paul A. Bristow 2007.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport exp from '@stdlib/math-base-special-exp';\nimport pow from '@stdlib/math-base-special-pow';\nimport ln from '@stdlib/math-base-special-ln';\nimport MAX_LN from '@stdlib/constants-float64-max-ln';\nimport MIN_LN from '@stdlib/constants-float64-min-ln';\n\n\n// MAIN //\n\n/**\n* Calculates the power term prefix `(z^a)(e^-z)` used in the non-normalized incomplete gammas.\n*\n* @private\n* @param {number} a - function parameter\n* @param {number} z - function parameter\n* @returns {number} power term prefix\n*/\nfunction fullIGammaPrefix( a, z ) {\n\tvar prefix;\n\tvar alz;\n\n\talz = a * ln( z );\n\tif ( z >= 1.0 ) {\n\t\tif ( ( alz < MAX_LN ) && ( -z > MIN_LN ) ) {\n\t\t\tprefix = pow( z, a ) * exp( -z );\n\t\t}\n\t\telse if ( a >= 1.0 ) {\n\t\t\tprefix = pow( z / exp(z/a), a );\n\t\t}\n\t\telse {\n\t\t\tprefix = exp( alz - z );\n\t\t}\n\t}\n\telse {\n\t\t/* eslint-disable no-lonely-if */\n\t\tif ( alz > MIN_LN ) {\n\t\t\tprefix = pow( z, a ) * exp( -z );\n\t\t}\n\t\telse if ( z/a < MAX_LN ) {\n\t\t\tprefix = pow( z / exp(z/a), a );\n\t\t} else {\n\t\t\tprefix = exp( alz - z );\n\t\t}\n\t}\n\treturn prefix;\n}\n\n\n// EXPORTS //\n\nexport default fullIGammaPrefix;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @param {NumericArray} c - polynomial coefficients sorted in ascending degree\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*\n* @example\n* var v = evalpoly( [3.0,2.0,1.0], 10.0 ); // 3*10^0 + 2*10^1 + 1*10^2\n* // returns 123.0\n*/\nfunction evalpoly( c, x ) {\n\tvar p;\n\tvar i;\n\n\ti = c.length;\n\tif ( i < 2 || x === 0.0 ) {\n\t\tif ( i === 0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn c[ 0 ];\n\t}\n\ti -= 1;\n\tp = ( c[ i ] * x ) + c[ i-1 ];\n\ti -= 2;\n\twhile ( i >= 0 ) {\n\t\tp = ( p * x ) + c[ i ];\n\t\ti -= 1;\n\t}\n\treturn p;\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate a polynomial.\n*\n* @module @stdlib/math-base-tools-evalpoly\n*\n* @example\n* import evalpoly from '@stdlib/math-base-tools-evalpoly';\n*\n* var v = evalpoly( [3.0,2.0,1.0], 10.0 ); // 3*10^0 + 2*10^1 + 1*10^2\n* // returns 123.0\n*\n* @example\n* import evalpoly from '@stdlib/math-base-tools-evalpoly';\n*\n* var polyval = evalpoly.factory( [3.0,2.0,1.0] );\n*\n* var v = polyval( 10.0 ); // => 3*10^0 + 2*10^1 + 1*10^2\n* // returns 123.0\n*\n* v = polyval( 5.0 ); // => 3*5^0 + 2*5^1 + 1*5^2\n* // returns 38.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport evalpoly from './evalpoly.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( evalpoly, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport evalpoly from './evalpoly.js';\n\n\n// MAIN //\n\n/**\n* Generates a function for evaluating a polynomial.\n*\n* ## Notes\n*\n* -   The compiled function uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: http://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @param {NumericArray} c - polynomial coefficients sorted in ascending degree\n* @returns {Function} function for evaluating a polynomial\n*\n* @example\n* var polyval = factory( [3.0,2.0,1.0] );\n*\n* var v = polyval( 10.0 ); // => 3*10^0 + 2*10^1 + 1*10^2\n* // returns 123.0\n*\n* v = polyval( 5.0 ); // => 3*5^0 + 2*5^1 + 1*5^2\n* // returns 38.0\n*/\nfunction factory( c ) {\n\tvar f;\n\tvar n;\n\tvar m;\n\tvar i;\n\n\t// Avoid exceeding the maximum stack size on V8 :(. Note that the choice of `500` was empirically determined...\n\tif ( c.length > 500 ) {\n\t\treturn polyval;\n\t}\n\t// Code generation. Start with the function definition...\n\tf = 'return function evalpoly(x){';\n\n\t// Create the function body...\n\tn = c.length;\n\n\t// If no coefficients, the function always returns 0...\n\tif ( n === 0 ) {\n\t\tf += 'return 0.0;';\n\t}\n\t// If only one coefficient, the function always returns that coefficient...\n\telse if ( n === 1 ) {\n\t\tf += 'return ' + c[ 0 ] + ';';\n\t}\n\t// If more than one coefficient, apply Horner's method...\n\telse {\n\t\t// If `x == 0`, return the first coefficient...\n\t\tf += 'if(x===0.0){return ' + c[ 0 ] + ';}';\n\n\t\t// Otherwise, evaluate the polynomial...\n\t\tf += 'return ' + c[ 0 ];\n\t\tm = n - 1;\n\t\tfor ( i = 1; i < n; i++ ) {\n\t\t\tf += '+x*';\n\t\t\tif ( i < m ) {\n\t\t\t\tf += '(';\n\t\t\t}\n\t\t\tf += c[ i ];\n\t\t}\n\t\t// Close all the parentheses...\n\t\tfor ( i = 0; i < m-1; i++ ) {\n\t\t\tf += ')';\n\t\t}\n\t\tf += ';';\n\t}\n\t// Close the function:\n\tf += '}';\n\n\t// Add a source directive for debugging:\n\tf += '//# sourceURL=evalpoly.factory.js';\n\n\t// Create the function in the global scope:\n\treturn ( new Function( f ) )(); // eslint-disable-line no-new-func\n\n\t/*\n\t*    function evalpoly( x ) {\n\t*        if ( x === 0.0 ) {\n\t*            return c[ 0 ];\n\t*        }\n\t*        return c[0]+x*(c[1]+x*(c[2]+x*(c[3]+...+x*(c[n-2]+x*c[n-1]))));\n\t*    }\n\t*/\n\n\t/**\n\t* Evaluates a polynomial.\n\t*\n\t* @private\n\t* @param {number} x - value at which to evaluate a polynomial\n\t* @returns {number} evaluated polynomial\n\t*/\n\tfunction polyval( x ) {\n\t\treturn evalpoly( c, x );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* The mathematical constant `π` times `2`.\n*\n* @module @stdlib/constants-float64-two-pi\n* @type {number}\n*\n* @example\n* import TWO_PI from '@stdlib/constants-float64-two-pi';\n* // returns 6.283185307179586\n*/\n\n\n// MAIN //\n\n/**\n* The mathematical constant `π` times `2`.\n*\n* @constant\n* @type {number}\n* @default 6.283185307179586\n* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Pi}\n*/\nvar TWO_PI = 6.28318530717958647692528676655900576839433879875021164194988918461563281257241799725606965068423413596429617303; // eslint-disable-line max-len\n\n\n// EXPORTS //\n\nexport default TWO_PI;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006.\n* (C) Copyright Paul A. Bristow 2007.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport evalpoly from '@stdlib/math-base-tools-evalpoly';\nimport erfc from '@stdlib/math-base-special-erfc';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport exp from '@stdlib/math-base-special-exp';\nimport ln from '@stdlib/math-base-special-ln';\nimport TWO_PI from '@stdlib/constants-float64-two-pi';\nimport polyvalC0 from './polyval_c0.js';\nimport polyvalC1 from './polyval_c1.js';\nimport polyvalC2 from './polyval_c2.js';\nimport polyvalC3 from './polyval_c3.js';\nimport polyvalC4 from './polyval_c4.js';\nimport polyvalC5 from './polyval_c5.js';\nimport polyvalC6 from './polyval_c6.js';\nimport polyvalC7 from './polyval_c7.js';\nimport polyvalC8 from './polyval_c8.js';\n\n\n// VARIABLES //\n\n// Pre-allocate workspace array:\nvar workspace = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ]; // WARNING: not thread safe\n\n\n// MAIN //\n\n/**\n* Asymptotic expansions of the incomplete gamma functions when `a` is large and `x ~ a` (IEEE double precision or 10^-17).\n*\n* @private\n* @param {number} a - function parameter\n* @param {number} x - function parameter\n* @returns {number} value of asymptotic expansion\n*/\nfunction igammaTemmeLarge( a, x ) {\n\tvar result;\n\tvar sigma;\n\tvar phi;\n\tvar y;\n\tvar z;\n\n\tsigma = ( x-a ) / a;\n\tphi = -ln( 1.0 + sigma ) + sigma;\n\ty = a * phi;\n\tz = sqrt( 2.0 * phi );\n\tif ( x < a ) {\n\t\tz = -z;\n\t}\n\tworkspace[ 0 ] = polyvalC0( z );\n\tworkspace[ 1 ] = polyvalC1( z );\n\tworkspace[ 2 ] = polyvalC2( z );\n\tworkspace[ 3 ] = polyvalC3( z );\n\tworkspace[ 4 ] = polyvalC4( z );\n\tworkspace[ 5 ] = polyvalC5( z );\n\tworkspace[ 6 ] = polyvalC6( z );\n\tworkspace[ 7 ] = polyvalC7( z );\n\tworkspace[ 8 ] = polyvalC8( z );\n\tworkspace[ 9 ] = -0.00059676129019274625;\n\tresult = evalpoly( workspace, 1.0/a );\n\tresult *= exp( -y ) / sqrt( TWO_PI * a );\n\tif ( x < a ) {\n\t\tresult = -result;\n\t}\n\tresult += erfc( sqrt(y) ) / 2.0;\n\treturn result;\n}\n\n\n// EXPORTS //\n\nexport default igammaTemmeLarge;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Alias for `eval` global.\n*\n* @module @stdlib/utils-eval\n*\n* @example\n* import evil from '@stdlib/utils-eval';\n*\n* var v = evil( '5*4*3*2*1' );\n* // returns 120\n*/\n\n// MODULES //\n\nvar evil = eval; // eslint-disable-line no-eval\n\n\n// EXPORTS //\n\nexport default evil;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport evil from '@stdlib/utils-eval';\n\n\n// MAIN //\n\n/**\n* Tests for native `function*()` support.\n*\n* @returns {boolean} boolean indicating if an environment has native `function*()` support\n*\n* @example\n* var bool = hasGeneratorSupport();\n* // returns <boolean>\n*/\nfunction hasGeneratorSupport() {\n\tvar bool;\n\ttry {\n\t\tevil( '\"use strict\"; (function* () {})' );\n\t\tbool = true;\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\tbool = false;\n\t}\n\treturn bool;\n}\n\n\n// EXPORTS //\n\nexport default hasGeneratorSupport;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math-base-special-abs';\nimport EPS from '@stdlib/constants-float64-eps';\n\n\n// VARIABLES //\n\nvar MAX_TERMS = 1000000;\n\n\n// MAIN //\n\n/**\n* Sum the elements of the series given by the supplied function.\n*\n* @param {Function} generator - series function\n* @param {Object} [options] - function options\n* @param {PositiveInteger} [options.maxTerms=1000000] - maximum number of terms to be added\n* @param {PositiveNumber} [options.tolerance=2.22e-16] - further terms are only added as long as the next term is greater than current term times the tolerance\n* @param {number} [options.initialValue=0] - initial value of the resulting sum\n* @returns {number} sum of all series terms\n*\n* @example\n* var gen = geometricSeriesGenerator( 0.9 );\n* var out = sumSeries( gen );\n* // returns 10.0\n*\n* function* geometricSeriesGenerator( x ) {\n*     var exponent = 0;\n*     while ( true ) {\n*         yield Math.pow( x, exponent );\n*         exponent += 1;\n*     }\n* }\n*/\nfunction sumSeries( generator, options ) {\n\tvar isgenerator;\n\tvar tolerance;\n\tvar nextTerm;\n\tvar counter;\n\tvar result;\n\tvar opts;\n\n\topts = {};\n\tif ( arguments.length > 1 ) {\n\t\topts = options;\n\t}\n\ttolerance = opts.tolerance || EPS;\n\tcounter = opts.maxTerms || MAX_TERMS;\n\tresult = opts.initialValue || 0;\n\n\tisgenerator = typeof generator.next === 'function';\n\tif ( isgenerator === true ) {\n\t\t// Case A: Iterate over generator object created by a generator function...\n\t\tfor ( nextTerm of generator ) {\n\t\t\tresult += nextTerm;\n\t\t\tif (\n\t\t\t\tabs(tolerance * result) >= abs(nextTerm) ||\n\t\t\t\t--counter === 0 // eslint-disable-line no-plusplus\n\t\t\t) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t} else {\n\t\t// Case B: Repeatedly call function...\n\t\tdo {\n\t\t\tnextTerm = generator();\n\t\t\tresult += nextTerm;\n\t\t}\n\t\twhile ( ( abs(tolerance * result) < abs(nextTerm) ) && --counter ); // eslint-disable-line no-plusplus\n\t}\n\treturn result;\n}\n\n\n// EXPORTS //\n\nexport default sumSeries;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math-base-special-abs';\nimport EPS from '@stdlib/constants-float64-eps';\n\n\n// VARIABLES //\n\nvar MAX_TERMS = 1000000;\n\n\n// MAIN //\n\n/**\n* Sum the elements of the series given by the supplied function.\n*\n* @param {Function} generator - series function\n* @param {Object} [options] - function options\n* @param {PositiveInteger} [options.maxTerms=1000000] - maximum number of terms to be added\n* @param {PositiveNumber} [options.tolerance=2.22e-16] - further terms are only added as long as the next term is greater than current term times the tolerance\n* @param {number} [options.initialValue=0] - initial value of the resulting sum\n* @returns {number} sum of all series terms\n*\n* @example\n* var gen = geometricSeriesClosure( 0.9 )\n* var out = sumSeries( gen );\n* // returns 10.0\n*\n* function geometricSeriesClosure( x ) {\n*     var exponent = -1;\n*     return function() {\n*         exponent += 1;\n*         return Math.pow( x, exponent );\n*     };\n* }\n*/\nfunction sumSeries( generator, options ) {\n\tvar tolerance;\n\tvar nextTerm;\n\tvar counter;\n\tvar result;\n\tvar opts;\n\n\topts = {};\n\n\tif ( arguments.length > 1 ) {\n\t\topts = options;\n\t}\n\ttolerance = opts.tolerance || EPS;\n\tcounter = opts.maxTerms || MAX_TERMS;\n\tresult = opts.initialValue || 0;\n\n\t// Repeatedly call function...\n\tdo {\n\t\tnextTerm = generator();\n\t\tresult += nextTerm;\n\t}\n\twhile ( ( abs(tolerance * result) < abs(nextTerm) ) && --counter ); // eslint-disable-line no-plusplus\n\n\treturn result;\n}\n\n\n// EXPORTS //\n\nexport default sumSeries;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Sum the elements of the series given by the supplied function.\n*\n* @module @stdlib/math-base-tools-sum-series\n*\n* @example\n* import sumSeries from '@stdlib/math-base-tools-sum-series';\n*\n* var gen = geometricSeriesClosure( 0.9 )\n* var out = sumSeries( gen );\n* // returns 10\n*\n* function geometricSeriesClosure( x ) {\n*     var exponent = -1;\n*     return function() {\n*         exponent += 1;\n*         return Math.pow( x, exponent );\n*     };\n* }\n*/\n\n// MODULES //\n\nimport hasGeneratorSupport from '@stdlib/assert-has-generator-support';\nimport generator from './generators.js';\nimport basic from './basic.js';\n\n\n// MAIN //\n\nvar sumSeries;\nif ( hasGeneratorSupport() ) {\n\tsumSeries = generator;\n} else {\n\tsumSeries = basic;\n}\n\n\n// EXPORTS //\n\nexport default sumSeries;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006.\n* (C) Copyright Paul A. Bristow 2007.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport sumSeries from '@stdlib/math-base-tools-sum-series';\nimport lowerIncompleteGammaSeries from './lower_incomplete_gamma_series.js';\n\n\n// MAIN //\n\n/**\n* Sums elements of the series expansion of the lower incomplete gamma function.\n*\n* ## Method\n*\n* -   Multiply result by `((z^a) * (e^-z) / a)` to get the full lower incomplete integral.\n* -   Divide by `tgamma(a)` to get the normalized value.\n*\n* @private\n* @param {number} a - function parameter\n* @param {number} z - function parameter\n* @param {number} initialValue - initial value of the resulting sum\n* @returns {number} sum of terms of lower gamma series\n*/\nfunction lowerGammaSeries( a, z, initialValue ) {\n\tvar result;\n\tvar s;\n\n\tinitialValue = initialValue || 0.0;\n\ts = lowerIncompleteGammaSeries( a, z );\n\tresult = sumSeries( s, {\n\t\t'initialValue': initialValue\n\t});\n\treturn result;\n}\n\n\n// EXPORTS //\n\nexport default lowerGammaSeries;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006.\n* (C) Copyright Paul A. Bristow 2007.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Creates a function to evaluate a series expansion of the incomplete gamma function.\n*\n* @private\n* @param {number} a1 - function parameter\n* @param {number} z1 - function parameter\n* @returns {Function} series function\n*/\nfunction lowerIncompleteGammaSeries( a1, z1 ) {\n\tvar result = 1.0;\n\tvar a = a1;\n\tvar z = z1;\n\treturn next;\n\n\t/**\n\t* Calculate the next term of the series.\n\t*\n\t* @private\n\t* @returns {number} series expansion term\n\t*/\n\tfunction next() {\n\t\tvar r = result;\n\t\ta += 1.0;\n\t\tresult *= z/a;\n\t\treturn r;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default lowerIncompleteGammaSeries;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn Infinity;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = 709811.662581658 + (x * (679979.8474157227 + (x * (293136.7857211597 + (x * (74887.54032914672 + (x * (12555.290582413863 + (x * (1443.4299244417066 + (x * (115.24194596137347 + (x * (6.309239205732627 + (x * (0.22668404630224365 + (x * (0.004826466289237662 + (x * 0.00004624429436045379))))))))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 0.0 + (x * (362880.0 + (x * (1026576.0 + (x * (1172700.0 + (x * (723680.0 + (x * (269325.0 + (x * (63273.0 + (x * (9450.0 + (x * (870.0 + (x * (45.0 + (x * 1.0))))))))))))))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = 0.00004624429436045379 + (x * (0.004826466289237662 + (x * (0.22668404630224365 + (x * (6.309239205732627 + (x * (115.24194596137347 + (x * (1443.4299244417066 + (x * (12555.290582413863 + (x * (74887.54032914672 + (x * (293136.7857211597 + (x * (679979.8474157227 + (x * 709811.662581658))))))))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (45.0 + (x * (870.0 + (x * (9450.0 + (x * (63273.0 + (x * (269325.0 + (x * (723680.0 + (x * (1172700.0 + (x * (1026576.0 + (x * (362880.0 + (x * 0.0))))))))))))))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* Copyright John Maddock 2006-7, 2013-14.\n* Copyright Paul A. Bristow 2007, 2013-14.\n* Copyright Nikhar Agrawal 2013-14.\n* Copyright Christopher Kormanyos 2013-14.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport lanczosSumExpGScaled from '@stdlib/math-base-special-gamma-lanczos-sum-expg-scaled';\nimport gammaln from '@stdlib/math-base-special-gammaln';\nimport gamma from '@stdlib/math-base-special-gamma';\nimport log1p from '@stdlib/math-base-special-log1p';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport abs from '@stdlib/math-base-special-abs';\nimport exp from '@stdlib/math-base-special-exp';\nimport pow from '@stdlib/math-base-special-pow';\nimport max from '@stdlib/math-base-special-max';\nimport min from '@stdlib/math-base-special-min';\nimport ln from '@stdlib/math-base-special-ln';\nimport MAX_LN from '@stdlib/constants-float64-max-ln';\nimport MIN_LN from '@stdlib/constants-float64-min-ln';\nimport G from '@stdlib/constants-float64-gamma-lanczos-g';\nimport E from '@stdlib/constants-float64-e';\n\n\n// MAIN //\n\n/**\n* Computes `(z^a)*(e^-z) / gamma(a)`.\n*\n* @private\n* @param {number} a - input value\n* @param {number} z - input value\n* @returns {number} function value\n*/\nfunction regularisedGammaPrefix( a, z ) {\n\tvar prefix;\n\tvar amza;\n\tvar agh;\n\tvar alz;\n\tvar amz;\n\tvar sq;\n\tvar d;\n\n\tagh = a + G - 0.5;\n\td = ( (z - a) - G + 0.5 ) / agh;\n\tif ( a < 1.0 ) {\n\t\t// Treat a < 1 as a special case because our Lanczos approximations are optimized against the factorials with a > 1, and for high precision types very small values of `a` can give rather erroneous results for gamma:\n\t\tif ( z <= MIN_LN ) {\n\t\t\t// Use logs, so should be free of cancellation errors:\n\t\t\treturn exp( ( a * ln(z) ) - z - gammaln( a ) );\n\t\t}\n\t\t// No danger of overflow as gamma(a) < 1/a for small a, so direct calculation:\n\t\treturn pow( z, a ) * exp( -z ) / gamma( a );\n\t}\n\tif ( abs(d*d*a) <= 100.0 && a > 150.0 ) {\n\t\t// Special case for large a and a ~ z:\n\t\tprefix = ( a * ( log1p( d ) - d ) ) + ( z * ( 0.5-G ) / agh );\n\t\tprefix = exp( prefix );\n\t}\n\telse {\n\t\t// General case. Direct computation is most accurate, but use various fallbacks for different parts of the problem domain:\n\t\talz = a * ln(z / agh);\n\t\tamz = a - z;\n\t\tif (\n\t\t\tmin(alz, amz) <= MIN_LN ||\n\t\t\tmax(alz, amz) >= MAX_LN\n\t\t) {\n\t\t\tamza = amz / a;\n\t\t\tif (\n\t\t\t\tmin(alz, amz)/2.0 > MIN_LN &&\n\t\t\t\tmax(alz, amz)/2.0 < MAX_LN\n\t\t\t) {\n\t\t\t\t// Compute square root of the result and then square it:\n\t\t\t\tsq = pow( z / agh, a / 2.0 ) * exp( amz / 2.0 );\n\t\t\t\tprefix = sq * sq;\n\t\t\t}\n\t\t\telse if (\n\t\t\t\tmin(alz, amz)/4.0 > MIN_LN &&\n\t\t\t\tmax(alz, amz)/4.0 < MAX_LN &&\n\t\t\t\tz > a\n\t\t\t) {\n\t\t\t\t// Compute the 4th root of the result then square it twice:\n\t\t\t\tsq = pow( z / agh, a / 4.0 ) * exp( amz / 4.0 );\n\t\t\t\tprefix = sq * sq;\n\t\t\t\tprefix *= prefix;\n\t\t\t}\n\t\t\telse if (\n\t\t\t\tamza > MIN_LN &&\n\t\t\t\tamza < MAX_LN\n\t\t\t) {\n\t\t\t\tprefix = pow( (z * exp(amza)) / agh, a );\n\t\t\t}\n\t\t\telse {\n\t\t\t\tprefix = exp( alz + amz );\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tprefix = pow( z / agh, a ) * exp( amz );\n\t\t}\n\t}\n\tprefix *= sqrt( agh / E ) / lanczosSumExpGScaled( a );\n\treturn prefix;\n}\n\n\n// EXPORTS //\n\nexport default regularisedGammaPrefix;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/detail/lgamma_small.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006-7, 2013-14.\n* (C) Copyright Paul A. Bristow 2007, 2013-14.\n* (C) Copyright Nikhar Agrawal 2013-14.\n* (C) Copyright Christopher Kormanyos 2013-14.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport ln from '@stdlib/math-base-special-ln';\nimport EPS from '@stdlib/constants-float64-eps';\nimport rateval1 from './rational_p1q1.js';\nimport rateval2 from './rational_p2q2.js';\nimport rateval3 from './rational_p3q3.js';\n\n\n// VARIABLES //\n\nvar Y1 = 0.158963680267333984375;\nvar Y2 = 0.52815341949462890625;\nvar Y3 = 0.452017307281494140625;\n\n\n// MAIN //\n\n/**\n* Evaluates the natural logarithm of the gamma function for small arguments.\n*\n* ## Method\n*\n* 1.  For \\\\( z > 2 \\\\), begin by performing argument reduction until \\\\( z \\\\) is in \\\\(\\[2,3)\\\\). Use the following form:\n*\n*     ```tex\n*     \\operatorname{gammaln}(z) = (z-2)(z+1)(Y + R(z-2))\n*     ```\n*\n*     where \\\\( R(z-2) \\\\) is a rational approximation optimized for low absolute error. As long as the absolute error is small compared to the constant \\\\( Y \\\\), then any rounding error in the computation will get wiped out.\n*\n* 2.  If \\\\( z < 1 \\\\), use recurrence to shift to \\\\( z \\\\) in the interval \\\\(\\[1,2\\]\\\\). Then, use one of two approximations: one for \\\\( z \\\\) in \\\\(\\[1,1.5\\]\\\\) and one for \\\\( z \\\\) in \\\\(\\[1.5,2\\]\\\\):\n*\n*     -   For \\(( z \\\\) in \\\\(\\[1,1.5\\]\\\\), use\n*\n*         ```tex\n*         \\operatorname{gammaln}(z) = (z-1)(z-2)(Y + R(z-1))\n*         ```\n*\n*         where \\\\( R(z-1) \\\\) is a rational approximation optimized for low absolute error. As long as the absolute error is small compared to the constant \\\\( Y \\\\), then any rounding error in the computation will get wiped out.\n*\n*     -   For \\\\( z \\\\) in \\\\(\\[1.5,2\\]\\\\), use\n*\n*         ```tex\n*         \\operatorname{gammaln}(z) = (2-z)(1-z)(Y + R(2-z))\n*         ```\n*\n*         where \\\\( R(2-z) \\\\) is a rational approximation optimized for low absolute error. As long as the absolute error is small compared to the constant \\\\( Y \\\\), then any rounding error in the computation will get wiped out.\n*\n*\n* ## Notes\n*\n* -   Relative error:\n*\n*     | function | peak         | maximum deviation |\n*     |:--------:|:------------:|:-----------------:|\n*     | R(Z-2)   | 4.231e-18    | 5.900e-24         |\n*     | R(Z-1)   | 1.230011e-17 | 3.139e-021        |\n*     | R(2-Z)   | 1.797565e-17 | 2.151e-021        |\n*\n*\n* @private\n* @param {number} z - input value\n* @param {number} zm1 - `z` minus one\n* @param {number} zm2 - `z` minus two\n* @returns {number} function value\n*/\nfunction lgammaSmallImp( z, zm1, zm2 ) {\n\tvar prefix;\n\tvar result;\n\tvar r;\n\tvar R;\n\n\tif ( z < EPS ) {\n\t\treturn -ln( z );\n\t}\n\tif ( zm1 === 0.0 || zm2 === 0.0 ) {\n\t\treturn 0.0;\n\t}\n\tresult = 0.0;\n\tif ( z > 2.0 ) {\n\t\tif ( z >= 3.0 ) {\n\t\t\tdo {\n\t\t\t\tz -= 1.0;\n\t\t\t\tzm2 -= 1.0;\n\t\t\t\tresult += ln(z);\n\t\t\t} while ( z >= 3.0 );\n\t\t\tzm2 = z - 2.0;\n\t\t}\n\t\tr = zm2 * ( z+1.0 );\n\t\tR = rateval1( zm2 );\n\t\tresult += ( r*Y1 ) + ( r*R );\n\t\treturn result;\n\t}\n\tif ( z < 1.0 ) {\n\t\tresult += -ln(z);\n\t\tzm2 = zm1;\n\t\tzm1 = z;\n\t\tz += 1.0;\n\t}\n\tif ( z <= 1.5 ) {\n\t\tr = rateval2( zm1 );\n\t\tprefix = zm1 * zm2;\n\t\tresult += ( prefix*Y2 ) + ( prefix*r );\n\t\treturn result;\n\t}\n\t// Case: 1.5 < z <= 2\n\tr = zm2 * zm1;\n\tR = rateval3( -zm2 );\n\tresult += ( r*Y3 ) + ( r*R );\n\treturn result;\n}\n\n\n// EXPORTS //\n\nexport default lgammaSmallImp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn -0.01803556856784494;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = -0.01803556856784494 + (x * (0.02512664961998968 + (x * (0.049410315156753225 + (x * (0.0172491608709614 + (x * (-0.0002594535632054381 + (x * (-0.0005410098692152044 + (x * (-0.00003245886498259485 + (x * 0.0))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (1.962029871977952 + (x * (1.4801966942423133 + (x * (0.5413914320717209 + (x * (0.09885042511280101 + (x * (0.008213096746488934 + (x * (0.00022493629192211576 + (x * -2.2335276320861708e-7))))))))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = 0.0 + (x * (-0.00003245886498259485 + (x * (-0.0005410098692152044 + (x * (-0.0002594535632054381 + (x * (0.0172491608709614 + (x * (0.049410315156753225 + (x * (0.02512664961998968 + (x * -0.01803556856784494))))))))))))); // eslint-disable-line max-len\n\t\ts2 = -2.2335276320861708e-7 + (x * (0.00022493629192211576 + (x * (0.008213096746488934 + (x * (0.09885042511280101 + (x * (0.5413914320717209 + (x * (1.4801966942423133 + (x * (1.962029871977952 + (x * 1.0))))))))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn 0.04906224540690395;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = 0.04906224540690395 + (x * (-0.09691175301595212 + (x * (-0.4149833583594954 + (x * (-0.4065671242119384 + (x * (-0.1584135863906922 + (x * (-0.024014982064857155 + (x * -0.0010034668769627955))))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (3.0234982984646304 + (x * (3.4873958536072385 + (x * (1.9141558827442668 + (x * (0.5071377386143635 + (x * (0.05770397226904519 + (x * 0.001957681026011072))))))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = -0.0010034668769627955 + (x * (-0.024014982064857155 + (x * (-0.1584135863906922 + (x * (-0.4065671242119384 + (x * (-0.4149833583594954 + (x * (-0.09691175301595212 + (x * 0.04906224540690395))))))))))); // eslint-disable-line max-len\n\t\ts2 = 0.001957681026011072 + (x * (0.05770397226904519 + (x * (0.5071377386143635 + (x * (1.9141558827442668 + (x * (3.4873958536072385 + (x * (3.0234982984646304 + (x * 1.0))))))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn -0.029232972183027003;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = -0.029232972183027003 + (x * (0.14421626775719232 + (x * (-0.14244039073863127 + (x * (0.05428096940550536 + (x * (-0.008505359768683364 + (x * (0.0004311713426792973 + (x * 0.0))))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (-1.5016935605448505 + (x * (0.846973248876495 + (x * (-0.22009515181499575 + (x * (0.02558279715597587 + (x * (-0.0010066679553914337 + (x * -8.271935218912905e-7))))))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = 0.0 + (x * (0.0004311713426792973 + (x * (-0.008505359768683364 + (x * (0.05428096940550536 + (x * (-0.14244039073863127 + (x * (0.14421626775719232 + (x * -0.029232972183027003))))))))))); // eslint-disable-line max-len\n\t\ts2 = -8.271935218912905e-7 + (x * (-0.0010066679553914337 + (x * (0.02558279715597587 + (x * (-0.22009515181499575 + (x * (0.846973248876495 + (x * (-1.5016935605448505 + (x * 1.0))))))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006.\n* (C) Copyright Paul A. Bristow 2007.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport powm1 from '@stdlib/math-base-special-powm1';\nimport sumSeries from '@stdlib/math-base-tools-sum-series';\nimport gamma1pm1 from '@stdlib/math-base-special-gamma1pm1';\nimport smallGamma2Series from './small_gamma2_series.js';\n\n\n// MAIN //\n\n/**\n* Compute the full upper fraction (Q) when `a` is very small.\n*\n* @private\n* @param {number} a - function parameter\n* @param {number} x - function parameter\n* @param {boolean} invert - boolean indicating if the upper tail of the incomplete gamma function should be evaluated\n* @returns {Array} full upper fraction (Q) and pgam\n*/\nfunction tgammaSmallUpperPart( a, x, invert ) {\n\tvar initialValue;\n\tvar result;\n\tvar pgam;\n\tvar p;\n\tvar s;\n\n\tresult = gamma1pm1( a );\n\tpgam = ( result + 1.0 ) / a;\n\tp = powm1( x, a );\n\tresult -= p;\n\tresult /= a;\n\ts = smallGamma2Series( a, x );\n\tp += 1.0;\n\tinitialValue = ( invert ) ? pgam : 0.0;\n\tresult = -p * sumSeries( s, {\n\t\t'initialValue': (initialValue - result) / p\n\t});\n\tif ( invert ) {\n\t\tresult = -result;\n\t}\n\treturn [ result, pgam ];\n}\n\n\n// EXPORTS //\n\nexport default tgammaSmallUpperPart;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006-7, 2013-14.\n* (C) Copyright Paul A. Bristow 2007, 2013-14.\n* (C) Copyright Nikhar Agrawal 2013-14.\n* (C) Copyright Christopher Kormanyos 2013-14.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport gamma from '@stdlib/math-base-special-gamma';\nimport expm1 from '@stdlib/math-base-special-expm1';\nimport log1p from '@stdlib/math-base-special-log1p';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport lgammaSmallImp from './lgamma_small_imp.js';\n\n\n// MAIN //\n\n/**\n* Computes `gamma(x+1) - 1`.\n*\n* @param {number} x - input value\n* @returns {number} function value\n*\n* @example\n* var v = gammap1m1( 0.2 );\n* // returns ~-0.082\n*\n* @example\n* var v = gammap1m1( -9.2 );\n* // returns ~-1.0\n*\n* @example\n* var v = gammap1m1( 0.0 );\n* // returns 0.0\n*\n* @example\n* var v = gammap1m1( -3.0 );\n* // returns NaN\n*\n* @example\n* var v = gammap1m1( NaN );\n* // returns NaN\n*/\nfunction gammap1m1( x ) {\n\tif ( isnan( x ) ) {\n\t\treturn NaN;\n\t}\n\tif ( x < 0.0 ) {\n\t\tif ( x < -0.5 ) {\n\t\t\t// Best method is simply to subtract 1 from gamma:\n\t\t\treturn gamma( 1.0+x ) - 1.0;\n\t\t}\n\t\t// Use expm1 on the logarithm of gamma:\n\t\treturn expm1( -log1p( x ) + lgammaSmallImp( x+2.0, x+1.0, x ) );\n\t}\n\tif ( x < 2.0 ) {\n\t\t// Use expm1 on the logarithm of gamma:\n\t\treturn expm1( lgammaSmallImp( x+1.0, x, x-1.0 ) );\n\t}\n\t// Best method is simply to subtract 1 from gamma:\n\treturn gamma( 1.0+x ) - 1.0;\n}\n\n\n// EXPORTS //\n\nexport default gammap1m1;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_60_0/boost/math/special_functions/powm1.hpp}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport abs from '@stdlib/math-base-special-abs';\nimport expm1 from '@stdlib/math-base-special-expm1';\nimport ln from '@stdlib/math-base-special-ln';\nimport pow from '@stdlib/math-base-special-pow';\nimport trunc from '@stdlib/math-base-special-trunc';\n\n\n// MAIN //\n\n/**\n* Evaluates `bˣ - 1`.\n*\n* @param {number} b - base\n* @param {number} x - exponent\n* @returns {number} function value\n*\n* @example\n* var y = powm1( 2.0, 3.0 );\n* // returns 7.0\n*\n* @example\n* var y = powm1( 4.0, 0.5 );\n* // returns 1.0\n*\n* @example\n* var y = powm1( 0.0, 100.0 );\n* // returns -1.0\n*\n* @example\n* var y = powm1( 100.0, 0.0 );\n* // returns 0.0\n*\n* @example\n* var y = powm1( 0.0, 0.0 );\n* // returns 0.0\n*\n* @example\n* var y = powm1( 3.141592653589793, 5.0 );\n* // returns ~305.0197\n*\n* @example\n* var y = powm1( NaN, 3.0 );\n* // returns NaN\n*\n* @example\n* var y = powm1( 5.0, NaN );\n* // returns NaN\n*/\nfunction powm1( b, x ) {\n\tvar y;\n\tif (\n\t\tisnan( b ) ||\n\t\tisnan( x )\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x === 0.0 ) {\n\t\t// Any number raised to zero (including 0) is always 1 => b^0 - 1 = 0\n\t\treturn 0.0;\n\t}\n\tif ( b === 0.0 ) {\n\t\t// Zero raised to any number (except 0) is always zero => 0^x - 1 = -1\n\t\treturn -1.0;\n\t}\n\tif ( b < 0.0 && x%2.0 === 0 ) {\n\t\t// If `x` is even, recognize that `(-b)**x == (b)**x`...\n\t\tb = -b;\n\t}\n\tif ( b > 0.0 ) {\n\t\tif (\n\t\t\tabs( x*(b-1.0) ) < 0.5 ||\n\t\t\tabs( x ) < 0.2\n\t\t) {\n\t\t\t// No good/quick approximation for ln(b)*x, so we have to evaluate...\n\t\t\ty = ln( b ) * x;\n\t\t\tif ( y < 0.5 ) {\n\t\t\t\treturn expm1( y );\n\t\t\t}\n\t\t}\n\t} else if ( trunc( x ) !== x ) {\n\t\t// Exponentiation would yield a complex result...\n\t\treturn NaN;\n\t}\n\treturn pow( b, x ) - 1.0;\n}\n\n\n// EXPORTS //\n\nexport default powm1;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006.\n* (C) Copyright Paul A. Bristow 2007.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n/**\n* Series representation for upper fraction when `z` is small.\n*\n* @private\n* @param {number} a - function parameter\n* @param {number} x - function parameter\n* @returns {Function} series function\n*/\nfunction smallGamma2Series( a, x ) {\n\tvar result;\n\tvar apn;\n\tvar n;\n\tvar r;\n\n\tresult = -x;\n\tx = -x;\n\tapn = a + 1.0;\n\tn = 1;\n\treturn next;\n\n\t/**\n\t* Calculate the next term of the series.\n\t*\n\t* @private\n\t* @returns {number} series expansion term\n\t*/\n\tfunction next() {\n\t\tr = result / apn;\n\t\tresult *= x;\n\t\tn += 1;\n\t\tresult /= n;\n\t\tapn += 1.0;\n\t\treturn r;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default smallGamma2Series;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Smallest positive single-precision floating-point normal number.\n*\n* @module @stdlib/constants-float32-smallest-normal\n* @type {number}\n*\n* @example\n* import FLOAT32_SMALLEST_NORMAL from '@stdlib/constants-float32-smallest-normal';\n* // returns 1.1754943508222875e-38\n*/\n\n\n// MAIN //\n\n/**\n* The smallest positive single-precision floating-point normal number.\n*\n* ## Notes\n*\n* The number has the value\n*\n* ```tex\n* \\frac{1}{2^{127-1}}\n* ```\n*\n* which corresponds to the bit sequence\n*\n* ```binarystring\n* 0 00000001 00000000000000000000000\n* ```\n*\n* @constant\n* @type {number}\n* @default 1.1754943508222875e-38\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT32_SMALLEST_NORMAL = 1.1754943508222875e-38;\n\n\n// EXPORTS //\n\nexport default FLOAT32_SMALLEST_NORMAL;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math-base-special-abs';\nimport FLOAT32_SMALLEST_NORMAL from '@stdlib/constants-float32-smallest-normal';\nimport EPS from '@stdlib/constants-float64-eps';\n\n\n// VARIABLES //\n\nvar MAX_ITER = 1000000;\n\n\n// FUNCTIONS //\n\n/**\n* Evaluates a continued fraction expansion.\n*\n* ```text\n*           a1\n*      ---------------\n*      b1 +     a2\n*           ----------\n*            b2 +   a3\n*                -----\n*                b3 + ...\n* ```\n*\n* @private\n* @param {Function} gen - function giving terms of continued fraction expansion\n* @param {PositiveNumber} factor - further terms are only added as long as factor*result is smaller than the next term\n* @param {PositiveInteger} maxIter - maximum number of iterations\n* @returns {number} evaluated expansion\n*/\nfunction continuedFractionA( gen, factor, maxIter ) {\n\tvar isgenerator;\n\tvar delta;\n\tvar a0;\n\tvar f;\n\tvar C;\n\tvar D;\n\tvar v;\n\n\tisgenerator = typeof gen.next === 'function';\n\tv = ( isgenerator ) ? gen.next().value : gen();\n\tf = v[ 1 ];\n\ta0 = v[ 0 ];\n\tif ( f === 0.0 ) {\n\t\tf = FLOAT32_SMALLEST_NORMAL;\n\t}\n\tC = f;\n\tD = 0;\n\tif ( isgenerator === true ) {\n\t\tdo {\n\t\t\tv = gen.next().value;\n\t\t\tif ( v ) {\n\t\t\t\tD = v[ 1 ] + ( v[ 0 ] * D );\n\t\t\t\tif ( D === 0.0 ) {\n\t\t\t\t\tD = FLOAT32_SMALLEST_NORMAL;\n\t\t\t\t}\n\t\t\t\tC = v[ 1 ] + ( v[ 0 ] / C );\n\t\t\t\tif ( C === 0.0 ) {\n\t\t\t\t\tC = FLOAT32_SMALLEST_NORMAL;\n\t\t\t\t}\n\t\t\t\tD = 1.0 / D;\n\t\t\t\tdelta = C * D;\n\t\t\t\tf *= delta;\n\t\t\t}\n\t\t} while ( ( abs( delta - 1.0 ) > factor ) && --maxIter ); // eslint-disable-line no-plusplus\n\t} else {\n\t\tdo {\n\t\t\tv = gen();\n\t\t\tif ( v ) {\n\t\t\t\tD = v[ 1 ] + ( v[ 0 ] * D );\n\t\t\t\tif ( D === 0.0 ) {\n\t\t\t\t\tD = FLOAT32_SMALLEST_NORMAL;\n\t\t\t\t}\n\t\t\t\tC = v[ 1 ] + ( v[ 0 ] / C );\n\t\t\t\tif ( C === 0.0 ) {\n\t\t\t\t\tC = FLOAT32_SMALLEST_NORMAL;\n\t\t\t\t}\n\t\t\t\tD = 1.0 / D;\n\t\t\t\tdelta = C * D;\n\t\t\t\tf *= delta;\n\t\t\t}\n\t\t} while ( v && ( abs( delta - 1.0 ) > factor ) && --maxIter ); // eslint-disable-line no-plusplus\n\t}\n\treturn a0 / f;\n}\n\n/**\n* Evaluates a continued fraction expansion.\n*\n* ```text\n*      b0 +    a1\n*      ---------------\n*      b1 +     a2\n*           ----------\n*           b2 +   a3\n*                -----\n*                b3 + ...\n* ```\n*\n* @private\n* @param {Function} gen - function giving terms of continued fraction expansion\n* @param {PositiveNumber} factor - further terms are only added as long as factor*result is smaller than the next term\n* @param {PositiveInteger} maxIter - maximum number of iterations\n* @returns {number} evaluated expansion\n*/\nfunction continuedFractionB( gen, factor, maxIter ) {\n\tvar isgenerator;\n\tvar delta;\n\tvar f;\n\tvar C;\n\tvar D;\n\tvar v;\n\n\tisgenerator = typeof gen.next === 'function';\n\tv = ( isgenerator ) ? gen.next().value : gen();\n\tf = v[ 1 ];\n\tif ( f === 0.0 ) {\n\t\tf = FLOAT32_SMALLEST_NORMAL;\n\t}\n\tC = f;\n\tD = 0.0;\n\tif ( isgenerator === true ) {\n\t\tdo {\n\t\t\tv = gen.next().value;\n\t\t\tif ( v ) {\n\t\t\t\tD = v[ 1 ] + ( v[ 0 ] * D );\n\t\t\t\tif ( D === 0.0 ) {\n\t\t\t\t\tD = FLOAT32_SMALLEST_NORMAL;\n\t\t\t\t}\n\t\t\t\tC = v[ 1 ] + ( v[ 0 ] / C );\n\t\t\t\tif ( C === 0.0 ) {\n\t\t\t\t\tC = FLOAT32_SMALLEST_NORMAL;\n\t\t\t\t}\n\t\t\t\tD = 1.0 / D;\n\t\t\t\tdelta = C * D;\n\t\t\t\tf *= delta;\n\t\t\t}\n\t\t} while ( v && ( abs( delta - 1.0 ) > factor ) && --maxIter ); // eslint-disable-line no-plusplus\n\t} else {\n\t\tdo {\n\t\t\tv = gen();\n\t\t\tif ( v ) {\n\t\t\t\tD = v[ 1 ] + ( v[ 0 ] * D );\n\t\t\t\tif ( D === 0.0 ) {\n\t\t\t\t\tD = FLOAT32_SMALLEST_NORMAL;\n\t\t\t\t}\n\t\t\t\tC = v[ 1 ] + ( v[ 0 ] / C );\n\t\t\t\tif ( C === 0.0 ) {\n\t\t\t\t\tC = FLOAT32_SMALLEST_NORMAL;\n\t\t\t\t}\n\t\t\t\tD = 1.0 / D;\n\t\t\t\tdelta = C * D;\n\t\t\t\tf *= delta;\n\t\t\t}\n\t\t} while ( v && ( abs( delta - 1.0 ) > factor ) && --maxIter ); // eslint-disable-line no-plusplus\n\t}\n\treturn f;\n}\n\n\n// MAIN //\n\n/**\n* Evaluates the continued fraction approximation for the supplied series generator using the modified Lentz algorithm.\n*\n* ## References\n*\n* -   Lentz, William J. 1976. \"Generating bessel functions in Mie scattering calculations using continued fractions.\" _Applied Optics_ 15 (3): 668–71. doi:[10.1364/AO.15.000668](https://doi.org/10.1364/AO.15.000668).\n*\n* @param {Function} generator - function returning terms of continued fraction expansion\n* @param {Object} [options] - function options\n* @param {PositiveInteger} [options.maxIter=1000] - maximum number of iterations\n* @param {PositiveNumber} [options.tolerance=2.22e-16] - further terms are only added as long as the next term is greater than current term times the tolerance\n* @param {boolean} [options.keep=false] - whether to keep the leading b term\n* @returns {number} value of continued fraction\n*\n* @example\n* // Continued fraction for (e-1)^(-1):\n* var gen = generator();\n* var out = continuedFraction( gen );\n* // returns ~0.582\n*\n* function* generator() {\n*    var i = 0;\n*    while ( true ) {\n*        i++;\n*        yield [ i, i ];\n*    }\n* }\n*/\nfunction continuedFraction( generator, options ) {\n\tvar maxIter;\n\tvar opts;\n\tvar eps;\n\n\topts = {};\n\tif ( arguments.length > 1 ) {\n\t\topts = options;\n\t}\n\tmaxIter = opts.maxIter || MAX_ITER;\n\teps = opts.tolerance || EPS;\n\n\tif ( opts.keep ) {\n\t\treturn continuedFractionB( generator, eps, maxIter );\n\t}\n\treturn continuedFractionA( generator, eps, maxIter );\n}\n\n\n// EXPORTS //\n\nexport default continuedFraction;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math-base-special-abs';\nimport EPS from '@stdlib/constants-float64-eps';\nimport FLOAT32_SMALLEST_NORMAL from '@stdlib/constants-float32-smallest-normal';\n\n\n// VARIABLES //\n\nvar MAX_ITER = 1000000;\n\n\n// FUNCTIONS //\n\n/**\n* Evaluates a continued fraction expansion.\n*\n* ```text\n*           a1\n*      ---------------\n*      b1 +     a2\n*           ----------\n*            b2 +   a3\n*                -----\n*                b3 + ...\n* ```\n*\n* @private\n* @param {Function} gen - function giving terms of continued fraction expansion\n* @param {PositiveNumber} factor - further terms are only added as long as factor*result is smaller than the next term\n* @param {PositiveInteger} maxIter - maximum number of iterations\n* @returns {number} evaluated expansion\n*/\nfunction continuedFractionA( gen, factor, maxIter ) {\n\tvar delta;\n\tvar a0;\n\tvar C;\n\tvar D;\n\tvar f;\n\tvar v;\n\n\tv = gen();\n\tf = v[ 1 ];\n\ta0 = v[ 0 ];\n\tif ( f === 0 ) {\n\t\tf = FLOAT32_SMALLEST_NORMAL;\n\t}\n\tC = f;\n\tD = 0.0;\n\n\tdo {\n\t\tv = gen();\n\t\tif ( v ) {\n\t\t\tD = v[ 1 ] + ( v[ 0 ] * D );\n\t\t\tif ( D === 0.0 ) {\n\t\t\t\tD = FLOAT32_SMALLEST_NORMAL;\n\t\t\t}\n\t\t\tC = v[ 1 ] + ( v[ 0 ] / C );\n\t\t\tif ( C === 0.0 ) {\n\t\t\t\tC = FLOAT32_SMALLEST_NORMAL;\n\t\t\t}\n\t\t\tD = 1.0 / D;\n\t\t\tdelta = C * D;\n\t\t\tf *= delta;\n\t\t}\n\t} while ( v && ( abs( delta - 1.0 ) > factor ) && --maxIter ); // eslint-disable-line no-plusplus\n\n\treturn a0 / f;\n}\n\n/**\n* Evaluates a continued fraction expansion.\n*\n* ```text\n*      b0 +   a1\n*      ---------------\n*      b1 +   a2\n*           ----------\n*           b2 +   a3\n*                -----\n*                b3 + ...\n* ```\n*\n* @private\n* @param {Function} gen - function giving terms of continued fraction expansion\n* @param {PositiveNumber} factor - further terms are only added as long as factor*result is smaller than the next term\n* @param {PositiveInteger} maxIter - maximum number of iterations\n* @returns {number} evaluated expansion\n*/\nfunction continuedFractionB( gen, factor, maxIter ) {\n\tvar delta;\n\tvar C;\n\tvar D;\n\tvar f;\n\tvar v;\n\n\tv = gen();\n\tf = v[ 1 ];\n\tif ( f === 0.0 ) {\n\t\tf = FLOAT32_SMALLEST_NORMAL;\n\t}\n\tC = f;\n\tD = 0.0;\n\tdo {\n\t\tv = gen();\n\t\tif ( v ) {\n\t\t\tD = v[ 1 ] + ( v[ 0 ] * D );\n\t\t\tif ( D === 0.0 ) {\n\t\t\t\tD = FLOAT32_SMALLEST_NORMAL;\n\t\t\t}\n\t\t\tC = v[ 1 ] + ( v[ 0 ] / C );\n\t\t\tif ( C === 0.0 ) {\n\t\t\t\tC = FLOAT32_SMALLEST_NORMAL;\n\t\t\t}\n\t\t\tD = 1.0 / D;\n\t\t\tdelta = C * D;\n\t\t\tf *= delta;\n\t\t}\n\t} while ( v && ( abs( delta - 1.0 ) > factor ) && --maxIter ); // eslint-disable-line no-plusplus\n\treturn f;\n}\n\n\n// MAIN //\n\n/**\n* Evaluates the continued fraction approximation for the supplied series generator using the modified Lentz algorithm.\n*\n* ## References\n*\n* -   Lentz, William J. 1976. \"Generating bessel functions in Mie scattering calculations using continued fractions.\" _Applied Optics_ 15 (3): 668–71. doi:[10.1364/AO.15.000668](https://doi.org/10.1364/AO.15.000668).\n*\n* @param {Function} generator - function returning terms of continued fraction expansion\n* @param {Object} [options] - function options\n* @param {PositiveInteger} [options.maxIter=1000000] - maximum number of iterations\n* @param {PositiveNumber} [options.tolerance=2.22e-16] - further terms are only added as long as the next term is greater than current term times the tolerance\n* @param {boolean} [options.keep=false] - whether to keep the leading b term\n* @returns {number} value of continued fraction\n*\n* @example\n* // Continued fraction for (e-1)^(-1):\n* var gen = generator();\n* var out = continuedFraction( gen );\n* // returns ~0.582\n*\n* function generator() {\n*    var i = 0;\n*    return function() {\n*        i++;\n*        return [ i, i ];\n*    };\n* }\n*/\nfunction continuedFraction( generator, options ) {\n\tvar maxIter;\n\tvar opts;\n\tvar eps;\n\n\topts = {};\n\tif ( arguments.length > 1 ) {\n\t\topts = options;\n\t}\n\teps = opts.tolerance || EPS;\n\tmaxIter = opts.maxIter || MAX_ITER;\n\n\tif ( opts.keep ) {\n\t\treturn continuedFractionB( generator, eps, maxIter );\n\t}\n\treturn continuedFractionA( generator, eps, maxIter );\n}\n\n\n// EXPORTS //\n\nexport default continuedFraction;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Calculate a continued fraction approximation.\n*\n* @module @stdlib/math-base-tools-continued-fraction\n*\n* @example\n* import continuedFraction from '@stdlib/math-base-tools-continued-fraction';\n*\n* // Continued fraction for (e-1)^(-1):\n* var gen = generator()\n* var out = continuedFraction( gen );\n* // returns ~0.582\n*\n* function generator() {\n*    var i = 0;\n*    return function() {\n*        i++;\n*        return [ i, i ];\n*    };\n* }\n*/\n\n// MODULES //\n\nimport hasGeneratorSupport from '@stdlib/assert-has-generator-support';\nimport generator from './generators.js';\nimport basic from './basic.js';\n\n\n// MAIN //\n\nvar continuedFraction;\nif ( hasGeneratorSupport() ) {\n\tcontinuedFraction = generator;\n} else {\n\tcontinuedFraction = basic;\n}\n\n\n// EXPORTS //\n\nexport default continuedFraction;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006.\n* (C) Copyright Paul A. Bristow 2007.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport continuedFraction from '@stdlib/math-base-tools-continued-fraction';\nimport upperIncompleteGammaFract from './upper_incomplete_gamma_fract.js';\n\n\n// MAIN //\n\n/**\n* Evaluate the lower incomplete gamma integral via a series expansion and divide by `gamma(z)` to normalize.\n*\n* @private\n* @param {number} a - function parameter\n* @param {number} z - function parameter\n* @returns {number} function value\n*/\nfunction upperGammaFraction( a, z ) {\n\tvar f = upperIncompleteGammaFract( a, z );\n\treturn 1.0 / ( z - a + 1.0 + continuedFraction( f ) );\n}\n\n\n// EXPORTS //\n\nexport default upperGammaFraction;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006.\n* (C) Copyright Paul A. Bristow 2007.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Creates a function to evaluate a series expansion of the upper incomplete gamma fraction.\n*\n* @private\n* @param {number} a1 - function parameter\n* @param {number} z1 - function parameter\n* @returns {Function} series function\n*/\nfunction upperIncompleteGammaFract( a1, z1 ) {\n\tvar z = z1 - a1 + 1.0;\n\tvar a = a1;\n\tvar k = 0;\n\treturn next;\n\n\t/**\n\t* Calculate the next term of the series.\n\t*\n\t* @private\n\t* @returns {Array} series expansion terms\n\t*/\n\tfunction next() {\n\t\tk += 1;\n\t\tz += 2.0;\n\t\treturn [\n\t\t\tk * (a - k),\n\t\t\tz\n\t\t];\n\t}\n}\n\n\n// EXPORTS //\n\nexport default upperIncompleteGammaFract;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_62_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006-7, 2013-14.\n* (C) Copyright Paul A. Bristow 2007, 2013-14.\n* (C) Copyright Nikhar Agrawal 2013-14.\n* (C) Christopher Kormanyos 2013-14.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport gammaln from '@stdlib/math-base-special-gammaln';\nimport floor from '@stdlib/math-base-special-floor';\nimport gamma from '@stdlib/math-base-special-gamma';\nimport abs from '@stdlib/math-base-special-abs';\nimport exp from '@stdlib/math-base-special-exp';\nimport pow from '@stdlib/math-base-special-pow';\nimport ln from '@stdlib/math-base-special-ln';\nimport SQRT_EPSILON from '@stdlib/constants-float64-sqrt-eps';\nimport FLOAT64_MAX from '@stdlib/constants-float64-max';\nimport SQRT_TWO_PI from '@stdlib/constants-float64-sqrt-two-pi';\nimport MAX_LN from '@stdlib/constants-float64-max-ln';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport finiteGammaQ from './finite_gamma_q.js';\nimport finiteHalfGammaQ from './finite_half_gamma_q.js';\nimport fullIGammaPrefix from './full_igamma_prefix.js';\nimport igammaTemmeLarge from './igamma_temme_large.js';\nimport lowerGammaSeries from './lower_gamma_series.js';\nimport regularisedGammaPrefix from './regularised_gamma_prefix.js';\nimport tgammaSmallUpperPart from './tgamma_small_upper_part.js';\nimport upperGammaFraction from './upper_gamma_fraction.js';\n\n\n// VARIABLES //\n\nvar MAX_FACTORIAL = 170; // TODO: consider extracting as a constant\n\n\n// MAIN //\n\n/**\n* Computes the regularized incomplete gamma function. The upper tail is calculated via the modified Lentz's method for computing continued fractions, the lower tail using a power expansion.\n*\n*\n* ## Notes\n*\n* -   When `a >= MAX_FACTORIAL` and computing the non-normalized incomplete gamma, result is rather hard to compute unless we use logs. There are really two options a) if `x` is a long way from `a` in value then we can reliably use methods 2 and 4 below in logarithmic form and go straight to the result. Otherwise we let the regularized gamma take the strain (the result is unlikely to underflow in the central region anyway) and combine with `lgamma` in the hopes that we get a finite result.\n*\n* @param {NonNegativeNumber} x - function parameter\n* @param {PositiveNumber} a - function parameter\n* @param {boolean} [regularized=true] - boolean indicating if the function should evaluate the regularized or non-regularized incomplete gamma functions\n* @param {boolean} [upper=false] - boolean indicating if the function should return the upper tail of the incomplete gamma function\n* @returns {number} function value\n*/\nfunction gammainc( x, a, regularized, upper ) {\n\tvar optimisedInvert;\n\tvar normalized;\n\tvar evalMethod;\n\tvar initValue;\n\tvar isHalfInt;\n\tvar useTemme;\n\tvar isSmallA;\n\tvar invert;\n\tvar result;\n\tvar isInt;\n\tvar sigma;\n\tvar gam;\n\tvar res;\n\tvar fa;\n\tvar g;\n\n\tif ( x < 0.0 || a <= 0.0 ) {\n\t\treturn NaN;\n\t}\n\tnormalized = ( regularized === void 0 ) ? true : regularized;\n\tinvert = upper;\n\tresult = 0.0;\n\tif ( a >= MAX_FACTORIAL && !normalized ) {\n\t\tif ( invert && ( a * 4.0 < x ) ) {\n\t\t\t// This is method 4 below, done in logs:\n\t\t\tresult = ( a * ln(x) ) - x;\n\t\t\tresult += ln( upperGammaFraction( a, x ) );\n\t\t}\n\t\telse if ( !invert && ( a > 4.0 * x ) ) {\n\t\t\t// This is method 2 below, done in logs:\n\t\t\tresult = ( a * ln(x) ) - x;\n\t\t\tinitValue = 0;\n\t\t\tresult += ln( lowerGammaSeries( a, x, initValue ) / a );\n\t\t}\n\t\telse {\n\t\t\tresult = gammainc( a, x, true, invert );\n\t\t\tif ( result === 0.0 ) {\n\t\t\t\tif ( invert ) {\n\t\t\t\t\t// Try http://functions.wolfram.com/06.06.06.0039.01\n\t\t\t\t\tresult = 1.0 + ( 1.0 / (12.0*a) ) + ( 1.0 / (288.0*a*a) );\n\t\t\t\t\tresult = ln( result ) - a + ( ( a-0.5 ) * ln(a) );\n\t\t\t\t\tresult += ln( SQRT_TWO_PI );\n\t\t\t\t} else {\n\t\t\t\t\t// This is method 2 below, done in logs, we're really outside the range of this method, but since the result is almost certainly infinite, we should probably be OK:\n\t\t\t\t\tresult = ( a * ln( x ) ) - x;\n\t\t\t\t\tinitValue = 0.0;\n\t\t\t\t\tresult += ln( lowerGammaSeries( a, x, initValue ) / a);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tresult = ln( result ) + gammaln( a );\n\t\t\t}\n\t\t}\n\t\tif ( result > MAX_LN ) {\n\t\t\treturn PINF;\n\t\t}\n\t\treturn exp( result );\n\t}\n\tisSmallA = ( a < 30 ) && ( a <= x + 1.0 ) && ( x < MAX_LN );\n\tif ( isSmallA ) {\n\t\tfa = floor( a );\n\t\tisInt = ( fa === a );\n\t\tisHalfInt = ( isInt ) ? false : ( abs( fa - a ) === 0.5 );\n\t} else {\n\t\tisInt = isHalfInt = false;\n\t}\n\tif ( isInt && x > 0.6 ) {\n\t\t// Calculate Q via finite sum:\n\t\tinvert = !invert;\n\t\tevalMethod = 0;\n\t}\n\telse if ( isHalfInt && x > 0.2 ) {\n\t\t// Calculate Q via finite sum for half integer a:\n\t\tinvert = !invert;\n\t\tevalMethod = 1;\n\t}\n\telse if ( x < SQRT_EPSILON && a > 1.0 ) {\n\t\tevalMethod = 6;\n\t}\n\telse if ( x < 0.5 ) {\n\t\t// Changeover criterion chosen to give a changeover at Q ~ 0.33:\n\t\tif ( -0.4 / ln( x ) < a ) {\n\t\t\tevalMethod = 2;\n\t\t} else {\n\t\t\tevalMethod = 3;\n\t\t}\n\t}\n\telse if ( x < 1.1 ) {\n\t\t// Changeover here occurs when P ~ 0.75 or Q ~ 0.25:\n\t\tif ( x * 0.75 < a ) {\n\t\t\tevalMethod = 2;\n\t\t} else {\n\t\t\tevalMethod = 3;\n\t\t}\n\t}\n\telse {\n\t\t// Begin by testing whether we're in the \"bad\" zone where the result will be near 0.5 and the usual series and continued fractions are slow to converge:\n\t\tuseTemme = false;\n\t\tif ( normalized && a > 20 ) {\n\t\t\tsigma = abs( (x-a)/a );\n\t\t\tif ( a > 200 ) {\n\t\t\t\t// Limit chosen so that we use Temme's expansion only if the result would be larger than about 10^-6. Below that the regular series and continued fractions converge OK, and if we use Temme's method we get increasing errors from the dominant erfc term as it's (inexact) argument increases in magnitude.\n\t\t\t\tif ( 20 / a > sigma * sigma ) {\n\t\t\t\t\tuseTemme = true;\n\t\t\t\t}\n\t\t\t} else if ( sigma < 0.4 ) {\n\t\t\t\tuseTemme = true;\n\t\t\t}\n\t\t}\n\t\tif ( useTemme ) {\n\t\t\tevalMethod = 5;\n\t\t}\n\t\t// Regular case where the result will not be too close to 0.5: Changeover occurs at P ~ Q ~ 0.5. Note that series computation of P is about x2 faster than continued fraction calculation of Q, so try and use the CF only when really necessary, especially for small x.\n\t\telse if ( x - ( 1.0 / (3.0 * x) ) < a ) {\n\t\t\tevalMethod = 2;\n\t\t} else {\n\t\t\tevalMethod = 4;\n\t\t\tinvert = !invert;\n\t\t}\n\t}\n\n\t/* eslint-disable default-case */\n\tswitch ( evalMethod ) {\n\tcase 0:\n\t\tresult = finiteGammaQ( a, x );\n\t\tif (normalized === false ) {\n\t\t\tresult *= gamma( a );\n\t\t}\n\t\tbreak;\n\tcase 1:\n\t\tresult = finiteHalfGammaQ( a, x );\n\t\tif ( normalized === false ) {\n\t\t\tresult *= gamma( a );\n\t\t}\n\t\tbreak;\n\tcase 2:\n\t\t// Compute P:\n\t\tresult = ( normalized ) ?\n\t\t\tregularisedGammaPrefix( a, x ) :\n\t\t\tfullIGammaPrefix( a, x );\n\t\tif ( result !== 0.0 ) {\n\t\t\tinitValue = 0.0;\n\t\t\toptimisedInvert = false;\n\t\t\tif ( invert ) {\n\t\t\t\tinitValue = ( normalized ) ? 1.0 : gamma(a);\n\t\t\t\tif (\n\t\t\t\t\tnormalized ||\n\t\t\t\t\tresult >= 1.0 ||\n\t\t\t\t\tFLOAT64_MAX * result > initValue\n\t\t\t\t) {\n\t\t\t\t\tinitValue /= result;\n\t\t\t\t\tif (\n\t\t\t\t\t\tnormalized ||\n\t\t\t\t\t\ta < 1.0 ||\n\t\t\t\t\t\t( FLOAT64_MAX / a > initValue )\n\t\t\t\t\t) {\n\t\t\t\t\t\tinitValue *= -a;\n\t\t\t\t\t\toptimisedInvert = true;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tinitValue = 0.0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tinitValue = 0.0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tresult *= lowerGammaSeries( a, x, initValue ) / a;\n\t\tif ( optimisedInvert ) {\n\t\t\tinvert = false;\n\t\t\tresult = -result;\n\t\t}\n\t\tbreak;\n\tcase 3:\n\t\t// Compute Q:\n\t\tinvert = !invert;\n\t\tres = tgammaSmallUpperPart( a, x, invert );\n\t\tresult = res[ 0 ];\n\t\tg = res[ 1 ];\n\t\tinvert = false;\n\t\tif ( normalized ) {\n\t\t\tresult /= g;\n\t\t}\n\t\tbreak;\n\tcase 4:\n\t\t// Compute Q:\n\t\tresult = ( normalized ) ?\n\t\t\tregularisedGammaPrefix( a, x ) :\n\t\t\tfullIGammaPrefix( a, x );\n\t\tif ( result !== 0 ) {\n\t\t\tresult *= upperGammaFraction( a, x );\n\t\t}\n\t\tbreak;\n\tcase 5:\n\t\tresult = igammaTemmeLarge( a, x );\n\t\tif ( x >= a ) {\n\t\t\tinvert = !invert;\n\t\t}\n\t\tbreak;\n\tcase 6:\n\t\t// Since x is so small that P is necessarily very small too, use http://functions.wolfram.com/GammaBetaErf/GammaRegularized/06/01/05/01/01/\n\t\tresult = ( normalized ) ?\n\t\t\tpow(x, a) / gamma( a + 1.0 ) :\n\t\t\tpow( x, a ) / a;\n\t\tresult *= 1.0 - ( a * x / ( a + 1.0 ) );\n\t\tbreak;\n\t}\n\tif ( normalized && result > 1.0 ) {\n\t\tresult = 1.0;\n\t}\n\tif ( invert ) {\n\t\tgam = ( normalized ) ? 1.0 : gamma( a );\n\t\tresult = gam - result;\n\t}\n\treturn result;\n}\n\n\n// EXPORTS //\n\nexport default gammainc;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006.\n* (C) Copyright Paul A. Bristow 2007.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport exp from '@stdlib/math-base-special-exp';\n\n\n// MAIN //\n\n/**\n* Calculates normalized Q when a is an integer.\n*\n* @private\n* @param {integer} a - function parameter\n* @param {number} x - function parameter\n* @returns {number} upper gamma fraction\n*/\nfunction finiteGammaQ( a, x ) {\n\tvar term;\n\tvar sum;\n\tvar e;\n\tvar n;\n\n\te = exp( -x );\n\tsum = e;\n\tif ( sum !== 0.0 ) {\n\t\tterm = sum;\n\t\tfor ( n = 1; n < a; ++n ) {\n\t\t\tterm /= n;\n\t\t\tterm *= x;\n\t\t\tsum += term;\n\t\t}\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nexport default finiteGammaQ;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006.\n* (C) Copyright Paul A. Bristow 2007.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport erfc from '@stdlib/math-base-special-erfc';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport exp from '@stdlib/math-base-special-exp';\nimport PI from '@stdlib/constants-float64-pi';\n\n\n// MAIN //\n\n/**\n* Calculates normalized Q when a is a half-integer.\n*\n* @private\n* @param {number} a - function parameter\n* @param {number} x - function parameter\n* @returns {number} upper gamma fraction\n*/\nfunction finiteHalfGammaQ( a, x ) {\n\tvar half;\n\tvar term;\n\tvar sum;\n\tvar e;\n\tvar n;\n\n\te = erfc( sqrt(x) );\n\tif ( e !== 0 && a > 1.0 ) {\n\t\tterm = exp( -x ) / sqrt( PI * x );\n\t\tterm *= x;\n\t\thalf = 0.5;\n\t\tterm /= half;\n\t\tsum = term;\n\t\tfor ( n = 2; n < a; ++n ) {\n\t\t\tterm /= n - half;\n\t\t\tterm *= x;\n\t\t\tsum += term;\n\t\t}\n\t\te += sum;\n\t}\n\treturn e;\n}\n\n\n// EXPORTS //\n\nexport default finiteHalfGammaQ;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn -0.3333333333333333;\n\t}\n\treturn -0.3333333333333333 + (x * (0.08333333333333333 + (x * (-0.014814814814814815 + (x * (0.0011574074074074073 + (x * (0.0003527336860670194 + (x * (-0.0001787551440329218 + (x * (0.00003919263178522438 + (x * (-0.0000021854485106799924 + (x * (-0.00000185406221071516 + (x * (8.296711340953087e-7 + (x * (-1.7665952736826078e-7 + (x * (6.707853543401498e-9 + (x * (1.0261809784240309e-8 + (x * (-4.382036018453353e-9 + (x * 9.14769958223679e-10))))))))))))))))))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn -0.001851851851851852;\n\t}\n\treturn -0.001851851851851852 + (x * (-0.003472222222222222 + (x * (0.0026455026455026454 + (x * (-0.0009902263374485596 + (x * (0.00020576131687242798 + (x * (-4.018775720164609e-7 + (x * (-0.000018098550334489977 + (x * (0.00000764916091608111 + (x * (-0.0000016120900894563446 + (x * (4.647127802807434e-9 + (x * (1.378633446915721e-7 + (x * (-5.752545603517705e-8 + (x * 1.1951628599778148e-8))))))))))))))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.004133597883597883;\n\t}\n\treturn 0.004133597883597883 + (x * (-0.0026813271604938273 + (x * (0.0007716049382716049 + (x * (0.0000020093878600823047 + (x * (-0.00010736653226365161 + (x * (0.000052923448829120125 + (x * (-0.000012760635188618728 + (x * (3.423578734096138e-8 + (x * (0.0000013721957309062932 + (x * (-6.298992138380055e-7 + (x * 1.4280614206064242e-7))))))))))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.0006494341563786008;\n\t}\n\treturn 0.0006494341563786008 + (x * (0.00022947209362139917 + (x * (-0.0004691894943952557 + (x * (0.00026772063206283885 + (x * (-0.00007561801671883977 + (x * (-2.396505113867297e-7 + (x * (0.000011082654115347302 + (x * (-0.0000056749528269915965 + (x * 0.0000014230900732435883))))))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn -0.0008618882909167117;\n\t}\n\treturn -0.0008618882909167117 + (x * (0.0007840392217200666 + (x * (-0.0002990724803031902 + (x * (-0.0000014638452578843418 + (x * (0.00006641498215465122 + (x * (-0.00003968365047179435 + (x * 0.000011375726970678419))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn -0.00033679855336635813;\n\t}\n\treturn -0.00033679855336635813 + (x * (-0.00006972813758365858 + (x * (0.0002772753244959392 + (x * (-0.00019932570516188847 + (x * (0.00006797780477937208 + (x * (1.419062920643967e-7 + (x * (-0.000013594048189768693 + (x * (0.000008018470256334202 + (x * -0.000002291481176508095))))))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.0005313079364639922;\n\t}\n\treturn 0.0005313079364639922 + (x * (-0.0005921664373536939 + (x * (0.0002708782096718045 + (x * (7.902353232660328e-7 + (x * (-0.00008153969367561969 + (x * (0.0000561168275310625 + (x * -0.000018329116582843375))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.00034436760689237765;\n\t}\n\treturn 0.00034436760689237765 + (x * (0.00005171790908260592 + (x * (-0.00033493161081142234 + (x * (0.0002812695154763237 + (x * -0.00010976582244684731))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn -0.0006526239185953094;\n\t}\n\treturn -0.0006526239185953094 + (x * (0.0008394987206720873 + (x * -0.000438297098541721))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_61_0/boost/math/special_functions/beta.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport gammaDeltaRatio from '@stdlib/math-base-special-gamma-delta-ratio';\nimport factorial from '@stdlib/math-base-special-factorial';\nimport gammainc from '@stdlib/math-base-special-gammainc';\nimport log1p from '@stdlib/math-base-special-log1p';\nimport abs from '@stdlib/math-base-special-abs';\nimport pow from '@stdlib/math-base-special-pow';\nimport ln from '@stdlib/math-base-special-ln';\nimport MIN_VALUE from '@stdlib/constants-float64-smallest-normal';\nimport EPSILON from '@stdlib/constants-float64-eps';\nimport fullIGammaPrefix from './full_igamma_prefix.js';\nimport regularizedGammaPrefix from './regularized_gamma_prefix.js';\n\n\n// VARIABLES //\n\nvar p = new Array( 30 );\n\n\n// MAIN //\n\n/**\n* This is DiDonato and Morris's BGRAT routine, see Eq's 9 through 9.6.\n*\n* @private\n* @param {NonNegativeNumber} a - function parameter\n* @param {NonNegativeNumber} b - function parameter\n* @param {Probability} x - function parameter\n* @param {Probability} y - probability equal to `1-x`\n* @param {NonNegativeInteger} s0 - initial value\n* @param {number} mult - initial value\n* @param {boolean} normalized - boolean indicating whether to evaluate the regularized or non-regularized incomplete beta function\n* @returns {number} function value\n*/\nfunction betaSmallBLargeASeries( a, b, x, y, s0, mult, normalized ) {\n\tvar prefix;\n\tvar tmp1;\n\tvar tnp1;\n\tvar sum;\n\tvar b2n;\n\tvar bm1;\n\tvar lx2;\n\tvar lxp;\n\tvar mbn;\n\tvar lx;\n\tvar t4;\n\tvar h;\n\tvar j;\n\tvar m;\n\tvar n;\n\tvar r;\n\tvar t;\n\tvar u;\n\n\t// Some values we'll need later, these are Eq 9.1:\n\tbm1 = b - 1.0;\n\tt = a + ( bm1 / 2.0 );\n\tif ( y < 0.35 ) {\n\t\tlx = log1p( -y );\n\t} else {\n\t\tlx = ln( x );\n\t}\n\tu = -t * lx;\n\n\t// And from from 9.2:\n\th = regularizedGammaPrefix( b, u );\n\tif ( h <= MIN_VALUE ) {\n\t\treturn s0;\n\t}\n\tif ( normalized ) {\n\t\tprefix = h / gammaDeltaRatio( a, b );\n\t\tprefix /= pow( t, b );\n\t} else {\n\t\tprefix = fullIGammaPrefix( b, u ) / pow( t, b );\n\t}\n\tprefix *= mult;\n\n\t// We need the quantity Pn. Unfortunately, this is computed recursively and requires a full history of all the previous values. No choice but to declare a big table and hope it's big enough...\n\tp[ 0 ] = 1;  // see 9.3.\n\n\t// Now an initial value for J, see 9.6: gammainc( u, b, regularized, upper )\n\tj = gammainc( u, b, true, true );\n\tj /= h;\n\n\t// Now we can start to pull things together and evaluate the sum in Eq 9:\n\tsum = s0 + ( prefix * j ); // Value at N = 0\n\n\t// Some variables we'll need...\n\ttnp1 = 1.0; // 2*N+1\n\tlx2 = lx / 2.0;\n\tlx2 *= lx2;\n\tlxp = 1.0;\n\tt4 = 4.0 * t * t;\n\tb2n = b;\n\tfor ( n = 1; n < p.length; ++n ) {\n\t\t// Begin by evaluating the next Pn from Eq 9.4:\n\t\ttnp1 += 2.0;\n\t\tp[ n ] = 0.0;\n\t\tmbn = b - n;\n\t\ttmp1 = 3;\n\t\tfor ( m = 1; m < n; ++m ) {\n\t\t\tmbn = ( m * b ) - n;\n\t\t\tp[ n ] += mbn * p[ n-m ] / factorial( tmp1 );\n\t\t\ttmp1 += 2;\n\t\t}\n\t\tp[ n ] /= n;\n\t\tp[ n ] += bm1 / factorial( tnp1 );\n\n\t\t// Now we want Jn from Jn-1 using Eq 9.6:\n\t\tj = ( ( b2n * ( b2n+1.0 ) * j ) + ( ( u+b2n+1.0 ) * lxp ) ) / t4;\n\t\tlxp *= lx2;\n\t\tb2n += 2.0;\n\n\t\t// Pull it together with Eq 9:\n\t\tr = prefix * p[ n ] * j;\n\t\tsum += r;\n\t\tif ( r > 1.0 ) {\n\t\t\tif ( abs( r ) < abs( EPSILON * sum ) ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t} else if ( abs( r / EPSILON ) < abs( sum ) ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nexport default betaSmallBLargeASeries;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* Copyright John Maddock 2006-7, 2013-14.\n* Copyright Paul A. Bristow 2007, 2013-14.\n* Copyright Nikhar Agrawal 2013-14.\n* Copyright Christopher Kormanyos 2013-14.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport lanczosSumExpGScaled from '@stdlib/math-base-special-gamma-lanczos-sum-expg-scaled';\nimport gammaln from '@stdlib/math-base-special-gammaln';\nimport gamma from '@stdlib/math-base-special-gamma';\nimport log1p from '@stdlib/math-base-special-log1p';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport abs from '@stdlib/math-base-special-abs';\nimport exp from '@stdlib/math-base-special-exp';\nimport pow from '@stdlib/math-base-special-pow';\nimport max from '@stdlib/math-base-special-max';\nimport min from '@stdlib/math-base-special-min';\nimport ln from '@stdlib/math-base-special-ln';\nimport MAX_LN from '@stdlib/constants-float64-max-ln';\nimport MIN_LN from '@stdlib/constants-float64-min-ln';\nimport G from '@stdlib/constants-float64-gamma-lanczos-g';\nimport E from '@stdlib/constants-float64-e';\n\n\n// MAIN //\n\n/**\n* Computes `(z^a)*(e^-z) / gamma(a)`.\n*\n* @private\n* @param {number} a - input value\n* @param {number} z - input value\n* @returns {number} function value\n*/\nfunction regularizedGammaPrefix( a, z ) {\n\tvar prefix;\n\tvar amza;\n\tvar agh;\n\tvar alz;\n\tvar amz;\n\tvar sq;\n\tvar d;\n\n\tagh = a + G - 0.5;\n\td = ( (z - a) - G + 0.5 ) / agh;\n\tif ( a < 1.0 ) {\n\t\t// Treat a < 1 as a special case because our Lanczos approximations are optimized against the factorials with a > 1, and for high precision types very small values of `a` can give rather erroneous results for gamma:\n\t\tif ( z <= MIN_LN ) {\n\t\t\t// Use logs, so should be free of cancellation errors:\n\t\t\treturn exp( ( a * ln(z) ) - z - gammaln( a ) );\n\t\t}\n\t\t// No danger of overflow as gamma(a) < 1/a for small a, so direct calculation:\n\t\treturn pow( z, a ) * exp( -z ) / gamma( a );\n\t}\n\tif ( abs(d*d*a) <= 100.0 && a > 150.0 ) {\n\t\t// Special case for large a and a ~ z:\n\t\tprefix = ( a * ( log1p( d ) - d ) ) + ( z * ( 0.5-G ) / agh );\n\t\tprefix = exp( prefix );\n\t}\n\telse {\n\t\t// General case. Direct computation is most accurate, but use various fallbacks for different parts of the problem domain:\n\t\talz = a * ln(z / agh);\n\t\tamz = a - z;\n\t\tif (\n\t\t\tmin(alz, amz) <= MIN_LN ||\n\t\t\tmax(alz, amz) >= MAX_LN\n\t\t) {\n\t\t\tamza = amz / a;\n\t\t\tif (\n\t\t\t\tmin(alz, amz)/2.0 > MIN_LN &&\n\t\t\t\tmax(alz, amz)/2.0 < MAX_LN\n\t\t\t) {\n\t\t\t\t// Compute square root of the result and then square it:\n\t\t\t\tsq = pow( z/agh, a/2.0 ) * exp( amz/2.0 );\n\t\t\t\tprefix = sq * sq;\n\t\t\t}\n\t\t\telse if (\n\t\t\t\tmin(alz, amz)/4.0 > MIN_LN &&\n\t\t\t\tmax(alz, amz)/4.0 < MAX_LN &&\n\t\t\t\tz > a\n\t\t\t) {\n\t\t\t\t// Compute the 4th root of the result then square it twice:\n\t\t\t\tsq = pow( z/agh, a/4.0 ) * exp( amz/4.0 );\n\t\t\t\tprefix = sq * sq;\n\t\t\t\tprefix *= prefix;\n\t\t\t}\n\t\t\telse if (\n\t\t\t\tamza > MIN_LN &&\n\t\t\t\tamza < MAX_LN\n\t\t\t) {\n\t\t\t\tprefix = pow( (z * exp(amza)) / agh, a );\n\t\t\t}\n\t\t\telse {\n\t\t\t\tprefix = exp( alz + amz );\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tprefix = pow( z/agh, a ) * exp( amz );\n\t\t}\n\t}\n\tprefix *= sqrt( agh/E ) / lanczosSumExpGScaled( a );\n\treturn prefix;\n}\n\n\n// EXPORTS //\n\nexport default regularizedGammaPrefix;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006.\n* (C) Copyright Paul A. Bristow 2007.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport exp from '@stdlib/math-base-special-exp';\nimport pow from '@stdlib/math-base-special-pow';\nimport ln from '@stdlib/math-base-special-ln';\nimport MAX_LN from '@stdlib/constants-float64-max-ln';\nimport MIN_LN from '@stdlib/constants-float64-min-ln';\n\n\n// MAIN //\n\n/**\n* Calculates the power term prefix `(z^a)(e^-z)` used in the non-normalized incomplete gammas.\n*\n* @private\n* @param {number} a - function parameter\n* @param {number} z - function parameter\n* @returns {number} power term prefix\n*/\nfunction fullIGammaPrefix( a, z ) {\n\tvar prefix;\n\tvar alz;\n\n\talz = a * ln( z );\n\tif ( z >= 1.0 ) {\n\t\tif ( ( alz < MAX_LN ) && ( -z > MIN_LN ) ) {\n\t\t\tprefix = pow( z, a ) * exp( -z );\n\t\t}\n\t\telse if ( a >= 1.0 ) {\n\t\t\tprefix = pow( z / exp(z/a), a );\n\t\t}\n\t\telse {\n\t\t\tprefix = exp( alz - z );\n\t\t}\n\t}\n\telse if ( alz > MIN_LN ) {\n\t\tprefix = pow( z, a ) * exp( -z );\n\t}\n\telse if ( z/a < MAX_LN ) {\n\t\tprefix = pow( z / exp(z/a), a );\n\t}\n\telse {\n\t\tprefix = exp( alz - z );\n\t}\n\treturn prefix;\n}\n\n\n// EXPORTS //\n\nexport default fullIGammaPrefix;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/beta.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Computes the delta in `beta(a,b,x) = prefix + delta * beta(a+k,b,x)`.\n*\n* ## Notes\n*\n* Specifically, the function calculates\n*\n* ```tex\n* \\frac{ (a)(a+1)(a+2)...(a+k-1) }{ (b)(b+1)(b+2)...(b+k-1) }\n* ```\n*\n* The function should only called with small `k`; for large `k`, it is grossly inefficient.\n*\n* @private\n* @param {number} a - input value\n* @param {number} b - input value\n* @param {NonNegativeInteger} k - input value\n* @returns {number} ratio value\n*/\nfunction risingFactorialRatio( a, b, k ) {\n\tvar result;\n\tvar i;\n\tif ( k === 0 ) {\n\t\treturn 1.0;\n\t}\n\tresult = 1.0;\n\tfor ( i = 0; i < k; i++ ) {\n\t\tresult *= ( a + i ) / ( b + i );\n\t}\n\treturn result;\n}\n\n\n// EXPORTS //\n\nexport default risingFactorialRatio;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_62_0/boost/math/special_functions/beta.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport lanczosSumExpGScaled from '@stdlib/math-base-special-gamma-lanczos-sum-expg-scaled';\nimport maxabs from '@stdlib/math-base-special-maxabs';\nimport minabs from '@stdlib/math-base-special-minabs';\nimport expm1 from '@stdlib/math-base-special-expm1';\nimport log1p from '@stdlib/math-base-special-log1p';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport abs from '@stdlib/math-base-special-abs';\nimport exp from '@stdlib/math-base-special-exp';\nimport pow from '@stdlib/math-base-special-pow';\nimport min from '@stdlib/math-base-special-min';\nimport ln from '@stdlib/math-base-special-ln';\nimport MAX_LN from '@stdlib/constants-float64-max-ln';\nimport MIN_LN from '@stdlib/constants-float64-min-ln';\nimport G from '@stdlib/constants-float64-gamma-lanczos-g';\nimport E from '@stdlib/constants-float64-e';\n\n\n// MAIN //\n\n/**\n* Computes the leading power terms in the incomplete beta function.\n*\n* When normalized,\n*\n* ```tex\n* \\frac{ x^a y^b }{ \\operatorname{Beta}(a,b) }\n* ```\n*\n* and otherwise\n*\n* ```tex\n* x^a y^b\n* ```\n*\n* ## Notes\n*\n* -   Almost all of the error in the incomplete beta comes from this function, particularly when \\\\( a \\\\) and \\\\( b \\\\) are large. Computing large powers are _hard_ though, and using logarithms just leads to horrendous cancellation errors.\n*\n* -   For \\\\( l1 * l2 > 0 \\\\) or \\\\( \\operatorname{min}( a, b ) < 1 \\\\), the two power terms both go in the same direction (toward zero or toward infinity). In this case if either term overflows or underflows, then the product of the two must do so also. Alternatively, if one exponent is less than one, then we can't productively use it to eliminate overflow or underflow from the other term.  Problems with spurious overflow/underflow can't be ruled out. In this case, but it is _very_ unlikely since one of the power terms will evaluate to a number close to 1.\n*\n* -   If \\\\( \\max( \\abs(l1), \\abs(l2) ) < 0.5 \\\\), both exponents are near one and both the exponents are greater than one, and, further, these two power terms tend in opposite directions (one toward zero, the other toward infinity), so we have to combine the terms to avoid any risk of overflow or underflow. We do this by moving one power term inside the other, we have:\n*\n*     ```tex\n*     (1 + l_1)^a \\cdot (1 + l_2)^b \\\\\n*     = ((1 + l_1) \\cdot (1 + l_2)^(b/a))^a \\\\\n*     = (1 + l_1 + l_3 + l_1*l_3)^a\n*     ```\n*\n*     and\n*\n*     ```tex\n*     l_3 = (1 + l_2)^(b/a) - 1 \\\\\n*     = \\exp((b/a) * \\ln(1 + l_2)) - 1\n*     ```\n*\n*     The tricky bit is deciding which term to move inside. By preference, we move the larger term inside, so that the size of the largest exponent is reduced.  However, that can only be done as long as l3 (see above) is also small.\n*\n* @private\n* @param {NonNegativeNumber} a - function parameter\n* @param {NonNegativeNumber} b - function parameter\n* @param {Probability} x - function parameter\n* @param {Probability} y - probability equal to `1-x`\n* @param {boolean} normalized - boolean indicating whether to evaluate the power terms of the regularized or non-regularized incomplete beta function\n* @returns {number} power terms\n*/\nfunction ibetaPowerTerms( a, b, x, y, normalized ) {\n\tvar result;\n\tvar smallA;\n\tvar ratio;\n\tvar agh;\n\tvar bgh;\n\tvar cgh;\n\tvar l1;\n\tvar l2;\n\tvar l3;\n\tvar p1;\n\tvar b1;\n\tvar b2;\n\tvar c;\n\tvar l;\n\n\tif ( !normalized ) {\n\t\t// Can we do better here?\n\t\treturn pow( x, a ) * pow( y, b );\n\t}\n\tc = a + b;\n\n\t// Combine power terms with Lanczos approximation:\n\tagh = a + G - 0.5;\n\tbgh = b + G - 0.5;\n\tcgh = c + G - 0.5;\n\tresult = lanczosSumExpGScaled( c );\n\tresult /= lanczosSumExpGScaled( a ) * lanczosSumExpGScaled( b );\n\n\t// Combine with the leftover terms from the Lanczos approximation:\n\tresult *= sqrt( bgh / E );\n\tresult *= sqrt( agh / cgh );\n\n\t// `l1` and `l2` are the base of the exponents minus one:\n\tl1 = ( ( x * b ) - ( y * agh ) ) / agh;\n\tl2 = ( ( y * a ) - ( x * bgh ) ) / bgh;\n\tif ( minabs( l1, l2 ) < 0.2 ) {\n\t\t// When the base of the exponent is very near 1 we get really gross errors unless extra care is taken:\n\t\tif ( l1 * l2 > 0 || min( a, b ) < 1 ) {\n\t\t\tif ( abs(l1) < 0.1 ) {\n\t\t\t\tresult *= exp( a * log1p( l1 ) );\n\t\t\t} else {\n\t\t\t\tresult *= pow( ( x*cgh ) / agh, a );\n\t\t\t}\n\t\t\tif ( abs(l2) < 0.1 ) {\n\t\t\t\tresult *= exp( b * log1p( l2 ) );\n\t\t\t} else {\n\t\t\t\tresult *= pow((y * cgh) / bgh, b);\n\t\t\t}\n\t\t}\n\t\telse if ( maxabs( l1, l2 ) < 0.5 ) {\n\t\t\tsmallA = a < b;\n\t\t\tratio = b / a;\n\t\t\tif (\n\t\t\t\t(smallA && (ratio * l2 < 0.1)) ||\n\t\t\t\t(!smallA && (l1 / ratio > 0.1))\n\t\t\t) {\n\t\t\t\tl3 = expm1( ratio * log1p( l2 ) );\n\t\t\t\tl3 = l1 + l3 + ( l3 * l1 );\n\t\t\t\tl3 = a * log1p( l3 );\n\t\t\t\tresult *= exp( l3 );\n\t\t\t}\n\t\t\telse {\n\t\t\t\tl3 = expm1( log1p( l1 ) / ratio );\n\t\t\t\tl3 = l2 + l3 + ( l3 * l2 );\n\t\t\t\tl3 = b * log1p( l3 );\n\t\t\t\tresult *= exp( l3 );\n\t\t\t}\n\t\t}\n\t\telse if ( abs(l1) < abs(l2) ) {\n\t\t\t// First base near 1 only:\n\t\t\tl = ( a * log1p( l1 ) ) + ( b * ln( ( y*cgh ) / bgh ) );\n\t\t\tif ( l <= MIN_LN || l >= MAX_LN ) {\n\t\t\t\tl += ln(result);\n\t\t\t\tif ( l >= MAX_LN ) {\n\t\t\t\t\treturn NaN;\n\t\t\t\t}\n\t\t\t\tresult = exp( l );\n\t\t\t} else {\n\t\t\t\tresult *= exp( l );\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t// Second base near 1 only:\n\t\t\tl = ( b * log1p( l2 ) ) + ( a * ln( (x*cgh) / agh ) );\n\t\t\tif ( l <= MIN_LN || l >= MAX_LN ) {\n\t\t\t\tl += ln(result);\n\t\t\t\tif ( l >= MAX_LN ) {\n\t\t\t\t\treturn NaN;\n\t\t\t\t}\n\t\t\t\tresult = exp( l );\n\t\t\t} else {\n\t\t\t\tresult *= exp( l );\n\t\t\t}\n\t\t}\n\t}\n\telse {\n\t\t// General case:\n\t\tb1 = (x * cgh) / agh;\n\t\tb2 = (y * cgh) / bgh;\n\t\tl1 = a * ln(b1);\n\t\tl2 = b * ln(b2);\n\t\tif (\n\t\t\tl1 >= MAX_LN ||\n\t\t\tl1 <= MIN_LN ||\n\t\t\tl2 >= MAX_LN ||\n\t\t\tl2 <= MIN_LN\n\t\t) {\n\t\t\t// Oops, under/overflow, sidestep if we can:\n\t\t\tif ( a < b ) {\n\t\t\t\tp1 = pow( b2, b / a );\n\t\t\t\tl3 = a * ( ln(b1) + ln(p1) );\n\t\t\t\tif ( l3 < MAX_LN && l3 > MIN_LN ) {\n\t\t\t\t\tresult *= pow( p1 * b1, a );\n\t\t\t\t} else {\n\t\t\t\t\tl2 += l1 + ln(result);\n\t\t\t\t\tif ( l2 >= MAX_LN ) {\n\t\t\t\t\t\treturn NaN;\n\t\t\t\t\t}\n\t\t\t\t\tresult = exp( l2 );\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tp1 = pow( b1, a / b );\n\t\t\t\tl3 = ( ln(p1) + ln(b2) ) * b;\n\t\t\t\tif ( l3 < MAX_LN && l3 > MIN_LN ) {\n\t\t\t\t\tresult *= pow( p1 * b2, b );\n\t\t\t\t} else {\n\t\t\t\t\tl2 += l1 + ln( result );\n\t\t\t\t\tif (l2 >= MAX_LN) {\n\t\t\t\t\t\treturn NaN;\n\t\t\t\t\t}\n\t\t\t\t\tresult = exp( l2 );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t// Finally the normal case:\n\t\t\tresult *= pow( b1, a ) * pow( b2, b );\n\t\t}\n\t}\n\treturn result;\n}\n\n\n// EXPORTS //\n\nexport default ibetaPowerTerms;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math-base-special-abs';\nimport min from '@stdlib/math-base-special-min';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Returns the minimum absolute value.\n*\n* @param {number} [x] - first number\n* @param {number} [y] - second number\n* @param {...number} [args] - numbers\n* @returns {number} minimum absolute value\n*\n* @example\n* var v = minabs( -3.14, 4.2 );\n* // returns 3.14\n*\n* @example\n* var v = minabs( 5.9, 3.14, 4.2 );\n* // returns 3.14\n*\n* @example\n* var v = minabs( 3.14, NaN );\n* // returns NaN\n*\n* @example\n* var v = minabs( +0.0, -0.0 );\n* // returns +0.0\n*/\nfunction minabs( x, y ) {\n\tvar nargs;\n\tvar args;\n\tvar i;\n\n\tnargs = arguments.length;\n\tif ( nargs === 0 ) {\n\t\treturn PINF;\n\t}\n\tif ( nargs === 2 ) {\n\t\treturn min( abs( x ), abs( y ) );\n\t}\n\targs = [];\n\tfor ( i = 0; i < nargs; i++ ) {\n\t\targs.push( abs( arguments[ i ] ) );\n\t}\n\treturn min.apply( null, args );\n}\n\n\n// EXPORTS //\n\nexport default minabs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math-base-special-abs';\nimport max from '@stdlib/math-base-special-max';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Returns the maximum absolute value.\n*\n* @param {number} [x] - first number\n* @param {number} [y] - second number\n* @param {...number} [args] - numbers\n* @returns {number} maximum absolute value\n*\n* @example\n* var v = maxabs( 3.14, -4.2 );\n* // returns 4.2\n*\n* @example\n* var v = maxabs( 5.9, 3.14, 4.2 );\n* // returns 5.9\n*\n* @example\n* var v = maxabs( 3.14, NaN );\n* // returns NaN\n*\n* @example\n* var v = maxabs( +0.0, -0.0 );\n* // returns +0.0\n*/\nfunction maxabs( x, y ) {\n\tvar nargs;\n\tvar args;\n\tvar i;\n\n\tnargs = arguments.length;\n\tif ( nargs === 0 ) {\n\t\treturn PINF;\n\t}\n\tif ( nargs === 2 ) {\n\t\treturn max( abs( x ), abs( y ) );\n\t}\n\targs = [];\n\tfor ( i = 0; i < nargs; i++ ) {\n\t\targs.push( abs( arguments[ i ] ) );\n\t}\n\treturn max.apply( null, args );\n}\n\n\n// EXPORTS //\n\nexport default maxabs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_61_0/boost/math/special_functions/beta.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport continuedFraction from '@stdlib/math-base-tools-continued-fraction';\nimport ibetaPowerTerms from './ibeta_power_terms.js';\n\n\n// VARIABLES //\n\nvar OPTS = {\n\t'keep': true,\n\t'maxIter': 1000\n};\n\n\n// FUNCTIONS //\n\n/**\n* Continued fraction for the incomplete beta.\n*\n* @private\n* @param {NonNegativeNumber} a - function parameter\n* @param {NonNegativeNumber} b - function parameter\n* @param {Probability} x - function parameter\n* @param {Probability} y - probability equal to `1-x`\n* @returns {Function} series function\n*/\nfunction ibetaFraction2t( a, b, x, y ) {\n\tvar m = 0;\n\treturn next;\n\n\t/**\n\t* Calculate the numerator and denominator of the next term of the series.\n\t*\n\t* @private\n\t* @returns {Array} series expansion terms\n\t*/\n\tfunction next() {\n\t\tvar denom;\n\t\tvar aN;\n\t\tvar bN;\n\n\t\taN = (a + m - 1) * (a + b + m - 1) * m * (b - m) * x * x;\n\t\tdenom = a + ( 2.0*m ) - 1.0;\n\t\taN /= denom * denom;\n\t\tbN = m;\n\t\tbN += (m * (b - m) * x) / ( a + ( 2.0*m ) - 1.0 );\n\t\tbN += ( (a+m) * ( (a*y) - (b*x) + 1.0 + ( m*(2.0-x) ) ) ) / ( a + (2.0*m) + 1.0 ); // eslint-disable-line max-len\n\t\tm += 1;\n\t\treturn [ aN, bN ];\n\t}\n}\n\n\n// MAIN //\n\n/**\n* Evaluates the incomplete beta via the continued fraction representation.\n*\n* @private\n* @param {NonNegativeNumber} a - function parameter\n* @param {NonNegativeNumber} b - function parameter\n* @param {Probability} x - function parameter\n* @param {Probability} y - probability equal to `1-x`\n* @param {boolean} normalized - boolean indicating whether to evaluate the power terms of the regularized or non-regularized incomplete beta function\n* @param {(Array|TypedArray|Object)} out - output array holding the derivative as the second element\n* @returns {number} incomplete beta value\n*/\nfunction ibetaFraction2( a, b, x, y, normalized, out ) {\n\tvar result;\n\tvar fract;\n\tvar f;\n\n\tresult = ibetaPowerTerms( a, b, x, y, normalized );\n\tif ( out ) {\n\t\tout[ 1 ] = result;\n\t}\n\tif ( result === 0.0 ) {\n\t\treturn result;\n\t}\n\tf = ibetaFraction2t( a, b, x, y );\n\tfract = continuedFraction( f, OPTS );\n\treturn result / fract;\n}\n\n\n// EXPORTS //\n\nexport default ibetaFraction2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isInteger from '@stdlib/math-base-assert-is-integer';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isOdd from '@stdlib/math-base-assert-is-odd';\nimport round from '@stdlib/math-base-special-round';\n\n\n// MAIN //\n\n/**\n* Computes the binomial coefficient of two integers.\n*\n* ## Method\n*\n* -   Instead of evaluating the factorial form, which is inefficient and prone to overflow for large inputs arguments, this module computes the following multiplicative representation of the binomial coefficient for integer arguments\n*\n*     ```tex\n*     \\binom nk = \\prod_{i=1}^k \\frac{n+1-i}{i}\n*     ```\n*\n* @param {integer} n - input value\n* @param {integer} k - second input value\n* @returns {integer} function value\n*\n* @example\n* var v = binomcoef( 8, 2 );\n* // returns 28\n*\n* @example\n* var v = binomcoef( 0, 0 );\n* // returns 1\n*\n* @example\n* var v = binomcoef( -4, 2 );\n* // returns 10\n*\n* @example\n* var v = binomcoef( NaN, 3 );\n* // returns NaN\n*\n* @example\n* var v = binomcoef( 5, NaN );\n* // returns NaN\n*\n* @example\n* var v = binomcoef( NaN, NaN );\n* // returns NaN\n*/\nfunction binomcoef( n, k ) {\n\tvar res;\n\tvar j;\n\tif ( isnan( n ) || isnan( k ) ) {\n\t\treturn NaN;\n\t}\n\tif ( !isInteger( n ) || !isInteger( k ) ) {\n\t\treturn NaN;\n\t}\n\tif ( k < 0 ) {\n\t\treturn 0;\n\t}\n\tif ( n < 0 ) {\n\t\tres = binomcoef( -n + k - 1, k );\n\t\tif ( isOdd( k ) ) {\n\t\t\tres = -res;\n\t\t}\n\t\treturn res;\n\t}\n\tif ( k > n ) {\n\t\treturn 0;\n\t}\n\tif ( k === 0 || k === n ) {\n\t\treturn 1;\n\t}\n\tif ( k === 1 || k === n - 1 ) {\n\t\treturn n;\n\t}\n\tif ( n - k < k ) {\n\t\tk = n - k;\n\t}\n\t// Use recursive definition...\n\tres = n;\n\tfor ( j = 2; j <= k; j++ ) {\n\t\tres *= ( n - j + 1 ) / j;\n\t}\n\t// Correct for rounding errors...\n\treturn ( isInteger( res ) ) ? res : round( res );\n}\n\n\n// EXPORTS //\n\nexport default binomcoef;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_61_0/boost/math/special_functions/beta.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport ibetaPowerTerms from './ibeta_power_terms.js';\n\n\n// MAIN //\n\n/**\n* Computes the difference between `ibeta(a,b,x)` and `ibeta(a+k,b,x)`.\n*\n* @private\n* @param {NonNegativeNumber} a - function parameter\n* @param {NonNegativeNumber} b - function parameter\n* @param {Probability} x - function parameter\n* @param {Probability} y - probability equal to `1-x`\n* @param {NonNegativeInteger} k - function input\n* @param {boolean} normalized - boolean indicating whether to evaluate the power terms of the regularized or non-regularized incomplete beta function\n* @param {(Array|TypedArray|Object)} out - output array holding the derivative as the second element\n* @returns {number} difference between ibeta(a,b,x) and ibeta(a+k,b,x)\n*/\nfunction ibetaAStep( a, b, x, y, k, normalized, out ) {\n\tvar prefix;\n\tvar term;\n\tvar sum;\n\tvar i;\n\n\tprefix = ibetaPowerTerms( a, b, x, y, normalized );\n\tif ( out ) {\n\t\tout[ 1 ] = prefix;\n\t}\n\tprefix /= a;\n\tif ( prefix === 0.0 ) {\n\t\treturn prefix;\n\t}\n\tsum = 1.0;\n\tterm = 1.0;\n\n\t// Series summation from 0 to k-1:\n\tfor ( i = 0; i < k-1; ++i ) {\n\t\tterm *= (a+b+i) * x / (a+i+1.0);\n\t\tsum += term;\n\t}\n\tprefix *= sum;\n\treturn prefix;\n}\n\n\n// EXPORTS //\n\nexport default ibetaAStep;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/beta.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport lanczosSumExpGScaled from '@stdlib/math-base-special-gamma-lanczos-sum-expg-scaled';\nimport sumSeries from '@stdlib/math-base-tools-sum-series';\nimport log1p from '@stdlib/math-base-special-log1p';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport exp from '@stdlib/math-base-special-exp';\nimport pow from '@stdlib/math-base-special-pow';\nimport ln from '@stdlib/math-base-special-ln';\nimport MIN_VALUE from '@stdlib/constants-float64-smallest-normal';\nimport MAX_LN from '@stdlib/constants-float64-max-ln';\nimport MIN_LN from '@stdlib/constants-float64-min-ln';\nimport G from '@stdlib/constants-float64-gamma-lanczos-g';\nimport E from '@stdlib/constants-float64-e';\n\n\n// VARIABLES //\n\nvar opts = {\n\t'maxTerms': 100\n};\n\n\n// FUNCTIONS //\n\n/**\n* Series approximation to the incomplete beta.\n*\n* @private\n* @param {NonNegativeNumber} a - function parameter\n* @param {NonNegativeNumber} b - function parameter\n* @param {Probability} x - function parameter\n* @param {number} result - initial result value\n* @returns {Function} series function\n*/\nfunction ibetaSeriesT( a, b, x, result ) {\n\tvar poch = 1.0 - b;\n\tvar n = 1;\n\treturn next;\n\n\t/**\n\t* Calculate the next term of the series.\n\t*\n\t* @private\n\t* @returns {number} series expansion term\n\t*/\n\tfunction next() {\n\t\tvar r = result / a;\n\t\ta += 1.0;\n\t\tresult *= poch * x / n;\n\t\tn += 1;\n\t\tpoch += 1.0;\n\t\treturn r;\n\t}\n}\n\n\n// MAIN //\n\n/**\n* Incomplete beta series.\n*\n* @private\n* @param {NonNegativeNumber} a - function parameter\n* @param {NonNegativeNumber} b - function parameter\n* @param {Probability} x - function parameter\n* @param {NonNegativeInteger} s0 - initial value\n* @param {boolean} normalized - boolean indicating whether to evaluate the power terms of the regularized or non-regularized incomplete beta function\n* @param {(Array|TypedArray|Object)} out - output array holding the derivative as the second element\n* @param {Probability} y - probability equal to `1-x`\n* @returns {number} function value\n*/\nfunction ibetaSeries( a, b, x, s0, normalized, out, y ) {\n\tvar result;\n\tvar agh;\n\tvar bgh;\n\tvar cgh;\n\tvar l1;\n\tvar l2;\n\tvar c;\n\tvar s;\n\n\tif ( normalized ) {\n\t\tc = a + b;\n\n\t\t// Incomplete beta power term, combined with the Lanczos approximation:\n\t\tagh = a + G - 0.5;\n\t\tbgh = b + G - 0.5;\n\t\tcgh = c + G - 0.5;\n\t\tresult = lanczosSumExpGScaled( c ) / ( lanczosSumExpGScaled( a ) * lanczosSumExpGScaled( b ) ); // eslint-disable-line max-len\n\n\t\tl1 = ln( cgh / bgh ) * ( b - 0.5 );\n\t\tl2 = ln( x * cgh / agh ) * a;\n\n\t\t// Check for over/underflow in the power terms:\n\t\tif (\n\t\t\tl1 > MIN_LN &&\n\t\t\tl1 < MAX_LN &&\n\t\t\tl2 > MIN_LN &&\n\t\t\tl2 < MAX_LN\n\t\t) {\n\t\t\tif ( a * b < bgh * 10.0 ) {\n\t\t\t\tresult *= exp( ( b-0.5 ) * log1p( a / bgh ) );\n\t\t\t} else {\n\t\t\t\tresult *= pow( cgh / bgh, b - 0.5 );\n\t\t\t}\n\t\t\tresult *= pow( x * cgh / agh, a );\n\t\t\tresult *= sqrt( agh / E );\n\n\t\t\tif ( out ) {\n\t\t\t\tout[ 1 ] = result * pow( y, b );\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t// We need logs, and this *will* cancel:\n\t\t\tresult = ln( result ) + l1 + l2 + ( ( ln( agh ) - 1.0 ) / 2.0 );\n\t\t\tif ( out ) {\n\t\t\t\tout[ 1 ] = exp( result + ( b * ln( y ) ) );\n\t\t\t}\n\t\t\tresult = exp( result );\n\t\t}\n\t}\n\telse {\n\t\t// Non-normalized, just compute the power:\n\t\tresult = pow( x, a );\n\t}\n\tif ( result < MIN_VALUE ) {\n\t\treturn s0; // Safeguard: series can't cope with denorms.\n\t}\n\ts = ibetaSeriesT( a, b, x, result );\n\topts.initialValue = s0;\n\treturn sumSeries( s, opts );\n}\n\n\n// EXPORTS //\n\nexport default ibetaSeries;\n","/* eslint-disable max-statements, max-lines */\n\n/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_61_0/boost/math/special_functions/beta.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006.\n* (C) Copyright Paul A. Bristow 2007.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport expm1 from '@stdlib/math-base-special-expm1';\nimport floor from '@stdlib/math-base-special-floor';\nimport log1p from '@stdlib/math-base-special-log1p';\nimport asin from '@stdlib/math-base-special-asin';\nimport beta from '@stdlib/math-base-special-beta';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport exp from '@stdlib/math-base-special-exp';\nimport pow from '@stdlib/math-base-special-pow';\nimport max from '@stdlib/math-base-special-max';\nimport min from '@stdlib/math-base-special-min';\nimport MAX_FLOAT64 from '@stdlib/constants-float64-max';\nimport MIN_FLOAT64 from '@stdlib/constants-float64-smallest-normal';\nimport MAX_INT32 from '@stdlib/constants-int32-max';\nimport HALF_PI from '@stdlib/constants-float64-half-pi';\nimport PI from '@stdlib/constants-float64-pi';\nimport betaSmallBLargeASeries from './beta_small_b_large_a_series.js';\nimport risingFactorialRatio from './rising_factorial_ratio.js';\nimport ibetaPowerTerms from './ibeta_power_terms.js';\nimport ibetaFraction2 from './ibeta_fraction2.js';\nimport binomialCCDF from './binomial_ccdf.js';\nimport ibetaAStep from './ibeta_a_step.js';\nimport ibetaSeries from './ibeta_series.js';\n\n\n// VARIABLES //\n\nvar ONE_OVER_PI = 1.0 / PI;\n\n\n// MAIN //\n\n/**\n* Evaluates the incomplete beta function and its first derivative and assigns results to a provided output array.\n*\n* ## Notes\n*\n* -   This function divides up the input range and selects the right implementation method for each domain.\n*\n* @param {Probability} x - function input\n* @param {NonNegativeNumber} a - function parameter\n* @param {NonNegativeNumber} b - function parameter\n* @param {boolean} regularized - boolean indicating if the function should evaluate the regularized boolean beta function\n* @param {boolean} upper - boolean indicating if the function should return the upper tail of the incomplete beta function instead\n* @param {(Array|TypedArray|Object)} out - output array\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array index offset\n* @returns {(Array|TypedArray|Object)} function value and first derivative\n*\n* @example\n* var out = ibetaImp( 0.5, 2.0, 2.0, false, false, [ 0.0, 0.0 ], 1, 0 );\n* // returns [ ~0.083, ~1.5 ]\n*\n* @example\n* var out = ibetaImp( 0.2, 1.0, 2.0, false, true, [ 0.0, 0.0 ], 1, 0 );\n* // returns [ 0.32, 1.6 ]\n*\n* @example\n* var out = ibetaImp( 0.2, 1.0, 2.0, true, true, [ 0.0, 0.0 ], 1, 0 );\n* // returns [ 0.64, 1.6 ]\n*/\nfunction ibetaImp( x, a, b, regularized, upper, out, stride, offset ) {\n\tvar lambda;\n\tvar prefix;\n\tvar fract;\n\tvar bbar;\n\tvar div;\n\tvar tmp;\n\tvar i0;\n\tvar i1;\n\tvar k;\n\tvar n;\n\tvar p;\n\tvar y;\n\n\ty = 1.0 - x;\n\ti0 = offset;\n\ti1 = offset + stride;\n\n\t// Derivative not set...\n\tout[ i1 ] = -1;\n\tif ( isnan( x ) || x < 0.0 || x > 1.0 ) {\n\t\tout[ i0 ] = NaN;\n\t\tout[ i1 ] = NaN;\n\t\treturn out;\n\t}\n\tif ( regularized ) {\n\t\tif ( a < 0.0 || b < 0.0 ) {\n\t\t\tout[ i0 ] = NaN;\n\t\t\tout[ i1 ] = NaN;\n\t\t\treturn out;\n\t\t}\n\t\t// Extend to a few very special cases...\n\t\tif ( a === 0.0 ) {\n\t\t\tif ( b === 0.0 ) {\n\t\t\t\tout[ i0 ] = NaN;\n\t\t\t\tout[ i1 ] = NaN;\n\t\t\t\treturn out;\n\t\t\t}\n\t\t\tif ( b > 0.0 ) {\n\t\t\t\tout[ i0 ] = ( upper ) ? 0.0 : 1.0;\n\t\t\t\treturn out;\n\t\t\t}\n\t\t} else if ( b === 0.0 ) {\n\t\t\tif ( a > 0.0 ) {\n\t\t\t\tout[ i0 ] = ( upper ) ? 1.0 : 0.0;\n\t\t\t\treturn out;\n\t\t\t}\n\t\t}\n\t} else if ( a <= 0.0 || b <= 0.0 ) {\n\t\tout[ i0 ] = NaN;\n\t\tout[ i1 ] = NaN;\n\t\treturn out;\n\t}\n\tif ( x === 0.0 ) {\n\t\tif ( a === 1.0 ) {\n\t\t\tout[ i1 ] = 1.0;\n\t\t} else {\n\t\t\tout[ i1 ] = ( a < 1.0 ) ? MAX_FLOAT64 / 2.0 : MIN_FLOAT64 * 2.0;\n\t\t}\n\t\tif ( upper ) {\n\t\t\tout[ i0 ] = ( regularized ) ? 1.0 : beta( a, b );\n\t\t\treturn out;\n\t\t}\n\t\tout[ i0 ] = 0.0;\n\t\treturn out;\n\t}\n\tif ( x === 1.0 ) {\n\t\tif ( b === 1.0 ) {\n\t\t\tout[ i1 ] = 1.0;\n\t\t} else {\n\t\t\tout[ i1 ] = ( b < 1.0 ) ? MAX_FLOAT64 / 2.0 : MIN_FLOAT64 * 2.0;\n\t\t}\n\t\tif ( upper ) {\n\t\t\tout[ i0 ] = 0.0;\n\t\t} else {\n\t\t\tout[ i0 ] = ( regularized ) ? 1.0 : beta( a, b );\n\t\t}\n\t\treturn out;\n\t}\n\tif ( a === 0.5 && b === 0.5 ) {\n\t\tout[ i1 ] = ONE_OVER_PI * sqrt( y * x );\n\n\t\t// We have an arcsine distribution:\n\t\tp = ( upper ) ? asin( sqrt(y) ) : asin( sqrt(x) );\n\t\tp /= HALF_PI;\n\t\tif ( !regularized ) {\n\t\t\tp *= PI;\n\t\t}\n\t\tout[ i0 ] = p;\n\t\treturn out;\n\t}\n\tif ( a === 1.0 ) {\n\t\ttmp = b;\n\t\tb = a;\n\t\ta = tmp;\n\n\t\ttmp = y;\n\t\ty = x;\n\t\tx = tmp;\n\n\t\tupper = !upper;\n\t}\n\tif ( b === 1.0 ) {\n\t\t// Special case see: http://functions.wolfram.com/GammaBetaErf/BetaRegularized/03/01/01/\n\t\tif ( a === 1.0 ) {\n\t\t\tout[ i0 ] = ( upper ) ? y : x;\n\t\t\tout[ i1 ] = 1.0;\n\t\t\treturn out;\n\t\t}\n\t\tout[ i1 ] = a * pow( x, a - 1.0 );\n\t\tif ( y < 0.5 ) {\n\t\t\tp = ( upper ) ? -expm1( a * log1p(-y) ) : exp( a * log1p(-y) );\n\t\t} else {\n\t\t\tp = ( upper ) ? -( pow( x, a ) - 1.0 ) : pow( x, a );\n\t\t}\n\t\tif ( !regularized ) {\n\t\t\tp /= a;\n\t\t}\n\t\tout[ i0 ] = p;\n\t\treturn out;\n\t}\n\tif ( min( a, b ) <= 1.0 ) {\n\t\tif ( x > 0.5 ) {\n\t\t\ttmp = b;\n\t\t\tb = a;\n\t\t\ta = tmp;\n\n\t\t\ttmp = y;\n\t\t\ty = x;\n\t\t\tx = tmp;\n\n\t\t\tupper = !upper;\n\t\t}\n\t\tif ( max( a, b ) <= 1.0 ) {\n\t\t\t// Both a,b < 1:\n\t\t\tif ( (a >= min( 0.2, b ) ) || ( pow(x, a) <= 0.9 ) ) {\n\t\t\t\tif ( upper ) {\n\t\t\t\t\tfract = -( ( regularized ) ? 1.0 : beta( a, b ) );\n\t\t\t\t\tupper = false;\n\t\t\t\t\tfract = -ibetaSeries( a, b, x, fract, regularized, out, y );\n\t\t\t\t} else {\n\t\t\t\t\tfract = ibetaSeries( a, b, x, 0, regularized, out, y );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttmp = b;\n\t\t\t\tb = a;\n\t\t\t\ta = tmp;\n\n\t\t\t\ttmp = y;\n\t\t\t\ty = x;\n\t\t\t\tx = tmp;\n\n\t\t\t\tupper = !upper;\n\t\t\t\tif ( y >= 0.3 ) {\n\t\t\t\t\tif ( upper ) {\n\t\t\t\t\t\tfract = -( ( regularized ) ? 1.0 : beta( a, b ) );\n\t\t\t\t\t\tupper = false;\n\t\t\t\t\t\tfract = -ibetaSeries( a, b, x, fract, regularized, out, y ); // eslint-disable-line max-len\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfract = ibetaSeries( a, b, x, 0, regularized, out, y );\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// Sidestep on a, and then use the series representation:\n\t\t\t\t\tif ( regularized ) {\n\t\t\t\t\t\tprefix = 1;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tprefix = risingFactorialRatio( a + b, a, 20 );\n\t\t\t\t\t}\n\t\t\t\t\tfract = ibetaAStep( a, b, x, y, 20, regularized, out );\n\t\t\t\t\tif ( upper ) {\n\t\t\t\t\t\tfract -= ( ( regularized ) ? 1 : beta( a, b ) );\n\t\t\t\t\t\tupper = false;\n\t\t\t\t\t\tfract = -betaSmallBLargeASeries( a + 20.0, b, x, y, fract, prefix, regularized ); // eslint-disable-line max-len\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfract = betaSmallBLargeASeries( a + 20.0, b, x, y, fract, prefix, regularized ); // eslint-disable-line max-len\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else if ( b <= 1.0 || ( x < 0.1 && ( pow( b * x, a ) <= 0.7 ) ) ) {\n\t\t\tif ( upper ) {\n\t\t\t\tfract = -( ( regularized ) ? 1 : beta( a, b ) );\n\t\t\t\tupper = false;\n\t\t\t\tfract = -ibetaSeries( a, b, x, fract, regularized, out, y );\n\t\t\t} else {\n\t\t\t\tfract = ibetaSeries( a, b, x, 0.0, regularized, out, y );\n\t\t\t}\n\t\t} else {\n\t\t\ttmp = b;\n\t\t\tb = a;\n\t\t\ta = tmp;\n\n\t\t\ttmp = y;\n\t\t\ty = x;\n\t\t\tx = tmp;\n\t\t\tupper = !upper;\n\n\t\t\tif ( y >= 0.3 ) {\n\t\t\t\tif (upper) {\n\t\t\t\t\tfract = -(( regularized ) ? 1.0 : beta( a, b ));\n\t\t\t\t\tupper = false;\n\t\t\t\t\tfract = -ibetaSeries( a, b, x, fract, regularized, out, y );\n\t\t\t\t} else {\n\t\t\t\t\tfract = ibetaSeries( a, b, x, 0.0, regularized, out, y );\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if ( a >= 15.0 ) {\n\t\t\t\tif ( upper ) {\n\t\t\t\t\tfract = -(( regularized ) ? 1.0 : beta( a, b ));\n\t\t\t\t\tupper = false;\n\t\t\t\t\tfract = -betaSmallBLargeASeries( a, b, x, y, fract, 1.0, regularized ); // eslint-disable-line max-len\n\t\t\t\t} else {\n\t\t\t\t\tfract = betaSmallBLargeASeries( a, b, x, y, 0.0, 1.0, regularized ); // eslint-disable-line max-len\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif ( regularized ) {\n\t\t\t\t\tprefix = 1;\n\t\t\t\t} else {\n\t\t\t\t\t// Sidestep to improve errors:\n\t\t\t\t\tprefix = risingFactorialRatio( a + b, a, 20.0 );\n\t\t\t\t}\n\t\t\t\tfract = ibetaAStep( a, b, x, y, 20.0, regularized, out );\n\t\t\t\tif ( upper ) {\n\t\t\t\t\tfract -= ( ( regularized ) ? 1.0 : beta( a, b ) );\n\t\t\t\t\tupper = false;\n\t\t\t\t\tfract = -betaSmallBLargeASeries( a + 20.0, b, x, y, fract, prefix, regularized ); // eslint-disable-line max-len\n\t\t\t\t} else {\n\t\t\t\t\tfract = betaSmallBLargeASeries( a + 20.0, b, x, y, fract, prefix, regularized ); // eslint-disable-line max-len\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} else {\n\t\t// Both a,b >= 1:\n\t\tif ( a < b ) {\n\t\t\tlambda = a - ( (a + b) * x );\n\t\t} else {\n\t\t\tlambda = ( (a + b) * y ) - b;\n\t\t}\n\t\tif ( lambda < 0.0 ) {\n\t\t\ttmp = b;\n\t\t\tb = a;\n\t\t\ta = tmp;\n\n\t\t\ttmp = y;\n\t\t\ty = x;\n\t\t\tx = tmp;\n\t\t\tupper = !upper;\n\t\t}\n\t\tif ( b < 40.0 ) {\n\t\t\tif (\n\t\t\t\tfloor(a) === a &&\n\t\t\t\tfloor(b) === b &&\n\t\t\t\ta < MAX_INT32 - 100\n\t\t\t) {\n\t\t\t\t// Relate to the binomial distribution and use a finite sum:\n\t\t\t\tk = a - 1.0;\n\t\t\t\tn = b + k;\n\t\t\t\tfract = binomialCCDF( n, k, x, y );\n\t\t\t\tif ( !regularized ) {\n\t\t\t\t\tfract *= beta( a, b );\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if ( b * x <= 0.7 ) {\n\t\t\t\tif ( upper ) {\n\t\t\t\t\tfract = -( ( regularized ) ? 1.0 : beta( a, b ) );\n\t\t\t\t\tupper = false;\n\t\t\t\t\tfract = -ibetaSeries( a, b, x, fract, regularized, out, y );\n\t\t\t\t} else {\n\t\t\t\t\tfract = ibetaSeries( a, b, x, 0.0, regularized, out, y );\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if ( a > 15.0 ) {\n\t\t\t\t// Sidestep so we can use the series representation:\n\t\t\t\tn = floor( b );\n\t\t\t\tif ( n === b ) {\n\t\t\t\t\tn -= 1;\n\t\t\t\t}\n\t\t\t\tbbar = b - n;\n\t\t\t\tif ( regularized ) {\n\t\t\t\t\tprefix = 1;\n\t\t\t\t} else {\n\t\t\t\t\tprefix = risingFactorialRatio( a + bbar, bbar, n );\n\t\t\t\t}\n\t\t\t\tfract = ibetaAStep( bbar, a, y, x, n, regularized );\n\t\t\t\tfract = betaSmallBLargeASeries( a, bbar, x, y, fract, 1.0, regularized ); // eslint-disable-line max-len\n\t\t\t\tfract /= prefix;\n\t\t\t}\n\t\t\telse if ( regularized ) {\n\t\t\t\tn = floor( b );\n\t\t\t\tbbar = b - n;\n\t\t\t\tif ( bbar <= 0 ) {\n\t\t\t\t\tn -= 1;\n\t\t\t\t\tbbar += 1;\n\t\t\t\t}\n\t\t\t\tfract = ibetaAStep( bbar, a, y, x, n, regularized );\n\t\t\t\tfract += ibetaAStep( a, bbar, x, y, 20.0, regularized );\n\t\t\t\tif ( upper ) {\n\t\t\t\t\tfract -= 1;\n\t\t\t\t}\n\t\t\t\tfract = betaSmallBLargeASeries( a + 20.0, bbar, x, y, fract, 1, regularized ); // eslint-disable-line max-len\n\t\t\t\tif ( upper ) {\n\t\t\t\t\tfract = -fract;\n\t\t\t\t\tupper = false;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfract = ibetaFraction2( a, b, x, y, regularized, out );\n\t\t\t}\n\t\t} else {\n\t\t\tfract = ibetaFraction2( a, b, x, y, regularized, out );\n\t\t}\n\t}\n\tif ( out[ i1 ] < 0.0 ) {\n\t\tout[ i1 ] = ibetaPowerTerms( a, b, x, y, true );\n\t}\n\tdiv = y * x;\n\tif ( out[ i1 ] !== 0.0 ) {\n\t\tif ( ( MAX_FLOAT64 * div < out[ i1 ] ) ) {\n\t\t\t// Overflow, return an arbitrarily large value:\n\t\t\tout[ i1 ] = MAX_FLOAT64 / 2.0;\n\t\t} else {\n\t\t\tout[ i1 ] /= div;\n\t\t}\n\t}\n\tout[ i0 ] = ( upper ) ? ( ( regularized ) ? 1.0 : beta( a, b ) ) - fract : fract; // eslint-disable-line max-len\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default ibetaImp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_61_0/boost/math/special_functions/beta.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport binomcoef from '@stdlib/math-base-special-binomcoef';\nimport floor from '@stdlib/math-base-special-floor';\nimport pow from '@stdlib/math-base-special-pow';\nimport MIN_VALUE from '@stdlib/constants-float64-smallest-normal';\n\n\n// MAIN //\n\n/**\n* For integer arguments we can relate the incomplete beta to the complement of the binomial distribution cdf and use this finite sum.\n*\n* @private\n* @param {NonNegativeInteger} n - number of trials\n* @param {NonNegativeInteger} k - function input\n* @param {Probability} x - function input\n* @param {Probability} y - probability equal to `1-x`\n* @returns {number} sum\n*/\nfunction binomialCCDF( n, k, x, y ) {\n\tvar startTerm;\n\tvar result;\n\tvar start;\n\tvar term;\n\tvar i;\n\n\tresult = pow( x, n );\n\tif ( result > MIN_VALUE ) {\n\t\tterm = result;\n\t\tfor ( i = floor( n - 1 ); i > k; i-- ) {\n\t\t\tterm *= ((i + 1) * y) / ((n - i) * x);\n\t\t\tresult += term;\n\t\t}\n\t} else {\n\t\t// First term underflows so we need to start at the mode of the distribution and work outwards:\n\t\tstart = floor( n * x );\n\t\tif ( start <= k + 1 ) {\n\t\t\tstart = floor( k + 2 );\n\t\t}\n\t\tresult = pow( x, start ) * pow( y, n - start );\n\t\tresult *= binomcoef( floor(n), floor(start) );\n\t\tif ( result === 0.0 ) {\n\t\t\t// OK, starting slightly above the mode didn't work, we'll have to sum the terms the old fashioned way:\n\t\t\tfor ( i = start - 1; i > k; i-- ) {\n\t\t\t\tresult += pow( x, i ) * pow( y, n - i );\n\t\t\t\tresult *= binomcoef( floor(n), floor(i) );\n\t\t\t}\n\t\t} else {\n\t\t\tterm = result;\n\t\t\tstartTerm = result;\n\t\t\tfor ( i = start - 1; i > k; i-- ) {\n\t\t\t\tterm *= ((i + 1) * y) / ((n - i) * x);\n\t\t\t\tresult += term;\n\t\t\t}\n\t\t\tterm = startTerm;\n\t\t\tfor ( i = start + 1; i <= n; i++ ) {\n\t\t\t\tterm *= (n - i + 1) * x / (i * y);\n\t\t\t\tresult += term;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\n\n\n// EXPORTS //\n\nexport default binomialCCDF;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { assign as kernelBetainc } from '@stdlib/math-base-special-kernel-betainc';\n\n\n// MAIN //\n\n/**\n* Evaluates the incomplete beta function.\n*\n* @param {Probability} x - function parameter\n* @param {NonNegativeNumber} a - function parameter\n* @param {NonNegativeNumber} b - function parameter\n* @param {boolean} [regularized=true] - boolean indicating if the function should evaluate the regularized or non-regularized incomplete beta function\n* @param {boolean} [upper=false] - boolean indicating if the function should return the upper tail of the incomplete beta function\n* @returns {number} function value\n*\n* @example\n* var y = betainc( 0.5, 2.0, 2.0 );\n* // returns 0.5\n*\n* @example\n* var y = betainc( 0.5, 2.0, 2.0, false );\n* // returns ~0.083\n*\n* @example\n* var y = betainc( 0.2, 1.0, 2.0 );\n* // returns 0.36\n*/\nfunction betainc( x, a, b, regularized, upper ) {\n\tvar out = [ 0.0, 0.0 ];\n\tregularized = ( regularized === false ) ? false : true; // eslint-disable-line no-unneeded-ternary\n\tupper = ( upper === true ) ? true : false; // eslint-disable-line no-unneeded-ternary\n\tkernelBetainc( x, a, b, regularized, upper, out, 1, 0 );\n\treturn out[ 0 ];\n}\n\n\n// EXPORTS //\n\nexport default betainc;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport betainc from '@stdlib/math-base-special-betainc';\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Evaluates the cumulative distribution function (CDF) for a beta distribution with first shape parameter `alpha` and second shape parameter `beta` at a value `x`.\n*\n* @param {number} x - input value\n* @param {PositiveNumber} alpha - first shape parameter\n* @param {PositiveNumber} beta - second shape parameter\n* @returns {Probability} evaluated CDF\n*\n* @example\n* var y = cdf( 0.5, 1.0, 1.0 );\n* // returns 0.5\n*\n* @example\n* var y = cdf( 0.5, 2.0, 4.0 );\n* // returns ~0.813\n*\n* @example\n* var y = cdf( 0.2, 2.0, 2.0 );\n* // returns ~0.104\n*\n* @example\n* var y = cdf( 0.8, 4.0, 4.0 );\n* // returns ~0.967\n*\n* @example\n* var y = cdf( -0.5, 4.0, 2.0 );\n* // returns 0.0\n*\n* @example\n* var y = cdf( 1.5, 4.0, 2.0 );\n* // returns 1.0\n*\n* @example\n* var y = cdf( 2.0, -1.0, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2.0, 0.5, -1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( NaN, 1.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, 1.0, NaN );\n* // returns NaN\n*/\nfunction cdf( x, alpha, beta ) {\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( alpha ) ||\n\t\tisnan( beta ) ||\n\t\talpha <= 0.0 ||\n\t\tbeta <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x <= 0.0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( x >= 1.0 ) {\n\t\treturn 1.0;\n\t}\n\treturn betainc( x, alpha, beta );\n}\n\n\n// EXPORTS //\n\nexport default cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport betainc from '@stdlib/math-base-special-betainc';\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the cumulative distribution function (CDF) for a beta distribution with first shape parameter `alpha` and second shape parameter `beta`.\n*\n* @param {PositiveNumber} alpha - first shape parameter\n* @param {PositiveNumber} beta - second shape parameter\n* @returns {Function} CDF\n*\n* @example\n* var cdf = factory( 0.5, 0.5 );\n*\n* var y = cdf( 0.8 );\n* // returns ~0.705\n*\n* y = cdf( 0.3 );\n* // returns ~0.369\n*/\nfunction factory( alpha, beta ) {\n\tif (\n\t\tisnan( alpha ) ||\n\t\tisnan( beta ) ||\n\t\talpha <= 0.0 ||\n\t\tbeta <= 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn cdf;\n\n\t/**\n\t* Evaluates the cumulative distribution function (CDF) for a beta distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated CDF\n\t*\n\t* @example\n\t* var y = cdf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction cdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x <= 0.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\tif ( x >= 1.0 ) {\n\t\t\treturn 1.0;\n\t\t}\n\t\treturn betainc( x, alpha, beta );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isNumber } from '@stdlib/assert-is-number';\n\n\n// MAIN //\n\n/**\n* Tests if a value is a number primitive having a positive value.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a number primitive having a positive value\n*\n* @example\n* var bool = isPositiveNumber( 3.0 );\n* // returns true\n*\n* @example\n* var bool = isPositiveNumber( new Number( 3.0 ) );\n* // returns false\n*/\nfunction isPositiveNumber( value ) {\n\treturn (\n\t\tisNumber( value ) &&\n\t\tvalue > 0.0\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isPositiveNumber;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isObject as isNumber } from '@stdlib/assert-is-number';\n\n\n// MAIN //\n\n/**\n* Tests if a value is a number object having a positive value.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a number object having a positive value\n*\n* @example\n* var bool = isPositiveNumber( 3.0 );\n* // returns false\n*\n* @example\n* var bool = isPositiveNumber( new Number( 3.0 ) );\n* // returns true\n*/\nfunction isPositiveNumber( value ) {\n\treturn (\n\t\tisNumber( value ) &&\n\t\tvalue.valueOf() > 0.0\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isPositiveNumber;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPrimitive from './primitive.js';\nimport isObject from './object.js';\n\n\n// MAIN //\n\n/**\n* Tests if a value is a positive number.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is a positive number\n*\n* @example\n* var bool = isPositiveNumber( 5.0 );\n* // returns true\n*\n* @example\n* var bool = isPositiveNumber( new Number( 5.0 ) );\n* // returns true\n*\n* @example\n* var bool = isPositiveNumber( 3.14 );\n* // returns true\n*\n* @example\n* var bool = isPositiveNumber( -5.0 );\n* // returns false\n*\n* @example\n* var bool = isPositiveNumber( null );\n* // returns false\n*/\nfunction isPositiveNumber( value ) {\n\treturn ( isPrimitive( value ) || isObject( value ) );\n}\n\n\n// EXPORTS //\n\nexport default isPositiveNumber;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate the incomplete beta function and its first derivative.\n*\n* @module @stdlib/math-base-special-kernel-betainc\n*\n* @example\n* import kernelBetainc from '@stdlib/math-base-special-kernel-betainc';\n*\n* var out = kernelBetainc( 0.5, 2.0, 2.0, false, false );\n* // returns [ ~0.083, ~1.5 ]\n*\n* out = kernelBetainc( 0.2, 1.0, 2.0, true, false );\n* // returns [ 0.36, 1.6 ]\n*\n* @example\n* import kernelBetainc from '@stdlib/math-base-special-kernel-betainc';\n*\n* var arr = [ 0.0, 0.0 ];\n* var out = kernelBetainc.assign( 0.2, 1.0, 2.0, true, true, arr, 1, 0 );\n* // returns [ 0.64, 1.6 ]\n*\n* var bool = ( arr === out );\n* // returns true\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport assign from './assign.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport compute from './assign.js';\n\n\n// MAIN //\n\n/**\n* Evaluates the incomplete beta function and its first derivative.\n*\n* @param {Probability} x - function input\n* @param {NonNegativeNumber} a - function parameter\n* @param {NonNegativeNumber} b - function parameter\n* @param {boolean} regularized - boolean indicating if the function should evaluate the regularized boolean beta function\n* @param {boolean} upper - boolean indicating if the function should return the upper tail of the incomplete beta function instead\n* @returns {Array} function value and first derivative\n*\n* @example\n* var out = kernelBetainc( 0.5, 2.0, 2.0, false, false );\n* // returns [ ~0.083, ~1.5 ]\n*\n* @example\n* var out = kernelBetainc( 0.2, 1.0, 2.0, true, false );\n* // returns [ 0.36, 1.6 ]\n*/\nfunction kernelBetainc( x, a, b, regularized, upper ) {\n\treturn compute( x, a, b, regularized, upper, [ 0.0, 0.0 ], 1, 0 );\n}\n\n\n// EXPORTS //\n\nexport default kernelBetainc;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate the cumulative distribution function (CDF) for a beta distribution.\n*\n* @module @stdlib/stats-base-dists-beta-cdf\n*\n* @example\n* import cdf from '@stdlib/stats-base-dists-beta-cdf';\n*\n* var y = cdf( 0.5, 1.0, 1.0 );\n* // returns 0.5\n*\n* y = cdf( 0.5, 2.0, 4.0 );\n* // returns ~0.813\n*\n* @example\n* import { factory as factory } from '@stdlib/stats-base-dists-beta-cdf';\n*\n* var cdf = factory( 0.5, 0.5 );\n*\n* var y = cdf( 0.8 );\n* // returns ~0.705\n*\n* y = cdf( 0.3 );\n* // returns ~0.369\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport cdf from './cdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( cdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if a value is a positive number.\n*\n* @module @stdlib/assert-is-positive-number\n*\n* @example\n* import isPositiveNumber from '@stdlib/assert-is-positive-number';\n*\n* var bool = isPositiveNumber( 5.0 );\n* // returns true\n*\n* bool = isPositiveNumber( new Number( 5.0 ) );\n* // returns true\n*\n* bool = isPositiveNumber( 3.14 );\n* // returns true\n*\n* bool = isPositiveNumber( -5.0 );\n* // returns false\n*\n* bool = isPositiveNumber( null );\n* // returns false\n*\n* @example\n* import { isPrimitive as isPositiveNumber } from '@stdlib/assert-is-positive-number';\n*\n* var bool = isPositiveNumber( 3.0 );\n* // returns true\n*\n* bool = isPositiveNumber( new Number( 3.0 ) );\n* // returns false\n*\n* @example\n* import { isObject as isPositiveNumber } from '@stdlib/assert-is-positive-number';\n*\n* var bool = isPositiveNumber( 3.0 );\n* // returns false\n*\n* bool = isPositiveNumber( new Number( 3.0 ) );\n* // returns true\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport isPositiveNumber from './main.js';\nimport isPrimitive from './primitive.js';\nimport isObject from './object.js';\n\n\n// MAIN //\n\nsetReadOnly( isPositiveNumber, 'isPrimitive', isPrimitive );\nsetReadOnly( isPositiveNumber, 'isObject', isObject );\n\n\n// EXPORTS //\n\nexport default isPositiveNumber;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_tan.c}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport getHighWord from '@stdlib/number-float64-base-get-high-word';\nimport setLowWord from '@stdlib/number-float64-base-set-low-word';\nimport polyvalOdd from './polyval_t_odd.js';\nimport polyvalEven from './polyval_t_even.js';\n\n\n// VARIABLES //\n\nvar PIO4 = 7.85398163397448278999e-01;\nvar PIO4LO = 3.06161699786838301793e-17;\nvar T0 = 3.33333333333334091986e-01; // 3FD55555, 55555563\n\n// Absolute value mask: 2147483647 => 0x7fffffff => 01111111111111111111111111111111\nvar HIGH_WORD_ABS_MASK = 0x7fffffff|0; // asm type annotation\n\n\n// MAIN //\n\n/**\n* Computes the tangent on \\\\( \\approx\\[-\\pi/4, \\pi/4] \\\\) (except on -0), \\\\( \\pi/4 \\approx 0.7854 \\\\).\n*\n* ## Method\n*\n* -   Since \\\\( \\tan(-x) = -\\tan(x) \\\\), we need only to consider positive \\\\( x \\\\).\n*\n* -   Callers must return \\\\( \\tan(-0) = -0 \\\\) without calling here since our odd polynomial is not evaluated in a way that preserves \\\\( -0 \\\\). Callers may do the optimization \\\\( \\tan(x) \\approx x \\\\) for tiny \\\\( x \\\\).\n*\n* -   \\\\( \\tan(x) \\\\) is approximated by a odd polynomial of degree 27 on \\\\( \\[0, 0.67434] \\\\)\n*\n*     ```tex\n*     \\tan(x) \\approx x + T_1 x^3 + \\ldots + T_{13} x^{27}\n*     ```\n*     where\n*\n*     ```tex\n*     \\left| \\frac{\\tan(x)}{x} - \\left( 1 + T_1 x^2 + T_2 x^4 + \\ldots + T_{13} x^{26} \\right) \\right|  \\le 2^{-59.2}\n*     ```\n*\n* -   Note: \\\\( \\tan(x+y) = \\tan(x) + \\tan'(x) \\cdot y \\approx \\tan(x) + ( 1 + x \\cdot x ) \\cdot y \\\\). Therefore, for better accuracy in computing \\\\( \\tan(x+y) \\\\), let\n*\n*     ```tex\n*     r = x^3 \\cdot \\left( T_2+x^2 \\cdot (T_3+x^2 \\cdot (\\ldots+x^2 \\cdot (T_{12}+x^2 \\cdot T_{13}))) \\right)\n*     ```\n*\n*     then\n*\n*     ```tex\n*     \\tan(x+y) = x^3 + \\left( T_1 \\cdot x^2 + (x \\cdot (r+y)+y) \\right)\n*     ```\n*\n* -   For \\\\( x \\\\) in \\\\( \\[0.67434, \\pi/4] \\\\),  let \\\\( y = \\pi/4 - x \\\\), then\n*\n*     ```tex\n*     \\tan(x) = \\tan\\left(\\tfrac{\\pi}{4}-y\\right) = \\frac{1-\\tan(y)}{1+\\tan(y)} \\\\\n*     = 1 - 2 \\cdot \\left( \\tan(y) - \\tfrac{\\tan(y)^2}{1+\\tan(y)} \\right)\n*     ```\n*\n*\n* @param {number} x - input value (in radians, assumed to be bounded by ~π/4 in magnitude)\n* @param {number} y - tail of `x`\n* @param {integer} k - indicates whether tan (if k = 1) or -1/tan (if k = -1) is returned\n* @returns {number} tangent\n*\n* @example\n* var out = kernelTan( 3.141592653589793/4.0, 0.0, 1 );\n* // returns ~1.0\n*\n* @example\n* var out = kernelTan( 3.141592653589793/4.0, 0.0, -1 );\n* // returns ~-1.0\n*\n* @example\n* var out = kernelTan( 3.141592653589793/6.0, 0.0, 1 );\n* // returns ~0.577\n*\n* @example\n* var out = kernelTan( 0.664, 5.288e-17, 1 );\n* // returns ~0.783\n*\n* @example\n* var out = kernelTan( NaN, 0.0, 1 );\n* // returns NaN\n*\n* @example\n* var out = kernelTan( 3.0, NaN, 1 );\n* // returns NaN\n*\n* @example\n* var out = kernelTan( NaN, NaN, 1 );\n* // returns NaN\n*/\nfunction kernelTan( x, y, k ) {\n\tvar hx;\n\tvar ix;\n\tvar a;\n\tvar r;\n\tvar s;\n\tvar t;\n\tvar v;\n\tvar w;\n\tvar z;\n\n\thx = getHighWord( x );\n\n\t// High word of |x|:\n\tix = (hx & HIGH_WORD_ABS_MASK)|0; // asm type annotation\n\n\t// Case: |x| >= 0.6744\n\tif ( ix >= 0x3FE59428 ) {\n\t\tif ( x < 0 ) {\n\t\t\tx = -x;\n\t\t\ty = -y;\n\t\t}\n\t\tz = PIO4 - x;\n\t\tw = PIO4LO - y;\n\t\tx = z + w;\n\t\ty = 0.0;\n\t}\n\tz = x * x;\n\tw = z * z;\n\n\t// Break x^5*(T[1]+x^2*T[2]+...) into x^5(T[1]+x^4*T[3]+...+x^20*T[11]) + x^5(x^2*(T[2]+x^4*T[4]+...+x^22*T[12]))...\n\tr = polyvalOdd( w );\n\tv = z * polyvalEven( w );\n\ts = z * x;\n\tr = y + (z * ((s * (r + v)) + y));\n\tr += T0 * s;\n\tw = x + r;\n\tif ( ix >= 0x3FE59428 ) {\n\t\tv = k;\n\t\treturn ( 1.0 - ( (hx >> 30) & 2 ) ) * ( v - (2.0 * (x - ((w * w / (w + v)) - r)) )); // eslint-disable-line max-len\n\t}\n\tif ( k === 1 ) {\n\t\treturn w;\n\t}\n\t// Compute -1/(x+r) accurately...\n\tz = w;\n\tsetLowWord( z, 0 );\n\tv = r - (z - x); // z + v = r + x\n\ta = -1.0 / w; // a = -1/w\n\tt = a;\n\tsetLowWord( t, 0 );\n\ts = 1.0 + (t * z);\n\treturn t + (a * (s + (t * v)));\n}\n\n\n// EXPORTS //\n\nexport default kernelTan;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.13333333333320124;\n\t}\n\treturn 0.13333333333320124 + (x * (0.021869488294859542 + (x * (0.0035920791075913124 + (x * (0.0005880412408202641 + (x * (0.00007817944429395571 + (x * -0.000018558637485527546))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.05396825397622605;\n\t}\n\treturn 0.05396825397622605 + (x * (0.0088632398235993 + (x * (0.0014562094543252903 + (x * (0.0002464631348184699 + (x * (0.00007140724913826082 + (x * 0.00002590730518636337))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_tan.c}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport getHighWord from '@stdlib/number-float64-base-get-high-word';\nimport kernelTan from '@stdlib/math-base-special-kernel-tan';\nimport rempio2 from '@stdlib/math-base-special-rempio2';\n\n\n// VARIABLES //\n\n// Scratch buffer:\nvar buffer = [ 0.0, 0.0 ]; // WARNING: not thread safe\n\n// High word absolute value mask: 0x7fffffff => 01111111111111111111111111111111\nvar HIGH_WORD_ABS_MASK = 0x7fffffff|0; // asm type annotation\n\n// High word for pi/4: 0x3fe921fb => 00111111111010010010000111111011\nvar HIGH_WORD_PIO4 = 0x3fe921fb|0; // asm type annotation\n\n// High word exponent mask: 0x7ff00000 => 01111111111100000000000000000000\nvar HIGH_WORD_EXPONENT_MASK = 0x7ff00000|0; // asm type annotation\n\n// High word for a small value: 2^-27 = 7.450580596923828e-9 => high word => 0x3e400000 => 00111110010000000000000000000000\nvar HIGH_WORD_TWO_NEG_27 = 0x3e400000|0; // asm type annotation\n\n\n// MAIN //\n\n/**\n* Evaluates the tangent of a number.\n*\n* ## Method\n*\n* -   Let \\\\(S\\\\), \\\\(C\\\\), and \\\\(T\\\\) denote the \\\\(\\sin\\\\), \\\\(\\cos\\\\), and \\\\(\\tan\\\\), respectively, on \\\\(\\[-\\pi/4, +\\pi/4\\]\\\\).\n*\n* -   Reduce the argument \\\\(x\\\\) to \\\\(y1+y2 = x-k\\pi/2\\\\) in \\\\(\\[-\\pi/4, +\\pi/4\\]\\\\), and let \\\\(n = k \\mod 4\\\\).\n*\n* -   We have\n*\n*     | n | sin(x) | cos(x) | tan(x) |\n*     | - | ------ | ------ | ------ |\n*     | 0 |    S   |    C   |   T    |\n*     | 1 |    C   |   -S   |  -1/T  |\n*     | 2 |   -S   |   -C   |   T    |\n*     | 3 |   -C   |    S   |  -1/T  |\n*\n*\n* @param {number} x - input value (in radians)\n* @returns {number} tangent\n*\n* @example\n* var v = tan( 0.0 );\n* // returns ~0.0\n*\n* @example\n* var v = tan( -3.141592653589793/4.0 );\n* // returns ~-1.0\n*\n* @example\n* var v = tan( 3.141592653589793/4.0 );\n* // returns ~1.0\n*\n* @example\n* var v = tan( NaN );\n* // returns NaN\n*/\nfunction tan( x ) {\n\tvar ix;\n\tvar n;\n\n\tix = getHighWord( x );\n\tix &= HIGH_WORD_ABS_MASK;\n\n\t// Case: |x| ~< π/4\n\tif ( ix <= HIGH_WORD_PIO4 ) {\n\t\t// Case: |x| < 2**-27\n\t\tif ( ix < HIGH_WORD_TWO_NEG_27 ) {\n\t\t\treturn x;\n\t\t}\n\t\treturn kernelTan( x, 0.0, 1 );\n\t}\n\t// Case: tan(Inf or NaN) is NaN\n\tif ( ix >= HIGH_WORD_EXPONENT_MASK ) {\n\t\treturn NaN;\n\t}\n\t// Argument reduction needed...\n\tn = rempio2( x, buffer );\n\treturn kernelTan( buffer[ 0 ], buffer[ 1 ], 1-((n&1)<<1) );\n}\n\n\n// EXPORTS //\n\nexport default tan;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_53_0/libs/math/doc/sf_and_dist/html/math_toolkit/special/sf_gamma/digamma.html}. The implementation follows the original but has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport floor from '@stdlib/math-base-special-floor';\nimport tan from '@stdlib/math-base-special-tan';\nimport PI from '@stdlib/constants-float64-pi';\nimport asymptoticApprox from './asymptotic_expansion.js';\nimport rationalApprox from './rational_approximation.js';\n\n\n// VARIABLES //\n\nvar MIN_SAFE_ASYMPTOTIC = 10.0; // BIG!\n\n\n// MAIN //\n\n/**\n* Evaluates the digamma function.\n*\n* ## Method\n*\n* 1.  For \\\\(x < 0\\\\), we use the reflection formula\n*\n*     ```tex\n*     \\psi(1-x) = \\psi(x) + \\frac{\\pi}{\\tan(\\pi x)}\n*     ```\n*\n*     to make \\\\(x\\\\) positive.\n*\n* 2.  For \\\\(x \\in \\[0,1]\\\\), we use the recurrence relation\n*\n*     ```tex\n*     \\psi(x) = \\psi(x+1) - \\frac{1}{x}\n*     ```\n*\n*     to shift the evaluation range to \\\\(\\[1,2]\\\\).\n*\n* 3.  For \\\\(x \\in \\[1,2]\\\\), we use a rational approximation of the form\n*\n*     ```tex\n*     \\psi(x) = (x - \\mathrm{root})(Y + \\operatorname{R}(x-1))\n*     ```\n*\n*     where \\\\(\\mathrm{root}\\\\) is the location of the positive root of \\\\(\\psi\\\\), \\\\(Y\\\\) is a constant, and \\\\(R\\\\) is optimized for low absolute error compared to \\\\(Y\\\\).\n*\n*     <!-- <note>-->\n*\n*     Note that, since \\\\(\\mathrm{root}\\\\) is irrational, we need twice as many digits in \\\\(\\mathrm{root}\\\\) as in \\\\(x\\\\) in order to avoid cancellation error during subtraction, assuming \\\\(x\\\\) has an exact value. This means that, even if \\\\(x\\\\) is rounded to the next representable value, the result of \\\\(\\psi(x)\\\\) will not be zero.\n*\n*     <!-- </note> -->\n*\n*     <!-- <note> -->\n*\n*     This approach gives 17-digit precision.\n*\n*     <!-- </note> -->\n*\n* 4.  For \\\\(x \\in \\[2,\\mathrm{BIG}]\\\\), we use the recurrence relation\n*\n*     ```tex\n*     \\psi(x+1) = \\psi(x) + \\frac{1}{x}\n*     ```\n*\n*     to shift the evaluation range to \\\\(\\[1,2]\\\\).\n*\n* 5.  For \\\\(x > \\mathrm{BIG}\\\\), we use the asymptotic expression\n*\n*     ```tex\n*     \\psi(x) = \\ln(x) + \\frac{1}{2x} - \\biggl( \\frac{B_{21}}{2x^2} + \\frac{B_{22}}{4x^4} + \\frac{B_{23}}{6x^6} + \\ldots \\biggr)\n*     ```\n*\n*     This expansion, however, is divergent after a few terms. The number of terms depends on \\\\(x\\\\). Accordingly, we must choose a value of \\\\(\\mathrm{BIG}\\\\) which allows us to truncate the series at a term that is too small to have an effect on the result. Setting \\\\(\\mathrm{BIG} = 10\\\\), allows us to truncate the series early and evaluate as \\\\(1/x^2\\\\).\n*\n*     <!-- <note> -->\n*\n*     This approach gives 17-digit precision for \\\\(x \\geq 10\\\\).\n*\n*     <!-- </note> -->\n*\n* ## Notes\n*\n* -   Maximum deviation found: \\\\(1.466\\\\mbox{e-}18\\\\)\n* -   Max error found: \\\\(2.452\\mbox{e-}17\\\\) (double precision)\n*\n*\n* @param {number} x - input value\n* @returns {number} function value\n*\n* @example\n* var v = digamma( -2.5 );\n* // returns ~1.103\n*\n* @example\n* var v = digamma( 1.0 );\n* // returns ~-0.577\n*\n* @example\n* var v = digamma( 10.0 );\n* // returns ~2.252\n*\n* @example\n* var v = digamma( NaN );\n* // returns NaN\n*\n* @example\n* var v = digamma( -1.0 );\n* // returns NaN\n*/\nfunction digamma( x ) {\n\tvar rem;\n\tvar tmp;\n\tif ( isnan( x ) || x === 0.0 ) {\n\t\treturn NaN;\n\t}\n\t// If `x` is negative, use reflection...\n\tif ( x <= -1.0 ) {\n\t\t// Reflect:\n\t\tx = 1.0 - x;\n\n\t\t// Argument reduction for tan:\n\t\trem = x - floor(x);\n\n\t\t// Shift to negative if > 0.5:\n\t\tif ( rem > 0.5 ) {\n\t\t\trem -= 1.0;\n\t\t}\n\t\t// Check for evaluation at a negative pole:\n\t\tif ( rem === 0.0 ) {\n\t\t\treturn NaN;\n\t\t}\n\t\ttmp = PI / tan( PI * rem );\n\t} else {\n\t\ttmp = 0.0;\n\t}\n\t// If we're above the lower-limit for the asymptotic expansion, then use it...\n\tif ( x >= MIN_SAFE_ASYMPTOTIC ) {\n\t\ttmp += asymptoticApprox( x );\n\t\treturn tmp;\n\t}\n\t// If x > 2, reduce to the interval [1,2]...\n\twhile ( x > 2.0 ) {\n\t\tx -= 1.0;\n\t\ttmp += 1.0/x;\n\t}\n\t// If x < 1, use recurrence to shift to > 1..\n\twhile ( x < 1.0 ) {\n\t\ttmp -= 1.0/x;\n\t\tx += 1.0;\n\t}\n\ttmp += rationalApprox( x );\n\treturn tmp;\n}\n\n\n// EXPORTS //\n\nexport default digamma;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_53_0/libs/math/doc/sf_and_dist/html/math_toolkit/special/sf_gamma/digamma.html}. The implementation follows the original but has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport ln from '@stdlib/math-base-special-ln';\nimport polyval from './polyval_p.js';\n\n\n// MAIN //\n\n/**\n* Evaluates the digamma function via asymptotic expansion.\n*\n* @private\n* @param {number} x - input value\n* @returns {number} function value\n*/\nfunction digamma( x ) {\n\tvar y;\n\tvar z;\n\tx -= 1.0;\n\ty = ln(x) + ( 1.0 / (2.0*x) );\n\tz = 1.0 / (x*x);\n\treturn y - ( z*polyval( z ) );\n}\n\n\n// EXPORTS //\n\nexport default digamma;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.08333333333333333;\n\t}\n\treturn 0.08333333333333333 + (x * (-0.008333333333333333 + (x * (0.003968253968253968 + (x * (-0.004166666666666667 + (x * (0.007575757575757576 + (x * (-0.021092796092796094 + (x * (0.08333333333333333 + (x * -0.4432598039215686))))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport rateval from './rational_pq.js';\n\n\n// VARIABLES //\n\nvar root1 = 1569415565.0 / 1073741824.0;\nvar root2 = ( 381566830.0 / 1073741824.0 ) / 1073741824.0;\nvar root3 = 0.9016312093258695918615325266959189453125e-19;\nvar Y = 0.99558162689208984;\n\n\n// MAIN //\n\n/**\n* Evaluates the digamma function over interval `[1,2]`.\n*\n* @private\n* @param {number} x - input value\n* @returns {number} function value\n*/\nfunction digamma( x ) {\n\tvar g;\n\tvar r;\n\tg = x - root1;\n\tg -= root2;\n\tg -= root3;\n\tr = rateval( x-1.0 );\n\treturn (g*Y) + (g*r);\n}\n\n\n// EXPORTS //\n\nexport default digamma;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn 0.25479851061131553;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = 0.25479851061131553 + (x * (-0.3255503118680449 + (x * (-0.6503185377089651 + (x * (-0.28919126444774784 + (x * (-0.04525132144873906 + (x * (-0.002071332116774595 + (x * 0.0))))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (2.076711702373047 + (x * (1.4606242909763516 + (x * (0.43593529692665967 + (x * (0.054151797245674226 + (x * (0.0021284987017821146 + (x * -5.578984132167551e-7))))))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = 0.0 + (x * (-0.002071332116774595 + (x * (-0.04525132144873906 + (x * (-0.28919126444774784 + (x * (-0.6503185377089651 + (x * (-0.3255503118680449 + (x * 0.25479851061131553))))))))))); // eslint-disable-line max-len\n\t\ts2 = -5.578984132167551e-7 + (x * (0.0021284987017821146 + (x * (0.054151797245674226 + (x * (0.43593529692665967 + (x * (1.4606242909763516 + (x * (2.076711702373047 + (x * 1.0))))))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Natural logarithm of the square root of `2π`.\n*\n* @module @stdlib/constants-float64-ln-sqrt-two-pi\n* @type {number}\n*\n* @example\n* import LN_SQRT_TWO_PI from '@stdlib/constants-float64-ln-sqrt-two-pi';\n* // returns 0.9189385332046728\n*/\n\n\n// MAIN //\n\n/**\n* Natural logarithm of the square root of `2π`.\n*\n* ```tex\n* \\ln \\sqrt{2\\pi}\n* ```\n*\n* @constant\n* @type {number}\n* @default 0.9189385332046728\n*/\nvar LN_SQRT_TWO_PI = 9.18938533204672741780329736405617639861397473637783412817151540482765695927260397694743298635954197622005646625e-01; // eslint-disable-line max-len\n\n\n// EXPORTS //\n\nexport default LN_SQRT_TWO_PI;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The code is adapted from the Fortran routine from the FNLIB library of the [SLATEC Common Mathematical Library]{@link http://www.netlib.no/netlib/slatec/fnlib/}.\n*\n* The original code was developed by W. Fullerton of Los Alamos Scientific Laboratory, a governmental institution, and is therefore public domain.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar ALGMCS = [\n\t+0.1276642195630062933333333333333e-30,\n\t-0.3401102254316748799999999999999e-29,\n\t+0.1025680058010470912000000000000e-27,\n\t-0.3547598158101070547199999999999e-26,\n\t+0.1429227355942498147573333333333e-24,\n\t-0.6831888753985766870111999999999e-23,\n\t+0.3962837061046434803679306666666e-21,\n\t-0.2868042435334643284144622399999e-19,\n\t+0.2683181998482698748957538846666e-17,\n\t-0.3399615005417721944303330599666e-15,\n\t+0.6221098041892605227126015543416e-13,\n\t-0.1809129475572494194263306266719e-10,\n\t+0.9810825646924729426157171547487e-8,\n\t-0.1384948176067563840732986059135e-4,\n\t+0.1666389480451863247205729650822e+0\n];\nvar LEN = ALGMCS.length;\n\n\n// MAIN //\n\n/**\n* Evaluate the n-term Chebyshev series at `x`.\n*\n* ## References\n*\n* -   Broucke, Roger. 1973. \"Algorithm: Ten Subroutines for the Manipulation of Chebyshev Series.\" _Communications of the ACM_ 16 (4). New York, NY, USA: ACM: 254–56. doi:[10.1145/362003.362037](https://doi.org/10.1145/362003.362037).\n* -   Fox, Leslie, and Ian Bax Parker. 1968. _Chebyshev polynomials in numerical analysis_. Oxford Mathematical Handbooks. London, United Kingdom: Oxford University Press. <https://books.google.com/books?id=F8NzsEtJCD0C>.\n*\n* @private\n* @param {number} x - value at which the series is to be evaluated\n* @returns {number} series value\n*/\nfunction dcseval( x ) {\n\tvar twox;\n\tvar b2;\n\tvar b1;\n\tvar b0;\n\tvar i;\n\n\tif ( x < -1.1 || x > 1.1 ) {\n\t\treturn NaN;\n\t}\n\tb1 = 0.0;\n\tb0 = 0.0;\n\ttwox = 2.0 * x;\n\tfor ( i = 0; i < LEN; i++ ) {\n\t\tb2 = b1;\n\t\tb1 = b0;\n\t\tb0 = (twox*b1) - b2 + ALGMCS[ i ];\n\t}\n\treturn ( b0-b2 ) * 0.5;\n}\n\n\n// EXPORTS //\n\nexport default dcseval;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The code is adapted from the Fortran routine from the FNLIB library of the [SLATEC Common Mathematical Library]{@link http://www.netlib.no/netlib/fn/d9lgmc.f}.\n*\n* The original code was developed by W. Fullerton of Los Alamos Scientific Laboratory, a governmental institution, and is therefore public domain.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport pow from '@stdlib/math-base-special-pow';\nimport dceval from './dceval.js';\n\n\n// VARIABLES //\n\nvar XBIG = 94906265.62425156;\nvar XMAX = 3.745194030963158e306;\n\n\n// MAIN //\n\n/**\n* Compute the log gamma correction factor for `x >= 10`.\n*\n* ```tex\n* \\log(\\gamma(x)) = \\log(\\sqrt{2*\\Pi}) + (x-0.5) \\cdot \\log(x) - x \\operatorname{R9LGMC}(x).\n* ```\n*\n* @private\n* @param {number} x - input value\n* @returns {number} correction value\n*/\nfunction gammaCorrection( x ) {\n\tif ( x < 10.0 ) {\n\t\treturn NaN;\n\t}\n\t// Check for underflow...\n\tif ( x >= XMAX ) {\n\t\treturn 0.0;\n\t}\n\tif ( x < XBIG ) {\n\t\treturn dceval( (2.0*pow( 10.0/x, 2.0 )) - 1.0 ) / x;\n\t}\n\treturn 1.0 / (x * 12.0);\n}\n\n\n// EXPORTS //\n\nexport default gammaCorrection;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The code is adapted from the Fortran routine from the FNLIB library of the [SLATEC Common Mathematical Library]{@link http://www.netlib.no/netlib/slatec/fnlib/albeta.f}.\n*\n* The original code was developed by W. Fullerton of Los Alamos Scientific Laboratory, a governmental institution, and is therefore public domain.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport gammaln from '@stdlib/math-base-special-gammaln';\nimport log1p from '@stdlib/math-base-special-log1p';\nimport gamma from '@stdlib/math-base-special-gamma';\nimport max from '@stdlib/math-base-special-max';\nimport min from '@stdlib/math-base-special-min';\nimport ln from '@stdlib/math-base-special-ln';\nimport LN_SQRT_TWO_PI from '@stdlib/constants-float64-ln-sqrt-two-pi';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport correction from './gamma_correction.js';\n\n\n// MAIN //\n\n/**\n* Evaluate the natural logarithm of the beta function.\n*\n* @param {NonNegativeNumber} a - first input value\n* @param {NonNegativeNumber} b - second input value\n* @returns {number} natural logarithm of beta function\n*\n* @example\n* var v = betaln( 0.0, 0.0 );\n* // returns Infinity\n*\n* @example\n* var v = betaln( 1.0, 1.0 );\n* // returns 0.0\n*\n* @example\n* var v = betaln( -1.0, 2.0 );\n* // returns NaN\n*\n* @example\n* var v = betaln( 5.0, 0.2 );\n* // returns ~1.218\n*\n* @example\n* var v = betaln( 4.0, 1.0 );\n* // returns ~-1.386\n*\n* @example\n* var v = betaln( NaN, 2.0 );\n* // returns NaN\n*/\nfunction betaln( a, b ) {\n\tvar corr;\n\tvar p;\n\tvar q;\n\n\tp = min( a, b );\n\tq = max( a, b );\n\n\tif ( p < 0.0 ) {\n\t\treturn NaN;\n\t}\n\tif ( p === 0.0 ) {\n\t\treturn PINF;\n\t}\n\tif ( q === PINF ) {\n\t\treturn NINF;\n\t}\n\t// Case: p and q are big\n\tif ( p >= 10.0 ) {\n\t\tcorr = correction( p ) + correction( q ) - correction( p+q );\n\t\treturn ( -0.5*ln( q ) ) + LN_SQRT_TWO_PI + corr + ( (p-0.5) * ln( p/(p+q) ) ) + ( q*log1p( -p/(p+q) ) ); // eslint-disable-line max-len\n\t}\n\t// Case: p is small, but q is big\n\tif ( q >= 10.0 ) {\n\t\tcorr = correction( q ) - correction( p+q );\n\t\treturn gammaln( p ) + corr + p - (p*ln( p+q )) + ( (q-0.5)*log1p( -p/(p+q) ) ); // eslint-disable-line max-len\n\t}\n\t// Case: p and q are small\n\treturn ln( gamma( p ) * ( gamma( q ) / gamma( p+q ) ) );\n}\n\n\n// EXPORTS //\n\nexport default betaln;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport digamma from '@stdlib/math-base-special-digamma';\nimport betaln from '@stdlib/math-base-special-betaln';\n\n\n// MAIN //\n\n/**\n* Returns the differential entropy of a beta distribution.\n*\n* @param {PositiveNumber} alpha - first shape parameter\n* @param {PositiveNumber} beta - second shape parameter\n* @returns {NonPositiveNumber} differential entropy\n*\n* @example\n* var v = entropy( 1.0, 1.0 );\n* // returns 0.0\n*\n* @example\n* var v = entropy( 4.0, 12.0 );\n* // returns ~-0.869\n*\n* @example\n* var v = entropy( 8.0, 2.0 );\n* // returns ~-0.795\n*\n* @example\n* var v = entropy( 1.0, -0.1 );\n* // returns NaN\n*\n* @example\n* var v = entropy( -0.1, 1.0 );\n* // returns NaN\n*\n* @example\n* var v = entropy( 2.0, NaN );\n* // returns NaN\n*\n* @example\n* var v = entropy( NaN, 2.0 );\n* // returns NaN\n*/\nfunction entropy( alpha, beta ) {\n\tvar out;\n\tif ( alpha <= 0.0 || beta <= 0.0 ) {\n\t\treturn NaN;\n\t}\n\tout = betaln( alpha, beta );\n\tout -= ( alpha-1.0 ) * digamma( alpha );\n\tout -= ( beta-1.0 ) * digamma( beta );\n\tout += ( alpha+beta-2.0 ) * digamma( alpha+beta );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default entropy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns the excess kurtosis of a beta distribution.\n*\n* @param {PositiveNumber} alpha - first shape parameter\n* @param {PositiveNumber} beta - second shape parameter\n* @returns {number} excess kurtosis\n*\n* @example\n* var v = kurtosis( 1.0, 1.0 );\n* // returns -1.2\n*\n* @example\n* var v = kurtosis( 4.0, 12.0 );\n* // returns ~0.082\n*\n* @example\n* var v = kurtosis( 8.0, 2.0 );\n* // returns ~0.49\n*\n* @example\n* var v = kurtosis( 1.0, -0.1 );\n* // returns NaN\n*\n* @example\n* var v = kurtosis( -0.1, 1.0 );\n* // returns NaN\n*\n* @example\n* var v = kurtosis( 2.0, NaN );\n* // returns NaN\n*\n* @example\n* var v = kurtosis( NaN, 2.0 );\n* // returns NaN\n*/\nfunction kurtosis( alpha, beta ) {\n\tvar axb;\n\tvar amb;\n\tvar apb;\n\tvar out;\n\n\tif ( alpha <= 0.0 || beta <= 0.0 ) {\n\t\treturn NaN;\n\t}\n\taxb = alpha * beta;\n\tamb = alpha - beta;\n\tapb = alpha + beta;\n\tout = amb * amb * ( apb+1.0 );\n\tout -= axb * ( apb+2.0 );\n\tout *= 6.0;\n\tout /= axb * ( apb+2.0 ) * ( apb+3.0 );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default kurtosis;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns the expected value of a beta distribution.\n*\n* @param {PositiveNumber} alpha - first shape parameter\n* @param {PositiveNumber} beta - second shape parameter\n* @returns {PositiveNumber} expected value\n*\n* @example\n* var v = mean( 1.0, 1.0 );\n* // returns 0.5\n*\n* @example\n* var v = mean( 4.0, 12.0 );\n* // returns 0.25\n*\n* @example\n* var v = mean( 8.0, 2.0 );\n* // returns 0.8\n*\n* @example\n* var v = mean( 1.0, -0.1 );\n* // returns NaN\n*\n* @example\n* var v = mean( -0.1, 1.0 );\n* // returns NaN\n*\n* @example\n* var v = mean( 2.0, NaN );\n* // returns NaN\n*\n* @example\n* var v = mean( NaN, 2.0 );\n* // returns NaN\n*/\nfunction mean( alpha, beta ) {\n\tif ( alpha <= 0.0 || beta <= 0.0 ) {\n\t\treturn NaN;\n\t}\n\treturn alpha / ( alpha + beta );\n}\n\n\n// EXPORTS //\n\nexport default mean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_48_0/boost/math/special_functions/detail/erf_inv.hpp}. This implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport ln from '@stdlib/math-base-special-ln';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport rationalFcnR1 from './rational_p1q1.js';\nimport rationalFcnR2 from './rational_p2q2.js';\nimport rationalFcnR3 from './rational_p3q3.js';\nimport rationalFcnR4 from './rational_p4q4.js';\nimport rationalFcnR5 from './rational_p5q5.js';\n\n\n// VARIABLES //\n\nvar Y1 = 8.91314744949340820313e-2;\nvar Y2 = 2.249481201171875;\nvar Y3 = 8.07220458984375e-1;\nvar Y4 = 9.3995571136474609375e-1;\nvar Y5 = 9.8362827301025390625e-1;\n\n\n// MAIN //\n\n/**\n* Evaluates the inverse complementary error function.\n*\n* Note that\n*\n* ```tex\n* \\operatorname{erfc^{-1}}(1-z) = \\operatorname{erf^{-1}}(z)\n* ```\n*\n* ## Method\n*\n* 1.  For \\\\(|x| \\leq 0.5\\\\), we evaluate the inverse error function using the rational approximation\n*\n*     ```tex\n*     \\operatorname{erf^{-1}}(x) = x(x+10)(\\mathrm{Y} + \\operatorname{R}(x))\n*     ```\n*\n*     where \\\\(Y\\\\) is a constant and \\\\(\\operatorname{R}(x)\\\\) is optimized for a low absolute error compared to \\\\(|Y|\\\\).\n*\n*     <!-- <note> -->\n*\n*     Max error \\\\(2.001849\\mbox{e-}18\\\\). Maximum deviation found (error term at infinite precision) \\\\(8.030\\mbox{e-}21\\\\).\n*\n*     <!-- </note> -->\n*\n* 2.  For \\\\(0.5 > 1-|x| \\geq 0\\\\), we evaluate the inverse error function using the rational approximation\n*\n*     ```tex\n*     \\operatorname{erf^{-1}} = \\frac{\\sqrt{-2 \\cdot \\ln(1-x)}}{\\mathrm{Y} + \\operatorname{R}(1-x)}\n*     ```\n*\n*     where \\\\(Y\\\\) is a constant, and \\\\(\\operatorname{R}(q)\\\\) is optimized for a low absolute error compared to \\\\(Y\\\\).\n*\n*     <!-- <note> -->\n*\n*     Max error \\\\(7.403372\\mbox{e-}17\\\\). Maximum deviation found (error term at infinite precision) \\\\(4.811\\mbox{e-}20\\\\).\n*\n*     <!-- </note> -->\n*\n* 3.  For \\\\(1-|x| < 0.25\\\\), we have a series of rational approximations all of the general form\n*\n*     ```tex\n*     p = \\sqrt{-\\ln(1-x)}\n*     ```\n*\n*     Accordingly, the result is given by\n*\n*     ```tex\n*     \\operatorname{erf^{-1}}(x) = p(\\mathrm{Y} + \\operatorname{R}(p-B))\n*     ```\n*\n*     where \\\\(Y\\\\) is a constant, \\\\(B\\\\) is the lowest value of \\\\(p\\\\) for which the approximation is valid, and \\\\(\\operatorname{R}(x-B)\\\\) is optimized for a low absolute error compared to \\\\(Y\\\\).\n*\n*     <!-- <note> -->\n*\n*     Almost all code will only go through the first or maybe second approximation.  After that we are dealing with very small input values.\n*\n*     -   If \\\\(p < 3\\\\), max error \\\\(1.089051\\mbox{e-}20\\\\).\n*     -   If \\\\(p < 6\\\\), max error \\\\(8.389174\\mbox{e-}21\\\\).\n*     -   If \\\\(p < 18\\\\), max error \\\\(1.481312\\mbox{e-}19\\\\).\n*     -   If \\\\(p < 44\\\\), max error \\\\(5.697761\\mbox{e-}20\\\\).\n*     -   If \\\\(p \\geq 44\\\\), max error \\\\(1.279746\\mbox{e-}20\\\\).\n*\n*     <!-- </note> -->\n*\n*     <!-- <note> -->\n*\n*     The Boost library can accommodate \\\\(80\\\\) and \\\\(128\\\\) bit long doubles. JavaScript only supports a \\\\(64\\\\) bit double (IEEE 754). Accordingly, the smallest \\\\(p\\\\) (in JavaScript at the time of this writing) is \\\\(\\sqrt{-\\ln(\\sim5\\mbox{e-}324)} = 27.284429111150214\\\\).\n*\n*     <!-- </note> -->\n*\n*\n* @param {number} x - input value\n* @returns {number} function value\n*\n* @example\n* var y = erfcinv( 0.5 );\n* // returns ~0.4769\n*\n* @example\n* var y = erfcinv( 0.8 );\n* // returns ~0.1791\n*\n* @example\n* var y = erfcinv( 0.0 );\n* // returns Infinity\n*\n* @example\n* var y = erfcinv( 2.0 );\n* // returns -Infinity\n*\n* @example\n* var y = erfcinv( NaN );\n* // returns NaN\n*/\nfunction erfcinv( x ) {\n\tvar sign;\n\tvar qs;\n\tvar q;\n\tvar g;\n\tvar r;\n\n\t// Special case: NaN\n\tif ( isnan( x ) ) {\n\t\treturn NaN;\n\t}\n\t// Special case: 0\n\tif ( x === 0.0 ) {\n\t\treturn PINF;\n\t}\n\t// Special case: 2\n\tif ( x === 2.0 ) {\n\t\treturn NINF;\n\t}\n\t// Special case: 1\n\tif ( x === 1.0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( x > 2.0 || x < 0.0 ) {\n\t\treturn NaN;\n\t}\n\t// Argument reduction (reduce to interval [0,1]). If `x` is outside [0,1], we can take advantage of the complementary error function reflection formula: `erfc(-z) = 2 - erfc(z)`, by negating the result once finished.\n\tif ( x > 1.0 ) {\n\t\tsign = -1.0;\n\t\tq = 2.0 - x;\n\t} else {\n\t\tsign = 1.0;\n\t\tq = x;\n\t}\n\tx = 1.0 - q;\n\n\t// x = 1-q <= 0.5\n\tif ( x <= 0.5 ) {\n\t\tg = x * ( x + 10.0 );\n\t\tr = rationalFcnR1( x );\n\t\treturn sign * ( (g*Y1) + (g*r) );\n\t}\n\t// q >= 0.25\n\tif ( q >= 0.25 ) {\n\t\tg = sqrt( -2.0 * ln(q) );\n\t\tq -= 0.25;\n\t\tr = rationalFcnR2( q );\n\t\treturn sign * ( g / (Y2+r) );\n\t}\n\tq = sqrt( -ln( q ) );\n\n\t// q < 3\n\tif ( q < 3.0 ) {\n\t\tqs = q - 1.125;\n\t\tr = rationalFcnR3( qs );\n\t\treturn sign * ( (Y3*q) + (r*q) );\n\t}\n\t// q < 6\n\tif ( q < 6.0 ) {\n\t\tqs = q - 3.0;\n\t\tr = rationalFcnR4( qs );\n\t\treturn sign * ( (Y4*q) + (r*q) );\n\t}\n\t// q < 18\n\tqs = q - 6.0;\n\tr = rationalFcnR5( qs );\n\treturn sign * ( (Y5*q) + (r*q) );\n}\n\n\n// EXPORTS //\n\nexport default erfcinv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn -0.0005087819496582806;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = -0.0005087819496582806 + (x * (-0.008368748197417368 + (x * (0.03348066254097446 + (x * (-0.012692614766297404 + (x * (-0.03656379714117627 + (x * (0.02198786811111689 + (x * (0.008226878746769157 + (x * (-0.005387729650712429 + (x * (0.0 + (x * 0.0))))))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (-0.9700050433032906 + (x * (-1.5657455823417585 + (x * (1.5622155839842302 + (x * (0.662328840472003 + (x * (-0.7122890234154284 + (x * (-0.05273963823400997 + (x * (0.07952836873415717 + (x * (-0.0023339375937419 + (x * 0.0008862163904564247))))))))))))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = 0.0 + (x * (0.0 + (x * (-0.005387729650712429 + (x * (0.008226878746769157 + (x * (0.02198786811111689 + (x * (-0.03656379714117627 + (x * (-0.012692614766297404 + (x * (0.03348066254097446 + (x * (-0.008368748197417368 + (x * -0.0005087819496582806))))))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 0.0008862163904564247 + (x * (-0.0023339375937419 + (x * (0.07952836873415717 + (x * (-0.05273963823400997 + (x * (-0.7122890234154284 + (x * (0.662328840472003 + (x * (1.5622155839842302 + (x * (-1.5657455823417585 + (x * (-0.9700050433032906 + (x * 1.0))))))))))))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn -0.20243350835593876;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = -0.20243350835593876 + (x * (0.10526468069939171 + (x * (8.3705032834312 + (x * (17.644729840837403 + (x * (-18.851064805871424 + (x * (-44.6382324441787 + (x * (17.445385985570866 + (x * (21.12946554483405 + (x * -3.6719225470772936))))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (6.242641248542475 + (x * (3.971343795334387 + (x * (-28.66081804998 + (x * (-20.14326346804852 + (x * (48.560921310873994 + (x * (10.826866735546016 + (x * (-22.643693341313973 + (x * 1.7211476576120028))))))))))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = -3.6719225470772936 + (x * (21.12946554483405 + (x * (17.445385985570866 + (x * (-44.6382324441787 + (x * (-18.851064805871424 + (x * (17.644729840837403 + (x * (8.3705032834312 + (x * (0.10526468069939171 + (x * -0.20243350835593876))))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.7211476576120028 + (x * (-22.643693341313973 + (x * (10.826866735546016 + (x * (48.560921310873994 + (x * (-20.14326346804852 + (x * (-28.66081804998 + (x * (3.971343795334387 + (x * (6.242641248542475 + (x * 1.0))))))))))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn -0.1311027816799519;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = -0.1311027816799519 + (x * (-0.16379404719331705 + (x * (0.11703015634199525 + (x * (0.38707973897260434 + (x * (0.3377855389120359 + (x * (0.14286953440815717 + (x * (0.029015791000532906 + (x * (0.0021455899538880526 + (x * (-6.794655751811263e-7 + (x * (2.8522533178221704e-8 + (x * -6.81149956853777e-10))))))))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (3.4662540724256723 + (x * (5.381683457070069 + (x * (4.778465929458438 + (x * (2.5930192162362027 + (x * (0.848854343457902 + (x * (0.15226433829533179 + (x * (0.011059242293464892 + (x * (0.0 + (x * (0.0 + (x * 0.0))))))))))))))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = -6.81149956853777e-10 + (x * (2.8522533178221704e-8 + (x * (-6.794655751811263e-7 + (x * (0.0021455899538880526 + (x * (0.029015791000532906 + (x * (0.14286953440815717 + (x * (0.3377855389120359 + (x * (0.38707973897260434 + (x * (0.11703015634199525 + (x * (-0.16379404719331705 + (x * -0.1311027816799519))))))))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 0.0 + (x * (0.0 + (x * (0.0 + (x * (0.011059242293464892 + (x * (0.15226433829533179 + (x * (0.848854343457902 + (x * (2.5930192162362027 + (x * (4.778465929458438 + (x * (5.381683457070069 + (x * (3.4662540724256723 + (x * 1.0))))))))))))))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn -0.0350353787183178;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = -0.0350353787183178 + (x * (-0.0022242652921344794 + (x * (0.018557330651423107 + (x * (0.009508047013259196 + (x * (0.0018712349281955923 + (x * (0.00015754461742496055 + (x * (0.00000460469890584318 + (x * (-2.304047769118826e-10 + (x * 2.6633922742578204e-12))))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (1.3653349817554064 + (x * (0.7620591645536234 + (x * (0.22009110576413124 + (x * (0.03415891436709477 + (x * (0.00263861676657016 + (x * (0.00007646752923027944 + (x * (0.0 + (x * 0.0))))))))))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = 2.6633922742578204e-12 + (x * (-2.304047769118826e-10 + (x * (0.00000460469890584318 + (x * (0.00015754461742496055 + (x * (0.0018712349281955923 + (x * (0.009508047013259196 + (x * (0.018557330651423107 + (x * (-0.0022242652921344794 + (x * -0.0350353787183178))))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 0.0 + (x * (0.0 + (x * (0.00007646752923027944 + (x * (0.00263861676657016 + (x * (0.03415891436709477 + (x * (0.22009110576413124 + (x * (0.7620591645536234 + (x * (1.3653349817554064 + (x * 1.0))))))))))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn -0.016743100507663373;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = -0.016743100507663373 + (x * (-0.0011295143874558028 + (x * (0.001056288621524929 + (x * (0.00020938631748758808 + (x * (0.000014962478375834237 + (x * (4.4969678992770644e-7 + (x * (4.625961635228786e-9 + (x * (-2.811287356288318e-14 + (x * 9.905570997331033e-17))))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (0.5914293448864175 + (x * (0.1381518657490833 + (x * (0.016074608709367652 + (x * (0.0009640118070051656 + (x * (0.000027533547476472603 + (x * (2.82243172016108e-7 + (x * (0.0 + (x * 0.0))))))))))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = 9.905570997331033e-17 + (x * (-2.811287356288318e-14 + (x * (4.625961635228786e-9 + (x * (4.4969678992770644e-7 + (x * (0.000014962478375834237 + (x * (0.00020938631748758808 + (x * (0.001056288621524929 + (x * (-0.0011295143874558028 + (x * -0.016743100507663373))))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 0.0 + (x * (0.0 + (x * (2.82243172016108e-7 + (x * (0.000027533547476472603 + (x * (0.0009640118070051656 + (x * (0.016074608709367652 + (x * (0.1381518657490833 + (x * (0.5914293448864175 + (x * 1.0))))))))))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Square root of `2`.\n*\n* @module @stdlib/constants-float64-sqrt-two\n* @type {number}\n*\n* @example\n* import SQRT2 from '@stdlib/constants-float64-sqrt-two';\n* // returns 1.4142135623730951\n*/\n\n\n// MAIN //\n\n/**\n* Square root of `2`.\n*\n* ```tex\n* \\sqrt{2}\n* ```\n*\n* @constant\n* @type {number}\n* @default 1.4142135623730951\n*/\nvar SQRT2 = 1.41421356237309504880168872420969807856967187537694807317667973799073247846210703885038753432764157273501384623e+00; // eslint-disable-line max-len\n\n\n// EXPORTS //\n\nexport default SQRT2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_62_0/boost/math/special_functions/detail/t_distribution_inv.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* Copyright John Maddock 2006.\n* Copyright Paul A. Bristow 2007.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport gammaDeltaRatio from '@stdlib/math-base-special-gamma-delta-ratio';\nimport evalpoly from '@stdlib/math-base-tools-evalpoly';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport PI from '@stdlib/constants-float64-pi';\nimport polyval1 from './polyval_co14.js';\nimport polyval2 from './polyval_co15.js';\nimport polyval3 from './polyval_co16.js';\nimport polyval4 from './polyval_co17.js';\nimport polyval5 from './polyval_co18.js';\nimport polyval6 from './polyval_co19.js';\nimport polyval7 from './polyval_co20.js';\nimport polyval8 from './polyval_co21.js';\nimport polyval9 from './polyval_co22.js';\n\n\n// VARIABLES //\n\nvar c0 = 0.0;\n\n// Workspace for the polynomial coefficients:\nvar c = [ 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ]; // WARNING: not thread safe\n\n\n// MAIN //\n\n/**\n* Evaluates Student's t quantiles via a body series expansion. Tail and body series are due to Shaw.\n*\n* ## References\n*\n* -   Shaw, William T. 2006. \"Sampling Student's T distribution – use of the inverse cumulative distribution function.\" _Journal of Computational Finance_ 9 (4): 37–73. [www.mth.kcl.ac.uk/~shaww/web\\_page/papers/Tdistribution06.pdf](www.mth.kcl.ac.uk/~shaww/web_page/papers/Tdistribution06.pdf).\n*\n* @private\n* @param {PositiveNumber} df - degrees of freedom\n* @param {Probability} u - input probability\n* @returns {number} function value\n*/\nfunction inverseStudentsTBodySeries( df, u ) {\n\tvar idf;\n\tvar v;\n\n\t// Body series for small N, start with Eq 56 of Shaw:\n\tv = gammaDeltaRatio( df/2, 0.5 ) * sqrt( df*PI ) * ( u-0.5 );\n\n\t// Figure out what the coefficients are. They depend only on the degrees of freedom (Eq 57 of Shaw):\n\tidf = 1.0 / df;\n\tc[ 1 ] = polyval1( idf );\n\tc[ 2 ] = polyval2( idf );\n\tc[ 3 ] = polyval3( idf );\n\tc[ 4 ] = polyval4( idf );\n\tc[ 5 ] = polyval5( idf );\n\tc[ 6 ] = polyval6( idf );\n\tc[ 7 ] = polyval7( idf );\n\tc[ 8 ] = polyval8( idf );\n\tc[ 9 ] = polyval9( idf );\n\n\t// Result is then an odd polynomial in v (see Eq 56 of Shaw)...\n\treturn c0 + ( v*evalpoly( c, v*v ) );\n}\n\n\n// EXPORTS //\n\nexport default inverseStudentsTBodySeries;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.16666666666666666;\n\t}\n\treturn 0.16666666666666666 + (x * 0.16666666666666666);\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.058333333333333334;\n\t}\n\treturn 0.058333333333333334 + (x * (0.06666666666666667 + (x * 0.008333333333333333))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.0251984126984127;\n\t}\n\treturn 0.0251984126984127 + (x * (0.026785714285714284 + (x * (0.0017857142857142857 + (x * 0.0001984126984126984))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.012039792768959435;\n\t}\n\treturn 0.012039792768959435 + (x * (0.010559964726631394 + (x * (-0.0011078042328042327 + (x * (0.0003747795414462081 + (x * 0.0000027557319223985893))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.003837005972422639;\n\t}\n\treturn 0.003837005972422639 + (x * (0.00610392115600449 + (x * (-0.0016095979637646305 + (x * (0.0005945867404200738 + (x * (-0.00006270542728876062 + (x * 2.505210838544172e-8))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.0032177478835464946;\n\t}\n\treturn 0.0032177478835464946 + (x * (0.0010898206731540065 + (x * (-0.0012579159844784845 + (x * (0.0006908420797309686 + (x * (-0.00016376804137220805 + (x * (0.0000154012654012654 + (x * 1.6059043836821613e-10))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.001743826229834001;\n\t}\n\treturn 0.001743826229834001 + (x * (0.00003353097688001788 + (x * (-0.0007624513544032393 + (x * (0.0006451304695145635 + (x * (-0.000249472580470431 + (x * (0.000049255746366361444 + (x * (-0.0000039851014346715405 + (x * 7.647163731819816e-13))))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.0009647274732138864;\n\t}\n\treturn 0.0009647274732138864 + (x * (-0.0003110108632631878 + (x * (-0.00036307660358786886 + (x * (0.0005140660578834113 + (x * (-0.00029133414466938067 + (x * (0.00009086710793521991 + (x * (-0.000015303004486655377 + (x * (0.0000010914179173496788 + (x * 2.8114572543455206e-15))))))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.0005422926281312969;\n\t}\n\treturn 0.0005422926281312969 + (x * (-0.0003694266780000966 + (x * (-0.00010230378073700413 + (x * (0.00035764655430568635 + (x * (-0.00028690924218514614 + (x * (0.00012645437628698076 + (x * (-0.000033202652391372056 + (x * (0.000004890304529197534 + (x * (-3.123956959982987e-7 + (x * 8.22063524662433e-18))))))))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_61_0/boost/math/special_functions/detail/t_distribution_inv.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* Copyright John Maddock 2006.\n* Copyright Paul A. Bristow 2007.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport gammaDeltaRatio from '@stdlib/math-base-special-gamma-delta-ratio';\nimport evalpoly from '@stdlib/math-base-tools-evalpoly';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport pow from '@stdlib/math-base-special-pow';\nimport PI from '@stdlib/constants-float64-pi';\n\n\n// VARIABLES //\n\n// Array for the coefficients d(k), these depend only on the number of degrees of freedom df, so at least in theory we could tabulate these for fixed df, see p15 of Shaw:\nvar d = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ]; // WARNING: not thread safe\n\n\n// MAIN //\n\n/**\n* Evaluates Student's t quantiles via a tail series expansion. Tail and body series are due to Shaw.\n*\n* ## References\n*\n* -   Shaw, William T. 2006. \"Sampling Student's T distribution – use of the inverse cumulative distribution function.\" _Journal of Computational Finance_ 9 (4): 37–73. [www.mth.kcl.ac.uk/~shaww/web\\_page/papers/Tdistribution06.pdf](www.mth.kcl.ac.uk/~shaww/web_page/papers/Tdistribution06.pdf).\n*\n* @private\n* @param {number} df - degrees of freedom\n* @param {number} v - function value\n* @returns {number} tail value\n*/\nfunction inverseStudentsTTailSeries( df, v ) { // eslint-disable-line id-length\n\tvar result;\n\tvar power;\n\tvar div;\n\tvar np2;\n\tvar np4;\n\tvar np6;\n\tvar rn;\n\tvar w;\n\n\t// Tail series expansion, see section 6 of Shaw's paper. `w` is calculated using Eq 60:\n\tw = gammaDeltaRatio( df/2.0, 0.5 ) * sqrt( df*PI ) * v;\n\n\t// Define some variables:\n\tnp2 = df + 2.0;\n\tnp4 = df + 4.0;\n\tnp6 = df + 6.0;\n\n\td[ 0 ] = 1.0;\n\td[ 1 ] = -(df+1.0) / (2.0*np2);\n\tnp2 *= (df + 2.0);\n\td[ 2 ] = -df * (df+1.0) * (df+3.0) / (8.0*np2*np4);\n\tnp2 *= df + 2.0;\n\td[ 3 ] = -df * (df+1.0) * (df+5.0) * (((3.0*df) + 7.0) * df - 2.0) / (48.0*np2*np4*np6); // eslint-disable-line max-len, no-mixed-operators\n\tnp2 *= (df + 2.0);\n\tnp4 *= (df + 4.0);\n\td[ 4 ] = -df * (df+1.0) * (df+7.0) * ( (((((15.0*df) + 154.0) * df + 465.0) * df + 286.0) * df - 336.0) * df + 64.0) / (384.0*np2*np4*np6*(df+8.0)); // eslint-disable-line max-len, no-mixed-operators\n\tnp2 *= (df + 2.0);\n\td[ 5 ] = -df * (df+1.0) * (df+3.0) * (df+9.0) * (((((((35.0 * df + 452.0) * df+1573.0) * df + 600.0) * df - 2020.0) * df) + 928.0) * df - 128.0) / (1280.0*np2*np4*np6*(df+8.0) * (df+10.0)); // eslint-disable-line max-len, no-mixed-operators\n\tnp2 *= (df + 2.0);\n\tnp4 *= (df + 4.0);\n\tnp6 *= (df + 6.0);\n\td[ 6 ] = -df * (df+1.0) * (df+11.0) * ((((((((((((945.0*df) + 31506.0) * df + 425858.0) * df + 2980236.0) * df + 11266745.0) * df + 20675018.0) * df + 7747124.0) * df - 22574632.0) * df - 8565600.0) * df + 18108416.0) * df - 7099392.0) * df + 884736.0) / (46080.0*np2*np4*np6*(df+8.0) * (df+10.0) * (df+12.0)); // eslint-disable-line max-len, no-mixed-operators\n\n\t// Now bring everything together to provide the result this is Eq 62 of Shaw:\n\trn = sqrt( df );\n\tdiv = pow( rn*w, 1.0/df );\n\tpower = div * div;\n\tresult = evalpoly( d, power );\n\tresult *= rn;\n\tresult /= div;\n\treturn -result;\n}\n\n\n// EXPORTS //\n\nexport default inverseStudentsTTailSeries;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_61_0/boost/math/special_functions/detail/t_distribution_inv.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* Copyright John Maddock 2006.\n* Copyright Paul A. Bristow 2007.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n/* eslint-disable no-mixed-operators */\n\n'use strict';\n\n// MODULES //\n\nimport erfcinv from '@stdlib/math-base-special-erfcinv';\nimport expm1 from '@stdlib/math-base-special-expm1';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport pow from '@stdlib/math-base-special-pow';\nimport HALF_PI from '@stdlib/constants-float64-half-pi';\nimport SQRT2 from '@stdlib/constants-float64-sqrt-two';\n\n\n// MAIN //\n\n/**\n* Evaluates Student's t quantiles via a method due to Hill.\n*\n* ## References\n*\n* -   Hill, G. W. 1970. \"Algorithm 396: Student's T-Quantiles.\" _Communications of the ACM_ 13 (10). New York, NY, USA: ACM: 619–20. doi:[10.1145/355598.355600](https://doi.org/10.1145/355598.355600).\n*\n* @private\n* @param {PositiveNumber} ndf - degrees of freedom\n* @param {Probability} u - input probability\n* @returns {number} function value\n*/\nfunction inverseStudentsTHill( ndf, u ) {\n\tvar a;\n\tvar b;\n\tvar c;\n\tvar d;\n\tvar q;\n\tvar x;\n\tvar y;\n\n\tif ( ndf > 1e20 ) {\n\t\treturn -erfcinv( 2 * u ) * SQRT2;\n\t}\n\ta = 1.0 / ( ndf - 0.5 );\n\tb = 48.0 / (a * a);\n\tc = ( ( ( ( (20700.0*a/b) - 98.0 ) * a ) - 16.0 ) * a ) + 96.36;\n\td = ( ( ( (94.5/(b+c)) - 3.0 ) / b ) + 1.0 ) * sqrt( a * HALF_PI ) * ndf;\n\ty = pow( d * 2.0 * u, 2.0 / ndf );\n\n\tif ( y > ( 0.05 + a ) ) {\n\t\t// Asymptotic inverse expansion about normal:\n\t\tx = -erfcinv( 2.0 * u ) * SQRT2;\n\t\ty = x * x;\n\n\t\tif ( ndf < 5.0 ) {\n\t\t\tc += 0.3 * ( ndf-4.5 ) * ( x + 0.6 );\n\t\t}\n\t\tc += ( ( ( ( ( ( (0.05*d*x)-5.0 ) * x ) - 7.0 ) * x )- 2.0 ) * x ) + b;\n\t\ty = ((((((0.4*y+6.3)*y)+36.0) * y + 94.5) / c - y - 3.0) / b + 1.0) * x;\n\t\ty = expm1( a * y * y );\n\t} else {\n\t\ty = ((1.0 / ( ( (ndf+6.0) / (ndf*y) - 0.089 * d - 0.822 ) *\n\t\t(ndf+2.0) * 3.0 ) + 0.5 / (ndf+4.0)) * y - 1.0) *\n\t\t(ndf+1.0) / (ndf+2.0) + 1.0 / y;\n\t}\n\tq = sqrt( ndf * y );\n\treturn -q;\n}\n\n\n// EXPORTS //\n\nexport default inverseStudentsTHill;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_62_0/boost/math/special_functions/detail/t_distribution_inv.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* Copyright John Maddock 2006.\n* Copyright Paul A. Bristow 2007.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport erfcinv from '@stdlib/math-base-special-erfcinv';\nimport floor from '@stdlib/math-base-special-floor';\nimport ldexp from '@stdlib/math-base-special-ldexp';\nimport round from '@stdlib/math-base-special-round';\nimport acos from '@stdlib/math-base-special-acos';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport abs from '@stdlib/math-base-special-abs';\nimport cos from '@stdlib/math-base-special-cos';\nimport pow from '@stdlib/math-base-special-pow';\nimport sin from '@stdlib/math-base-special-sin';\nimport SQRT2 from '@stdlib/constants-float64-sqrt-two';\nimport PI from '@stdlib/constants-float64-pi';\nimport inverseStudentsTBodySeries from './inverse_students_t_body_series.js';\nimport inverseStudentsTTailSeries from './inverse_students_t_tail_series.js';\nimport inverseStudentsTHill from './inverse_students_t_hill.js';\n\n\n// VARIABLES //\n\nvar DF_THRESHOLD = 0x10000000; // 2^28\nvar ONE_THIRD = 1.0 / 3.0;\nvar EXP = ( 2.0 * 53.0 ) / 3.0;\nvar C = 0.85498797333834849467655443627193;\n\n\n// MAIN //\n\n/**\n* Evaluates Student's t quantiles.\n*\n* @private\n* @param {PositiveNumber} df - degrees of freedom\n* @param {Probability} u - input probability\n* @param {Probability} v - probability equal to `1-u`\n* @returns {number} function value\n*/\nfunction inverseStudentsT( df, u, v ) {\n\tvar crossover;\n\tvar tolerance;\n\tvar rootAlpha;\n\tvar invert;\n\tvar result;\n\tvar alpha;\n\tvar tmp;\n\tvar p0;\n\tvar p2;\n\tvar p4;\n\tvar p5;\n\tvar p;\n\tvar r;\n\tvar x;\n\tvar a;\n\tvar b;\n\n\tresult = 0;\n\tif ( u > v ) {\n\t\t// Function is symmetric, so invert it:\n\t\ttmp = v;\n\t\tv = u;\n\t\tu = tmp;\n\t\tinvert = true;\n\t} else {\n\t\tinvert = false;\n\t}\n\tif ( floor(df) === df && df < 20 ) {\n\t\t// We have integer degrees of freedom, try for the special cases first:\n\t\ttolerance = ldexp( 1.0, EXP );\n\n\t\tswitch ( floor( df ) ) {\n\t\tcase 1:\n\t\t\t// `df = 1` is the same as the Cauchy distribution, see Shaw Eq 35:\n\t\t\tif ( u === 0.5 ) {\n\t\t\t\tresult = 0.0;\n\t\t\t} else {\n\t\t\t\tresult = -cos( PI * u ) / sin( PI * u );\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\t// `df = 2` has an exact result, see Shaw Eq 36:\n\t\t\tresult = ( (2.0*u) - 1.0 ) / sqrt( 2.0 * u * v );\n\t\t\tbreak;\n\t\tcase 4:\n\t\t\t// `df = 4` has an exact result, see Shaw Eq 38 & 39:\n\t\t\talpha = 4.0 * u * v;\n\t\t\trootAlpha = sqrt( alpha );\n\t\t\tr = 4 * cos( acos( rootAlpha ) / 3.0 ) / rootAlpha;\n\t\t\tx = sqrt( r - 4.0 );\n\t\t\tresult = ( u - 0.5 < 0.0 ) ? -x : x;\n\t\t\tbreak;\n\t\tcase 6:\n\t\t\t// We get numeric overflow in this area:\n\t\t\tif ( u < 1.0e-150 ) {\n\t\t\t\treturn ( ( invert ) ? -1 : 1 ) * inverseStudentsTHill( df, u );\n\t\t\t}\n\t\t\t// Newton-Raphson iteration of a polynomial case, choice of seed value is taken from Shaw's online supplement:\n\t\t\ta = 4.0 * ( u - (u*u) ); // 1 - 4 * (u - 0.5f) * (u - 0.5f);\n\t\t\tb = pow( a, ONE_THIRD );\n\t\t\tp = 6.0 * ( 1.0 + ( C * ( (1.0/b) - 1.0 ) ) );\n\t\t\tdo {\n\t\t\t\tp2 = p * p;\n\t\t\t\tp4 = p2 * p2;\n\t\t\t\tp5 = p * p4;\n\t\t\t\tp0 = p;\n\n\t\t\t\t// Next term is given by Eq 41:\n\t\t\t\tp = 2.0 * ( (8.0*a*p5) - (270.0*p2) + 2187 ) /\n\t\t\t\t\t( 5.0 * ( (4.0*a*p4) - (216.0*p) - 243.0 ) );\n\t\t\t} while ( abs( (p - p0) / p ) > tolerance );\n\n\t\t\t// Use Eq 45 to extract the result:\n\t\t\tp = sqrt( p - df );\n\t\t\tresult = ( u - 0.5 < 0.0 ) ? -p : p;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tif ( df > DF_THRESHOLD ) { // 2^28\n\t\t\t\tresult = erfcinv( 2.0 * u ) * SQRT2;\n\t\t\t} else if ( df < 3 ) {\n\t\t\t\t// Use a roughly linear scheme to choose between Shaw's tail series and body series:\n\t\t\t\tcrossover = 0.2742 - ( df * 0.0242143 );\n\t\t\t\tif ( u > crossover ) {\n\t\t\t\t\tresult = inverseStudentsTBodySeries( df, u );\n\t\t\t\t} else {\n\t\t\t\t\tresult = inverseStudentsTTailSeries( df, u );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Use Hill's method except in the extreme tails where we use Shaw's tail series. The crossover point is roughly exponential in -df:\n\t\t\t\tcrossover = ldexp( 1.0, round( df / -0.654 ) );\n\t\t\t\tif ( u > crossover ) {\n\t\t\t\t\tresult = inverseStudentsTHill( df, u );\n\t\t\t\t} else {\n\t\t\t\t\tresult = inverseStudentsTTailSeries( df, u );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} else if ( df > DF_THRESHOLD ) {\n\t\tresult = -erfcinv( 2.0 * u ) * SQRT2;\n\t} else if ( df < 3 ) {\n\t\t// Use a roughly linear scheme to choose between Shaw's tail series and body series:\n\t\tcrossover = 0.2742 - ( df * 0.0242143 );\n\t\tif ( u > crossover ) {\n\t\t\tresult = inverseStudentsTBodySeries( df, u );\n\t\t} else {\n\t\t\tresult = inverseStudentsTTailSeries( df, u );\n\t\t}\n\t} else {\n\t\t// Use Hill's method except in the extreme tails where we use Shaw's tail series. The crossover point is roughly exponential in -df:\n\t\tcrossover = ldexp( 1.0, round( df / -0.654 ) );\n\t\tif ( u > crossover ) {\n\t\t\tresult = inverseStudentsTHill( df, u );\n\t\t} else {\n\t\t\tresult = inverseStudentsTTailSeries( df, u );\n\t\t}\n\t}\n\treturn ( invert ) ? -result : result;\n}\n\n\n// EXPORTS //\n\nexport default inverseStudentsT;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C code, long comment, copyright, license, and constants are from [Cephes]{@link http://www.netlib.org/cephes}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright 1984, 1995, 2000 by Stephen L. Moshier\n*\n* Some software in this archive may be from the book _Methods and Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster International, 1989) or from the Cephes Mathematical Library, a commercial product. In either event, it is copyrighted by the author. What you see here may be used freely but it comes with no support or guarantee.\n*\n* Stephen L. Moshier\n* moshier@na-net.ornl.gov\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport asin from '@stdlib/math-base-special-asin';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport PIO4 from '@stdlib/constants-float64-fourth-pi';\n\n\n// VARIABLES //\n\nvar MOREBITS = 6.123233995736765886130e-17; // pi/2 = PIO2 + MOREBITS.\n\n\n// MAIN //\n\n/**\n* Computes the arccosine of a number.\n*\n* ## Method\n*\n* -   Analytically,\n*\n*     ```tex\n*     \\operatorname{acos}(x) = \\frac{\\pi}{2} - \\operatorname{asin}(x)\n*     ```\n*\n*     However, if \\\\(\\|x\\|\\\\) is near \\\\(1\\\\), there is cancellation error in subtracting \\\\(\\opertorname{asin}(x)\\\\) from \\\\(\\pi/2\\\\). Hence, if \\\\(x < -0.5\\\\),\n*\n*     ```tex\n*     \\operatorname{acos}(x) = \\pi - 2.0 \\cdot \\operatorname{asin}(\\sqrt{(1+x)/2})\n*     ```\n*\n*     or, if \\\\(x > +0.5\\\\),\n*\n*     ```tex\n*     \\operatorname{acos}(x) = 2.0 \\cdot \\operatorname{asin}( \\sqrt{(1-x)/2} )}\n*     ```\n*\n* ## Notes\n*\n* -   Relative error:\n*\n*     | arithmetic | domain | # trials | peak    | rms     |\n*     |:-----------|:------:|:---------|:--------|:--------|\n*     | DEC        | -1, 1  | 50000    | 3.3e-17 | 8.2e-18 |\n*     | IEEE       | -1, 1  | 10^6     | 2.2e-16 | 6.5e-17 |\n*\n*\n* @param {number} x - input value\n* @returns {number} arccosine (in radians)\n*\n* @example\n* var v = acos( 1.0 );\n* // returns 0.0\n*\n* @example\n* var v = acos( 0.707 ); // ~pi/4\n* // returns ~0.7855\n*\n* @example\n* var v = acos( NaN );\n* // returns NaN\n*/\nfunction acos( x ) {\n\tvar z;\n\tif ( isnan( x ) ) {\n\t\treturn NaN;\n\t}\n\tif ( x < -1.0 || x > 1.0 ) {\n\t\treturn NaN;\n\t}\n\tif ( x > 0.5 ) {\n\t\treturn 2.0 * asin( sqrt( 0.5 - (0.5*x) ) );\n\t}\n\tz = PIO4 - asin( x );\n\tz += MOREBITS;\n\tz += PIO4;\n\treturn z;\n}\n\n\n// EXPORTS //\n\nexport default acos;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/detail/ibeta_inverse.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* Copyright John Maddock 2006.\n* Copyright Paul A. Bristow 2007.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport evalpoly from '@stdlib/math-base-tools-evalpoly';\nimport erfcinv from '@stdlib/math-base-special-erfcinv';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport exp from '@stdlib/math-base-special-exp';\nimport SQRT2 from '@stdlib/constants-float64-sqrt-two';\n\n\n// VARIABLES //\n\n// Workspaces for the polynomial coefficients:\nvar workspace = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ];\nvar terms = [ 0.0, 0.0, 0.0, 0.0 ];\n\n\n// MAIN //\n\n/**\n* Carries out the first method by Temme (described in section 2).\n*\n* ## References\n*\n* -   Temme, N. M. 1992. \"Incomplete Laplace Integrals: Uniform Asymptotic Expansion with Application to the Incomplete Beta Function.\" _Journal of Computational and Applied Mathematics_ 41 (1–2): 1638–63. doi:[10.1016/0377-0427(92)90244-R](https://doi.org/10.1016/0377-0427(92)90244-R).\n*\n* @private\n* @param {PositiveNumber} a - function parameter\n* @param {PositiveNumber} b - function parameter\n* @param {Probability} z - function parameter\n* @returns {number} function value\n*/\nfunction temme1( a, b, z ) {\n\tvar eta0;\n\tvar eta2;\n\tvar eta;\n\tvar B2;\n\tvar B3;\n\tvar B;\n\tvar c;\n\n\t// Get the first approximation for eta from the inverse error function (Eq: 2.9 and 2.10):\n\teta0 = erfcinv( 2.0 * z );\n\teta0 /= -sqrt( a / 2.0 );\n\n\tterms[ 0 ] = eta0;\n\n\t// Calculate powers:\n\tB = b - a;\n\tB2 = B * B;\n\tB3 = B2 * B;\n\n\t// Calculate correction terms:\n\n\t// See eq following 2.15:\n\tworkspace[ 0 ] = -B * SQRT2 / 2;\n\tworkspace[ 1 ] = ( 1 - (2.0*B) ) / 8.0;\n\tworkspace[ 2 ] = -(B * SQRT2 / 48.0);\n\tworkspace[ 3 ] = -1.0 / 192.0;\n\tworkspace[ 4 ] = -B * SQRT2 / 3840.0;\n\tworkspace[ 5 ] = 0.0;\n\tworkspace[ 6 ] = 0.0;\n\tterms[ 1 ] = evalpoly( workspace, eta0 );\n\n\t// Eq Following 2.17:\n\tworkspace[ 0 ] = B * SQRT2 * ( (3.0*B) - 2.0) / 12.0;\n\tworkspace[ 1 ] = ( (20.0*B2) - (12.0*B) + 1.0 ) / 128.0;\n\tworkspace[ 2 ] = B * SQRT2 * ( (20.0*B) - 1.0) / 960.0;\n\tworkspace[ 3 ] = ( (16.0*B2) + (30.0*B) - 15.0) / 4608.0;\n\tworkspace[ 4 ] = B * SQRT2 * ( (21.0*B) + 32) / 53760.0;\n\tworkspace[ 5 ] = (-(32.0*B2) + 63.0) / 368640.0;\n\tworkspace[ 6 ] = -B * SQRT2 * ( (120.0*B) + 17.0) / 25804480.0;\n\tterms[ 2 ] = evalpoly( workspace, eta0 );\n\n\t// Eq Following 2.17:\n\tworkspace[ 0 ] = B * SQRT2 * ( (-75*B2) + (80.0*B) - 16.0) / 480.0;\n\tworkspace[ 1 ] = ( (-1080.0*B3) + (868.0*B2) - (90.0*B) - 45.0) / 9216.0;\n\tworkspace[ 2 ] = B * SQRT2 * ( (-1190.0*B2) + (84.0*B) + 373.0) / 53760.0;\n\tworkspace[ 3 ] = ( (-2240.0*B3)-(2508.0*B2)+(2100.0*B)-165.0 ) / 368640.0;\n\tworkspace[ 4 ] = 0.0;\n\tworkspace[ 5 ] = 0.0;\n\tworkspace[ 6 ] = 0.0;\n\tterms[ 3 ] = evalpoly( workspace, eta0 );\n\n\t// Bring them together to get a final estimate for eta:\n\teta = evalpoly( terms, 1.0/a );\n\n\t// Now we need to convert eta to the return value `x`, by solving the appropriate quadratic equation:\n\teta2 = eta * eta;\n\tc = -exp( -eta2 / 2.0 );\n\tif ( eta2 === 0.0 ) {\n\t\treturn 0.5;\n\t}\n\treturn ( 1.0 + ( eta * sqrt( ( 1.0+c ) / eta2 ) ) ) / 2.0;\n}\n\n\n// EXPORTS //\n\nexport default temme1;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_62_0/boost/math/special_functions/detail/ibeta_inverse.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* Copyright John Maddock 2006.\n* Copyright Paul A. Bristow 2007.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport ln from '@stdlib/math-base-special-ln';\nimport MAX_VALUE from '@stdlib/constants-float64-max';\n\n\n// VARIABLES //\n\nvar BIG = MAX_VALUE / 4.0;\n\n\n// MAIN //\n\n/**\n* Helper function used by root finding code to convert `eta` to `x`.\n*\n* @private\n* @param {number} t - first parameter\n* @param {number} a - second parameter\n* @returns {Function} root function\n*/\nfunction temmeRootFinder( t, a ) {\n\treturn roots;\n\n\t/**\n\t* Calculates roots.\n\t*\n\t* @private\n\t* @param {number} x - function value\n\t* @returns {Array} function roots\n\t*/\n\tfunction roots( x ) {\n\t\tvar f1;\n\t\tvar f;\n\t\tvar y;\n\n\t\ty = 1.0 - x;\n\t\tif ( y === 0.0 ) {\n\t\t\treturn [ -BIG, -BIG ];\n\t\t}\n\t\tif ( x === 0.0 ) {\n\t\t\treturn [ -BIG, -BIG ];\n\t\t}\n\t\tf = ln( x ) + ( a * ln( y ) ) + t;\n\t\tf1 = ( 1.0 / x ) - ( a / y );\n\t\treturn [ f, f1 ];\n\t}\n}\n\n\n// EXPORTS //\n\nexport default temmeRootFinder;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Evaluates the signum function for a double-precision floating-point number.\n*\n* @param {number} x - input value\n* @returns {number} function value\n*\n* @example\n* var sign = signum( -5.0 );\n* // returns -1.0\n*\n* @example\n* var sign = signum( 5.0 );\n* // returns 1.0\n*\n* @example\n* var sign = signum( -0.0 );\n* // returns -0.0\n*\n* @example\n* var sign = signum( 0.0 );\n* // returns 0.0\n*\n* @example\n* var sign = signum( NaN );\n* // returns NaN\n*/\nfunction signum( x ) {\n\tif ( x === 0.0 || isnan( x ) ) {\n\t\treturn x; // addresses both +-0\n\t}\n\treturn ( x < 0.0 ) ? -1.0 : 1.0;\n}\n\n\n// EXPORTS //\n\nexport default signum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_62_0/boost/math/tools/roots.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* Copyright John Maddock 2006.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport sign from '@stdlib/math-base-special-signum';\nimport abs from '@stdlib/math-base-special-abs';\nimport ldexp from '@stdlib/math-base-special-ldexp';\nimport MAX_VALUE from '@stdlib/constants-float64-max';\n\n\n// MAIN //\n\n/**\n* Performs root finding via second order Newton-Raphson iteration.\n*\n* @private\n* @param {Array} fun - two-element array of the function and its first derivative\n* @param {number} guess - initial starting value.\n* @param {number} min - minimum possible value for the result,used as initial lower bracket.\n* @param {number} max - maximum possible value for the result, used as initial upper bracket.\n* @param {PositiveInteger} digits - desired number of binary digits\n* @param {PositiveInteger} maxIter - maximum number of iterations\n* @returns {number} function value\n*/\nfunction newtonRaphsonIterate( fun, guess, min, max, digits, maxIter ) {\n\tvar f0last;\n\tvar delta1;\n\tvar delta2;\n\tvar factor;\n\tvar result;\n\tvar count;\n\tvar delta;\n\tvar res;\n\tvar f0;\n\tvar f1;\n\n\tf0 = 0.0;\n\tf0last = 0.0;\n\tresult = guess;\n\n\tfactor = ldexp( 1.0, 1.0 - digits );\n\tdelta = MAX_VALUE;\n\tdelta1 = MAX_VALUE;\n\tdelta2 = MAX_VALUE;\n\n\tcount = maxIter;\n\tdo {\n\t\tf0last = f0;\n\t\tdelta2 = delta1;\n\t\tdelta1 = delta;\n\t\tres = fun(result);\n\t\tf0 = res[ 0 ];\n\t\tf1 = res[ 1 ];\n\t\tcount -= 1;\n\t\tif ( f0 === 0.0 ) {\n\t\t\tbreak;\n\t\t}\n\t\tif ( f1 === 0.0 ) {\n\t\t\t// Oops zero derivative!!!\n\t\t\tif ( f0last === 0.0 ) {\n\t\t\t\t// Must be the first iteration, pretend that we had a previous one at either min or max:\n\t\t\t\tif ( result === min ) {\n\t\t\t\t\tguess = max;\n\t\t\t\t} else {\n\t\t\t\t\tguess = min;\n\t\t\t\t}\n\t\t\t\tf0last = fun( guess );\n\t\t\t\tdelta = guess - result;\n\t\t\t}\n\t\t\tif ( sign(f0last) * sign(f0) < 0 ) {\n\t\t\t\t// We've crossed over so move in opposite direction to last step:\n\t\t\t\tif ( delta < 0 ) {\n\t\t\t\t\tdelta = (result - min) / 2.0;\n\t\t\t\t} else {\n\t\t\t\t\tdelta = (result - max) / 2.0;\n\t\t\t\t}\n\t\t\t} else if ( delta < 0 ) {\n\t\t\t\tdelta = (result - max) / 2.0;\n\t\t\t} else {\n\t\t\t\tdelta = (result - min) / 2.0;\n\t\t\t}\n\t\t} else {\n\t\t\tdelta = f0 / f1;\n\t\t}\n\t\tif ( abs(delta * 2.0) > abs(delta2) ) {\n\t\t\t// Last two steps haven't converged, try bisection:\n\t\t\tdelta = ( delta > 0.0 ) ? (result-min) / 2.0 : (result-max) / 2.0;\n\t\t}\n\t\tguess = result;\n\t\tresult -= delta;\n\t\tif ( result <= min ) {\n\t\t\tdelta = 0.5 * (guess - min);\n\t\t\tresult = guess - delta;\n\t\t\tif ( result === min || result === max ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t} else if ( result >= max ) {\n\t\t\tdelta = 0.5 * (guess - max);\n\t\t\tresult = guess - delta;\n\t\t\tif ( result === min || result === max ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// Update brackets:\n\t\tif ( delta > 0.0 ) {\n\t\t\tmax = guess;\n\t\t} else {\n\t\t\tmin = guess;\n\t\t}\n\t}\n\twhile ( count && ( abs(result * factor) < abs(delta) ) );\n\n\treturn result;\n}\n\n\n// EXPORTS //\n\nexport default newtonRaphsonIterate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/detail/ibeta_inverse.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* Copyright John Maddock 2006.\n* Copyright Paul A. Bristow 2007.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport evalpoly from '@stdlib/math-base-tools-evalpoly';\nimport erfcinv from '@stdlib/math-base-special-erfcinv';\nimport abs from '@stdlib/math-base-special-abs';\nimport exp from '@stdlib/math-base-special-exp';\nimport ln from '@stdlib/math-base-special-ln';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport sin from '@stdlib/math-base-special-sin';\nimport cos from '@stdlib/math-base-special-cos';\nimport temmeRootFinder from './root_finder.js';\nimport newtonRaphsonIterate from './newton_raphson.js';\nimport polyval1 from './polyval_co1.js';\nimport polyval2 from './polyval_co2.js';\nimport polyval3 from './polyval_co3.js';\nimport polyval4 from './polyval_co4.js';\nimport polyval5 from './polyval_co5.js';\nimport polyval6 from './polyval_co6.js';\nimport polyval7 from './polyval_co7.js';\nimport polyval8 from './polyval_co8.js';\nimport polyval9 from './polyval_co9.js';\nimport polyval10 from './polyval_co10.js';\nimport polyval11 from './polyval_co11.js';\nimport polyval12 from './polyval_co12.js';\nimport polyval13 from './polyval_co13.js';\n\n\n// VARIABLES //\n\n// Workspaces for polynomial coefficients:\nvar workspace = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ];\nvar terms = [ 0.0, 0.0, 0.0, 0.0 ];\n\n\n// MAIN //\n\n/**\n* Carries out the second method by Temme (described in section 3).\n*\n* ## References\n*\n* -   Temme, N. M. 1992. \"Incomplete Laplace Integrals: Uniform Asymptotic Expansion with Application to the Incomplete Beta Function.\" _Journal of Computational and Applied Mathematics_ 41 (1–2): 1638–63. doi:[10.1016/0377-0427(92)90244-R](https://doi.org/10.1016/0377-0427(92)90244-R).\n*\n* @private\n* @param {number} z - function parameter\n* @param {number} r - function parameter\n* @param {number} theta - function parameter\n* @returns {number} function value\n*/\nfunction temme2( z, r, theta ) {\n\tvar upper;\n\tvar lower;\n\tvar alpha;\n\tvar roots;\n\tvar eta0;\n\tvar eta;\n\tvar sc7;\n\tvar sc6;\n\tvar sc5;\n\tvar sc4;\n\tvar sc3;\n\tvar sc2;\n\tvar sc;\n\tvar lu;\n\tvar s2;\n\tvar c2;\n\tvar c;\n\tvar s;\n\tvar u;\n\tvar x;\n\n\t// Get first estimate for eta, see Eq 3.9 and 3.10, but note there is a typo in Eq 3.10:\n\teta0 = erfcinv( 2.0*z ) / (-sqrt( r/2.0 ));\n\n\ts = sin( theta );\n\tc = cos( theta );\n\n\t// Now we need to perturb eta0 to get eta, which we do by evaluating the polynomial in 1/r at the bottom of page 151, to do this we first need the error terms e1, e2 e3 which we'll fill into the array \"terms\".  Since these terms are themselves polynomials, we'll need another array \"workspace\" to calculate those...\n\tterms[ 0 ] = eta0;\n\n\t// Some powers of sin(theta) cos(theta) that we'll need later:\n\ts2 = s * s;\n\tc2 = c * c;\n\tsc = s * c;\n\tsc2 = sc * sc;\n\tsc3 = sc2 * sc;\n\tsc4 = sc2 * sc2;\n\tsc5 = sc2 * sc3;\n\tsc6 = sc3 * sc3;\n\tsc7 = sc4 * sc3;\n\n\t// Calculate e1 and put it in terms[1], see the middle of page 151:\n\tworkspace[ 0 ] = ((2.0*s2) - 1.0) / ( 3.0*sc );\n\tworkspace[ 1 ] = -polyval1( s2 ) / (36.0*sc2);\n\tworkspace[ 2 ] = polyval2( s2 ) / (1620.0*sc3);\n\tworkspace[ 3 ] = polyval3( s2 ) / (6480.0*sc4);\n\tworkspace[ 4 ] = polyval4( s2 ) / (90720.0*sc5);\n\tworkspace[ 5 ] = 0.0;\n\tterms[ 1 ] = evalpoly( workspace, eta0 );\n\n\t// Now evaluate e2 and put it in terms[2]:\n\tworkspace[ 0 ] = -polyval5( s2 ) / (405.0*sc3);\n\tworkspace[ 1 ] = polyval6( s2 ) / (2592.0*sc4);\n\tworkspace[ 2 ] = -polyval7( s2 ) / (204120.0*sc5);\n\tworkspace[ 3 ] = -polyval8( s2 ) / (2099520.0*sc6);\n\tworkspace[ 4 ] = 0.0;\n\tworkspace[ 5 ] = 0.0;\n\tterms[ 2 ] = evalpoly( workspace, eta0 );\n\n\t// And e3, and put it in terms[3]:\n\tworkspace[ 0 ] = polyval9( s2 ) / (102060.0*sc5);\n\tworkspace[ 1 ] = -polyval10( s2 ) / (20995200.0*sc6);\n\tworkspace[ 2 ] = polyval11( s2 ) / (36741600.0*sc7);\n\tworkspace[ 3 ] = 0.0;\n\tworkspace[ 4 ] = 0.0;\n\tworkspace[ 5 ] = 0.0;\n\tterms[ 3 ] = evalpoly( workspace, eta0 );\n\n\t// Bring the correction terms together to evaluate eta; this is the last equation on page 151:\n\teta = evalpoly( terms, 1.0/r );\n\n\t// Now that we have eta we need to back solve for x, we seek the value of x that gives eta in Eq 3.2. The two methods used are described in section 5. Begin by defining a few variables we'll need later:\n\talpha = c / s;\n\talpha *= alpha;\n\tlu = ( -( eta*eta )/( 2.0*s2 ) ) + ln(s2) + ( c2*ln(c2)/s2 );\n\n\t// Temme doesn't specify what value to switch on here, but this seems to work pretty well:\n\tif ( abs(eta) < 0.7 ) {\n\t\t// Small eta use the expansion Temme gives in the second equation of section 5, it's a polynomial in eta:\n\t\tworkspace[ 0 ] = s2;\n\t\tworkspace[ 1 ] = sc;\n\t\tworkspace[ 2 ] = (1.0-(2.0*s2)) / 3.0;\n\t\tworkspace[ 3 ] = polyval12( s2 ) / ( 36.0*sc );\n\t\tworkspace[ 4 ] = polyval13( s2 ) / ( 270.0*sc2 );\n\t\tworkspace[ 5 ] = 0.0;\n\t\tx = evalpoly( workspace, eta );\n\t} else {\n\t\t// If eta is large we need to solve Eq 3.2 more directly, begin by getting an initial approximation for x from the last equation on page 155, this is a polynomial in u:\n\t\tu = exp( lu );\n\t\tworkspace[ 0 ] = u;\n\t\tworkspace[ 1 ] = alpha;\n\t\tworkspace[ 2 ] = 0.0;\n\t\tworkspace[ 3 ] = 3.0 * alpha * ((3.0*alpha)+1.0) / 6.0;\n\t\tworkspace[ 4 ] = 4.0 * alpha * ((4.0*alpha)+1.0) * ((4.0*alpha)+2.0) / 24.0; // eslint-disable-line max-len\n\t\tworkspace[ 5 ] = 5.0 * alpha * ((5.0*alpha)+1.0) * ((5.0*alpha)+2.0) * ((5.0*alpha)+3.0) / 120.0; // eslint-disable-line max-len\n\t\tx = evalpoly( workspace, u );\n\n\t\t// At this point we may or may not have the right answer, Eq-3.2 has two solutions for x for any given eta, however the mapping in 3.2 is 1:1 with the sign of eta and x-sin^2(theta) being the same. So we can check if we have the right root of 3.2, and if not switch x for 1-x.  This transformation is motivated by the fact that the distribution is *almost* symmetric so 1-x will be in the right ball park for the solution:\n\t\tif ( (x-s2)*eta < 0.0 ) {\n\t\t\tx = 1.0 - x;\n\t\t}\n\t}\n\t// The final step is a few Newton-Raphson iterations to clean up our approximation for x, this is pretty cheap in general, and very cheap compared to an incomplete beta evaluation. The limits set on x come from the observation that the sign of eta and x-sin^2(theta) are the same.\n\tif ( eta < 0.0 ) {\n\t\tlower = 0.0;\n\t\tupper = s2;\n\t} else {\n\t\tlower = s2;\n\t\tupper = 1.0;\n\t}\n\t// If our initial approximation is out of bounds then bisect:\n\tif ( x < lower || x > upper ) {\n\t\tx = (lower+upper) / 2.0;\n\t}\n\troots = temmeRootFinder( -lu, alpha );\n\n\t// And iterate:\n\tx = newtonRaphsonIterate( roots, x, lower, upper, 32, 100 );\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default temme2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Maximum single-precision floating-point number.\n*\n* @module @stdlib/constants-float32-max\n* @type {number}\n*\n* @example\n* import FLOAT32_MAX from '@stdlib/constants-float32-max';\n* // returns 3.4028234663852886e+38\n*/\n\n\n// MAIN //\n\n/**\n* Maximum single-precision floating-point number.\n*\n* ## Notes\n*\n* The maximum is given by\n*\n* ```tex\n* 2^{127} (2 - 2^{-23})\n* ```\n*\n* @constant\n* @type {number}\n* @default 3.4028234663852886e+38\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT32_MAX = 3.4028234663852886e+38;\n\n\n// EXPORTS //\n\nexport default FLOAT32_MAX;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\nimport gammainc from '@stdlib/math-base-special-gammainc';\nimport abs from '@stdlib/math-base-special-abs';\nimport exp from '@stdlib/math-base-special-exp';\nimport ln from '@stdlib/math-base-special-ln';\nimport MAX_FLOAT32 from '@stdlib/constants-float32-max';\n\n\n// VARIABLES //\n\nvar debug = logger( 'gammaincinv:higher_newton' );\n\n\n// MAIN //\n\n/**\n* Implementation of the high order Newton-like method.\n*\n* @private\n* @param {number} x0 - initial value\n* @param {number} a - scale parameter\n* @param {number} m - indicator\n* @param {Probability} p - probability value\n* @param {Probability} q - probability value\n* @param {number} lgama - logarithm of scale parameter\n* @param {number} invfp - one over `fp`\n* @param {boolean} pcase - boolean indicating whether p < 0.5\n* @returns {number} function value of the inverse\n*/\nfunction higherNewton( x0, a, m, p, q, lgama, invfp, pcase ) {\n\tvar dlnr;\n\tvar xini;\n\tvar ck0;\n\tvar ck1;\n\tvar ck2;\n\tvar a2;\n\tvar x2;\n\tvar px;\n\tvar qx;\n\tvar xr;\n\tvar t;\n\tvar n;\n\tvar r;\n\tvar x;\n\n\tx = x0;\n\tt = 1;\n\tn = 1;\n\ta2 = a * a;\n\txini = x0;\n\tdo {\n\t\tx = x0;\n\t\tx2 = x * x;\n\t\tif ( m === 0 ) {\n\t\t\tdlnr = ( ( 1.0-a ) * ln( x ) ) + x + lgama;\n\t\t\tif ( dlnr > ln( MAX_FLOAT32 ) ) {\n\t\t\t\tdebug( 'Warning: overflow problems in one or more steps of the computation. The initial approximation to the root is returned.' );\n\t\t\t\treturn xini;\n\t\t\t}\n\t\t\tr = exp( dlnr );\n\t\t} else {\n\t\t\tr = -invfp * x;\n\t\t}\n\t\tif ( pcase ) {\n\t\t\t// Call: gammainc( x, s[, regularized = true ][, upper = false ] )\n\t\t\tpx = gammainc( x, a, true, false );\n\t\t\tck0 = -r * ( px - p );\n\t\t} else {\n\t\t\t// Call: gammainc( x, s[, regularized = true ][, upper = true ] )\n\t\t\tqx = gammainc( x, a, true, true );\n\t\t\tck0 = r * ( qx - q );\n\t\t}\n\t\tr = ck0;\n\t\tif ( ( p > 1e-120 ) || ( n > 1 ) ) {\n\t\t\tck1 = 0.5 * ( x - a + 1.0 ) / x;\n\t\t\tck2 = ( (2*x2) - (4*x*a) + (4*x) + (2*a2) - (3*a) + 1 ) / x2;\n\t\t\tck2 /= 6.0;\n\t\t\tx0 = x + ( r * ( 1.0 + ( r * ( ck1 + (r*ck2) ) ) ) );\n\t\t} else {\n\t\t\tx0 = x + r;\n\t\t}\n\t\tt = abs( ( x/x0 ) - 1.0 );\n\t\tn += 1;\n\t\tx = x0;\n\t\tif ( x < 0 ) {\n\t\t\tx = xini;\n\t\t\tn = 100;\n\t\t}\n\t} while ( ( ( t > 2e-14 ) && ( n < 35 ) ) );\n\tif ( ( t > 2e-14 ) || ( n > 99 ) ) {\n\t\tdebug( 'Warning: the number of iterations in the Newton method reached the upper limit N=35. The last value obtained for the root is given as output.' );\n\t}\n\txr = x || 0;\n\treturn xr;\n}\n\n\n// EXPORTS //\n\nexport default higherNewton;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math-base-special-abs';\nimport exp from '@stdlib/math-base-special-exp';\nimport ln from '@stdlib/math-base-special-ln';\nimport evalpoly from '@stdlib/math-base-tools-evalpoly';\nimport polyvalAK1 from './polyval_ak1.js';\nimport polyvalAK2 from './polyval_ak2.js';\n\n\n// VARIABLES //\n\nvar THRESHOLD = 1.0e-8;\nvar ONEO12 = 0.0833333333333333333333333333333;\nvar ONEO120 = 0.00833333333333333333333333333333;\n\n// Polynomial coefficient workspace:\nvar AK = [ 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 ]; // WARNING: not thread safe\n\n\n// MAIN //\n\n/**\n* Returns the positive number satisfying \\\\( \\eta^2/2=\\lambda-1-\\ln(\\lambda) \\\\) with \\\\( \\operatorname{sign}(\\lambda-1)=\\operatorname{sign}(\\eta) \\\\).\n*\n* @private\n* @param {number} eta - eta value\n* @returns {number} value satisfying equation\n*/\nfunction lambdaeta( eta ) {\n\tvar L2;\n\tvar L3;\n\tvar L4;\n\tvar L5;\n\tvar la;\n\tvar L;\n\tvar q;\n\tvar r;\n\tvar s;\n\n\ts = eta * eta * 0.5;\n\tif ( eta === 0.0 ) {\n\t\tla = 0.0;\n\t}\n\telse if ( eta < -1.0 ) {\n\t\tr = exp( -1.0 - s );\n\t\tla = polyvalAK1( r );\n\t}\n\telse if ( eta < 1.0 ) {\n\t\tr = eta;\n\t\tla = polyvalAK2( r );\n\t}\n\telse {\n\t\tr = 11.0 + s;\n\t\tL = ln( r );\n\t\tla = r + L;\n\t\tr = 1.0 / r;\n\t\tL2 = L * L;\n\t\tL3 = L2 * L;\n\t\tL4 = L3 * L;\n\t\tL5 = L4 * L;\n\t\tAK[ 1 ] = ( 2.0-L ) * 0.5;\n\t\tAK[ 2 ] = ( ( -9.0*L ) + 6.0 + ( 2.0*L2 ) ) / 6.0;\n\t\tAK[ 3 ] = -( (3*L3)+ (36*L) - (22*L2) - 12 ) * ONEO12;\n\t\tAK[ 4 ] = ( 60.0 + (350.0*L2) - (300.0*L) - (125.0*L3) + (12.0*L4) ) / 60.0; // eslint-disable-line max-len\n\t\tAK[ 5 ] = -(-120 - (274*L4) + (900*L) - (1700*L2) + (1125*L3) + (20*L5)) * ONEO120; // eslint-disable-line max-len\n\t\tla += ( L * r * evalpoly( AK, r ) );\n\t}\n\tr = 1.0;\n\tif (\n\t\t( eta > -3.5 && eta < -0.03 ) ||\n\t\t( eta > 0.03 && eta < 40.0 )\n\t) {\n\t\tr = 1.0;\n\t\tq = la;\n\t\tdo {\n\t\t\tla = q * ( s+ln(q) ) / ( q-1.0 );\n\t\t\tr = abs( ( q/la ) - 1.0 );\n\t\t\tq = la;\n\t\t} while ( r > THRESHOLD );\n\t}\n\treturn la;\n}\n\n\n// EXPORTS //\n\nexport default lambdaeta;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.0;\n\t}\n\treturn 0.0 + (x * (1.0 + (x * (1.0 + (x * (1.5 + (x * (2.6666666666666665 + (x * (5.208333333333333 + (x * 10.8))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 1.0;\n\t}\n\treturn 1.0 + (x * (1.0 + (x * (0.3333333333333333 + (x * (0.027777777777777776 + (x * (-0.003703703703703704 + (x * (0.0002314814814814815 + (x * 0.00005878894767783657))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\n// Chebyshev polynomial coefficients...\nvar A = [\n\t1.996379051590076518221,\n\t-0.17971032528832887213e-2,\n\t0.131292857963846713e-4,\n\t-0.2340875228178749e-6,\n\t0.72291210671127e-8,\n\t-0.3280997607821e-9,\n\t0.198750709010e-10,\n\t-0.15092141830e-11,\n\t0.1375340084e-12,\n\t-0.145728923e-13,\n\t0.17532367e-14,\n\t-0.2351465e-15,\n\t0.346551e-16,\n\t-0.55471e-17,\n\t0.9548e-18,\n\t-0.1748e-18,\n\t0.332e-19,\n\t-0.58e-20\n];\n\n\n// MAIN //\n\n/**\n* Computes the sum of a Chebyshev polynomial.\n*\n* @private\n* @param {PositiveInteger} n - degree of polynomial\n* @param {number} t - input value\n* @returns {number} Chebyshev sum\n*/\nfunction chepolsum( n, t ) {\n\tvar tt;\n\tvar u0;\n\tvar u1;\n\tvar u2;\n\tvar k;\n\n\tu0 = 0.0;\n\tu1 = 0.0;\n\ttt = t + t;\n\tk = n;\n\tdo {\n\t\tu2 = u1;\n\t\tu1 = u0;\n\t\tu0 = ( tt*u1 ) - u2 + A[ k ];\n\t\tk -= 1;\n\t} while ( k >= 0 );\n\treturn ( u0-u2 ) / 2.0;\n}\n\n\n// EXPORTS //\n\nexport default chepolsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport gammaln from '@stdlib/math-base-special-gammaln';\nimport ln from '@stdlib/math-base-special-ln';\nimport LN_SQRT_TWO_PI from '@stdlib/constants-float64-ln-sqrt-two-pi';\nimport SMALLEST_FLOAT32 from '@stdlib/constants-float32-smallest-normal';\nimport MAX_FLOAT32 from '@stdlib/constants-float32-max';\nimport chepolsum from './chepolsum.js';\nimport polyvalC from './polyval_c.js';\nimport polyvalD from './polyval_d.js';\n\n\n// VARIABLES //\n\nvar C6 = 0.30865217988013567769;\n\n\n// MAIN //\n\n/**\n* Computes the Stirling series corresponding to asymptotic series for the logarithm of the gamma function.\n*\n* ```tex\n* \\frac{1}{12x}-\\frac{1}{360x^3}\\ldots; x \\ge 3\n* ```\n*\n* @private\n* @param {number} x - input value\n* @returns {number} function value\n*/\nfunction stirling( x ) {\n\tvar z;\n\tif ( x < SMALLEST_FLOAT32 ) {\n\t\treturn MAX_FLOAT32;\n\t}\n\tif ( x < 1.0 ) {\n\t\treturn gammaln( x+1.0 ) - ( (x+0.5) * ln(x) ) + x - LN_SQRT_TWO_PI;\n\t}\n\tif ( x < 2.0 ) {\n\t\treturn gammaln( x ) - ( (x-0.5) * ln(x) ) + x - LN_SQRT_TWO_PI;\n\t}\n\tif ( x < 3.0 ) {\n\t\treturn gammaln( x-1.0 ) - ( (x-0.5) * ln(x) ) + x - LN_SQRT_TWO_PI + ln( x-1.0 ); // eslint-disable-line max-len\n\t}\n\tif ( x < 12.0 ) {\n\t\tz = ( 18.0/( x*x ) ) - 1.0;\n\t\treturn chepolsum( 17, z ) / ( 12.0*x );\n\t}\n\tz = 1.0 / ( x * x );\n\tif ( x < 1000.0 ) {\n\t\treturn polyvalC( z ) / ( C6+z ) / x;\n\t}\n\treturn polyvalD( z ) / x;\n}\n\n\n// EXPORTS //\n\nexport default stirling;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.025721014990011306;\n\t}\n\treturn 0.025721014990011306 + (x * (0.08247596616699963 + (x * (-0.0025328157302663564 + (x * (0.0006099292666946337 + (x * (-0.00033543297638406 + (x * 0.000250505279903))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.08333333333333333;\n\t}\n\treturn 0.08333333333333333 + (x * (-0.002777777777777778 + (x * (0.0007936507936507937 + (x * -0.0005952380952380953))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport exp from '@stdlib/math-base-special-exp';\nimport gamma from '@stdlib/math-base-special-gamma';\nimport ln from '@stdlib/math-base-special-ln';\nimport FLOAT32_MAX from '@stdlib/constants-float32-max';\nimport SQRT_TWO_PI from '@stdlib/constants-float64-sqrt-two-pi';\nimport stirling from './stirling.js';\n\n\n// MAIN //\n\n/**\n* Computes the regulated gamma function.\n*\n* @private\n* @param {number} x - input value\n* @returns {number} function value\n*/\nfunction gamstar( x ) {\n\tif ( x >= 3.0 ) {\n\t\treturn exp( stirling(x) );\n\t}\n\tif ( x > 0.0 ) {\n\t\treturn gamma(x) / ( exp( -x + ( ( x-0.5 ) * ln(x) ) ) * SQRT_TWO_PI );\n\t}\n\t// Case: x <= 0.0\n\treturn FLOAT32_MAX;\n}\n\n\n// EXPORTS //\n\nexport default gamstar;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-statements */\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\nimport evalpoly from '@stdlib/math-base-tools-evalpoly';\nimport gammaln from '@stdlib/math-base-special-gammaln';\nimport erfcinv from '@stdlib/math-base-special-erfcinv';\nimport gamma from '@stdlib/math-base-special-gamma';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport abs from '@stdlib/math-base-special-abs';\nimport exp from '@stdlib/math-base-special-exp';\nimport min from '@stdlib/math-base-special-min';\nimport pow from '@stdlib/math-base-special-pow';\nimport ln from '@stdlib/math-base-special-ln';\nimport SQRT_TWO_PI from '@stdlib/constants-float64-sqrt-two-pi';\nimport MAX_FLOAT32 from '@stdlib/constants-float32-max';\nimport TWO_PI from '@stdlib/constants-float64-two-pi';\nimport higherNewton from './higher_newton.js';\nimport lambdaeta from './lambdaeta.js';\nimport gamstar from './gamstar.js';\nimport eps1 from './eps1.js';\nimport eps2 from './eps2.js';\nimport eps3 from './eps3.js';\n\n\n// VARIABLES //\n\nvar debug = logger( 'gammaincinv:compute' );\nvar HALF = 0.5;\nvar ONEO3 = 0.333333333333333333333333333333;\nvar ONEO4 = 0.25;\nvar ONEO5 = 0.2;\nvar ONEO6 = 0.166666666666666666666666666667;\nvar ONEO12 = 0.0833333333333333333333333333333;\nvar ONEO24 = 0.0416666666666666666666666666667;\n\n// Coefficient workspace:\nvar CK = [ 0.0, 0.0, 0.0, 0.0, 0.0 ]; // WARNING: not thread safe\n\n\n// MAIN //\n\n/**\n* Computes `x` in the equations `P(a,xr) = p` and `Q(a,xr) = q`, where `a` is a positive parameter and `p` and `q` satisfy `p+q = 1`.\n*\n* ## Notes\n*\n* -   The equation is inverted with `min(p,q)`.\n*\n* @private\n* @param {number} a - scale value of incomplete gamma function\n* @param {Probability} p - probability value\n* @param {Probability} q - probability value\n* @returns {number} solution of the equations `P(a,xr) = p` and `Q(a,xr) = q` where `a` is a positive parameter\n*/\nfunction compute( a, p, q ) {\n\tvar ap1inv;\n\tvar invfp;\n\tvar lgama;\n\tvar pcase;\n\tvar porq;\n\tvar ainv;\n\tvar logr;\n\tvar ap22;\n\tvar ap14;\n\tvar ap13;\n\tvar ap12;\n\tvar vgam;\n\tvar vmin;\n\tvar xini;\n\tvar ap1;\n\tvar ap2;\n\tvar ap3;\n\tvar eta;\n\tvar p6;\n\tvar p5;\n\tvar x0;\n\tvar a2;\n\tvar L2;\n\tvar L3;\n\tvar L4;\n\tvar b2;\n\tvar b3;\n\tvar p3;\n\tvar a4;\n\tvar fp;\n\tvar p4;\n\tvar p2;\n\tvar a3;\n\tvar xr;\n\tvar ck;\n\tvar b;\n\tvar L;\n\tvar i;\n\tvar k;\n\tvar m;\n\tvar r;\n\tvar s;\n\tvar t;\n\tvar y;\n\n\tif ( p < HALF ) {\n\t\tpcase = true;\n\t\tporq = p;\n\t\ts = -1.0;\n\t} else {\n\t\tpcase = false;\n\t\tporq = q;\n\t\ts = 1.0;\n\t}\n\tk = 0;\n\tif ( abs( a-1.0 ) < 1.0e-4 ) {\n\t\tm = 0;\n\t\tif ( pcase ) {\n\t\t\tif ( p < 1.0e-3 ) {\n\t\t\t\tp2 = p * p;\n\t\t\t\tp3 = p2 * p;\n\t\t\t\tp4 = p3 * p;\n\t\t\t\tp5 = p4 * p;\n\t\t\t\tp6 = p5 * p;\n\t\t\t\tx0 = p + ( p2*HALF ) + ( p3*(ONEO3) ) + ( p4*ONEO4 ) + ( p5*ONEO5 ) + ( p6*(ONEO6) ); // eslint-disable-line max-len\n\t\t\t} else {\n\t\t\t\tx0 = -ln( 1.0-p );\n\t\t\t}\n\t\t} else {\n\t\t\tx0 = -ln( q );\n\t\t}\n\t\tif ( a === 1.0 ) {\n\t\t\tk = 2;\n\t\t\txr = x0;\n\t\t} else {\n\t\t\tlgama = gammaln( a );\n\t\t\tk = 1;\n\t\t}\n\t}\n\tif ( q < 1.0e-30 && a < HALF ) {\n\t\tm = 0;\n\t\tx0 = -ln( q*gamma(a) ) + ( ( a-1.0 ) * ln( -ln( q*gamma(a) ) ));\n\t\tk = 1;\n\t\tlgama = gammaln( a );\n\t}\n\tif ( a > 1.0 && a < 500.0 && p < 1.0e-80 ) {\n\t\tm = 0;\n\t\tainv = 1.0 / a;\n\t\tap1inv = 1.0 / ( a+1.0 );\n\t\tx0 = ( gammaln( a+1.0 ) + ln( p ) ) * ainv;\n\t\tx0 = exp( x0 );\n\t\txini = x0;\n\t\tfor ( i = 0; i < 10; i++ ) {\n\t\t\tx0 = xini * exp( x0*ainv ) * pow( 1.0-( x0*ap1inv ), ainv );\n\t\t}\n\t\tk = 1;\n\t\tlgama = gammaln( a );\n\t}\n\n\tlogr = (1.0/a) * ( ln(p) + gammaln( a+1.0 ) );\n\tif ( ( logr < ln( ONEO5 * ( 1.0+a ) ) ) && ( k === 0 ) ) {\n\t\tr = exp( logr );\n\t\tm = 0;\n\t\ta2 = a * a;\n\t\ta3 = a2 * a;\n\t\ta4 = a3 * a;\n\t\tap1 = a + 1.0;\n\t\tap12 = ap1 * ap1;\n\t\tap13 = ap1 * ap12;\n\t\tap14 = ap12 * ap12;\n\t\tap2 = a + 2.0;\n\t\tap22 = ap2 * ap2;\n\t\tap3 = a + 3.0;\n\t\tCK[ 0 ] = 1.0;\n\t\tCK[ 1 ] = 1.0 / ap1;\n\t\tCK[ 2 ] = HALF * ( ( 3.0*a ) + 5.0 ) / ( ap12*ap2 );\n\t\tCK[ 3 ] = ONEO3 * ( 31.0 + (8.0*a2) + (33.0*a) ) / ( ap13*ap2*ap3 );\n\t\tCK[ 4 ] = ONEO24 * ( 2888.0 + (1179.0*a3) + (125.0*a4) + (3971.0*a2) + (5661.0*a) ) / ( ap14*ap22*ap3*( a+4.0 ) ); // eslint-disable-line max-len\n\t\tx0 = r * evalpoly( CK, r );\n\t\tlgama = gammaln( a );\n\t\tk = 1;\n\t}\n\tif ( ( a < 10.0 ) && ( k === 0 ) ) {\n\t\tvgam = sqrt( a ) / ( gamstar(a)*SQRT_TWO_PI );\n\t\tvmin = min( 0.02, vgam );\n\t\tif ( q < vmin ) {\n\t\t\tm = 0;\n\t\t\tb = 1.0 - a;\n\t\t\tb2 = b * b;\n\t\t\tb3 = b2 * b;\n\t\t\teta = sqrt( -2.0/a * ln( q/vgam ) );\n\t\t\tx0 = a * lambdaeta( eta );\n\t\t\tL = ln( x0 );\n\t\t\tif ( x0 > 5.0 ) {\n\t\t\t\tL2 = L * L;\n\t\t\t\tL3 = L2 * L;\n\t\t\t\tL4 = L3 * L;\n\t\t\t\tr = 1.0 / x0;\n\t\t\t\tCK[ 0 ] = L - 1.0;\n\t\t\t\tCK[ 1 ] = ( (3.0*b) - (2.0*b*L) + L2 - ( 2.0*L ) + 2.0 ) * HALF;\n\t\t\t\tCK[ 2 ] =( (24.0*b*L) - (11.0*b2) - (24.0*b) - (6.0*L2) + (12.0*L) - 12.0 - (9.0*b*L2) + (6.0*b2*L) + (2.0*L3) ) * ONEO6; // eslint-disable-line max-len\n\t\t\t\tCK[ 3 ] = ( (-12.0*b3*L) + (8.04*b*L2) - (114.0*b2*L) + (72.0+(36.0*L2)) + (((3.0*L4)-(72.0*L)+162.0) * (b-(168.0*b*L))) - ((12.0*L3)+(25.0*b3)) - ( (22.0*b*L3)+(36.0*b2*L2)+(120.0*b2) ) ) * ONEO12; // eslint-disable-line max-len\n\t\t\t\tCK[ 4 ] = 0.0;\n\t\t\t\tx0 = x0 - L + ( b*r*evalpoly( CK, r ) );\n\t\t\t} else {\n\t\t\t\tr = 1.0 / x0;\n\t\t\t\tL2 = L * L;\n\t\t\t\tck = L - 1.0;\n\t\t\t\tt = L - (b*r*ck);\n\t\t\t\tif ( t < x0 ) {\n\t\t\t\t\tx0 -= t;\n\t\t\t\t}\n\t\t\t}\n\t\t\tlgama = gammaln( a );\n\t\t\tk = 1;\n\t\t}\n\t}\n\tif ( ( abs( porq-HALF ) < 1.0e-5 ) && ( k === 0 ) ) {\n\t\tm = 0;\n\t\tainv = 1.0 / a;\n\t\tx0 = a - ONEO3 + ( ( 0.0197530864197530864197530864198 +\n\t\t\t( 0.00721144424848128551832255535959*ainv ) ) * ainv );\n\t\tlgama = gammaln( a );\n\t\tk = 1;\n\t}\n\tif ( ( a < 1.0 ) && ( k === 0 ) ) {\n\t\tm = 0;\n\t\tif (pcase) {\n\t\t\tx0 = exp( (1.0/a) * ( ln(porq) + gammaln(a+1.0) ) );\n\t\t} else {\n\t\t\tx0 = exp( (1.0/a) * ( ln(1.0-porq) + gammaln(a+1.0) ) );\n\t\t}\n\t\tlgama = gammaln( a );\n\t\tk = 1;\n\t}\n\tif ( k === 0 ) {\n\t\tm = 1;\n\t\tainv = 1.0 / a;\n\t\tr = erfcinv( 2.0 * porq );\n\t\teta = s * r / sqrt( a*HALF );\n\t\tif ( r < MAX_FLOAT32 ) {\n\t\t\teta += ( eps1(eta) + ( (eps2(eta)+(eps3(eta)*ainv))*ainv ) ) * ainv;\n\t\t\tx0 = a * lambdaeta(eta);\n\t\t\ty = eta;\n\t\t\tfp = -sqrt( a/TWO_PI ) * exp( -HALF*a*y*y ) / ( gamstar(a) );\n\t\t\tinvfp = 1.0 / fp;\n\t\t} else {\n\t\t\tdebug( 'Warning: Overflow problems in one or more steps of the computation.' );\n\t\t\treturn NaN;\n\t\t}\n\t}\n\tif ( k < 2 ) {\n\t\txr = higherNewton( x0, a, m, p, q, lgama, invfp, pcase );\n\t}\n\treturn xr;\n}\n\n\n// EXPORTS //\n\nexport default compute;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math-base-special-abs';\nimport ln from '@stdlib/math-base-special-ln';\nimport lambdaeta from './lambdaeta.js';\nimport rateval from './rational_ak0bk0.js';\n\n\n// MAIN //\n\n/**\n* Evaluates the `eps1` function.\n*\n* @private\n* @param {number} eta - eta value\n* @returns {number} function value\n*/\nfunction eps1( eta ) {\n\tvar la;\n\tif ( abs( eta ) < 1.0 ) {\n\t\treturn rateval( eta );\n\t}\n\tla = lambdaeta( eta );\n\treturn ln( eta / ( la - 1.0 ) ) / eta;\n}\n\n\n// EXPORTS //\n\nexport default eps1;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn -0.3333333333438;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = -0.3333333333438 + (x * (-0.2070740359969 + (x * (-0.05041806657154 + (x * (-0.004923635739372 + (x * -0.00004293658292782))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (0.7045554412463 + (x * (0.2118190062224 + (x * (0.03048648397436 + (x * 0.001605037988091))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = -0.00004293658292782 + (x * (-0.004923635739372 + (x * (-0.05041806657154 + (x * (-0.2070740359969 + (x * -0.3333333333438))))))); // eslint-disable-line max-len\n\t\ts2 = 0.001605037988091 + (x * (0.03048648397436 + (x * (0.2118190062224 + (x * (0.7045554412463 + (x * 1.0))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport ln from '@stdlib/math-base-special-ln';\nimport rateval1 from './rational_ak1bk1.js';\nimport rateval2 from './rational_ak2bk2.js';\nimport rateval3 from './rational_ak3bk3.js';\n\n\n// MAIN //\n\n/**\n* Evaluates the `eps2` function.\n*\n* @private\n* @param {number} eta - eta value\n* @returns {number} function value\n*/\nfunction eps2( eta ) {\n\tvar lnmeta;\n\tvar x;\n\tif ( eta < -5.0 ) {\n\t\tx = eta * eta;\n\t\tlnmeta = ln( -eta );\n\t\treturn ( 12.0 - x - ( 6.0*( lnmeta*lnmeta ) ) ) / ( 12.0*x*eta );\n\t}\n\tif ( eta < -2.0 ) {\n\t\treturn rateval1( eta );\n\t}\n\tif ( eta < 2.0 ) {\n\t\treturn rateval2( eta );\n\t}\n\tif ( eta < 1000.0 ) {\n\t\tx = 1.0 / eta;\n\t\treturn rateval3( eta ) / ( -12.0*eta );\n\t}\n\treturn -1.0 / ( 12.0 * eta );\n}\n\n\n// EXPORTS //\n\nexport default eps2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn -0.0172847633523;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = -0.0172847633523 + (x * (-0.0159372646475 + (x * (-0.00464910887221 + (x * (-0.00060683488776 + (x * -0.00000614830384279))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (0.764050615669 + (x * (0.297143406325 + (x * (0.0579490176079 + (x * 0.00574558524851))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = -0.00000614830384279 + (x * (-0.00060683488776 + (x * (-0.00464910887221 + (x * (-0.0159372646475 + (x * -0.0172847633523))))))); // eslint-disable-line max-len\n\t\ts2 = 0.00574558524851 + (x * (0.0579490176079 + (x * (0.297143406325 + (x * (0.764050615669 + (x * 1.0))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn -0.0172839517431;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = -0.0172839517431 + (x * (-0.0146362417966 + (x * (-0.00357406772616 + (x * (-0.000391032032692 + (x * 0.00000249634036069))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (0.690560400696 + (x * (0.249962384741 + (x * (0.0443843438769 + (x * 0.00424073217211))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = 0.00000249634036069 + (x * (-0.000391032032692 + (x * (-0.00357406772616 + (x * (-0.0146362417966 + (x * -0.0172839517431))))))); // eslint-disable-line max-len\n\t\ts2 = 0.00424073217211 + (x * (0.0443843438769 + (x * (0.249962384741 + (x * (0.690560400696 + (x * 1.0))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn 0.99994466948;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = 0.99994466948 + (x * (104.649839762 + (x * (857.204033806 + (x * (731.901559577 + (x * 45.5174411671))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (104.526456943 + (x * (823.313447808 + (x * (3119.93802124 + (x * 3970.03311219))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = 45.5174411671 + (x * (731.901559577 + (x * (857.204033806 + (x * (104.649839762 + (x * 0.99994466948))))))); // eslint-disable-line max-len\n\t\ts2 = 3970.03311219 + (x * (3119.93802124 + (x * (823.313447808 + (x * (104.526456943 + (x * 1.0))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport ln from '@stdlib/math-base-special-ln';\nimport rational1 from './rational_ak4bk4.js';\nimport rational2 from './rational_ak5bk5.js';\nimport rational3 from './rational_ak6bk6.js';\nimport rational4 from './rational_ak7bk7.js';\nimport rational5 from './rational_ak8bk8.js';\n\n\n// MAIN //\n\n/**\n* Evaluates the `eps3` function.\n*\n* @private\n* @param {number} eta - eta value\n* @returns {number} function value\n*/\nfunction eps3( eta ) {\n\tvar x;\n\tvar y;\n\n\tif ( eta < -8.0 ) {\n\t\tx = eta * eta;\n\t\ty = ln( -eta ) / eta;\n\t\treturn ( -30.0 + ( eta*y*( (6.0*x*y*y)-12.0+x ) ) ) / ( 12.0*eta*x*x );\n\t}\n\tif ( eta < -4.0 ) {\n\t\treturn rational1( eta ) / ( eta*eta );\n\t}\n\tif ( eta < -2.0 ) {\n\t\treturn rational2( eta );\n\t}\n\tif ( eta < 2.0 ) {\n\t\treturn rational3( eta );\n\t}\n\tif ( eta < 10.0 ) {\n\t\tx = 1.0 / eta;\n\t\treturn rational4( x ) / ( eta*eta );\n\t}\n\tif ( eta < 100.0 ) {\n\t\tx = 1.0 / eta;\n\t\treturn rational5( x ) / ( eta*eta );\n\t}\n\treturn -ln( eta ) / ( 12.0*eta*eta*eta );\n}\n\n\n// EXPORTS //\n\nexport default eps3;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn 0.0495346498136;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = 0.0495346498136 + (x * (0.0299521337141 + (x * (0.00688296911516 + (x * (0.000512634846317 + (x * -0.0000201411722031))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (0.759803615283 + (x * (0.261547111595 + (x * (0.0464854522477 + (x * 0.00403751193496))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = -0.0000201411722031 + (x * (0.000512634846317 + (x * (0.00688296911516 + (x * (0.0299521337141 + (x * 0.0495346498136))))))); // eslint-disable-line max-len\n\t\ts2 = 0.00403751193496 + (x * (0.0464854522477 + (x * (0.261547111595 + (x * (0.759803615283 + (x * 1.0))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn 0.00452313583942;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = 0.00452313583942 + (x * (0.00120744920113 + (x * (-0.0000789724156582 + (x * (-0.0000504476066942 + (x * -0.00000535770949796))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (0.912203410349 + (x * (0.405368773071 + (x * (0.0901638932349 + (x * 0.00948935714996))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = -0.00000535770949796 + (x * (-0.0000504476066942 + (x * (-0.0000789724156582 + (x * (0.00120744920113 + (x * 0.00452313583942))))))); // eslint-disable-line max-len\n\t\ts2 = 0.00948935714996 + (x * (0.0901638932349 + (x * (0.405368773071 + (x * (0.912203410349 + (x * 1.0))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn 0.00439937562904;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = 0.00439937562904 + (x * (0.000487225670639 + (x * (-0.000128470657374 + (x * (0.00000529110969589 + (x * 1.5716677175e-7))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (0.794435257415 + (x * (0.333094721709 + (x * (0.0703527806143 + (x * 0.00806110846078))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = 1.5716677175e-7 + (x * (0.00000529110969589 + (x * (-0.000128470657374 + (x * (0.000487225670639 + (x * 0.00439937562904))))))); // eslint-disable-line max-len\n\t\ts2 = 0.00806110846078 + (x * (0.0703527806143 + (x * (0.333094721709 + (x * (0.794435257415 + (x * 1.0))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn -0.0011481191232;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = -0.0011481191232 + (x * (-0.112850923276 + (x * (1.51623048511 + (x * (-0.218472031183 + (x * 0.0730002451555))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (14.2482206905 + (x * (69.7360396285 + (x * (218.938950816 + (x * 277.067027185))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = 0.0730002451555 + (x * (-0.218472031183 + (x * (1.51623048511 + (x * (-0.112850923276 + (x * -0.0011481191232))))))); // eslint-disable-line max-len\n\t\ts2 = 277.067027185 + (x * (218.938950816 + (x * (69.7360396285 + (x * (14.2482206905 + (x * 1.0))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn -0.000145727889667;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = -0.000145727889667 + (x * (-0.290806748131 + (x * (-13.308504545 + (x * (199.722374056 + (x * -11.4311378756))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (139.612587808 + (x * (2189.01116348 + (x * (7115.24019009 + (x * 45574.6081453))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = -11.4311378756 + (x * (199.722374056 + (x * (-13.308504545 + (x * (-0.290806748131 + (x * -0.000145727889667))))))); // eslint-disable-line max-len\n\t\ts2 = 45574.6081453 + (x * (7115.24019009 + (x * (2189.01116348 + (x * (139.612587808 + (x * 1.0))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* Translated from the Fortran module by\n* ----------------------------------------------------------------------\n* Authors:\n*  Amparo Gil    (U. Cantabria, Santander, Spain)\n*                 e-mail: amparo.gil@unican.es\n*  Javier Segura (U. Cantabria, Santander, Spain)\n*                 e-mail: javier.segura@unican.es\n*  Nico M. Temme (CWI, Amsterdam, The Netherlands)\n*                 e-mail: nico.temme@cwi.nl\n* ---------------------------------------------------------------------\n*/\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport FLOAT32_SMALLEST from '@stdlib/constants-float32-smallest-normal';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport compute from './compute.js';\n\n\n// MAIN //\n\n/**\n* Inverts the lower gamma function; i.e., computes `xr` such that `P(a,xr) = p`.\n*\n* ## Method\n*\n* The present code uses different methods of computation depending on the values of the input values: Taylor, asymptotic expansions and high-order Newton methods.\n*\n* ## Notes\n*\n* -   The claimed accuracy obtained using this inversion routine is near `1e-12`.\n*\n* ## References\n*\n* -   A. Gil, J. Segura and N.M. Temme, GammaCHI: a package for the inversion and computation of the gamma and chi-square distribution functions (central and noncentral). Computer Physics Commun\n* -   A. Gil, J. Segura and N.M. Temme. Efficient and accurate algorithms for the computation and inversion of the incomplete gamma function ratios. SIAM J Sci Comput. (2012) 34(6), A2965-A2981\n*\n*\n* @param {Probability} p - probability value\n* @param {number} a - scale parameter\n* @param {boolean} [upper=false] - boolean indicating if the function should invert the upper tail of the incomplete gamma function instead; i.e., compute `xr` such that `Q(a,xr) = p`.\n* @returns {number} function value of the inverse\n*/\nfunction gammaincinv( p, a, upper ) {\n\tif ( isnan( p ) || isnan( a ) ) {\n\t\treturn NaN;\n\t}\n\tif ( a < FLOAT32_SMALLEST ) {\n\t\treturn NaN;\n\t}\n\tif ( p > 1.0 || p < 0.0 ) {\n\t\treturn NaN;\n\t}\n\t// Case: invert upper gamma function\n\tif ( upper === true ) {\n\t\tif ( p === 0.0 ) {\n\t\t\treturn PINF;\n\t\t}\n\t\tif ( p === 1.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn compute( a, 1.0-p, p );\n\t}\n\t// Default: invert lower gamma function\n\tif ( p === 0.0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( p === 1.0 ) {\n\t\treturn PINF;\n\t}\n\treturn compute( a, p, 1.0-p );\n}\n\n\n// EXPORTS //\n\nexport default gammaincinv;\n","/* eslint-disable max-statements, max-lines */\n\n/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_62_0/boost/math/special_functions/detail/ibeta_inverse.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* Copyright John Maddock 2006.\n* Copyright Paul A. Bristow 2007.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport evalpoly from '@stdlib/math-base-tools-evalpoly';\nimport betainc from '@stdlib/math-base-special-betainc';\nimport expm1 from '@stdlib/math-base-special-expm1';\nimport log1p from '@stdlib/math-base-special-log1p';\nimport asin from '@stdlib/math-base-special-asin';\nimport beta from '@stdlib/math-base-special-beta';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport abs from '@stdlib/math-base-special-abs';\nimport exp from '@stdlib/math-base-special-exp';\nimport pow from '@stdlib/math-base-special-pow';\nimport sin from '@stdlib/math-base-special-sin';\nimport max from '@stdlib/math-base-special-max';\nimport min from '@stdlib/math-base-special-min';\nimport ln from '@stdlib/math-base-special-ln';\nimport FLOAT64_MIN_NORM from '@stdlib/constants-float64-smallest-normal';\nimport HALF_PI from '@stdlib/constants-float64-half-pi';\nimport EPSILON from '@stdlib/constants-float64-eps';\nimport findIBetaInvFromTDist from './find_ibeta_inv_from_t_dist.js';\nimport temme1 from './temme1.js';\nimport temme2 from './temme2.js';\nimport temme3 from './temme3.js';\nimport halleyIterate from './halley_iterate.js';\nimport ibetaRoots from './ibeta_roots.js';\n\n\n// VARIABLES //\n\nvar DIGITS = 32;\nvar MAX_ITERATIONS = 1000;\n\n// Workspace for the polynomial coefficients:\nvar terms = [ 0.0, 0.0, 0.0, 0.0, 0.0 ]; // WARNING: not thread safe\n\n\n// MAIN //\n\n/**\n* Calculates the inverse of the incomplete beta function.\n*\n* @private\n* @param {PositiveNumber} a - function parameter\n* @param {PositiveNumber} b - function parameter\n* @param {Probability} p - function parameter\n* @param {Probability} q - probability equal to `1 - p`\n* @returns {Array} two-element array holding function value `y` and `1-y`\n*/\nfunction ibetaInvImp( a, b, p, q ) {\n\tvar digits;\n\tvar invert;\n\tvar lambda;\n\tvar lower;\n\tvar theta;\n\tvar upper;\n\tvar roots;\n\tvar maxv;\n\tvar minv;\n\tvar bet;\n\tvar ppa;\n\tvar tmp;\n\tvar xs2;\n\tvar ap1;\n\tvar bm1;\n\tvar fs;\n\tvar lx;\n\tvar ps;\n\tvar xg;\n\tvar xs;\n\tvar yp;\n\tvar a2;\n\tvar a3;\n\tvar b2;\n\tvar r;\n\tvar l;\n\tvar u;\n\tvar x;\n\tvar y;\n\n\t// The flag invert is set to true if we swap a for b and p for q, in which case the result has to be subtracted from 1:\n\tinvert = false;\n\n\t// Handle trivial cases first...\n\tif ( q === 0.0 ) {\n\t\treturn [ 1.0, 0.0 ];\n\t}\n\tif ( p === 0.0 ) {\n\t\treturn [ 0.0, 1.0 ];\n\t}\n\tif ( a === 1.0 ) {\n\t\tif ( b === 1.0 ) {\n\t\t\treturn [ p, 1.0-p ];\n\t\t}\n\t\t// Change things around so we can handle as b == 1 special case below:\n\t\ttmp = b;\n\t\tb = a;\n\t\ta = tmp;\n\n\t\ttmp = q;\n\t\tq = p;\n\t\tp = tmp;\n\n\t\tinvert = true;\n\t}\n\t// Depending upon which approximation method we use, we may end up calculating either x or y initially (where y = 1-x):\n\tx = 0.0; // Set to a safe zero to avoid a\n\n\t// For some of the methods we can put tighter bounds on the result than simply [0,1]:\n\tlower = 0.0;\n\tupper = 1.0;\n\n\t// Student's T with b = 0.5 gets handled as a special case, swap around if the arguments are in the \"wrong\" order:\n\tif ( a === 0.5 ) {\n\t\tif ( b === 0.5 ) {\n\t\t\tx = sin( p*HALF_PI );\n\t\t\tx *= x;\n\t\t\ty = sin( q*HALF_PI );\n\t\t\ty *= y;\n\t\t\treturn [ x, y ];\n\t\t}\n\t\tif ( b > 0.5 ) {\n\t\t\ttmp = b;\n\t\t\tb = a;\n\t\t\ta = tmp;\n\n\t\t\ttmp = q;\n\t\t\tq = p;\n\t\t\tp = tmp;\n\n\t\t\tinvert = !invert;\n\t\t}\n\t}\n\t// Select calculation method for the initial estimate:\n\tif ( b === 0.5 && a >= 0.5 && p !== 1.0 ) {\n\t\t// We have a Student's T distribution:\n\t\typ = {};\n\t\tx = findIBetaInvFromTDist( a, p, yp );\n\t\ty = yp.value;\n\t}\n\telse if ( b === 1.0 ) {\n\t\tif ( p < q ) {\n\t\t\tif ( a > 1.0 ) {\n\t\t\t\tx = pow( p, 1.0/a );\n\t\t\t\ty = -expm1( ln(p) / a );\n\t\t\t} else {\n\t\t\t\tx = pow( p, 1.0/a );\n\t\t\t\ty = 1.0 - x;\n\t\t\t}\n\t\t} else {\n\t\t\tx = exp( log1p(-q) / a );\n\t\t\ty = -expm1( log1p(-q) / a );\n\t\t}\n\t\tif ( invert ) {\n\t\t\ttmp = y;\n\t\t\ty = x;\n\t\t\tx = tmp;\n\t\t}\n\t\treturn [ x, y ];\n\t}\n\telse if ( a+b > 5.0 ) {\n\t\t// When a+b is large then we can use one of Prof Temme's asymptotic expansions, begin by swapping things around so that p < 0.5, we do this to avoid cancellations errors when p is large.\n\t\tif ( p > 0.5 ) {\n\t\t\ttmp = b;\n\t\t\tb = a;\n\t\t\ta = tmp;\n\n\t\t\ttmp = q;\n\t\t\tq = p;\n\t\t\tp = tmp;\n\n\t\t\tinvert = !invert;\n\t\t}\n\t\tminv = min( a, b );\n\t\tmaxv = max( a, b );\n\t\tif ( ( sqrt(minv) > (maxv-minv) ) && minv > 5.0 ) {\n\t\t\t// When a and b differ by a small amount the curve is quite symmetrical and we can use an error function to approximate the inverse. This is the cheapest of the three Temme expansions, and the calculated value for x will never be much larger than p, so we don't have to worry about cancellation as long as p is small.\n\t\t\tx = temme1( a, b, p );\n\t\t\ty = 1.0 - x;\n\t\t} else {\n\t\t\tr = a + b;\n\t\t\ttheta = asin( sqrt( a/r ) );\n\t\t\tlambda = minv / r;\n\t\t\tif (\n\t\t\t\tlambda >= 0.2 &&\n\t\t\t\tlambda <= 0.8 &&\n\t\t\t\tr >= 10\n\t\t\t) {\n\t\t\t\t// The second error function case is the next cheapest to use, it breaks down when the result is likely to be very small, if `a+b` is also small, but we can use a cheaper expansion there in any case. As before `x` won't be much larger than `p`, so as long as `p` is small we should be free of cancellation error.\n\t\t\t\tppa = pow( p, 1.0/a );\n\t\t\t\tif ( ppa < 0.0025 && ( a+b ) < 200.0 ) {\n\t\t\t\t\tx = ppa * pow( a*beta( a, b ), 1.0/a );\n\t\t\t\t} else {\n\t\t\t\t\tx = temme2( p, r, theta );\n\t\t\t\t}\n\t\t\t\ty = 1.0 - x;\n\t\t\t} else {\n\t\t\t\t// If we get here then a and b are very different in magnitude and we need to use the third of Temme's methods which involves inverting the incomplete gamma.  This is much more expensive than the other methods.  We also can only use this method when a > b, which can lead to cancellation errors if we really want y (as we will when x is close to 1), so a different expansion is used in that case.\n\t\t\t\tif ( a < b ) {\n\t\t\t\t\ttmp = b;\n\t\t\t\t\tb = a;\n\t\t\t\t\ta = tmp;\n\n\t\t\t\t\ttmp = q;\n\t\t\t\t\tq = p;\n\t\t\t\t\tp = tmp;\n\t\t\t\t\tinvert = !invert;\n\t\t\t\t}\n\t\t\t\t// Try and compute the easy way first:\n\t\t\t\tbet = 0.0;\n\t\t\t\tif ( b < 2.0 ) {\n\t\t\t\t\tbet = beta( a, b );\n\t\t\t\t}\n\t\t\t\tif ( bet === 0.0 ) {\n\t\t\t\t\ty = 1.0;\n\t\t\t\t} else {\n\t\t\t\t\ty = pow( b*q*bet, 1.0/b );\n\t\t\t\t\tx = 1.0 - y;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( y > 1.0e-5 ) {\n\t\t\t\tx = temme3( a, b, p, q );\n\t\t\t\ty = 1.0 - x;\n\t\t\t}\n\t\t}\n\t}\n\telse if ( a < 1.0 && b < 1.0 ) {\n\t\t// Both a and b less than 1, there is a point of inflection at xs:\n\t\txs = ( 1.0-a ) / ( 2.0-a-b );\n\n\t\t// Now we need to ensure that we start our iteration from the right side of the inflection point:\n\t\tfs = betainc( xs, a, b ) - p;\n\t\tif ( abs(fs)/p < EPSILON*3.0 ) {\n\t\t\t// The result is at the point of inflection, best just return it:\n\t\t\tif ( invert ) {\n\t\t\t\treturn [ 1.0-xs, xs ];\n\t\t\t}\n\t\t\treturn [ xs, 1.0-xs ];\n\t\t}\n\t\tif ( fs < 0.0 ) {\n\t\t\ttmp = b;\n\t\t\tb = a;\n\t\t\ta = tmp;\n\n\t\t\ttmp = q;\n\t\t\tq = p;\n\t\t\tp = tmp;\n\n\t\t\tinvert = !invert;\n\t\t\txs = 1.0 - xs;\n\t\t}\n\t\txg = pow( a*p*beta( a, b ), 1.0/a );\n\t\tx = xg / ( 1.0+xg );\n\t\ty = 1.0 / ( 1.0+xg );\n\n\t\t// And finally we know that our result is below the inflection point, so set an upper limit on our search:\n\t\tif ( x > xs ) {\n\t\t\tx = xs;\n\t\t}\n\t\tupper = xs;\n\t}\n\telse if ( a > 1.0 && b > 1.0 ) {\n\t\t// Small a and b, both greater than 1, there is a point of inflection at xs, and it's complement is xs2, we must always start our iteration from the right side of the point of inflection.\n\t\txs = ( a-1.0 ) / ( a+b-2.0 );\n\t\txs2 = ( b-1.0 ) / ( a+b-2.0 );\n\t\tps = betainc( xs, a, b ) - p;\n\n\t\tif ( ps < 0.0 ) {\n\t\t\ttmp = b;\n\t\t\tb = a;\n\t\t\ta = tmp;\n\n\t\t\ttmp = q;\n\t\t\tq = p;\n\t\t\tp = tmp;\n\n\t\t\ttmp = xs2;\n\t\t\txs2 = xs;\n\t\t\txs = tmp;\n\n\t\t\tinvert = !invert;\n\t\t}\n\t\t// Estimate x and y, using expm1 to get a good estimate for y when it's very small:\n\t\tlx = ln( p*a*beta( a, b ) ) / a;\n\t\tx = exp( lx );\n\t\ty = ( x < 0.9 ) ? 1.0-x : -expm1(lx);\n\n\t\tif ( b < a && x < 0.2 ) {\n\t\t\t// Under a limited range of circumstances we can improve our estimate for x...\n\t\t\tap1 = a - 1.0;\n\t\t\tbm1 = b - 1.0;\n\t\t\ta2 = a * a;\n\t\t\ta3 = a * a2;\n\t\t\tb2 = b * b;\n\t\t\tterms[ 0 ] = 0.0;\n\t\t\tterms[ 1 ] = 1.0;\n\t\t\tterms[ 2 ] = bm1 / ap1;\n\t\t\tap1 *= ap1;\n\t\t\tterms[ 3 ] = bm1 * (3.0*a*b + 5.0*b + a2 - a - 4.0) / (2.0 * (a+2.0) * ap1); // eslint-disable-line max-len, no-mixed-operators\n\t\t\tap1 *= (a + 1.0);\n\t\t\tterms[ 4 ] = bm1 * (33.0*a*b2 + 31.0*b2 + 8.0*a2*b2 - 30.0*a*b - 47.0*b + 11.0*a2*b + 6.0*a3*b + 18.0 + 4.0*a - a3 + a2*a2 - 10.0*a2); // eslint-disable-line max-len, no-mixed-operators\n\t\t\tterms[ 4 ] /= (3.0 * (a+3.0) * (a+2.0) * ap1);\n\t\t\tx = evalpoly( terms, x );\n\t\t}\n\t\t// Know that result is below the inflection point, so set an upper limit on search...\n\t\tif ( x > xs ) {\n\t\t\tx = xs;\n\t\t}\n\t\tupper = xs;\n\t} else {\n\t\t// Case: ( a <= 1 ) != ( b <= 1 ). If all else fails we get here, only one of a and b is above 1, and a+b is small.  Start by swapping things around so that we have a concave curve with b > a and no points of inflection in [0,1].  As long as we expect x to be small then we can use the simple (and cheap) power term to estimate x, but when we expect x to be large then this greatly underestimates x and leaves us trying to iterate \"round the corner\" which may take almost forever. We could use Temme's inverse gamma function case in that case, this works really rather well (albeit expensively) even though strictly speaking we're outside it's defined range. However it's expensive to compute, and an alternative approach which models the curve as a distorted quarter circle is much cheaper to compute, and still keeps the number of iterations required down to a reasonable level. With thanks to Prof. Temme for this suggestion.\n\t\tif ( b < a ) {\n\t\t\ttmp = b;\n\t\t\tb = a;\n\t\t\ta = tmp;\n\n\t\t\ttmp = q;\n\t\t\tq = p;\n\t\t\tp = tmp;\n\t\t\tinvert = !invert;\n\t\t}\n\t\tif ( pow( p, 1.0/a ) < 0.5 ) {\n\t\t\tx = pow( p*a*beta( a, b ), 1.0/a );\n\t\t\tif ( x === 0.0 ) {\n\t\t\t\tx = FLOAT64_MIN_NORM;\n\t\t\t}\n\t\t\ty = 1.0 - x;\n\t\t}\n\t\t// Case: pow(q, 1/b) < 0.1\n\t\telse {\n\t\t\t// Model a distorted quarter circle:\n\t\t\ty = pow( 1.0-pow( p, b*beta( a, b ) ), 1.0/b );\n\t\t\tif ( y === 0 ) {\n\t\t\t\ty = FLOAT64_MIN_NORM;\n\t\t\t}\n\t\t\tx = 1.0 - y;\n\t\t}\n\t}\n\t// Now we have a guess for x (and for y) we can set things up for iteration.  If x > 0.5 it pays to swap things round:\n\tif ( x > 0.5 ) {\n\t\ttmp = b;\n\t\tb = a;\n\t\ta = tmp;\n\n\t\ttmp = q;\n\t\tq = p;\n\t\tp = tmp;\n\n\t\ttmp = y;\n\t\ty = x;\n\t\tx = tmp;\n\n\t\tinvert = !invert;\n\t\tl = 1.0 - upper;\n\t\tu = 1.0 - lower;\n\t\tlower = l;\n\t\tupper = u;\n\t}\n\t// Lower bound for our search:  We're not interested in denormalized answers as these tend to take up lots of iterations, given that we can't get accurate derivatives in this area (they tend to be infinite).\n\tif ( lower === 0 ) {\n\t\tif ( invert ) {\n\t\t\t// We're not interested in answers smaller than machine epsilon:\n\t\t\tlower = EPSILON;\n\t\t\tif ( x < lower ) {\n\t\t\t\tx = lower;\n\t\t\t}\n\t\t} else {\n\t\t\tlower = FLOAT64_MIN_NORM;\n\t\t}\n\t\tif ( x < lower ) {\n\t\t\tx = lower;\n\t\t}\n\t}\n\t// Figure out how many digits to iterate towards:\n\tdigits = DIGITS;\n\tif ( x < 1.0e-50 && ( a < 1.0 || b < 1.0 ) ) {\n\t\t// If we're in a region where the first derivative is very large, then we have to take care that the root-finder doesn't terminate prematurely.  We'll bump the precision up to avoid this, but we have to take care not to set the precision too high or the last few iterations will just thrash around and convergence may be slow in this case. Try 3/4 of machine epsilon:\n\t\tdigits *= 3;\n\t\tdigits /= 2;\n\t}\n\t// Now iterate, we can use either p or q as the target here depending on which is smaller:\n\troots = ibetaRoots( a, b, ( (p < q) ? p : q ), p >= q );\n\tx = halleyIterate( roots, x, lower, upper, digits, MAX_ITERATIONS );\n\n\t// Tidy up, if we \"lower\" was too high then zero is the best answer we have:\n\tif ( x === lower ) {\n\t\tx = 0.0;\n\t}\n\tif ( invert ) {\n\t\treturn [ 1.0-x, x ];\n\t}\n\treturn [ x, 1.0-x ];\n}\n\n\n// EXPORTS //\n\nexport default ibetaInvImp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_62_0/boost/math/special_functions/detail/t_distribution_inv.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* Copyright John Maddock 2006.\n* Copyright Paul A. Bristow 2007.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport inverseStudentsT from './inverse_students_t.js';\n\n\n// MAIN //\n\n/**\n* Returns the inverse of the incomplete beta function via the Student t distribution.\n*\n* @private\n* @param {PositiveNumber} a - function parameter\n* @param {Probability} p - probability value\n* @param {Object} py - placeholder object holding one minus the returned value\n* @returns {number} function value\n*/\nfunction findIBetaInvFromTDist( a, p, py ) {\n\tvar df;\n\tvar u;\n\tvar v;\n\tvar t;\n\n\tu = p / 2.0;\n\tv = 1.0 - u;\n\tdf = a * 2.0;\n\tt = inverseStudentsT( df, u, v );\n\tif ( py ) {\n\t\tpy.value = t * t / ( df + ( t*t ) );\n\t}\n\treturn df / ( df + ( t*t ) );\n}\n\n\n// EXPORTS //\n\nexport default findIBetaInvFromTDist;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn -1.0;\n\t}\n\treturn -1.0 + (x * (-5.0 + (x * 5.0)));\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 1.0;\n\t}\n\treturn 1.0 + (x * (21.0 + (x * (-69.0 + (x * 46.0)))));\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 7.0;\n\t}\n\treturn 7.0 + (x * (-2.0 + (x * (33.0 + (x * (-62.0 + (x * 31.0)))))));\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 25.0;\n\t}\n\treturn 25.0 + (x * (-52.0 + (x * (-17.0 + (x * (88.0 + (x * (-115.0 + (x * 46.0))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 7.0;\n\t}\n\treturn 7.0 + (x * (12.0 + (x * (-78.0 + (x * 52.0)))));\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn -7.0;\n\t}\n\treturn -7.0 + (x * (2.0 + (x * (183.0 + (x * (-370.0 + (x * 185.0)))))));\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn -533.0;\n\t}\n\treturn -533.0 + (x * (776.0 + (x * (-1835.0 + (x * (10240.0 + (x * (-13525.0 + (x * 5410.0))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn -1579.0;\n\t}\n\treturn -1579.0 + (x * (3747.0 + (x * (-3372.0 + (x * (-15821.0 + (x * (45588.0 + (x * (-45213.0 + (x * 15071.0))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 449.0;\n\t}\n\treturn 449.0 + (x * (-1259.0 + (x * (-769.0 + (x * (6686.0 + (x * (-9260.0 + (x * 3704.0))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 63149.0;\n\t}\n\treturn 63149.0 + (x * (-151557.0 + (x * (140052.0 + (x * (-727469.0 + (x * (2239932.0 + (x * (-2251437.0 + (x * 750479.0))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 29233.0;\n\t}\n\treturn 29233.0 + (x * (-78755.0 + (x * (105222.0 + (x * (146879.0 + (x * (-1602610.0 + (x * (3195183.0 + (x * (-2554139.0 + (x * 729754.0))))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 1.0;\n\t}\n\treturn 1.0 + (x * (-13.0 + (x * 13.0)));\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 1.0;\n\t}\n\treturn 1.0 + (x * (21.0 + (x * (-69.0 + (x * 46.0)))));\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/detail/ibeta_inverse.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* Copyright John Maddock 2006.\n* Copyright Paul A. Bristow 2007.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n/* eslint-disable no-mixed-operators, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport gammaincinv from '@stdlib/math-base-special-gammaincinv';\nimport ln from '@stdlib/math-base-special-ln';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport SMALLEST_SUBNORMAL from '@stdlib/constants-float64-smallest-subnormal';\nimport temmeRootFinder from './root_finder.js';\nimport newtonRaphsonIterate from './newton_raphson.js';\n\n\n// MAIN //\n\n/**\n* Carries out the third method by Temme (described in section 4).\n*\n* ## References\n*\n* -   Temme, N. M. 1992. \"Incomplete Laplace Integrals: Uniform Asymptotic Expansion with Application to the Incomplete Beta Function.\" _Journal of Computational and Applied Mathematics_ 41 (1–2): 1638–63. doi:[10.1016/0377-0427(92)90244-R](https://doi.org/10.1016/0377-0427(92)90244-R).\n*\n* @private\n* @param {PositiveNumber} a - function parameter\n* @param {PositiveNumber} b - function parameter\n* @param {Probability} p - function parameter\n* @param {Probability} q - probability equal to `1-p`\n* @returns {number} function value\n*/\nfunction temme3( a, b, p, q ) {\n\tvar cross;\n\tvar roots;\n\tvar lower;\n\tvar upper;\n\tvar eta0;\n\tvar eta;\n\tvar w10;\n\tvar w12;\n\tvar w13;\n\tvar w14;\n\tvar e1;\n\tvar e2;\n\tvar e3;\n\tvar mu;\n\tvar d2;\n\tvar d3;\n\tvar d4;\n\tvar w2;\n\tvar w3;\n\tvar w4;\n\tvar w5;\n\tvar w6;\n\tvar w7;\n\tvar w8;\n\tvar w9;\n\tvar w1;\n\tvar d;\n\tvar w;\n\tvar u;\n\tvar x;\n\n\t// Begin by getting an initial approximation for the quantity eta from the dominant part of the incomplete beta:\n\tif ( p < q ) {\n\t\teta0 = gammaincinv( p, b, true );\n\t} else {\n\t\teta0 = gammaincinv( q, b, false );\n\t}\n\teta0 /= a;\n\n\t// Define the variables and powers we'll need later on:\n\tmu = b / a;\n\tw = sqrt( 1.0+mu );\n\tw2 = w * w;\n\tw3 = w2 * w;\n\tw4 = w2 * w2;\n\tw5 = w3 * w2;\n\tw6 = w3 * w3;\n\tw7 = w4 * w3;\n\tw8 = w4 * w4;\n\tw9 = w5 * w4;\n\tw10 = w5 * w5;\n\td = eta0 - mu;\n\td2 = d * d;\n\td3 = d2 * d;\n\td4 = d2 * d2;\n\tw1 = w + 1.0;\n\tw12 = w1 * w1;\n\tw13 = w1 * w12;\n\tw14 = w12 * w12;\n\n\t// Now we need to compute the perturbation error terms that convert eta0 to eta, these are all polynomials of polynomials. Probably these should be re-written to use tabulated data (see examples above), but it's less of a win in this case as we need to calculate the individual powers for the denominator terms anyway, so we might as well use them for the numerator-polynomials as well. Refer to p154-p155 for the details of these expansions:\n\te1 = (w+2.0) * (w-1.0) / (3.0*w);\n\te1 += (w3 + 9.0*w2 + 21.0*w + 5.0) * d / (36.0*w2*w1);\n\te1 -= (w4 - 13.0*w3 + 69.0*w2 + 167.0*w + 46.0) * d2 / (1620.0*w12*w3);\n\te1 -= (7.0*w5 + 21.0*w4 + 70.0*w3 + 26.0*w2 - 93.0*w - 31.0) * d3 / (6480.0*w13*w4);\n\te1 -= (75.0*w6 + 202.0*w5 + 188.0*w4 - 888.0*w3 - 1345.0*w2 + 118.0*w + 138.0) * d4 / (272160.0*w14*w5);\n\n\te2 = (28.0*w4 + 131.0*w3 + 402.0*w2 + 581.0*w + 208.0) * (w-1.0) / (1620.0*w1*w3);\n\te2 -= (35.0*w6 - 154.0*w5 - 623.0*w4 - 1636.0*w3 - 3983.0*w2 - 3514.0*w - 925.0) * d / (12960.0*w12*w4);\n\te2 -= (2132.0*w7 + 7915.0*w6 + 16821.0*w5 + 35066.0*w4 + 87490.0*w3 + 141183.0*w2 + 95993.0*w + 21640.0) * d2 / (816480.0*w5*w13);\n\te2 -= (11053.0*w8 + 53308.0*w7 + 117010.0*w6 + 163924.0*w5 + 116188.0*w4 - 258428.0*w3 - 677042.0*w2 - 481940.0*w - 105497.0) * d3 / (14696640.0*w14*w6);\n\n\te3 = -((3592.0*w7 + 8375.0*w6 - 1323.0*w5 - 29198.0*w4 - 89578.0*w3 - 154413.0*w2 - 116063.0*w - 29632.0) * (w-1.0)) / (816480.0*w5*w12);\n\te3 -= (442043.0*w9 + 2054169.0*w8 + 3803094.0*w7 + 3470754.0*w6 + 2141568.0*w5 - 2393568.0*w4 - 19904934.0*w3 - 34714674.0*w2 - 23128299.0*w - 5253353.0) * d / (146966400.0*w6*w13);\n\te3 -= (116932.0*w10 + 819281.0*w9 + 2378172.0*w8 + 4341330.0*w7 + 6806004.0*w6 + 10622748.0*w5 + 18739500.0*w4 + 30651894.0*w3 + 30869976.0*w2 + 15431867.0*w + 2919016.0) * d2 / (146966400.0*w14*w7);\n\n\t// Combine eta0 and the error terms to compute eta (Second equation p155):\n\teta = eta0 + (e1/a) + (e2/(a*a)) + (e3/(a*a*a));\n\n\t/*\n\t\tNow we need to solve Eq 4.2 to obtain x.  For any given value of\n\t\teta there are two solutions to this equation, and since the distribution\n\t\tmay be very skewed, these are not related by x ~ 1-x we used when\n\t\timplementing section 3 above.  However we know that:\n\n\t\t\tcross < x <= 1       ; iff eta < mu\n\t\t\t\tx == cross   ; iff eta == mu\n\t\t\t\t0 <= x < cross    ; iff eta > mu\n\n\t\tWhere cross == 1 / (1 + mu)\n\t\tMany thanks to Prof Temme for clarifying this point. Therefore we'll just jump straight into Newton iterations to solve Eq 4.2 using these bounds, and simple bisection as the first guess, in practice this converges pretty quickly and we only need a few digits correct anyway:\n\t*/\n\tif ( eta <= 0 ) {\n\t\teta = SMALLEST_SUBNORMAL;\n\t}\n\tu = eta - ( mu*ln(eta) ) + ( ( 1.0+mu ) * ln( 1.0+mu ) ) - mu;\n\tcross = 1.0 / ( 1.0+mu );\n\tlower = (eta < mu) ? cross : 0.0;\n\tupper = (eta < mu) ? 1.0 : cross;\n\tx = (lower+upper) / 2.0;\n\troots = temmeRootFinder( u, mu );\n\treturn newtonRaphsonIterate( roots, x, lower, upper, 32, 100 );\n}\n\n\n// EXPORTS //\n\nexport default temme3;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Smallest positive double-precision floating-point subnormal number.\n*\n* @module @stdlib/constants-float64-smallest-subnormal\n* @type {number}\n*\n* @example\n* import FLOAT64_SMALLEST_SUBNORMAL from '@stdlib/constants-float64-smallest-subnormal';\n* // returns 4.940656458412465e-324\n*/\n\n\n// MAIN //\n\n/**\n* The smallest positive double-precision floating-point subnormal number.\n*\n* ## Notes\n*\n* The number has the value\n*\n* ```tex\n* \\frac{1}{2^{1023-1} 2^{52}}\n* ```\n*\n* which corresponds to the bit sequence\n*\n* ```binarystring\n* 0 00000000000 00000000000000000000 00000000000000000000000000000001\n* ```\n*\n* @constant\n* @type {number}\n* @default 4.940656458412465e-324\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_SMALLEST_SUBNORMAL = 4.940656458412465e-324;\n\n\n// EXPORTS //\n\nexport default FLOAT64_SMALLEST_SUBNORMAL;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/detail/ibeta_inverse.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* Copyright John Maddock 2006.\n* Copyright Paul A. Bristow 2007.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { assign as kernelBetainc } from '@stdlib/math-base-special-kernel-betainc';\nimport abs from '@stdlib/math-base-special-abs';\nimport FLOAT64_MAX from '@stdlib/constants-float64-max';\nimport FLOAT64_MIN_NORM from '@stdlib/constants-float64-smallest-normal';\n\n\n// MAIN //\n\n/**\n* Returns a root finding function.\n*\n* @private\n* @param {PositiveNumber} a - function parameter\n* @param {PositiveNumber} b - function parameter\n* @param {Probability} target - probability value\n* @param {boolean} invert - boolean indicating whether to find the roots of the upper or lower incomplete beta function\n* @returns {Function} root finding function\n*/\nfunction ibetaRoots( a, b, target, invert ) {\n\treturn roots;\n\n\t/**\n\t* Calculates roots.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Array} roots\n\t*/\n\tfunction roots( x ) {\n\t\tvar buf;\n\t\tvar f1;\n\t\tvar f2;\n\t\tvar f;\n\t\tvar y;\n\n\t\ty = 1.0 - x;\n\n\t\tbuf = [ 0.0, 0.0 ];\n\t\tkernelBetainc( x, a, b, true, invert, buf, 1, 0 );\n\t\tf = buf[ 0 ] - target;\n\t\tf1 = buf[ 1 ];\n\t\tif ( invert ) {\n\t\t\tf1 = -f1;\n\t\t}\n\t\tif ( y === 0.0 ) {\n\t\t\ty = FLOAT64_MIN_NORM * 64.0;\n\t\t}\n\t\tif ( x === 0.0 ) {\n\t\t\tx = FLOAT64_MIN_NORM * 64.0;\n\t\t}\n\t\tf2 = f1 * ( -(y*a) + ( ( b-2.0 ) * x ) + 1.0 );\n\t\tif ( abs( f2 ) < y * x * FLOAT64_MAX ) {\n\t\t\tf2 /= (y * x);\n\t\t}\n\t\tif ( invert ) {\n\t\t\tf2 = -f2;\n\t\t}\n\t\t// Make sure we don't have a zero derivative:\n\t\tif ( f1 === 0.0 ) {\n\t\t\tf1 = ( ( invert ) ? -1.0 : 1.0 ) * FLOAT64_MIN_NORM * 64.0;\n\t\t}\n\t\treturn [ f, f1, f2 ];\n\t}\n}\n\n\n// EXPORTS //\n\nexport default ibetaRoots;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_62_0/boost/math/tools/roots.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* Copyright John Maddock 2006.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math-base-special-abs';\nimport ldexp from '@stdlib/math-base-special-ldexp';\nimport sign from '@stdlib/math-base-special-signum';\nimport max from '@stdlib/math-base-special-max';\nimport MAX_VALUE from '@stdlib/constants-float64-max';\n\n\n// MAIN //\n\n/**\n* Performs root finding via third order Halley iteration.\n*\n* @private\n* @param {Array} fun - array of function and its first two derivatives\n* @param {number} guess - initial starting value\n* @param {number} minimum - minimum possible value for the result, used as initial lower bracket\n* @param {number} maximum - maximum possible value for the result, used as initial upper bracket\n* @param {PositiveInteger} digits - desired number of binary digits\n* @param {PositiveInteger} maxIter - maximum number of iterations\n* @returns {number} function value\n*/\nfunction halleyIterate( fun, guess, minimum, maximum, digits, maxIter ) {\n\tvar convergence;\n\tvar outOfBounds;\n\tvar delta1;\n\tvar delta2;\n\tvar factor;\n\tvar result;\n\tvar f0Last;\n\tvar count;\n\tvar delta;\n\tvar denom;\n\tvar diff;\n\tvar num;\n\tvar res;\n\tvar f0;\n\tvar f1;\n\tvar f2;\n\n\tf0 = 0.0;\n\toutOfBounds = false;\n\tresult = guess;\n\tfactor = ldexp( 1.0, 1.0-digits );\n\tdelta = max( 10000000*guess, 10000000 );  // Arbitrarily large delta...\n\tf0Last = 0;\n\tdelta1 = delta;\n\tdelta2 = delta;\n\n\tcount = maxIter;\n\tdo {\n\t\tf0Last = f0;\n\t\tdelta2 = delta1;\n\t\tdelta1 = delta;\n\t\tres = fun( result);\n\t\tf0 = res[ 0 ];\n\t\tf1 = res[ 1 ];\n\t\tf2 = res[ 2 ];\n\t\tcount -= 1;\n\n\t\tif ( f0 === 0.0 ) {\n\t\t\tbreak;\n\t\t}\n\t\tif ( f1 === 0.0 ) {\n\t\t\t// Oops zero derivative!!!\n\t\t\tif ( f0Last === 0.0 ) {\n\t\t\t\t// Must be the first iteration, pretend that we had a previous one at either min or max:\n\t\t\t\tif ( result === minimum ) {\n\t\t\t\t\tguess = maximum;\n\t\t\t\t} else {\n\t\t\t\t\tguess = minimum;\n\t\t\t\t}\n\t\t\t\tf0Last = fun( guess );\n\t\t\t\tdelta = guess - result;\n\t\t\t}\n\t\t\tif ( sign( f0Last ) * sign( f0 ) < 0 ) {\n\t\t\t\t// We've crossed over so move in opposite direction to last step:\n\t\t\t\tif ( delta < 0 ) {\n\t\t\t\t\tdelta = ( result-minimum ) / 2.0;\n\t\t\t\t} else {\n\t\t\t\t\tdelta = ( result-maximum ) / 2.0;\n\t\t\t\t}\n\t\t\t// Move in same direction as last step:\n\t\t\t} else if ( delta < 0 ) {\n\t\t\t\tdelta = (result-maximum) / 2.0;\n\t\t\t} else {\n\t\t\t\tdelta = (result-minimum) / 2.0;\n\t\t\t}\n\t\t} else if ( f2 === 0.0 ) {\n\t\t\tdelta = f0 / f1;\n\t\t} else {\n\t\t\tdenom = 2.0 * f0;\n\t\t\tnum = ( 2.0 * f1 ) - ( f0 * ( f2 / f1 ) );\n\t\t\tif ( abs(num) < 1.0 && ( abs(denom) >= abs(num) * MAX_VALUE ) ) {\n\t\t\t\t// Possible overflow, use Newton step:\n\t\t\t\tdelta = f0 / f1;\n\t\t\t} else {\n\t\t\t\tdelta = denom / num;\n\t\t\t}\n\t\t\tif ( delta * f1 / f0 < 0.0 ) {\n\t\t\t\t// Probably cancellation error, try a Newton step instead:\n\t\t\t\tdelta = f0 / f1;\n\t\t\t\tif ( abs(delta) > 2.0 * abs(guess) ) {\n\t\t\t\t\tdelta = ( (delta < 0.0) ? -1.0 : 1.0 ) * 2.0 * abs( guess );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tconvergence = abs( delta / delta2 );\n\t\tif ( convergence > 0.8 && convergence < 2.0 ) {\n\t\t\t// Last two steps haven't converged, try bisection:\n\t\t\tdelta = ( delta > 0.0 ) ? ( result-minimum )/2.0 : ( result-maximum )/2.0; // eslint-disable-line max-len\n\t\t\tif ( abs(delta) > result ) {\n\t\t\t\tdelta = sign( delta ) * result; // Protect against huge jumps!\n\t\t\t}\n\t\t\t// Reset delta2 so that this branch will *not* be taken on the next iteration:\n\t\t\tdelta2 = delta * 3.0;\n\t\t}\n\t\tguess = result;\n\t\tresult -= delta;\n\n\t\t// Check for out of bounds step:\n\t\tif ( result < minimum ) {\n\t\t\tif (\n\t\t\t\tabs(minimum) < 1 &&\n\t\t\t\tabs(result) > 1 &&\n\t\t\t\t( MAX_VALUE / abs(result) < abs(minimum) )\n\t\t\t) {\n\t\t\t\tdiff = 1000.0;\n\t\t\t} else {\n\t\t\t\tdiff = result / minimum;\n\t\t\t}\n\t\t\tif ( abs(diff) < 1.0 ) {\n\t\t\t\tdiff = 1.0 / diff;\n\t\t\t}\n\t\t\tif ( !outOfBounds && diff > 0.0 && diff < 3.0 ) {\n\t\t\t\t// Only a small out of bounds step, let's assume that the result is probably approximately at minimum:\n\t\t\t\tdelta = 0.99 * (guess - minimum);\n\t\t\t\tresult = guess - delta;\n\t\t\t\toutOfBounds = true; // Only take this branch once!\n\t\t\t} else {\n\t\t\t\tdelta = (guess - minimum) / 2.0;\n\t\t\t\tresult = guess - delta;\n\t\t\t\tif ( result === minimum || result === maximum ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if ( result > maximum ) {\n\t\t\tif (\n\t\t\t\tabs(maximum) < 1.0 &&\n\t\t\t\tabs(result) > 1.0 &&\n\t\t\t\tMAX_VALUE / abs(result) < abs(maximum)\n\t\t\t) {\n\t\t\t\tdiff = 1000.0;\n\t\t\t} else {\n\t\t\t\tdiff = result / maximum;\n\t\t\t}\n\t\t\tif ( abs(diff) < 1.0 ) {\n\t\t\t\tdiff = 1.0 / diff;\n\t\t\t}\n\t\t\tif ( !outOfBounds && diff > 0.0 && diff < 3.0 ) {\n\t\t\t\t// Only a small out of bounds step, let's assume that the result is probably approximately at minimum:\n\t\t\t\tdelta = 0.99 * (guess - maximum);\n\t\t\t\tresult = guess - delta;\n\t\t\t\toutOfBounds = true; // Only take this branch once!\n\t\t\t} else {\n\t\t\t\tdelta = ( guess - maximum ) / 2.0;\n\t\t\t\tresult = guess - delta;\n\t\t\t\tif ( result === minimum || result === maximum ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// Update brackets:\n\t\tif ( delta > 0.0 ) {\n\t\t\tmaximum = guess;\n\t\t} else {\n\t\t\tminimum = guess;\n\t\t}\n\t} while ( count && ( abs(result * factor) < abs(delta) ) );\n\n\treturn result;\n}\n\n\n// EXPORTS //\n\nexport default halleyIterate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport kernelBetaincinv from '@stdlib/math-base-special-kernel-betaincinv';\n\n\n// MAIN //\n\n/**\n* Returns a value `p` such that `p = betainc(a, b, x)`.\n*\n* @param {Probability} p - function parameter\n* @param {PositiveNumber} a - function parameter\n* @param {PositiveNumber} b - function parameter\n* @param {boolean} [upper=false] - boolean indicating if the function should return the inverse of the upper tail of the incomplete beta function\n* @returns {number} function value\n*\n* @example\n* var y = betaincinv( 0.2, 3.0, 3.0 );\n* // returns ~0.327\n*\n* @example\n* var y = betaincinv( 0.4, 3.0, 3.0 );\n* // returns ~0.446\n*\n* @example\n* var y = betaincinv( 0.4, 3.0, 3.0, true );\n* // returns ~0.554\n*\n* @example\n* var y = betaincinv( 0.4, 1.0, 6.0 );\n* // returns ~0.082\n*\n* @example\n* var y = betaincinv( 0.8, 1.0, 6.0 );\n* // returns ~0.235\n*/\nfunction betaincinv( p, a, b, upper ) {\n\tif (\n\t\tisnan( p ) ||\n\t\tisnan( a ) ||\n\t\tisnan( b )\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( a <= 0.0 || b <= 0.0 ) {\n\t\treturn NaN;\n\t}\n\tif ( p < 0.0 || p > 1.0 ) {\n\t\treturn NaN;\n\t}\n\tif ( upper ) {\n\t\treturn kernelBetaincinv( a, b, 1.0 - p, p )[ 0 ];\n\t}\n\treturn kernelBetaincinv( a, b, p, 1.0 - p )[ 0 ];\n}\n\n\n// EXPORTS //\n\nexport default betaincinv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport betaincinv from '@stdlib/math-base-special-betaincinv';\n\n\n// MAIN //\n\n/**\n* Returns the median of a beta distribution.\n*\n* @param {PositiveNumber} alpha - first shape parameter\n* @param {PositiveNumber} beta - second shape parameter\n* @returns {PositiveNumber} median\n*\n* @example\n* var v = median( 1.0, 1.0 );\n* // returns 0.5\n*\n* @example\n* var v = median( 4.0, 12.0 );\n* // returns ~0.239\n*\n* @example\n* var v = median( 8.0, 2.0 );\n* // returns ~0.820\n*\n* @example\n* var v = median( 1.0, -0.1 );\n* // returns NaN\n*\n* @example\n* var v = median( -0.1, 1.0 );\n* // returns NaN\n*\n* @example\n* var v = median( 2.0, NaN );\n* // returns NaN\n*\n* @example\n* var v = median( NaN, 2.0 );\n* // returns NaN\n*/\nfunction median( alpha, beta ) {\n\tif ( alpha <= 0.0 || beta <= 0.0 ) {\n\t\treturn NaN;\n\t}\n\treturn betaincinv( 0.5, alpha, beta );\n}\n\n\n// EXPORTS //\n\nexport default median;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns the mode of a beta distribution.\n*\n* @param {PositiveNumber} alpha - first shape parameter\n* @param {PositiveNumber} beta - second shape parameter\n* @returns {PositiveNumber} mode\n*\n* @example\n* var v = mode( 4.0, 12.0 );\n* // returns ~0.214\n*\n* @example\n* var v = mode( 8.0, 2.0 );\n* // returns ~0.875\n*\n* @example\n* var v = mode( 1.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var v = mode( 2.0, 0.8 );\n* // returns NaN\n*\n* @example\n* var v = mode( -0.1, 2.0 );\n* // returns NaN\n*\n* @example\n* var v = mode( 2.0, NaN );\n* // returns NaN\n*\n* @example\n* var v = mode( NaN, 2.0 );\n* // returns NaN\n*/\nfunction mode( alpha, beta ) {\n\tif ( alpha <= 1.0 || beta <= 1.0 ) {\n\t\treturn NaN;\n\t}\n\treturn ( alpha-1.0 ) / ( alpha+beta-2.0 );\n}\n\n\n// EXPORTS //\n\nexport default mode;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport sqrt from '@stdlib/math-base-special-sqrt';\n\n\n// MAIN //\n\n/**\n* Returns the skewness of a beta distribution.\n*\n* @param {PositiveNumber} alpha - first shape parameter\n* @param {PositiveNumber} beta - second shape parameter\n* @returns {number} skewness\n*\n* @example\n* var v = skewness( 1.0, 1.0 );\n* // returns 0.0\n*\n* @example\n* var v = skewness( 4.0, 12.0 );\n* // returns ~0.529\n*\n* @example\n* var v = skewness( 8.0, 2.0 );\n* // returns ~-0.829\n*\n* @example\n* var v = skewness( 1.0, -0.1 );\n* // returns NaN\n*\n* @example\n* var v = skewness( -0.1, 1.0 );\n* // returns NaN\n*\n* @example\n* var v = skewness( 2.0, NaN );\n* // returns NaN\n*\n* @example\n* var v = skewness( NaN, 2.0 );\n* // returns NaN\n*/\nfunction skewness( alpha, beta ) {\n\tvar out;\n\tvar ab;\n\tif ( alpha <= 0.0 || beta <= 0.0 ) {\n\t\treturn NaN;\n\t}\n\tab = alpha + beta;\n\tout = 2.0 * ( beta-alpha ) * sqrt( ab + 1.0 );\n\tout /= ( ab + 2.0 ) * sqrt( alpha * beta );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default skewness;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport sqrt from '@stdlib/math-base-special-sqrt';\n\n\n// MAIN //\n\n/**\n* Returns the standard deviation of a beta distribution.\n*\n* @param {PositiveNumber} alpha - first shape parameter\n* @param {PositiveNumber} beta - second shape parameter\n* @returns {PositiveNumber} standard deviation\n*\n* @example\n* var v = stdev( 1.0, 1.0 );\n* // returns ~0.289\n*\n* @example\n* var v = stdev( 4.0, 12.0 );\n* // returns ~0.105\n*\n* @example\n* var v = stdev( 8.0, 2.0 );\n* // returns ~0.121\n*\n* @example\n* var v = stdev( 1.0, -0.1 );\n* // returns NaN\n*\n* @example\n* var v = stdev( -0.1, 1.0 );\n* // returns NaN\n*\n* @example\n* var v = stdev( 2.0, NaN );\n* // returns NaN\n*\n* @example\n* var v = stdev( NaN, 2.0 );\n* // returns NaN\n*/\nfunction stdev( alpha, beta ) {\n\tvar apb;\n\tvar out;\n\tif ( alpha <= 0.0 || beta <= 0.0 ) {\n\t\treturn NaN;\n\t}\n\tapb = alpha + beta;\n\tout = sqrt( ( alpha * beta ) / ( apb + 1.0 ) );\n\tout /= apb;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default stdev;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns the variance of a beta distribution.\n*\n* @param {PositiveNumber} alpha - first shape parameter\n* @param {PositiveNumber} beta - second shape parameter\n* @returns {PositiveNumber} variance\n*\n* @example\n* var v = variance( 1.0, 1.0 );\n* // returns ~0.083\n*\n* @example\n* var v = variance( 4.0, 12.0 );\n* // returns ~0.011\n*\n* @example\n* var v = variance( 8.0, 2.0 );\n* // returns ~0.015\n*\n* @example\n* var v = variance( 1.0, -0.1 );\n* // returns NaN\n*\n* @example\n* var v = variance( -0.1, 1.0 );\n* // returns NaN\n*\n* @example\n* var v = variance( 2.0, NaN );\n* // returns NaN\n*\n* @example\n* var v = variance( NaN, 2.0 );\n* // returns NaN\n*/\nfunction variance( alpha, beta ) {\n\tvar apb;\n\tvar out;\n\tif ( alpha <= 0.0 || beta <= 0.0 ) {\n\t\treturn NaN;\n\t}\n\tapb = alpha + beta;\n\tout = alpha * beta;\n\tout /= apb * apb * ( apb+1.0 );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default variance;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport betainc from '@stdlib/math-base-special-betainc';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport ln from '@stdlib/math-base-special-ln';\nimport NINF from '@stdlib/constants-float64-ninf';\n\n\n// MAIN //\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (CDF) for a beta distribution with first shape parameter `alpha` and second shape parameter `beta` at a value `x`.\n*\n* @param {number} x - input value\n* @param {PositiveNumber} alpha - first shape parameter\n* @param {PositiveNumber} beta - second shape parameter\n* @returns {number} evaluated logCDF\n*\n* @example\n* var y = logcdf( 0.5, 1.0, 1.0 );\n* // returns ~-0.693\n*\n* @example\n* var y = logcdf( 0.5, 2.0, 4.0 );\n* // returns ~-0.208\n*\n* @example\n* var y = logcdf( 0.2, 2.0, 2.0 );\n* // returns ~-2.263\n*\n* @example\n* var y = logcdf( 0.8, 4.0, 4.0 );\n* // returns ~-0.034\n*\n* @example\n* var y = logcdf( -0.5, 4.0, 2.0 );\n* // returns -Infinity\n*\n* @example\n* var y = logcdf( 1.5, 4.0, 2.0 );\n* // returns 0.0\n*\n* @example\n* var y = logcdf( 2.0, -1.0, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = logcdf( 2.0, 0.5, -1.0 );\n* // returns NaN\n*\n* @example\n* var y = logcdf( NaN, 1.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = logcdf( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = logcdf( 0.0, 1.0, NaN );\n* // returns NaN\n*/\nfunction logcdf( x, alpha, beta ) {\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( alpha ) ||\n\t\tisnan( beta ) ||\n\t\talpha <= 0.0 ||\n\t\tbeta <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x <= 0.0 ) {\n\t\treturn NINF;\n\t}\n\tif ( x >= 1.0 ) {\n\t\treturn 0.0;\n\t}\n\treturn ln( betainc( x, alpha, beta ) );\n}\n\n\n// EXPORTS //\n\nexport default logcdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport betainc from '@stdlib/math-base-special-betainc';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport ln from '@stdlib/math-base-special-ln';\nimport NINF from '@stdlib/constants-float64-ninf';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the natural logarithm of the cumulative distribution function (CDF) for a beta distribution with first shape parameter `alpha` and second shape parameter `beta`.\n*\n* @param {PositiveNumber} alpha - first shape parameter\n* @param {PositiveNumber} beta - second shape parameter\n* @returns {Function} logCDF\n*\n* @example\n* var logcdf = factory( 0.5, 0.5 );\n*\n* var y = logcdf( 0.8 );\n* // returns ~-0.35\n*\n* y = logcdf( 0.3 );\n* // returns ~-0.997\n*/\nfunction factory( alpha, beta ) {\n\tif (\n\t\tisnan( alpha ) ||\n\t\tisnan( beta ) ||\n\t\talpha <= 0.0 ||\n\t\tbeta <= 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn logcdf;\n\n\t/**\n\t* Evaluates the natural logarithm of the cumulative distribution function (CDF) for a beta distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {number} evaluated logCDF\n\t*\n\t* @example\n\t* var y = logcdf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction logcdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x <= 0.0 ) {\n\t\t\treturn NINF;\n\t\t}\n\t\tif ( x >= 1.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn ln( betainc( x, alpha, beta ) );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport betaln from '@stdlib/math-base-special-betaln';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport log1p from '@stdlib/math-base-special-log1p';\nimport ln from '@stdlib/math-base-special-ln';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport NINF from '@stdlib/constants-float64-ninf';\n\n\n// MAIN //\n\n/**\n* Evaluates the natural logarithm of the probability density function (logPDF) for a beta distribution with first shape parameter `alpha` and second shape parameter `beta` at a value `x`.\n*\n* @param {number} x - input value\n* @param {PositiveNumber} alpha - first shape parameter\n* @param {PositiveNumber} beta - second shape parameter\n* @returns {number} evaluated logPDF\n*\n* @example\n* var y = logpdf( 0.5, 1.0, 1.0 );\n* // returns 0.0\n*\n* @example\n* var y = logpdf( 0.5, 2.0, 4.0 );\n* // returns ~0.223\n*\n* @example\n* var y = logpdf( 0.2, 2.0, 2.0 );\n* // returns ~-0.041\n*\n* @example\n* var y = logpdf( 0.8, 4.0, 4.0 );\n* // returns ~-0.556\n*\n* @example\n* var y = logpdf( -0.5, 4.0, 2.0 );\n* // returns -Infinity\n*\n* @example\n* var y = logpdf( 1.5, 4.0, 2.0 );\n* // returns -Infinity\n*\n* @example\n* var y = logpdf( 0.5, -1.0, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = logpdf( 0.5, 0.5, -1.0 );\n* // returns NaN\n*\n* @example\n* var y = logpdf( NaN, 1.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = logpdf( 0.5, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = logpdf( 0.5, 1.0, NaN );\n* // returns NaN\n*/\nfunction logpdf( x, alpha, beta ) {\n\tvar out;\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( alpha ) ||\n\t\tisnan( beta ) ||\n\t\talpha <= 0.0 ||\n\t\tbeta <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x < 0.0 || x > 1.0 ) {\n\t\t// Support of the Beta distribution: [0,1]\n\t\treturn NINF;\n\t}\n\tif ( x === 0.0 ) {\n\t\tif ( alpha < 1.0 ) {\n\t\t\treturn PINF;\n\t\t}\n\t\tif ( alpha > 1.0 ) {\n\t\t\treturn NINF;\n\t\t}\n\t\treturn ln( beta );\n\t}\n\tif ( x === 1.0 ) {\n\t\tif ( beta < 1.0 ) {\n\t\t\treturn PINF;\n\t\t}\n\t\tif ( beta > 1.0 ) {\n\t\t\treturn NINF;\n\t\t}\n\t\treturn ln( alpha );\n\t}\n\tout = ( alpha-1.0 ) * ln( x );\n\tout += ( beta-1.0 ) * log1p( -x );\n\tout -= betaln( alpha, beta );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default logpdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport betaFcn from '@stdlib/math-base-special-beta';\nimport abs from '@stdlib/math-base-special-abs';\nimport EPS from '@stdlib/constants-float64-eps';\n\n\n// MAIN //\n\n/**\n* Evaluates the moment-generating function (MGF) for a beta distribution with first shape parameter `alpha` and second shape parameter `beta` at a value `t`.\n*\n* @private\n* @param {number} t - input value\n* @param {PositiveNumber} alpha - first shape parameter\n* @param {PositiveNumber} beta - second shape parameter\n* @returns {number} evaluated MGF\n*\n* @example\n* var y = mgf( 0.5, 1.0, 1.0 );\n* // returns ~1.297\n*\n* @example\n* var y = mgf( 0.5, 2.0, 4.0 );\n* // returns ~1.186\n*\n* @example\n* var y = mgf( 3.0, 2.0, 2.0 );\n* // returns ~5.575\n*\n* @example\n* var y = mgf( -0.8, 4.0, 4.0 );\n* // returns ~0.676\n*/\nfunction mgf( t, alpha, beta ) {\n\tvar summand;\n\tvar denom;\n\tvar sum;\n\tvar c;\n\tvar k;\n\n\tdenom = betaFcn( alpha, beta );\n\tsum = 1.0;\n\tc = 1.0;\n\tk = 1;\n\tdo {\n\t\tc *= t / k;\n\t\tsummand = ( betaFcn( alpha+k, beta ) / denom ) * c;\n\t\tsum += summand;\n\t\tk += 1;\n\t} while ( abs( summand / sum ) >= EPS );\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nexport default mgf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport mgf0 from './_mgf.js';\n\n\n// MAIN //\n\n/**\n* Evaluates the moment-generating function (MGF) for a beta distribution with first shape parameter `alpha` and second shape parameter `beta` at a value `t`.\n*\n* @param {number} t - input value\n* @param {PositiveNumber} alpha - first shape parameter\n* @param {PositiveNumber} beta - second shape parameter\n* @returns {number} evaluated MGF\n*\n* @example\n* var y = mgf( 0.5, 1.0, 1.0 );\n* // returns ~1.297\n*\n* @example\n* var y = mgf( 0.5, 2.0, 4.0 );\n* // returns ~1.186\n*\n* @example\n* var y = mgf( 3.0, 2.0, 2.0 );\n* // returns ~5.575\n*\n* @example\n* var y = mgf( -0.8, 4.0, 4.0 );\n* // returns ~0.676\n*\n* @example\n* var y = mgf( NaN, 1.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = mgf( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = mgf( 0.0, 1.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = mgf( 2.0, -1.0, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = mgf( 2.0, 0.0, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = mgf( 2.0, 0.5, -1.0 );\n* // returns NaN\n*\n* @example\n* var y = mgf( 2.0, 0.5, 0.0 );\n* // returns NaN\n*/\nfunction mgf( t, alpha, beta ) {\n\tif (\n\t\tisnan( t ) ||\n\t\tisnan( alpha ) ||\n\t\tisnan( beta ) ||\n\t\talpha <= 0.0 ||\n\t\tbeta <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn mgf0( t, alpha, beta );\n}\n\n\n// EXPORTS //\n\nexport default mgf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport betaln from '@stdlib/math-base-special-betaln';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport log1p from '@stdlib/math-base-special-log1p';\nimport exp from '@stdlib/math-base-special-exp';\nimport ln from '@stdlib/math-base-special-ln';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Evaluates the probability density function (PDF) for a beta distribution with first shape parameter `alpha` and second shape parameter `beta` at a value `x`.\n*\n* @param {number} x - input value\n* @param {PositiveNumber} alpha - first shape parameter\n* @param {PositiveNumber} beta - second shape parameter\n* @returns {number} evaluated PDF\n*\n* @example\n* var y = pdf( 0.5, 1.0, 1.0 );\n* // returns 1.0\n*\n* @example\n* var y = pdf( 0.5, 2.0, 4.0 );\n* // returns 1.25\n*\n* @example\n* var y = pdf( 0.2, 2.0, 2.0 );\n* // returns ~0.96\n*\n* @example\n* var y = pdf( 0.8, 4.0, 4.0 );\n* // returns ~0.573\n*\n* @example\n* var y = pdf( -0.5, 4.0, 2.0 );\n* // returns 0.0\n*\n* @example\n* var y = pdf( 1.5, 4.0, 2.0 );\n* // returns 0.0\n*\n* @example\n* var y = pdf( 0.5, -1.0, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = pdf( 0.5, 0.5, -1.0 );\n* // returns NaN\n*\n* @example\n* var y = pdf( NaN, 1.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = pdf( 0.5, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = pdf( 0.5, 1.0, NaN );\n* // returns NaN\n*/\nfunction pdf( x, alpha, beta ) {\n\tvar out;\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( alpha ) ||\n\t\tisnan( beta ) ||\n\t\talpha <= 0.0 ||\n\t\tbeta <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x < 0.0 || x > 1.0 ) {\n\t\t// Support of the Beta distribution: [0,1]\n\t\treturn 0.0;\n\t}\n\tif ( x === 0.0 ) {\n\t\tif ( alpha < 1.0 ) {\n\t\t\treturn PINF;\n\t\t}\n\t\tif ( alpha > 1.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn beta;\n\t}\n\tif ( x === 1.0 ) {\n\t\tif ( beta < 1.0 ) {\n\t\t\treturn PINF;\n\t\t}\n\t\tif ( beta > 1.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn alpha;\n\t}\n\tout = ( alpha-1.0 ) * ln( x );\n\tout += ( beta-1.0 ) * log1p( -x );\n\tout -= betaln( alpha, beta );\n\treturn exp( out );\n}\n\n\n// EXPORTS //\n\nexport default pdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport betaincinv from '@stdlib/math-base-special-betaincinv';\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Evaluates the quantile function for a beta distribution with first shape parameter `alpha` and second shape parameter `beta` at a probability `p`.\n*\n* @param {Probability} p - input value\n* @param {PositiveNumber} alpha - first shape parameter\n* @param {PositiveNumber} beta - second shape parameter\n* @returns {number} evaluated quantile function\n*\n* @example\n* var y = quantile( 0.8, 2.0, 1.0 );\n* // returns ~0.894\n*\n* @example\n* var y = quantile( 0.5, 4.0, 2.0 );\n* // returns ~0.686\n*\n* @example\n* var y = quantile( 1.1, 1.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( -0.2, 1.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( NaN, 1.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.5, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.5, 1.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.5, -1.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.5, 1.0, -1.0 );\n* // returns NaN\n*/\nfunction quantile( p, alpha, beta ) {\n\tif (\n\t\tisnan( p ) ||\n\t\tisnan( alpha ) ||\n\t\tisnan( beta ) ||\n\t\talpha <= 0.0 ||\n\t\tbeta <= 0.0 ||\n\t\tp < 0.0 ||\n\t\tp > 1.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn betaincinv( p, alpha, beta );\n}\n\n\n// EXPORTS //\n\nexport default quantile;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nimport defineProperty from '@stdlib/utils-define-property';\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport setReadOnlyAccessor from '@stdlib/utils-define-nonenumerable-read-only-accessor';\nimport { isPrimitive as isPositive } from '@stdlib/assert-is-positive-number';\nimport entropy from '@stdlib/stats-base-dists-beta-entropy';\nimport kurtosis from '@stdlib/stats-base-dists-beta-kurtosis';\nimport mean from '@stdlib/stats-base-dists-beta-mean';\nimport median from '@stdlib/stats-base-dists-beta-median';\nimport mode from '@stdlib/stats-base-dists-beta-mode';\nimport skewness from '@stdlib/stats-base-dists-beta-skewness';\nimport stdev from '@stdlib/stats-base-dists-beta-stdev';\nimport variance from '@stdlib/stats-base-dists-beta-variance';\nimport cdf from '@stdlib/stats-base-dists-beta-cdf';\nimport logcdf from '@stdlib/stats-base-dists-beta-logcdf';\nimport logpdf from '@stdlib/stats-base-dists-beta-logpdf';\nimport mgf from '@stdlib/stats-base-dists-beta-mgf';\nimport pdf from '@stdlib/stats-base-dists-beta-pdf';\nimport quantile from '@stdlib/stats-base-dists-beta-quantile';\nimport format from '@stdlib/string-format';\n\n\n// FUNCTIONS //\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {Probability} evaluated CDF\n*/\nfunction betaCDF( x ) {\n\treturn cdf( x, this.alpha, this.beta );\n}\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n*/\nfunction betaLogCDF( x ) {\n\treturn logcdf( x, this.alpha, this.beta );\n}\n\n/**\n* Evaluates the natural logarithm of the probability density function (logPDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n*/\nfunction betaLogPDF( x ) {\n\treturn logpdf( x, this.alpha, this.beta );\n}\n\n/**\n* Evaluates the moment-generating function (MGF).\n*\n* @private\n* @param {number} t - input value\n* @returns {number} evaluated MGF\n*/\nfunction betaMGF( t ) {\n\treturn mgf( t, this.alpha, this.beta );\n}\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n*/\nfunction betaPDF( x ) {\n\treturn pdf( x, this.alpha, this.beta );\n}\n\n/**\n* Evaluates the quantile function.\n*\n* @private\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n*/\nfunction betaQuantile( p ) {\n\treturn quantile( p, this.alpha, this.beta );\n}\n\n\n// MAIN //\n\n/**\n* Beta distribution constructor.\n*\n* @constructor\n* @param {PositiveNumber} [alpha=1.0] - first shape parameter\n* @param {PositiveNumber} [beta=1.0] - second shape parameter\n* @throws {TypeError} `alpha` must be a positive number\n* @throws {TypeError} `beta` must be a positive number\n* @returns {Beta} distribution instance\n*\n* @example\n* var beta = new Beta( 1.0, 1.0 );\n*\n* var y = beta.cdf( 0.8 );\n* // returns 0.8\n*\n* var mu = beta.mean;\n* // returns 0.5\n*/\nfunction Beta() {\n\tvar alpha;\n\tvar beta;\n\tif ( !(this instanceof Beta) ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn new Beta();\n\t\t}\n\t\treturn new Beta( arguments[ 0 ], arguments[ 1 ] );\n\t}\n\tif ( arguments.length ) {\n\t\talpha = arguments[ 0 ];\n\t\tbeta = arguments[ 1 ];\n\t\tif ( !isPositive( alpha ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First shape parameter must be a positive number. Value: `%s`.', alpha ) );\n\t\t}\n\t\tif ( !isPositive( beta ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second shape parameter must be a positive number. Value: `%s`.', beta ) );\n\t\t}\n\t} else {\n\t\talpha = 1.0;\n\t\tbeta = 1.0;\n\t}\n\tdefineProperty( this, 'alpha', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn alpha;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isPositive( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid assignment. Must be a positive number. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\talpha = value;\n\t\t}\n\t});\n\tdefineProperty( this, 'beta', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn beta;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isPositive( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid assignment. Must be a positive number. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\tbeta = value;\n\t\t}\n\t});\n\treturn this;\n}\n\n/**\n* Beta distribution differential entropy.\n*\n* @name entropy\n* @memberof Beta.prototype\n* @type {number}\n* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}\n*\n* @example\n* var beta = new Beta( 4.0, 12.0 );\n*\n* var v = beta.entropy;\n* // returns ~-0.869\n*/\nsetReadOnlyAccessor( Beta.prototype, 'entropy', function get() {\n\treturn entropy( this.alpha, this.beta );\n});\n\n/**\n* Beta distribution excess kurtosis.\n*\n* @name kurtosis\n* @memberof Beta.prototype\n* @type {number}\n* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}\n*\n* @example\n* var beta = new Beta( 4.0, 12.0 );\n*\n* var v = beta.kurtosis;\n* // returns ~0.082\n*/\nsetReadOnlyAccessor( Beta.prototype, 'kurtosis', function get() {\n\treturn kurtosis( this.alpha, this.beta );\n});\n\n/**\n* Beta distribution expected value.\n*\n* @name mean\n* @memberof Beta.prototype\n* @type {number}\n* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}\n*\n* @example\n* var beta = new Beta( 4.0, 12.0 );\n*\n* var v = beta.mean;\n* // returns 0.25\n*/\nsetReadOnlyAccessor( Beta.prototype, 'mean', function get() {\n\treturn mean( this.alpha, this.beta );\n});\n\n/**\n* Beta distribution median.\n*\n* @name median\n* @memberof Beta.prototype\n* @type {number}\n* @see [median]{@link https://en.wikipedia.org/wiki/Median}\n*\n* @example\n* var beta = new Beta( 4.0, 12.0 );\n*\n* var v = beta.median;\n* // returns ~0.239\n*/\nsetReadOnlyAccessor( Beta.prototype, 'median', function get() {\n\treturn median( this.alpha, this.beta );\n});\n\n/**\n* Beta distribution mode.\n*\n* @name mode\n* @memberof Beta.prototype\n* @type {number}\n* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}\n*\n* @example\n* var beta = new Beta( 4.0, 12.0 );\n*\n* var v = beta.mode;\n* // returns ~0.214\n*/\nsetReadOnlyAccessor( Beta.prototype, 'mode', function get() {\n\treturn mode( this.alpha, this.beta );\n});\n\n/**\n* Beta distribution skewness.\n*\n* @name skewness\n* @memberof Beta.prototype\n* @type {number}\n* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}\n*\n* @example\n* var beta = new Beta( 4.0, 12.0 );\n*\n* var v = beta.skewness;\n* // returns ~0.529\n*/\nsetReadOnlyAccessor( Beta.prototype, 'skewness', function get() {\n\treturn skewness( this.alpha, this.beta );\n});\n\n/**\n* Beta distribution standard deviation.\n*\n* @name stdev\n* @memberof Beta.prototype\n* @type {number}\n* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}\n*\n* @example\n* var beta = new Beta( 4.0, 12.0 );\n*\n* var v = beta.stdev;\n* // returns ~0.105\n*/\nsetReadOnlyAccessor( Beta.prototype, 'stdev', function get() {\n\treturn stdev( this.alpha, this.beta );\n});\n\n/**\n* Beta distribution variance.\n*\n* @name variance\n* @memberof Beta.prototype\n* @type {number}\n* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}\n*\n* @example\n* var beta = new Beta( 4.0, 12.0 );\n*\n* var v = beta.variance;\n* // returns ~0.011\n*/\nsetReadOnlyAccessor( Beta.prototype, 'variance', function get() {\n\treturn variance( this.alpha, this.beta );\n});\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @name cdf\n* @memberof Beta.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var beta = new Beta( 2.0, 4.0 );\n*\n* var v = beta.cdf( 0.5 );\n* // returns ~0.813\n*/\nsetReadOnly( Beta.prototype, 'cdf', betaCDF );\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (CDF).\n*\n* @name logcdf\n* @memberof Beta.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logCDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var beta = new Beta( 2.0, 4.0 );\n*\n* var v = beta.logcdf( 0.5 );\n* // returns ~-0.208\n*/\nsetReadOnly( Beta.prototype, 'logcdf', betaLogCDF );\n\n/**\n* Evaluates the natural logarithm of the probability density function (logPDF).\n*\n* @name logpdf\n* @memberof Beta.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var beta = new Beta( 2.0, 4.0 );\n*\n* var v = beta.logpdf( 0.8 );\n* // returns ~-2.0557\n*/\nsetReadOnly( Beta.prototype, 'logpdf', betaLogPDF );\n\n/**\n* Evaluates the moment-generating function (MGF).\n*\n* @name mgf\n* @memberof Beta.prototype\n* @type {Function}\n* @param {number} t - input value\n* @returns {number} evaluated MGF\n* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}\n*\n* @example\n* var beta = new Beta( 2.0, 4.0 );\n*\n* var v = beta.mgf( 0.5 );\n* // returns ~1.186\n*/\nsetReadOnly( Beta.prototype, 'mgf', betaMGF );\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @name pdf\n* @memberof Beta.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var beta = new Beta( 2.0, 4.0 );\n*\n* var v = beta.pdf( 0.8 );\n* // returns ~0.13\n*/\nsetReadOnly( Beta.prototype, 'pdf', betaPDF );\n\n/**\n* Evaluates the quantile function.\n*\n* @name quantile\n* @memberof Beta.prototype\n* @type {Function}\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}\n*\n* @example\n* var beta = new Beta( 2.0, 4.0 );\n*\n* var v = beta.quantile( 0.5 );\n* // returns ~0.314\n*/\nsetReadOnly( Beta.prototype, 'quantile', betaQuantile );\n\n\n// EXPORTS //\n\nexport default Beta;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate the natural logarithm of the cumulative distribution function (CDF) for a beta distribution.\n*\n* @module @stdlib/stats-base-dists-beta-logcdf\n*\n* @example\n* import logcdf from '@stdlib/stats-base-dists-beta-logcdf';\n*\n* var y = logcdf( 0.5, 1.0, 1.0 );\n* // returns ~-0.693\n*\n* y = logcdf( 0.5, 2.0, 4.0 );\n* // returns ~-0.208\n*\n* @example\n* import { factory as factory } from '@stdlib/stats-base-dists-beta-logcdf';\n*\n* var logcdf = factory( 0.5, 0.5 );\n*\n* var y = logcdf( 0.8 );\n* // returns ~-0.35\n*\n* y = logcdf( 0.3 );\n* // returns ~-0.997\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport logcdf from './logcdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( logcdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default logcdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate the natural logarithm of the probability density function (logPDF) for a beta distribution.\n*\n* @module @stdlib/stats-base-dists-beta-logpdf\n*\n* @example\n* import logpdf from '@stdlib/stats-base-dists-beta-logpdf';\n*\n* var y = logpdf( 0.5, 1.0, 1.0 );\n* // returns 0.0\n*\n* y = logpdf( 0.5, 2.0, 4.0 );\n* // returns ~0.223\n*\n* @example\n* import { factory as factory } from '@stdlib/stats-base-dists-beta-logpdf';\n*\n* var logpdf = factory( 0.5, 0.5 );\n*\n* var y = logpdf( 0.8 );\n* // returns ~-0.228\n*\n* y = logpdf( 0.3 );\n* // returns ~-0.364\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport logpdf from './logpdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( logpdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default logpdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport betaln from '@stdlib/math-base-special-betaln';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport log1p from '@stdlib/math-base-special-log1p';\nimport ln from '@stdlib/math-base-special-ln';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the natural logarithm of the probability density function (logPDF) for a beta distribution with first shape parameter `alpha` and second shape parameter `beta`.\n*\n* @param {PositiveNumber} alpha - first shape parameter\n* @param {PositiveNumber} beta - second shape parameter\n* @returns {Function} logPDF\n*\n* @example\n* var logpdf = factory( 0.5, 0.5 );\n*\n* var y = logpdf( 0.8 );\n* // returns ~-0.228\n*\n* y = logpdf( 0.3 );\n* // returns ~-0.364\n*/\nfunction factory( alpha, beta ) {\n\tvar betalnAB;\n\tif (\n\t\tisnan( alpha ) ||\n\t\tisnan( beta ) ||\n\t\talpha <= 0.0 ||\n\t\tbeta <= 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\tbetalnAB = betaln( alpha, beta );\n\treturn logpdf;\n\n\t/**\n\t* Evaluates the natural logarithm of the probability density function (PDF) for a beta distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {number} evaluated natural logarithm of the PDF\n\t*\n\t* @example\n\t* var y = logpdf( 0.3 );\n\t* // returns <number>\n\t*/\n\tfunction logpdf( x ) {\n\t\tvar out;\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x < 0.0 || x > 1.0 ) {\n\t\t\t// Support of the Beta distribution: [0,1]\n\t\t\treturn NINF;\n\t\t}\n\t\tif ( x === 0.0 ) {\n\t\t\tif ( alpha < 1.0 ) {\n\t\t\t\treturn PINF;\n\t\t\t}\n\t\t\tif ( alpha > 1.0 ) {\n\t\t\t\treturn NINF;\n\t\t\t}\n\t\t\treturn ln( beta );\n\t\t}\n\t\tif ( x === 1.0 ) {\n\t\t\tif ( beta < 1.0 ) {\n\t\t\t\treturn PINF;\n\t\t\t}\n\t\t\tif ( beta > 1.0 ) {\n\t\t\t\treturn NINF;\n\t\t\t}\n\t\t\treturn ln( alpha );\n\t\t}\n\t\tout = -betalnAB;\n\t\tout += ( ( alpha-1.0 )*ln(x) ) + ( ( beta-1.0 )*log1p(-x) );\n\t\treturn out;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Moment-generating function (MGF) for a beta distribution.\n*\n* @module @stdlib/stats-base-dists-beta-mgf\n*\n* @example\n* import mgf from '@stdlib/stats-base-dists-beta-mgf';\n*\n* var y = mgf( 0.5, 1.0, 1.0 );\n* // returns ~1.297\n*\n* y = mgf( 0.5, 2.0, 4.0 );\n* // returns ~1.186\n*\n* y = mgf( 3.0, 2.0, 2.0 );\n* // returns ~5.575\n*\n* y = mgf( -0.8, 4.0, 4.0 );\n* // returns ~0.676\n*\n* @example\n* import { factory as factory } from '@stdlib/stats-base-dists-beta-mgf';\n*\n* var mgf = factory( 0.5, 0.5 );\n*\n* var y = mgf( 0.8 );\n* // returns ~1.522\n*\n* y = mgf( 0.3 );\n* // returns ~1.168\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport mgf from './mgf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( mgf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default mgf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport mgf0 from './_mgf.js';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the moment-generating function (MGF) for a beta distribution with first shape parameter `alpha` and second shape parameter `beta`.\n*\n* @param {PositiveNumber} alpha - first shape parameter\n* @param {PositiveNumber} beta - second shape parameter\n* @returns {Function} MGF\n*\n* @example\n* var mgf = factory( 0.5, 0.5 );\n*\n* var y = mgf( 0.8 );\n* // returns ~1.552\n*\n* y = mgf( 0.3 );\n* // returns ~1.168\n*/\nfunction factory( alpha, beta ) {\n\tif (\n\t\tisnan( alpha ) ||\n\t\tisnan( beta ) ||\n\t\talpha <= 0.0 ||\n\t\tbeta <= 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn mgf;\n\n\t/**\n\t* Evaluates the moment-generating function (MGF) for a beta distribution.\n\t*\n\t* @private\n\t* @param {number} t - input value\n\t* @returns {number} evaluated MGF\n\t*\n\t* @example\n\t* var y = mgf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction mgf( t ) {\n\t\tif ( isnan( t ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn mgf0( t, alpha, beta );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate the probability density function (PDF) for a beta distribution.\n*\n* @module @stdlib/stats-base-dists-beta-pdf\n*\n* @example\n* import pdf from '@stdlib/stats-base-dists-beta-pdf';\n*\n* var y = pdf( 0.5, 1.0, 1.0 );\n* // returns 1.0\n*\n* y = pdf( 0.5, 2.0, 4.0 );\n* // returns 1.25\n*\n* @example\n* import { factory as factory } from '@stdlib/stats-base-dists-beta-pdf';\n*\n* var pdf = factory( 0.5, 0.5 );\n*\n* var y = pdf( 0.8 );\n* // returns ~0.796\n*\n* y = pdf( 0.3 );\n* // returns ~0.695\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport pdf from './pdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( pdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default pdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport betaln from '@stdlib/math-base-special-betaln';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport log1p from '@stdlib/math-base-special-log1p';\nimport exp from '@stdlib/math-base-special-exp';\nimport ln from '@stdlib/math-base-special-ln';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the probability density function (PDF) for a beta distribution with first shape parameter `alpha` and second shape parameter `beta`.\n*\n* @param {PositiveNumber} alpha - first shape parameter\n* @param {PositiveNumber} beta - second shape parameter\n* @returns {Function} PDF\n*\n* @example\n* var pdf = factory( 0.5, 0.5 );\n*\n* var y = pdf( 0.8 );\n* // returns ~0.796\n*\n* y = pdf( 0.3 );\n* // returns ~0.695\n*/\nfunction factory( alpha, beta ) {\n\tvar betalnAB;\n\tif (\n\t\tisnan( alpha ) ||\n\t\tisnan( beta ) ||\n\t\talpha <= 0.0 ||\n\t\tbeta <= 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\tbetalnAB = betaln( alpha, beta );\n\treturn pdf;\n\n\t/**\n\t* Evaluates the probability density function (PDF) for a beta distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {number} evaluated PDF\n\t*\n\t* @example\n\t* var y = pdf( 0.3 );\n\t* // returns <number>\n\t*/\n\tfunction pdf( x ) {\n\t\tvar out;\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x < 0.0 || x > 1.0 ) {\n\t\t\t// Support of the Beta distribution: [0,1]\n\t\t\treturn 0.0;\n\t\t}\n\t\tif ( x === 0.0 ) {\n\t\t\tif ( alpha < 1.0 ) {\n\t\t\t\treturn PINF;\n\t\t\t}\n\t\t\tif ( alpha > 1.0 ) {\n\t\t\t\treturn 0.0;\n\t\t\t}\n\t\t\treturn beta;\n\t\t}\n\t\tif ( x === 1.0 ) {\n\t\t\tif ( beta < 1.0 ) {\n\t\t\t\treturn PINF;\n\t\t\t}\n\t\t\tif ( beta > 1.0 ) {\n\t\t\t\treturn 0.0;\n\t\t\t}\n\t\t\treturn alpha;\n\t\t}\n\t\tout = -betalnAB;\n\t\tout += ( alpha-1.0 ) * ln( x );\n\t\tout += ( beta-1.0 ) * log1p( -x );\n\t\treturn exp( out );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate the quantile function for a beta distribution.\n*\n* @module @stdlib/stats-base-dists-beta-quantile\n*\n* @example\n* import quantile from '@stdlib/stats-base-dists-beta-quantile';\n*\n* var y = quantile( 0.8, 2.0, 1.0 );\n* // returns ~0.894\n*\n* y = quantile( 0.5, 4.0, 2.0 );\n* // returns ~0.686\n*\n* @example\n* import { factory as factory } from '@stdlib/stats-base-dists-beta-quantile';\n*\n* var quantile = factory( 2.0, 2.0 );\n*\n* var y = quantile( 0.8 );\n* // returns ~0.713\n*\n* y = quantile( 0.4 );\n* // returns ~0.5\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport quantile from './quantile.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( quantile, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default quantile;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport betaincinv from '@stdlib/math-base-special-betaincinv';\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the quantile function for a beta distribution with first shape parameter `alpha` and second shape parameter `beta`.\n*\n* @param {PositiveNumber} alpha - first shape parameter\n* @param {PositiveNumber} beta - second shape parameter\n* @returns {Function} quantile function\n*\n* @example\n* var quantile = factory( 2.5, 0.5 );\n* var y = quantile( 0.5 );\n* // returns ~0.904\n*\n* y = quantile( 0.8 );\n* // returns ~0.986\n*/\nfunction factory( alpha, beta ) {\n\tif (\n\t\tisnan( alpha ) ||\n\t\tisnan( beta ) ||\n\t\talpha <= 0.0 ||\n\t\tbeta <= 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn quantile;\n\n\t/**\n\t* Evaluates the quantile function for a beta distribution.\n\t*\n\t* @private\n\t* @param {Probability} p - input value\n\t* @returns {number} evaluated quantile function\n\t*\n\t* @example\n\t* var y = quantile( 0.3 );\n\t* // returns <number>\n\t*/\n\tfunction quantile( p ) {\n\t\tif (\n\t\t\tisnan( p ) ||\n\t\t\tp < 0.0 ||\n\t\t\tp > 1.0\n\t\t) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn betaincinv( p, alpha, beta );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace beta\n*/\nvar beta = {};\n\n/**\n* @name cdf\n* @memberof beta\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/beta/cdf}\n*/\nimport cdf from '@stdlib/stats-base-dists-beta-cdf';\nsetReadOnly( beta, 'cdf', cdf );\n\n/**\n* @name Beta\n* @memberof beta\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/beta/ctor}\n*/\nimport Beta from '@stdlib/stats-base-dists-beta-ctor';\nsetReadOnly( beta, 'Beta', Beta );\n\n/**\n* @name entropy\n* @memberof beta\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/beta/entropy}\n*/\nimport entropy from '@stdlib/stats-base-dists-beta-entropy';\nsetReadOnly( beta, 'entropy', entropy );\n\n/**\n* @name kurtosis\n* @memberof beta\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/beta/kurtosis}\n*/\nimport kurtosis from '@stdlib/stats-base-dists-beta-kurtosis';\nsetReadOnly( beta, 'kurtosis', kurtosis );\n\n/**\n* @name logcdf\n* @memberof beta\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/beta/logcdf}\n*/\nimport logcdf from '@stdlib/stats-base-dists-beta-logcdf';\nsetReadOnly( beta, 'logcdf', logcdf );\n\n/**\n* @name logpdf\n* @memberof beta\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/beta/logpdf}\n*/\nimport logpdf from '@stdlib/stats-base-dists-beta-logpdf';\nsetReadOnly( beta, 'logpdf', logpdf );\n\n/**\n* @name mean\n* @memberof beta\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/beta/mean}\n*/\nimport mean from '@stdlib/stats-base-dists-beta-mean';\nsetReadOnly( beta, 'mean', mean );\n\n/**\n* @name median\n* @memberof beta\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/beta/median}\n*/\nimport median from '@stdlib/stats-base-dists-beta-median';\nsetReadOnly( beta, 'median', median );\n\n/**\n* @name mgf\n* @memberof beta\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/beta/mgf}\n*/\nimport mgf from '@stdlib/stats-base-dists-beta-mgf';\nsetReadOnly( beta, 'mgf', mgf );\n\n/**\n* @name mode\n* @memberof beta\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/beta/mode}\n*/\nimport mode from '@stdlib/stats-base-dists-beta-mode';\nsetReadOnly( beta, 'mode', mode );\n\n/**\n* @name pdf\n* @memberof beta\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/beta/pdf}\n*/\nimport pdf from '@stdlib/stats-base-dists-beta-pdf';\nsetReadOnly( beta, 'pdf', pdf );\n\n/**\n* @name quantile\n* @memberof beta\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/beta/quantile}\n*/\nimport quantile from '@stdlib/stats-base-dists-beta-quantile';\nsetReadOnly( beta, 'quantile', quantile );\n\n/**\n* @name skewness\n* @memberof beta\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/beta/skewness}\n*/\nimport skewness from '@stdlib/stats-base-dists-beta-skewness';\nsetReadOnly( beta, 'skewness', skewness );\n\n/**\n* @name stdev\n* @memberof beta\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/beta/stdev}\n*/\nimport stdev from '@stdlib/stats-base-dists-beta-stdev';\nsetReadOnly( beta, 'stdev', stdev );\n\n/**\n* @name variance\n* @memberof beta\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/beta/variance}\n*/\nimport variance from '@stdlib/stats-base-dists-beta-variance';\nsetReadOnly( beta, 'variance', variance );\n\n\n// EXPORTS //\n\nexport default beta;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport betaCDF from '@stdlib/stats-base-dists-beta-cdf';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Evaluates the cumulative distribution function (CDF) for a beta prime distribution with first shape parameter `alpha` and second shape parameter `beta` at a value `x`.\n*\n* @param {number} x - input value\n* @param {PositiveNumber} alpha - first shape parameter\n* @param {PositiveNumber} beta - second shape parameter\n* @returns {Probability} evaluated CDF\n*\n* @example\n* var y = cdf( 0.5, 1.0, 1.0 );\n* // returns ~0.333\n*\n* @example\n* var y = cdf( 0.5, 2.0, 4.0 );\n* // returns ~0.539\n*\n* @example\n* var y = cdf( 0.2, 2.0, 2.0 );\n* // returns ~0.074\n*\n* @example\n* var y = cdf( 0.8, 4.0, 4.0 );\n* // returns ~0.38\n*\n* @example\n* var y = cdf( -0.5, 4.0, 2.0 );\n* // returns 0.0\n*\n* @example\n* var y = cdf( 2.0, -1.0, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2.0, 0.5, -1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( NaN, 1.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, 1.0, NaN );\n* // returns NaN\n*/\nfunction cdf( x, alpha, beta ) {\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( alpha ) ||\n\t\tisnan( beta ) ||\n\t\talpha <= 0.0 ||\n\t\tbeta <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x <= 0.0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( x === PINF ) {\n\t\treturn 1.0;\n\t}\n\treturn betaCDF( x / ( 1.0 + x ), alpha, beta );\n}\n\n\n// EXPORTS //\n\nexport default cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns the excess kurtosis of a beta prime distribution.\n*\n* @param {PositiveNumber} alpha - first shape parameter\n* @param {PositiveNumber} beta - second shape parameter\n* @returns {number} kurtosis\n*\n* @example\n* var v = kurtosis( 2.0, 6.0 );\n* // returns ~26.143\n*\n* @example\n* var v = kurtosis( 4.0, 12.0 );\n* // returns ~5.764\n*\n* @example\n* var v = kurtosis( 12.0, 6.0 );\n* // returns ~19.49\n*\n* @example\n* var v = kurtosis( 2.0, 4.0 );\n* // returns NaN\n*\n* @example\n* var v = kurtosis( 1.0, -0.1 );\n* // returns NaN\n*\n* @example\n* var v = kurtosis( -0.1, 1.0 );\n* // returns NaN\n*\n* @example\n* var v = kurtosis( 2.0, NaN );\n* // returns NaN\n*\n* @example\n* var v = kurtosis( NaN, 2.0 );\n* // returns NaN\n*/\nfunction kurtosis( alpha, beta ) {\n\tvar abm1;\n\tvar bm1;\n\tvar out;\n\tif (\n\t\tisnan( alpha ) ||\n\t\talpha <= 0.0 ||\n\t\tisnan( beta ) ||\n\t\tbeta <= 4.0\n\t) {\n\t\treturn NaN;\n\t}\n\tabm1 = alpha + beta - 1.0;\n\tbm1 = beta - 1.0;\n\tout = ( alpha * abm1 * ( (5.0*beta )-11.0 ) ) + ( ( bm1*bm1 )*( bm1-1.0 ) );\n\tout *= 6.0;\n\tout /= alpha * abm1 * ( beta-3.0 ) * ( beta-4.0 );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default kurtosis;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns the expected value of a beta prime distribution.\n*\n* @param {PositiveNumber} alpha - first shape parameter\n* @param {PositiveNumber} beta - second shape parameter\n* @returns {PositiveNumber} expected value\n*\n* @example\n* var v = mean( 1.0, 2.0 );\n* // returns 1.0\n*\n* @example\n* var v = mean( 4.0, 12.0 );\n* // returns ~0.364\n*\n* @example\n* var v = mean( 8.0, 2.0 );\n* // returns 8.0\n*\n* @example\n* var v = mean( 1.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var v = mean( 1.0, -0.1 );\n* // returns NaN\n*\n* @example\n* var v = mean( -0.1, 1.0 );\n* // returns NaN\n*\n* @example\n* var v = mean( 2.0, NaN );\n* // returns NaN\n*\n* @example\n* var v = mean( NaN, 2.0 );\n* // returns NaN\n*/\nfunction mean( alpha, beta ) {\n\tif ( alpha <= 0.0 || beta <= 1.0 ) {\n\t\treturn NaN;\n\t}\n\treturn alpha / ( beta - 1.0 );\n}\n\n\n// EXPORTS //\n\nexport default mean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns the mode of a beta prime distribution.\n*\n* @param {PositiveNumber} alpha - first shape parameter\n* @param {PositiveNumber} beta - second shape parameter\n* @returns {PositiveNumber} mode\n*\n* @example\n* var v = mode( 1.0, 2.0 );\n* // returns 0.0\n*\n* @example\n* var v = mode( 4.0, 12.0 );\n* // returns ~0.231\n*\n* @example\n* var v = mode( 8.0, 2.0 );\n* // returns ~2.333\n*\n* @example\n* var v = mode( 1.0, 1.0 );\n* // returns 0.0\n*\n* @example\n* var v = mode( 1.0, -0.1 );\n* // returns NaN\n*\n* @example\n* var v = mode( -0.1, 1.0 );\n* // returns NaN\n*\n* @example\n* var v = mode( 2.0, NaN );\n* // returns NaN\n*\n* @example\n* var v = mode( NaN, 2.0 );\n* // returns NaN\n*/\nfunction mode( alpha, beta ) {\n\tif ( alpha <= 0.0 || beta <= 0.0 ) {\n\t\treturn NaN;\n\t}\n\tif ( alpha < 1.0 ) {\n\t\treturn 0.0;\n\t}\n\treturn ( alpha - 1.0 ) / ( beta + 1.0 );\n}\n\n\n// EXPORTS //\n\nexport default mode;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport sqrt from '@stdlib/math-base-special-sqrt';\n\n\n// MAIN //\n\n/**\n* Returns the skewness of a beta prime distribution.\n*\n* @param {PositiveNumber} alpha - first shape parameter\n* @param {PositiveNumber} beta - second shape parameter\n* @returns {number} skewness\n*\n* @example\n* var v = skewness( 2.0, 4.0 );\n* // returns ~6.261\n*\n* @example\n* var v = skewness( 4.0, 12.0 );\n* // returns ~1.724\n*\n* @example\n* var v = skewness( 8.0, 4.0 );\n* // returns ~5.729\n*\n* @example\n* var v = skewness( 2.0, 2.0 );\n* // returns NaN\n*\n* @example\n* var v = skewness( 1.0, -0.1 );\n* // returns NaN\n*\n* @example\n* var v = skewness( -0.1, 1.0 );\n* // returns NaN\n*\n* @example\n* var v = skewness( 2.0, NaN );\n* // returns NaN\n*\n* @example\n* var v = skewness( NaN, 2.0 );\n* // returns NaN\n*/\nfunction skewness( alpha, beta ) {\n\tvar out;\n\tif (\n\t\tisnan( alpha ) ||\n\t\talpha <= 0.0 ||\n\t\tisnan( beta ) ||\n\t\tbeta <= 3.0\n\t) {\n\t\treturn NaN;\n\t}\n\tout = 2.0 * ( ( 2.0*alpha ) + beta - 1.0 ) / ( beta-3.0 );\n\tout *= sqrt( ( beta-2.0 ) / ( alpha * ( alpha+beta-1.0 ) ) );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default skewness;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport sqrt from '@stdlib/math-base-special-sqrt';\n\n\n// MAIN //\n\n/**\n* Returns the standard deviation of a beta prime distribution.\n*\n* @param {PositiveNumber} alpha - first shape parameter\n* @param {PositiveNumber} beta - second shape parameter\n* @returns {PositiveNumber} standard deviation\n*\n* @example\n* var v = stdev( 1.0, 3.0 );\n* // returns ~0.866\n*\n* @example\n* var v = stdev( 4.0, 12.0 );\n* // returns ~0.223\n*\n* @example\n* var v = stdev( 8.0, 2.5 );\n* // returns ~8.219\n*\n* @example\n* var v = stdev( 8.0, 2.0 );\n* // returns NaN\n*\n* @example\n* var v = stdev( 1.0, -0.1 );\n* // returns NaN\n*\n* @example\n* var v = stdev( -0.1, 1.0 );\n* // returns NaN\n*\n* @example\n* var v = stdev( 2.0, NaN );\n* // returns NaN\n*\n* @example\n* var v = stdev( NaN, 2.0 );\n* // returns NaN\n*/\nfunction stdev( alpha, beta ) {\n\tvar bm1;\n\tif (\n\t\tisnan( alpha ) ||\n\t\talpha <= 0.0 ||\n\t\tisnan( beta ) ||\n\t\tbeta <= 2.0\n\t) {\n\t\treturn NaN;\n\t}\n\tbm1 = beta - 1.0;\n\treturn sqrt( ( alpha * ( alpha + bm1 ) ) / ( ( bm1-1.0 ) * bm1*bm1 ) );\n}\n\n\n// EXPORTS //\n\nexport default stdev;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns the variance of a beta prime distribution.\n*\n* @param {PositiveNumber} alpha - first shape parameter\n* @param {PositiveNumber} beta - second shape parameter\n* @returns {PositiveNumber} variance\n*\n* @example\n* var v = variance( 1.0, 3.0 );\n* // returns ~0.75\n*\n* @example\n* var v = variance( 4.0, 12.0 );\n* // returns ~0.05\n*\n* @example\n* var v = variance( 8.0, 2.5 );\n* // returns ~67.556\n*\n* @example\n* var v = variance( 8.0, 2.0 );\n* // returns NaN\n*\n* @example\n* var v = variance( 1.0, -0.1 );\n* // returns NaN\n*\n* @example\n* var v = variance( -0.1, 1.0 );\n* // returns NaN\n*\n* @example\n* var v = variance( 2.0, NaN );\n* // returns NaN\n*\n* @example\n* var v = variance( NaN, 2.0 );\n* // returns NaN\n*/\nfunction variance( alpha, beta ) {\n\tvar bm1;\n\tif (\n\t\tisnan( alpha ) ||\n\t\talpha <= 0.0 ||\n\t\tisnan( beta ) ||\n\t\tbeta <= 2.0\n\t) {\n\t\treturn NaN;\n\t}\n\tbm1 = beta - 1.0;\n\treturn ( alpha * ( alpha + bm1 ) ) / ( ( bm1-1.0 ) * bm1*bm1 );\n}\n\n\n// EXPORTS //\n\nexport default variance;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport betaLogCDF from '@stdlib/stats-base-dists-beta-logcdf';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (CDF) for a beta prime distribution with first shape parameter `alpha` and second shape parameter `beta` at a value `x`.\n*\n* @param {number} x - input value\n* @param {PositiveNumber} alpha - first shape parameter\n* @param {PositiveNumber} beta - second shape parameter\n* @returns {number} evaluated logCDF\n*\n* @example\n* var y = logcdf( 0.5, 1.0, 1.0 );\n* // returns ~-1.099\n*\n* @example\n* var y = logcdf( 0.5, 2.0, 4.0 );\n* // returns ~-0.618\n*\n* @example\n* var y = logcdf( 0.2, 2.0, 2.0 );\n* // returns ~-2.603\n*\n* @example\n* var y = logcdf( 0.8, 4.0, 4.0 );\n* // returns ~-0.968\n*\n* @example\n* var y = logcdf( -0.5, 4.0, 2.0 );\n* // returns -Infinity\n*\n* @example\n* var y = logcdf( 2.0, -1.0, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = logcdf( 2.0, 0.5, -1.0 );\n* // returns NaN\n*\n* @example\n* var y = logcdf( NaN, 1.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = logcdf( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = logcdf( 0.0, 1.0, NaN );\n* // returns NaN\n*/\nfunction logcdf( x, alpha, beta ) {\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( alpha ) ||\n\t\tisnan( beta ) ||\n\t\talpha <= 0.0 ||\n\t\tbeta <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x <= 0.0 ) {\n\t\treturn NINF;\n\t}\n\tif ( x === PINF ) {\n\t\treturn 0.0;\n\t}\n\treturn betaLogCDF( x / ( 1.0 + x ), alpha, beta );\n}\n\n\n// EXPORTS //\n\nexport default logcdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport betaln from '@stdlib/math-base-special-betaln';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport log1p from '@stdlib/math-base-special-log1p';\nimport ln from '@stdlib/math-base-special-ln';\nimport NINF from '@stdlib/constants-float64-ninf';\n\n\n// MAIN //\n\n/**\n* Evaluates the natural logarithm of the probability density function (logPDF) for a beta prime distribution with first shape parameter `alpha` and second shape parameter `beta` at a value `x`.\n*\n* @param {number} x - input value\n* @param {PositiveNumber} alpha - first shape parameter\n* @param {PositiveNumber} beta - second shape parameter\n* @returns {number} evaluated logPDF\n*\n* @example\n* var y = logpdf( 0.5, 1.0, 1.0 );\n* // returns ~-0.811\n*\n* @example\n* var y = logpdf( 0.5, 2.0, 4.0 );\n* // returns ~-0.13\n*\n* @example\n* var y = logpdf( 0.2, 2.0, 2.0 );\n* // returns ~-0.547\n*\n* @example\n* var y = logpdf( 0.8, 4.0, 4.0 );\n* // returns ~-0.43\n*\n* @example\n* var y = logpdf( -0.5, 4.0, 2.0 );\n* // returns -Infinity\n*\n* @example\n* var y = logpdf( 0.5, -1.0, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = logpdf( 0.5, 0.5, -1.0 );\n* // returns NaN\n*\n* @example\n* var y = logpdf( NaN, 1.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = logpdf( 0.5, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = logpdf( 0.5, 1.0, NaN );\n* // returns NaN\n*/\nfunction logpdf( x, alpha, beta ) {\n\tvar out;\n\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( alpha ) ||\n\t\tisnan( beta ) ||\n\t\talpha <= 0.0 ||\n\t\tbeta <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x <= 0.0 ) {\n\t\t// Support of the BetaPrime distribution: (0,∞)\n\t\treturn NINF;\n\t}\n\tout = ( alpha-1.0 ) * ln( x );\n\tout -= ( alpha+beta ) * log1p( x );\n\tout -= betaln( alpha, beta );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default logpdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport betaln from '@stdlib/math-base-special-betaln';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport log1p from '@stdlib/math-base-special-log1p';\nimport ln from '@stdlib/math-base-special-ln';\nimport NINF from '@stdlib/constants-float64-ninf';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the natural logarithm of the probability density function (logPDF) for a beta prime distribution with first shape parameter `alpha` and second shape parameter `beta`.\n*\n* @param {PositiveNumber} alpha - first shape parameter\n* @param {PositiveNumber} beta - second shape parameter\n* @returns {Function} logPDF\n*\n* @example\n* var logpdf = factory( 0.5, 0.5 );\n*\n* var y = logpdf( 0.8 );\n* // returns ~-1.62\n*\n* y = logpdf( 0.3 );\n* // returns ~-0.805\n*/\nfunction factory( alpha, beta ) {\n\tvar betalnAB;\n\tif (\n\t\tisnan( alpha ) ||\n\t\tisnan( beta ) ||\n\t\talpha <= 0.0 ||\n\t\tbeta <= 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\tbetalnAB = betaln( alpha, beta );\n\treturn logpdf;\n\n\t/**\n\t* Evaluates the natural logarithm of the probability density function (PDF) for a beta prime distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {number} evaluated natural logarithm of the PDF\n\t*\n\t* @example\n\t* var y = logpdf( 0.3 );\n\t* // returns <number>\n\t*/\n\tfunction logpdf( x ) {\n\t\tvar out;\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x <= 0.0 ) {\n\t\t\t// Support of the BetaPrime distribution: (0,∞)\n\t\t\treturn NINF;\n\t\t}\n\t\tout = ( alpha-1.0 ) * ln( x );\n\t\tout -= ( alpha+beta ) * log1p( x );\n\t\tout -= betalnAB;\n\t\treturn out;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport logpdf from '@stdlib/stats-base-dists-betaprime-logpdf';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport exp from '@stdlib/math-base-special-exp';\n\n\n// MAIN //\n\n/**\n* Evaluates the probability density function (PDF) for a beta prime distribution with first shape parameter `alpha` and second shape parameter `beta` at a value `x`.\n*\n* @param {number} x - input value\n* @param {PositiveNumber} alpha - first shape parameter\n* @param {PositiveNumber} beta - second shape parameter\n* @returns {number} evaluated PDF\n*\n* @example\n* var y = pdf( 0.5, 1.0, 1.0 );\n* // returns ~0.444\n*\n* @example\n* var y = pdf( 0.5, 2.0, 4.0 );\n* // returns ~0.878\n*\n* @example\n* var y = pdf( 0.2, 2.0, 2.0 );\n* // returns ~0.579\n*\n* @example\n* var y = pdf( 0.8, 4.0, 4.0 );\n* // returns ~0.65\n*\n* @example\n* var y = pdf( -0.5, 4.0, 2.0 );\n* // returns 0.0\n*\n* @example\n* var y = pdf( 0.5, -1.0, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = pdf( 0.5, 0.5, -1.0 );\n* // returns NaN\n*\n* @example\n* var y = pdf( NaN, 1.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = pdf( 0.5, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = pdf( 0.5, 1.0, NaN );\n* // returns NaN\n*/\nfunction pdf( x, alpha, beta ) {\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( alpha ) ||\n\t\tisnan( beta ) ||\n\t\talpha <= 0.0 ||\n\t\tbeta <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn exp( logpdf( x, alpha, beta ) );\n}\n\n\n// EXPORTS //\n\nexport default pdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport betaincinv from '@stdlib/math-base-special-betaincinv';\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Evaluates the quantile function for a beta prime distribution with first shape parameter `alpha` and second shape parameter `beta` at a probability `p`.\n*\n* @param {Probability} p - input value\n* @param {PositiveNumber} alpha - first shape parameter\n* @param {PositiveNumber} beta - second shape parameter\n* @returns {number} evaluated quantile function\n*\n* @example\n* var y = quantile( 0.8, 2.0, 1.0 );\n* // returns ~8.472\n*\n* @example\n* var y = quantile( 0.5, 4.0, 2.0 );\n* // returns ~2.187\n*\n* @example\n* var y = quantile( 1.1, 1.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( -0.2, 1.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( NaN, 1.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.5, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.5, 1.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.5, -1.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.5, 1.0, -1.0 );\n* // returns NaN\n*/\nfunction quantile( p, alpha, beta ) {\n\tvar x;\n\tif (\n\t\tisnan( p ) ||\n\t\tisnan( alpha ) ||\n\t\tisnan( beta ) ||\n\t\talpha <= 0.0 ||\n\t\tbeta <= 0.0 ||\n\t\tp < 0.0 ||\n\t\tp > 1.0\n\t) {\n\t\treturn NaN;\n\t}\n\tx = betaincinv( p, alpha, beta );\n\treturn x / ( 1.0-x );\n}\n\n\n// EXPORTS //\n\nexport default quantile;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nimport defineProperty from '@stdlib/utils-define-property';\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport setReadOnlyAccessor from '@stdlib/utils-define-nonenumerable-read-only-accessor';\nimport { isPrimitive as isPositive } from '@stdlib/assert-is-positive-number';\nimport kurtosis from '@stdlib/stats-base-dists-betaprime-kurtosis';\nimport mean from '@stdlib/stats-base-dists-betaprime-mean';\nimport mode from '@stdlib/stats-base-dists-betaprime-mode';\nimport skewness from '@stdlib/stats-base-dists-betaprime-skewness';\nimport stdev from '@stdlib/stats-base-dists-betaprime-stdev';\nimport variance from '@stdlib/stats-base-dists-betaprime-variance';\nimport cdf from '@stdlib/stats-base-dists-betaprime-cdf';\nimport logcdf from '@stdlib/stats-base-dists-betaprime-logcdf';\nimport logpdf from '@stdlib/stats-base-dists-betaprime-logpdf';\nimport pdf from '@stdlib/stats-base-dists-betaprime-pdf';\nimport quantile from '@stdlib/stats-base-dists-betaprime-quantile';\nimport format from '@stdlib/string-format';\n\n\n// FUNCTIONS //\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n*/\nfunction betaPrimeCDF( x ) {\n\treturn cdf( x, this.alpha, this.beta );\n}\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logCDF\n*/\nfunction betaPrimeLogCDF( x ) {\n\treturn logcdf( x, this.alpha, this.beta );\n}\n\n/**\n* Evaluates the natural logarithm of the probability density function (logPDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n*/\nfunction betaPrimeLogPDF( x ) {\n\treturn logpdf( x, this.alpha, this.beta );\n}\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n*/\nfunction betaPrimePDF( x ) {\n\treturn pdf( x, this.alpha, this.beta );\n}\n\n/**\n* Evaluates the quantile function.\n*\n* @private\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n*/\nfunction betaPrimeQuantile( p ) {\n\treturn quantile( p, this.alpha, this.beta );\n}\n\n\n// MAIN //\n\n/**\n* Beta prime distribution constructor.\n*\n* @constructor\n* @param {PositiveNumber} [alpha=1.0] - first shape parameter\n* @param {PositiveNumber} [beta=1.0] - second shape parameter\n* @throws {TypeError} `alpha` must be a positive number\n* @throws {TypeError} `beta` must be a positive number\n* @returns {BetaPrime} distribution instance\n*\n* @example\n* var betaprime = new BetaPrime( 1.0, 1.0 );\n*\n* var y = betaprime.cdf( 0.8 );\n* // returns ~0.444\n*\n* var v = betaprime.mode;\n* // returns 0.0\n*/\nfunction BetaPrime() {\n\tvar alpha;\n\tvar beta;\n\tif ( !(this instanceof BetaPrime) ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn new BetaPrime();\n\t\t}\n\t\treturn new BetaPrime( arguments[ 0 ], arguments[ 1 ] );\n\t}\n\tif ( arguments.length ) {\n\t\talpha = arguments[ 0 ];\n\t\tbeta = arguments[ 1 ];\n\t\tif ( !isPositive( alpha ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First shape parameter must be a positive number. Value: `%s`.', alpha ) );\n\t\t}\n\t\tif ( !isPositive( beta ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second shape parameter must be a positive number. Value: `%s`.', beta ) );\n\t\t}\n\t} else {\n\t\talpha = 1.0;\n\t\tbeta = 1.0;\n\t}\n\tdefineProperty( this, 'alpha', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn alpha;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isPositive( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid assignment. Must be a positive number. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\talpha = value;\n\t\t}\n\t});\n\tdefineProperty( this, 'beta', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn beta;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isPositive( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid assignment. Must be a positive number. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\tbeta = value;\n\t\t}\n\t});\n\treturn this;\n}\n\n/**\n* Beta prime distribution excess kurtosis.\n*\n* @name kurtosis\n* @memberof BetaPrime.prototype\n* @type {number}\n* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}\n*\n* @example\n* var betaprime = new BetaPrime( 4.0, 12.0 );\n*\n* var v = betaprime.kurtosis;\n* // returns ~5.764\n*/\nsetReadOnlyAccessor( BetaPrime.prototype, 'kurtosis', function get() {\n\treturn kurtosis( this.alpha, this.beta );\n});\n\n/**\n* Beta prime distribution expected value.\n*\n* @name mean\n* @memberof BetaPrime.prototype\n* @type {number}\n* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}\n*\n* @example\n* var betaprime = new BetaPrime( 4.0, 12.0 );\n*\n* var v = betaprime.mean;\n* // returns ~0.364\n*/\nsetReadOnlyAccessor( BetaPrime.prototype, 'mean', function get() {\n\treturn mean( this.alpha, this.beta );\n});\n\n/**\n* Beta prime distribution mode.\n*\n* @name mode\n* @memberof BetaPrime.prototype\n* @type {number}\n* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}\n*\n* @example\n* var betaprime = new BetaPrime( 4.0, 12.0 );\n*\n* var v = betaprime.mode;\n* // returns ~0.231\n*/\nsetReadOnlyAccessor( BetaPrime.prototype, 'mode', function get() {\n\treturn mode( this.alpha, this.beta );\n});\n\n/**\n* Beta prime distribution skewness.\n*\n* @name skewness\n* @memberof BetaPrime.prototype\n* @type {number}\n* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}\n*\n* @example\n* var betaprime = new BetaPrime( 4.0, 12.0 );\n*\n* var v = betaprime.skewness;\n* // returns ~1.724\n*/\nsetReadOnlyAccessor( BetaPrime.prototype, 'skewness', function get() {\n\treturn skewness( this.alpha, this.beta );\n});\n\n/**\n* Beta prime distribution standard deviation.\n*\n* @name stdev\n* @memberof BetaPrime.prototype\n* @type {number}\n* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}\n*\n* @example\n* var betaprime = new BetaPrime( 4.0, 12.0 );\n*\n* var v = betaprime.stdev;\n* // returns ~0.223\n*/\nsetReadOnlyAccessor( BetaPrime.prototype, 'stdev', function get() {\n\treturn stdev( this.alpha, this.beta );\n});\n\n/**\n* Beta prime distribution variance.\n*\n* @name variance\n* @memberof BetaPrime.prototype\n* @type {number}\n* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}\n*\n* @example\n* var betaprime = new BetaPrime( 4.0, 12.0 );\n*\n* var v = betaprime.variance;\n* // returns ~0.05\n*/\nsetReadOnlyAccessor( BetaPrime.prototype, 'variance', function get() {\n\treturn variance( this.alpha, this.beta );\n});\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @name cdf\n* @memberof BetaPrime.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var betaprime = new BetaPrime( 2.0, 4.0 );\n*\n* var v = betaprime.cdf( 0.5 );\n* // returns ~0.539\n*/\nsetReadOnly( BetaPrime.prototype, 'cdf', betaPrimeCDF );\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (CDF).\n*\n* @name logcdf\n* @memberof BetaPrime.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logCDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var betaprime = new BetaPrime( 2.0, 4.0 );\n*\n* var v = betaprime.logcdf( 0.5 );\n* // returns ~-0.618\n*/\nsetReadOnly( BetaPrime.prototype, 'logcdf', betaPrimeLogCDF );\n\n/**\n* Evaluates the natural logarithm of the probability density function (logPDF).\n*\n* @name logpdf\n* @memberof BetaPrime.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var betaprime = new BetaPrime( 2.0, 4.0 );\n*\n* var v = betaprime.logpdf( 0.8 );\n* // returns ~-0.754\n*/\nsetReadOnly( BetaPrime.prototype, 'logpdf', betaPrimeLogPDF );\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @name pdf\n* @memberof BetaPrime.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var betaprime = new BetaPrime( 2.0, 4.0 );\n*\n* var v = betaprime.pdf( 0.8 );\n* // returns ~0.47\n*/\nsetReadOnly( BetaPrime.prototype, 'pdf', betaPrimePDF );\n\n/**\n* Evaluates the quantile function.\n*\n* @name quantile\n* @memberof BetaPrime.prototype\n* @type {Function}\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}\n*\n* @example\n* var betaprime = new BetaPrime( 2.0, 4.0 );\n*\n* var v = betaprime.quantile( 0.5 );\n* // returns ~0.457\n*/\nsetReadOnly( BetaPrime.prototype, 'quantile', betaPrimeQuantile );\n\n\n// EXPORTS //\n\nexport default BetaPrime;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate the cumulative distribution function (CDF) for a beta prime distribution.\n*\n* @module @stdlib/stats-base-dists-betaprime-cdf\n*\n* @example\n* import cdf from '@stdlib/stats-base-dists-betaprime-cdf';\n*\n* var y = cdf( 0.5, 1.0, 1.0 );\n* // returns ~0.333\n*\n* y = cdf( 0.5, 2.0, 4.0 );\n* // returns ~0.539\n*\n* @example\n* import { factory as factory } from '@stdlib/stats-base-dists-betaprime-cdf';\n*\n* var cdf = factory( 0.5, 0.5 );\n*\n* var y = cdf( 0.8 );\n* // returns ~0.465\n*\n* y = cdf( 0.3 );\n* // returns ~0.319\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport cdf from './cdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( cdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport { factory as betaFactory } from '@stdlib/stats-base-dists-beta-cdf';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the cumulative distribution function (CDF) for a beta prime distribution with first shape parameter `alpha` and second shape parameter `beta`.\n*\n* @param {PositiveNumber} alpha - first shape parameter\n* @param {PositiveNumber} beta - second shape parameter\n* @returns {Function} CDF\n*\n* @example\n* var cdf = factory( 0.5, 0.5 );\n*\n* var y = cdf( 0.8 );\n* // returns ~0.465\n*\n* y = cdf( 0.3 );\n* // returns ~0.319\n*/\nfunction factory( alpha, beta ) {\n\tvar betaCDF;\n\tif (\n\t\tisnan( alpha ) ||\n\t\tisnan( beta ) ||\n\t\talpha <= 0.0 ||\n\t\tbeta <= 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\tbetaCDF = betaFactory( alpha, beta );\n\treturn cdf;\n\n\t/**\n\t* Evaluates the cumulative distribution function (CDF) for a beta prime distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated CDF\n\t*\n\t* @example\n\t* var y = cdf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction cdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x <= 0.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\tif ( x === PINF ) {\n\t\t\treturn 1.0;\n\t\t}\n\t\treturn betaCDF( x / ( 1.0 + x ) );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate the natural logarithm of the cumulative distribution function (CDF) for a beta prime distribution.\n*\n* @module @stdlib/stats-base-dists-betaprime-logcdf\n*\n* @example\n* import logcdf from '@stdlib/stats-base-dists-betaprime-logcdf';\n*\n* var y = logcdf( 0.5, 1.0, 1.0 );\n* // returns ~-1.099\n*\n* y = logcdf( 0.5, 2.0, 4.0 );\n* // returns ~-0.618\n*\n* @example\n* import { factory as factory } from '@stdlib/stats-base-dists-betaprime-logcdf';\n*\n* var logcdf = factory( 0.5, 0.5 );\n*\n* var y = logcdf( 0.8 );\n* // returns ~-0.766\n*\n* y = logcdf( 0.3 );\n* // returns ~-1.142\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport logcdf from './logcdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( logcdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default logcdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport { factory as betaFactory } from '@stdlib/stats-base-dists-beta-logcdf';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the natural logarithm of the cumulative distribution function (CDF) for a beta prime distribution with first shape parameter `alpha` and second shape parameter `beta`.\n*\n* @param {PositiveNumber} alpha - first shape parameter\n* @param {PositiveNumber} beta - second shape parameter\n* @returns {Function} logCDF\n*\n* @example\n* var logcdf = factory( 0.5, 0.5 );\n*\n* var y = logcdf( 0.8 );\n* // returns ~-0.767\n*\n* y = logcdf( 0.3 );\n* // returns ~-1.143\n*/\nfunction factory( alpha, beta ) {\n\tvar betaLogCDF;\n\tif (\n\t\tisnan( alpha ) ||\n\t\tisnan( beta ) ||\n\t\talpha <= 0.0 ||\n\t\tbeta <= 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\tbetaLogCDF = betaFactory( alpha, beta );\n\treturn logcdf;\n\n\t/**\n\t* Evaluates the natural logarithm of the cumulative distribution function (CDF) for a beta prime distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {number} evaluated logCDF\n\t*\n\t* @example\n\t* var y = logcdf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction logcdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x <= 0.0 ) {\n\t\t\treturn NINF;\n\t\t}\n\t\tif ( x === PINF ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn betaLogCDF( x / ( 1.0 + x ) );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate the natural logarithm of the probability density function (logPDF) for a beta prime distribution.\n*\n* @module @stdlib/stats-base-dists-betaprime-logpdf\n*\n* @example\n* import logpdf from '@stdlib/stats-base-dists-betaprime-logpdf';\n*\n* var y = logpdf( 0.5, 1.0, 1.0 );\n* // returns ~-0.811\n*\n* y = logpdf( 0.5, 2.0, 4.0 );\n* // returns ~-0.13\n*\n* @example\n* import { factory as factory } from '@stdlib/stats-base-dists-betaprime-logpdf';\n*\n* var logpdf = factory( 0.5, 0.5 );\n*\n* var y = logpdf( 0.8 );\n* // returns ~-0.228\n*\n* y = logpdf( 0.3 );\n* // returns ~-0.364\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport logpdf from './logpdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( logpdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default logpdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate the probability density function (PDF) for a beta prime distribution.\n*\n* @module @stdlib/stats-base-dists-betaprime-pdf\n*\n* @example\n* import pdf from '@stdlib/stats-base-dists-betaprime-pdf';\n*\n* var y = pdf( 0.5, 1.0, 1.0 );\n* // returns ~0.444\n*\n* y = pdf( 0.5, 2.0, 4.0 );\n* // returns ~0.878\n*\n* @example\n* import { factory as factory } from '@stdlib/stats-base-dists-betaprime-pdf';\n*\n* var pdf = factory( 0.5, 0.5 );\n*\n* var y = pdf( 0.8 );\n* // returns ~0.198\n*\n* y = pdf( 0.3 );\n* // returns ~0.447\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport pdf from './pdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( pdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default pdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport { factory as logpdfFactory } from '@stdlib/stats-base-dists-betaprime-logpdf';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport exp from '@stdlib/math-base-special-exp';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the probability density function (PDF) for a beta prime distribution with first shape parameter `alpha` and second shape parameter `beta`.\n*\n* @param {PositiveNumber} alpha - first shape parameter\n* @param {PositiveNumber} beta - second shape parameter\n* @returns {Function} PDF\n*\n* @example\n* var pdf = factory( 0.5, 0.5 );\n*\n* var y = pdf( 0.8 );\n* // returns ~0.198\n*\n* y = pdf( 0.3 );\n* // returns ~0.447\n*/\nfunction factory( alpha, beta ) {\n\tvar logpdf;\n\tif (\n\t\tisnan( alpha ) ||\n\t\tisnan( beta ) ||\n\t\talpha <= 0.0 ||\n\t\tbeta <= 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\tlogpdf = logpdfFactory( alpha, beta );\n\treturn pdf;\n\n\t/**\n\t* Evaluates the probability density function (PDF) for a beta prime distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {number} evaluated PDF\n\t*\n\t* @example\n\t* var y = pdf( 0.3 );\n\t* // returns <number>\n\t*/\n\tfunction pdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn exp( logpdf( x ) );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate the quantile function for a beta prime distribution.\n*\n* @module @stdlib/stats-base-dists-betaprime-quantile\n*\n* @example\n* import quantile from '@stdlib/stats-base-dists-betaprime-quantile';\n*\n* var y = quantile( 0.8, 2.0, 1.0 );\n* // returns ~8.472\n*\n* y = quantile( 0.5, 4.0, 2.0 );\n* // returns ~2.187\n*\n* @example\n* import { factory as factory } from '@stdlib/stats-base-dists-betaprime-quantile';\n*\n* var quantile = factory( 2.0, 2.0 );\n*\n* var y = quantile( 0.8 );\n* // returns ~2.482\n*\n* y = quantile( 0.4 );\n* // returns ~0.763\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport quantile from './quantile.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( quantile, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default quantile;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport betaincinv from '@stdlib/math-base-special-betaincinv';\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the quantile function for a beta prime distribution with first shape parameter `alpha` and second shape parameter `beta`.\n*\n* @param {PositiveNumber} alpha - first shape parameter\n* @param {PositiveNumber} beta - second shape parameter\n* @returns {Function} quantile function\n*\n* @example\n* var quantile = factory( 2.5, 0.5 );\n* var y = quantile( 0.5 );\n* // returns ~9.468\n*\n* y = quantile( 0.8 );\n* // returns ~70.042\n*/\nfunction factory( alpha, beta ) {\n\tif (\n\t\tisnan( alpha ) ||\n\t\tisnan( beta ) ||\n\t\talpha <= 0.0 ||\n\t\tbeta <= 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn quantile;\n\n\t/**\n\t* Evaluates the quantile function for a beta prime distribution.\n\t*\n\t* @private\n\t* @param {Probability} p - input value\n\t* @returns {number} evaluated quantile function\n\t*\n\t* @example\n\t* var y = quantile( 0.3 );\n\t* // returns <number>\n\t*/\n\tfunction quantile( p ) {\n\t\tvar x;\n\t\tif (\n\t\t\tisnan( p ) ||\n\t\t\tp < 0.0 ||\n\t\t\tp > 1.0\n\t\t) {\n\t\t\treturn NaN;\n\t\t}\n\t\tx = betaincinv( p, alpha, beta );\n\t\treturn x / ( 1.0-x );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace betaprime\n*/\nvar betaprime = {};\n\n/**\n* @name cdf\n* @memberof betaprime\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/betaprime/cdf}\n*/\nimport cdf from '@stdlib/stats-base-dists-betaprime-cdf';\nsetReadOnly( betaprime, 'cdf', cdf );\n\n/**\n* @name BetaPrime\n* @memberof betaprime\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/betaprime/ctor}\n*/\nimport BetaPrime from '@stdlib/stats-base-dists-betaprime-ctor';\nsetReadOnly( betaprime, 'BetaPrime', BetaPrime );\n\n/**\n* @name kurtosis\n* @memberof betaprime\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/betaprime/kurtosis}\n*/\nimport kurtosis from '@stdlib/stats-base-dists-betaprime-kurtosis';\nsetReadOnly( betaprime, 'kurtosis', kurtosis );\n\n/**\n* @name logcdf\n* @memberof betaprime\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/betaprime/logcdf}\n*/\nimport logcdf from '@stdlib/stats-base-dists-betaprime-logcdf';\nsetReadOnly( betaprime, 'logcdf', logcdf );\n\n/**\n* @name logpdf\n* @memberof betaprime\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/betaprime/logpdf}\n*/\nimport logpdf from '@stdlib/stats-base-dists-betaprime-logpdf';\nsetReadOnly( betaprime, 'logpdf', logpdf );\n\n/**\n* @name mean\n* @memberof betaprime\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/betaprime/mean}\n*/\nimport mean from '@stdlib/stats-base-dists-betaprime-mean';\nsetReadOnly( betaprime, 'mean', mean );\n\n/**\n* @name mode\n* @memberof betaprime\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/betaprime/mode}\n*/\nimport mode from '@stdlib/stats-base-dists-betaprime-mode';\nsetReadOnly( betaprime, 'mode', mode );\n\n/**\n* @name pdf\n* @memberof betaprime\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/betaprime/pdf}\n*/\nimport pdf from '@stdlib/stats-base-dists-betaprime-pdf';\nsetReadOnly( betaprime, 'pdf', pdf );\n\n/**\n* @name quantile\n* @memberof betaprime\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/betaprime/quantile}\n*/\nimport quantile from '@stdlib/stats-base-dists-betaprime-quantile';\nsetReadOnly( betaprime, 'quantile', quantile );\n\n/**\n* @name skewness\n* @memberof betaprime\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/betaprime/skewness}\n*/\nimport skewness from '@stdlib/stats-base-dists-betaprime-skewness';\nsetReadOnly( betaprime, 'skewness', skewness );\n\n/**\n* @name stdev\n* @memberof betaprime\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/betaprime/stdev}\n*/\nimport stdev from '@stdlib/stats-base-dists-betaprime-stdev';\nsetReadOnly( betaprime, 'stdev', stdev );\n\n/**\n* @name variance\n* @memberof betaprime\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/betaprime/variance}\n*/\nimport variance from '@stdlib/stats-base-dists-betaprime-variance';\nsetReadOnly( betaprime, 'variance', variance );\n\n\n// EXPORTS //\n\nexport default betaprime;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math-base-special-floor';\n\n\n// MAIN //\n\n/**\n* Tests if a finite double-precision floating-point number is a nonnegative integer.\n*\n* @param {number} x - value to test\n* @returns {boolean} boolean indicating whether the value is a nonnegative integer\n*\n* @example\n* var bool = isNonNegativeInteger( 1.0 );\n* // returns true\n*\n* @example\n* var bool = isNonNegativeInteger( 0.0 );\n* // returns true\n*\n* @example\n* var bool = isNonNegativeInteger( -10.0 );\n* // returns false\n*/\nfunction isNonNegativeInteger( x ) {\n\treturn (floor(x) === x && x >= 0);\n}\n\n\n// EXPORTS //\n\nexport default isNonNegativeInteger;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNonNegativeInteger from '@stdlib/math-base-assert-is-nonnegative-integer';\nimport betainc from '@stdlib/math-base-special-betainc';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport floor from '@stdlib/math-base-special-floor';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Evaluates the cumulative distribution function (CDF) for a binomial distribution with number of trials `n` and success probability `p` at a value `x`.\n*\n* @param {number} x - input value\n* @param {NonNegativeInteger} n - number of trials\n* @param {Probability} p - success probability\n* @returns {Probability} evaluated CDF\n*\n* @example\n* var y = cdf( 3.0, 20, 0.2 );\n* // returns ~0.411\n*\n* @example\n* var y = cdf( 21.0, 20, 0.2 );\n* // returns 1.0\n*\n* @example\n* var y = cdf( 5.0, 10, 0.4 );\n* // returns ~0.834\n*\n* @example\n* var y = cdf( 0.0, 10, 0.4 );\n* // returns ~0.006\n*\n* @example\n* var y = cdf( NaN, 20, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, NaN, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, 20, NaN );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2.0, 1.5, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2.0, -2.0, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2.0, 20, -1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2.0, 20, 1.5 );\n* // returns NaN\n*/\nfunction cdf( x, n, p ) {\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( n ) ||\n\t\tisnan( p ) ||\n\t\tp < 0.0 ||\n\t\tp > 1.0 ||\n\t\t!isNonNegativeInteger( n ) ||\n\t\tn === PINF\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x < 0.0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( x >= n ) {\n\t\treturn 1.0;\n\t}\n\tx = floor( x + 1.0e-7 );\n\treturn betainc( p, x + 1.0, n - x, true, true );\n}\n\n\n// EXPORTS //\n\nexport default cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport PINF from '@stdlib/constants-float64-pinf';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport isInt from '@stdlib/math-base-assert-is-integer';\n\n\n// MAIN //\n\n/**\n* Tests if a number primitive is an integer value.\n*\n* @private\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a number primitive is an integer value\n*/\nfunction isInteger( value ) {\n\treturn (\n\t\tvalue < PINF &&\n\t\tvalue > NINF &&\n\t\tisInt( value )\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isInteger;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isNumber } from '@stdlib/assert-is-number';\nimport isInt from './integer.js';\n\n\n// MAIN //\n\n/**\n* Tests if a value is a number primitive having an integer value.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a number primitive having an integer value\n*\n* @example\n* var bool = isInteger( -3.0 );\n* // returns true\n*\n* @example\n* var bool = isInteger( new Number( -3.0 ) );\n* // returns false\n*/\nfunction isInteger( value ) {\n\treturn (\n\t\tisNumber( value ) &&\n\t\tisInt( value )\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isInteger;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isObject as isNumber } from '@stdlib/assert-is-number';\nimport isInt from './integer.js';\n\n\n// MAIN //\n\n/**\n* Tests if a value is a number object having an integer value.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a number object having an integer value\n*\n* @example\n* var bool = isInteger( 3.0 );\n* // returns false\n*\n* @example\n* var bool = isInteger( new Number( 3.0 ) );\n* // returns true\n*/\nfunction isInteger( value ) {\n\treturn (\n\t\tisNumber( value ) &&\n\t\tisInt( value.valueOf() )\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isInteger;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPrimitive from './primitive.js';\nimport isObject from './object.js';\n\n\n// MAIN //\n\n/**\n* Tests if a value is an integer.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is an integer\n*\n* @example\n* var bool = isInteger( 5.0 );\n* // returns true\n*\n* @example\n* var bool = isInteger( new Number( 5.0 ) );\n* // returns true\n*\n* @example\n* var bool = isInteger( -3.14 );\n* // returns false\n*\n* @example\n* var bool = isInteger( null );\n* // returns false\n*/\nfunction isInteger( value ) {\n\treturn ( isPrimitive( value ) || isObject( value ) );\n}\n\n\n// EXPORTS //\n\nexport default isInteger;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isInteger } from '@stdlib/assert-is-integer';\n\n\n// MAIN //\n\n/**\n* Tests if a value is a number primitive having a positive integer value.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a number primitive having a positive integer value\n*\n* @example\n* var bool = isPositiveInteger( 3.0 );\n* // returns true\n*\n* @example\n* var bool = isPositiveInteger( new Number( 3.0 ) );\n* // returns false\n*/\nfunction isPositiveInteger( value ) {\n\treturn (\n\t\tisInteger( value ) &&\n\t\tvalue > 0.0\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isPositiveInteger;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isObject as isInteger } from '@stdlib/assert-is-integer';\n\n\n// MAIN //\n\n/**\n* Tests if a value is a number object having a positive integer value.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a number object having a positive integer value\n*\n* @example\n* var bool = isPositiveInteger( 3.0 );\n* // returns false\n*\n* @example\n* var bool = isPositiveInteger( new Number( 3.0 ) );\n* // returns true\n*/\nfunction isPositiveInteger( value ) {\n\treturn (\n\t\tisInteger( value ) &&\n\t\tvalue.valueOf() > 0.0\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isPositiveInteger;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPrimitive from './primitive.js';\nimport isObject from './object.js';\n\n\n// MAIN //\n\n/**\n* Tests if a value is a positive integer.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is a positive integer\n*\n* @example\n* var bool = isPositiveInteger( 5.0 );\n* // returns true\n*\n* @example\n* var bool = isPositiveInteger( new Number( 5.0 ) );\n* // returns true\n*\n* @example\n* var bool = isPositiveInteger( 0.0 );\n* // returns false\n*\n* @example\n* var bool = isPositiveInteger( -5.0 );\n* // returns false\n*\n* @example\n* var bool = isPositiveInteger( 3.14 );\n* // returns false\n*\n* @example\n* var bool = isPositiveInteger( null );\n* // returns false\n*/\nfunction isPositiveInteger( value ) {\n\treturn ( isPrimitive( value ) || isObject( value ) );\n}\n\n\n// EXPORTS //\n\nexport default isPositiveInteger;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNonNegativeInteger from '@stdlib/math-base-assert-is-nonnegative-integer';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Returns the kurtosis of a binomial distribution.\n*\n* @param {NonNegativeInteger} n - number of trials\n* @param {Probability} p - success probability\n* @returns {number} excess kurtosis\n*\n* @example\n* var v = kurtosis( 100, 0.1 );\n* // returns ~0.051\n*\n* @example\n* var v = kurtosis( 20, 0.5 );\n* // returns ~-0.1\n*\n* @example\n* var v = kurtosis( 10.3, 0.5 );\n* // returns NaN\n*\n* @example\n* var v = kurtosis( 20, 1.1 );\n* // returns NaN\n*\n* @example\n* var v = kurtosis( 20, NaN );\n* // returns NaN\n*/\nfunction kurtosis( n, p ) {\n\tvar pq;\n\tif (\n\t\tisnan( n ) ||\n\t\tisnan( p ) ||\n\t\tp < 0.0 ||\n\t\tp > 1.0 ||\n\t\t!isNonNegativeInteger( n ) ||\n\t\tn === PINF\n\t) {\n\t\treturn NaN;\n\t}\n\tpq = p * ( 1.0 - p );\n\treturn ( 1.0 - ( 6.0 * pq ) ) / ( n * pq );\n}\n\n\n// EXPORTS //\n\nexport default kurtosis;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNonNegativeInteger from '@stdlib/math-base-assert-is-nonnegative-integer';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Returns the expected value of a binomial distribution.\n*\n* @param {NonNegativeInteger} n - number of trials\n* @param {Probability} p - success probability\n* @returns {NonNegativeNumber} expected value\n*\n* @example\n* var v = mean( 100, 0.1 );\n* // returns 10.0\n*\n* @example\n* var v = mean( 20, 0.5 );\n* // returns 10.0\n*\n* @example\n* var v = mean( 10.3, 0.5 );\n* // returns NaN\n*\n* @example\n* var v = mean( 20, 1.1 );\n* // returns NaN\n*\n* @example\n* var v = mean( 20, NaN );\n* // returns NaN\n*/\nfunction mean( n, p ) {\n\tif (\n\t\tisnan( n ) ||\n\t\tisnan( p ) ||\n\t\tp < 0.0 ||\n\t\tp > 1.0 ||\n\t\t!isNonNegativeInteger( n ) ||\n\t\tn === PINF\n\t) {\n\t\treturn NaN;\n\t}\n\treturn n * p;\n}\n\n\n// EXPORTS //\n\nexport default mean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNonNegativeInteger from '@stdlib/math-base-assert-is-nonnegative-integer';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport round from '@stdlib/math-base-special-round';\nimport mean from '@stdlib/stats-base-dists-binomial-mean';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Returns the median of a binomial distribution.\n*\n* @param {NonNegativeInteger} n - number of trials\n* @param {Probability} p - success probability\n* @returns {NonNegativeInteger} median\n*\n* @example\n* var v = median( 100, 0.1 );\n* // returns 10\n*\n* @example\n* var v = median( 20, 0.5 );\n* // returns 10\n*\n* @example\n* var v = median( 10.3, 0.5 );\n* // returns NaN\n*\n* @example\n* var v = median( 20, 1.1 );\n* // returns NaN\n*\n* @example\n* var v = median( 20, NaN );\n* // returns NaN\n*/\nfunction median( n, p ) {\n\tif (\n\t\tisnan( n ) ||\n\t\tisnan( p ) ||\n\t\tp < 0.0 ||\n\t\tp > 1.0 ||\n\t\t!isNonNegativeInteger( n ) ||\n\t\tn === PINF\n\t) {\n\t\treturn NaN;\n\t}\n\treturn round( mean( n, p ) );\n}\n\n\n// EXPORTS //\n\nexport default median;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNonNegativeInteger from '@stdlib/math-base-assert-is-nonnegative-integer';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport floor from '@stdlib/math-base-special-floor';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Returns the mode of a binomial distribution.\n*\n* @param {NonNegativeInteger} n - number of trials\n* @param {Probability} p - success probability\n* @returns {NonNegativeInteger} mode\n*\n* @example\n* var v = mode( 100, 0.1 );\n* // returns 10\n*\n* @example\n* var v = mode( 20, 0.5 );\n* // returns 10\n*\n* @example\n* var v = mode( 10.3, 0.5 );\n* // returns NaN\n*\n* @example\n* var v = mode( 20, 1.1 );\n* // returns NaN\n*\n* @example\n* var v = mode( 20, NaN );\n* // returns NaN\n*/\nfunction mode( n, p ) {\n\tif (\n\t\tisnan( n ) ||\n\t\tisnan( p ) ||\n\t\tp < 0.0 ||\n\t\tp > 1.0 ||\n\t\t!isNonNegativeInteger( n ) ||\n\t\tn === PINF\n\t) {\n\t\treturn NaN;\n\t}\n\treturn floor( ( n+1 ) * p );\n}\n\n\n// EXPORTS //\n\nexport default mode;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNonNegativeInteger from '@stdlib/math-base-assert-is-nonnegative-integer';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Returns the skewness of a binomial distribution.\n*\n* @param {NonNegativeInteger} n - number of trials\n* @param {Probability} p - success probability\n* @returns {number} skewness\n*\n* @example\n* var v = skewness( 100, 0.1 );\n* // returns ~0.267\n*\n* @example\n* var v = skewness( 20, 0.5 );\n* // returns 0.0\n*\n* @example\n* var v = skewness( 10.3, 0.5 );\n* // returns NaN\n*\n* @example\n* var v = skewness( 20, 1.1 );\n* // returns NaN\n*\n* @example\n* var v = skewness( 20, NaN );\n* // returns NaN\n*/\nfunction skewness( n, p ) {\n\tif (\n\t\tisnan( n ) ||\n\t\tisnan( p ) ||\n\t\tp < 0.0 ||\n\t\tp > 1.0 ||\n\t\t!isNonNegativeInteger( n ) ||\n\t\tn === PINF\n\t) {\n\t\treturn NaN;\n\t}\n\treturn ( 1.0 - ( 2.0*p ) ) / sqrt( n * p * ( 1.0-p ) );\n}\n\n\n// EXPORTS //\n\nexport default skewness;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNonNegativeInteger from '@stdlib/math-base-assert-is-nonnegative-integer';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Returns the standard deviation of a binomial distribution.\n*\n* @param {NonNegativeInteger} n - number of trials\n* @param {Probability} p - success probability\n* @returns {PositiveNumber} standard deviation\n*\n* @example\n* var v = stdev( 100, 0.1 );\n* // returns 3.0\n*\n* @example\n* var v = stdev( 20, 0.5 );\n* // returns ~2.236\n*\n* @example\n* var v = stdev( 10.3, 0.5 );\n* // returns NaN\n*\n* @example\n* var v = stdev( 20, 1.1 );\n* // returns NaN\n*\n* @example\n* var v = stdev( 20, NaN );\n* // returns NaN\n*/\nfunction stdev( n, p ) {\n\tif (\n\t\tisnan( n ) ||\n\t\tisnan( p ) ||\n\t\tp < 0.0 ||\n\t\tp > 1.0 ||\n\t\t!isNonNegativeInteger( n ) ||\n\t\tn === PINF\n\t) {\n\t\treturn NaN;\n\t}\n\treturn sqrt( n * p * ( 1.0 - p ) );\n}\n\n\n// EXPORTS //\n\nexport default stdev;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNonNegativeInteger from '@stdlib/math-base-assert-is-nonnegative-integer';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Returns the variance of a binomial distribution.\n*\n* @param {NonNegativeInteger} n - number of trials\n* @param {Probability} p - success probability\n* @returns {PositiveNumber} variance\n*\n* @example\n* var v = variance( 100, 0.1 );\n* // returns 9.0\n*\n* @example\n* var v = variance( 20, 0.5 );\n* // returns 5.0\n*\n* @example\n* var v = variance( 10.3, 0.5 );\n* // returns NaN\n*\n* @example\n* var v = variance( 20, 1.1 );\n* // returns NaN\n*\n* @example\n* var v = variance( 20, NaN );\n* // returns NaN\n*/\nfunction variance( n, p ) {\n\tif (\n\t\tisnan( n ) ||\n\t\tisnan( p ) ||\n\t\tp < 0.0 ||\n\t\tp > 1.0 ||\n\t\t!isNonNegativeInteger( n ) ||\n\t\tn === PINF\n\t) {\n\t\treturn NaN;\n\t}\n\treturn n * p * ( 1.0 - p );\n}\n\n\n// EXPORTS //\n\nexport default variance;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isInteger from '@stdlib/math-base-assert-is-integer';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport betaln from '@stdlib/math-base-special-betaln';\nimport abs from '@stdlib/math-base-special-abs';\nimport ln from '@stdlib/math-base-special-ln';\nimport NINF from '@stdlib/constants-float64-ninf';\n\n\n// MAIN //\n\n/**\n* Computes the natural logarithm of the binomial coefficient of two integers.\n*\n* @param {integer} n - input value\n* @param {integer} k - second input value\n* @returns {number} function value\n*\n* @example\n* var v = binomcoefln( 8, 2 );\n* // returns ~3.332\n*\n* @example\n* var v = binomcoefln( 0, 0 );\n* // returns 0.0\n*\n* @example\n* var v = binomcoefln( -4, 2 );\n* // returns ~2.303\n*\n* @example\n* var v = binomcoefln( 88, 3 );\n* // returns ~11.606\n*\n* @example\n* var v = binomcoefln( NaN, 3 );\n* // returns NaN\n*\n* @example\n* var v = binomcoefln( 5, NaN );\n* // returns NaN\n*\n* @example\n* var v = binomcoefln( NaN, NaN );\n* // returns NaN\n*/\nfunction binomcoefln( n, k ) {\n\tif ( isnan( n ) || isnan( k ) ) {\n\t\treturn NaN;\n\t}\n\tif ( !isInteger( n ) || !isInteger( k ) ) {\n\t\treturn NaN;\n\t}\n\tif ( n < 0.0 ) {\n\t\treturn binomcoefln( -n + k - 1.0, k );\n\t}\n\tif ( k < 0 ) {\n\t\treturn NINF;\n\t}\n\tif ( k === 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( k === 1 ) {\n\t\treturn ln( abs( n ) );\n\t}\n\tif ( n < k ) {\n\t\treturn NINF;\n\t}\n\tif ( n - k < 2 ) {\n\t\treturn binomcoefln( n, n - k );\n\t}\n\t// Case: n - k >= 2\n\treturn -ln( n + 1 ) - betaln( n - k + 1, k + 1 );\n}\n\n\n// EXPORTS //\n\nexport default binomcoefln;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNonNegativeInteger from '@stdlib/math-base-assert-is-nonnegative-integer';\nimport binomcoefln from '@stdlib/math-base-special-binomcoefln';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport log1p from '@stdlib/math-base-special-log1p';\nimport ln from '@stdlib/math-base-special-ln';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Evaluates the natural logarithm of the probability mass function (PMF) for a binomial distribution with number of trials `n` and success probability `p` at a value `x`.\n*\n* @param {number} x - input value\n* @param {NonNegativeInteger} n - number of trials\n* @param {Probability} p - success probability\n* @returns {number} evaluated logPMF\n*\n* @example\n* var y = logpmf( 3.0, 20, 0.2 );\n* // returns ~-1.583\n*\n* @example\n* var y = logpmf( 21.0, 20, 0.2 );\n* // returns -Infinity\n*\n* @example\n* var y = logpmf( 5.0, 10, 0.4 );\n* // returns ~-1.606\n*\n* @example\n* var y = logpmf( 0.0, 10, 0.4 );\n* // returns ~-5.108\n*\n* @example\n* var y = logpmf( NaN, 20, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = logpmf( 0.0, NaN, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = logpmf( 0.0, 20, NaN );\n* // returns NaN\n*\n* @example\n* var y = logpmf( 2.0, 1.5, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = logpmf( 2.0, -2.0, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = logpmf( 2.0, 20, -1.0 );\n* // returns NaN\n*\n* @example\n* var y = logpmf( 2.0, 20, 1.5 );\n* // returns NaN\n*/\nfunction logpmf( x, n, p ) {\n\tvar out;\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( n ) ||\n\t\tisnan( p ) ||\n\t\tp < 0.0 ||\n\t\tp > 1.0 ||\n\t\t!isNonNegativeInteger( n ) ||\n\t\tn === PINF\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( isNonNegativeInteger( x ) ) {\n\t\tif ( x > n ) {\n\t\t\treturn NINF;\n\t\t}\n\t\tif ( p === 0.0 ) {\n\t\t\treturn ( x === 0 ) ? 0.0 : NINF;\n\t\t}\n\t\tif ( p === 1.0 ) {\n\t\t\treturn ( x === n ) ? 0.0 : NINF;\n\t\t}\n\t\tout = binomcoefln( n, x );\n\t\tout += (x * ln( p )) + (( n - x ) * log1p( -p ));\n\t\treturn out;\n\t}\n\treturn NINF;\n}\n\n\n// EXPORTS //\n\nexport default logpmf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport NINF from '@stdlib/constants-float64-ninf';\n\n\n// MAIN //\n\n/**\n* Evaluates the natural logarithm of the probability mass function (PMF) for a degenerate distribution centered at `mu`.\n*\n* @param {number} x - input value\n* @param {number} mu - constant value of the distribution\n* @returns {number} logarithm of probability mass function\n*\n* @example\n* var y = logpmf( 2.0, 3.0 );\n* // returns -Infinity\n*\n* @example\n* var y = logpmf( 3.0, 3.0 );\n* // returns 0.0\n*\n* @example\n* var y = logpmf( NaN, 0.0 );\n* // returns NaN\n*\n* @example\n* var y = logpmf( 0.0, NaN );\n* // returns NaN\n*/\nfunction logpmf( x, mu ) {\n\tif ( isnan( x ) || isnan( mu ) ) {\n\t\treturn NaN;\n\t}\n\treturn ( x === mu ) ? 0.0 : NINF;\n}\n\n\n// EXPORTS //\n\nexport default logpmf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport NINF from '@stdlib/constants-float64-ninf';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the natural logarithm of the probability mass function (PMF) of a degenerate distribution centered at a provided mean value.\n*\n* @param {number} mu - value at which to center the distribution\n* @returns {Function} logPMF\n*\n* @example\n* var logpmf = factory( 5.0 );\n*\n* var y = logpmf( 0.0 );\n* // returns -Infinity\n*\n* y = logpmf( 5.0 );\n* // returns 0.0\n*/\nfunction factory( mu ) {\n\tif ( isnan( mu ) ) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn logpmf;\n\n\t/**\n\t* Evaluates the natural logarithm of the probability mass function (PMF) for a degenerate distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {number} evaluated logPMF\n\t*\n\t* @example\n\t* var y = logpmf( 10.0 );\n\t* // returns <number>\n\t*/\n\tfunction logpmf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn ( x === mu ) ? 0.0 : NINF;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNonNegativeInteger from '@stdlib/math-base-assert-is-nonnegative-integer';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport exp from '@stdlib/math-base-special-exp';\nimport pow from '@stdlib/math-base-special-pow';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Evaluates the moment-generating function (MGF) for a binomial distribution with number of trials `n` and success probability `p` at a value `t`.\n*\n* @param {number} t - input value\n* @param {NonNegativeInteger} n - number of trials\n* @param {Probability} p - success probability\n* @returns {number} evaluated MGF\n*\n* @example\n* var y = mgf( 0.5, 20, 0.2 );\n* // returns ~11.471\n*\n* @example\n* var y = mgf( 5.0, 20, 0.2 );\n* // returns ~4.798e29\n*\n* @example\n* var y = mgf( 0.9, 10, 0.4 );\n* // returns ~99.338\n*\n* @example\n* var y = mgf( 0.0, 10, 0.4 );\n* // returns 1.0\n*\n* @example\n* var y = mgf( NaN, 20, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = mgf( 0.0, NaN, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = mgf( 0.0, 20, NaN );\n* // returns NaN\n*\n* @example\n* var y = mgf( 0.2, 1.5, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = mgf( 0.2, -2.0, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = mgf( 0.2, 20, -1.0 );\n* // returns NaN\n*\n* @example\n* var y = mgf( 0.2, 20, 1.5 );\n* // returns NaN\n*/\nfunction mgf( t, n, p ) {\n\tvar base;\n\tif (\n\t\tisnan( t ) ||\n\t\tisnan( n ) ||\n\t\tisnan( p ) ||\n\t\tp < 0.0 ||\n\t\tp > 1.0 ||\n\t\t!isNonNegativeInteger( n ) ||\n\t\tn === PINF\n\t) {\n\t\treturn NaN;\n\t}\n\tbase = 1.0 - p + (p * exp(t));\n\treturn pow( base, n );\n}\n\n\n// EXPORTS //\n\nexport default mgf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNonNegativeInteger from '@stdlib/math-base-assert-is-nonnegative-integer';\nimport binomcoefln from '@stdlib/math-base-special-binomcoefln';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport log1p from '@stdlib/math-base-special-log1p';\nimport exp from '@stdlib/math-base-special-exp';\nimport ln from '@stdlib/math-base-special-ln';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Evaluates the probability mass function (PMF) for a binomial distribution with number of trials `n` and success probability `p` at a value `x`.\n*\n* @param {number} x - input value\n* @param {NonNegativeInteger} n - number of trials\n* @param {Probability} p - success probability\n* @returns {Probability} evaluated PMF\n*\n* @example\n* var y = pmf( 3.0, 20, 0.2 );\n* // returns ~0.205\n*\n* @example\n* var y = pmf( 21.0, 20, 0.2 );\n* // returns 0.0\n*\n* @example\n* var y = pmf( 5.0, 10, 0.4 );\n* // returns ~0.201\n*\n* @example\n* var y = pmf( 0.0, 10, 0.4 );\n* // returns ~0.006\n*\n* @example\n* var y = pmf( NaN, 20, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = pmf( 0.0, NaN, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = pmf( 0.0, 20, NaN );\n* // returns NaN\n*\n* @example\n* var y = pmf( 2.0, 1.5, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = pmf( 2.0, -2.0, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = pmf( 2.0, 20, -1.0 );\n* // returns NaN\n*\n* @example\n* var y = pmf( 2.0, 20, 1.5 );\n* // returns NaN\n*/\nfunction pmf( x, n, p ) {\n\tvar lnl;\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( n ) ||\n\t\tisnan( p ) ||\n\t\tp < 0.0 ||\n\t\tp > 1.0 ||\n\t\t!isNonNegativeInteger( n ) ||\n\t\tn === PINF\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( isNonNegativeInteger( x ) ) {\n\t\tif ( x > n ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\tif ( p === 0.0 ) {\n\t\t\treturn ( x === 0 ) ? 1.0 : 0.0;\n\t\t}\n\t\tif ( p === 1.0 ) {\n\t\t\treturn ( x === n ) ? 1.0 : 0.0;\n\t\t}\n\t\tlnl = binomcoefln( n, x );\n\t\tlnl += (x * ln( p )) + (( n - x ) * log1p( -p ));\n\t\treturn exp( lnl );\n\t}\n\treturn 0.0;\n}\n\n\n// EXPORTS //\n\nexport default pmf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Evaluates the probability mass function (PMF) for a degenerate distribution centered at `mu`.\n*\n* @param {number} x - input value\n* @param {number} mu - constant value of the distribution\n* @returns {number} evaluated probability mass function\n*\n* @example\n* var y = pmf( 2.0, 3.0 );\n* // returns 0.0\n*\n* @example\n* var y = pmf( 3.0, 3.0 );\n* // returns 1.0\n*\n* @example\n* var y = pmf( NaN, 0.0 );\n* // returns NaN\n*\n* @example\n* var y = pmf( 0.0, NaN );\n* // returns NaN\n*/\nfunction pmf( x, mu ) {\n\tif ( isnan( x ) || isnan( mu ) ) {\n\t\treturn NaN;\n\t}\n\treturn ( x === mu ) ? 1.0 : 0.0;\n}\n\n\n// EXPORTS //\n\nexport default pmf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the probability mass function (PMF) of a degenerate distribution centered at a provided mean value.\n*\n* @param {number} mu - value at which to center the distribution\n* @returns {Function} function to evaluate the probability mass function\n*\n* @example\n* var pmf = factory( 5.0 );\n*\n* var y = pmf( 0.0 );\n* // returns 0.0\n*\n* y = pmf( 5.0 );\n* // returns 1.0\n*/\nfunction factory( mu ) {\n\tif ( isnan( mu ) ) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn pmf;\n\n\t/**\n\t* Evaluates the probability mass function (PMF) of a degenerate distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {number} evaluated PMF\n\t*\n\t* @example\n\t* var y = pmf( 10.0 );\n\t* // returns <number>\n\t*/\n\tfunction pmf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn ( x === mu ) ? 1.0 : 0.0;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport cdf from '@stdlib/stats-base-dists-binomial-cdf';\n\n\n// MAIN //\n\n/**\n* Performs a search to the left.\n*\n* @private\n* @param {NonNegativeInteger} x - starting guess\n* @param {Probability} r - probability\n* @param {NonNegativeInteger} n - number of trials\n* @param {Probability} p - success probability\n* @returns {NonNegativeInteger} `r` quantile of the specified distribution\n*/\nfunction searchLeft( x, r, n, p ) {\n\twhile ( x !== 0 && cdf( x-1, n, p) >= r ) {\n\t\tx -=1;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default searchLeft;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport cdf from '@stdlib/stats-base-dists-binomial-cdf';\n\n\n// MAIN //\n\n/**\n* Performs a search to the right.\n*\n* @private\n* @param {NonNegativeInteger} x - starting guess\n* @param {Probability} r - probability\n* @param {NonNegativeInteger} n - number of trials\n* @param {Probability} p - success probability\n* @returns {NonNegativeInteger} `r` quantile of the specified distribution\n*/\nfunction searchRight( x, r, n, p ) {\n\tx += 1;\n\twhile ( cdf( x, n, p ) < r ) {\n\t\tx += 1;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default searchRight;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNonNegativeInteger from '@stdlib/math-base-assert-is-nonnegative-integer';\nimport erfcinv from '@stdlib/math-base-special-erfcinv';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport round from '@stdlib/math-base-special-round';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport cdf from '@stdlib/stats-base-dists-binomial-cdf';\nimport SQRT2 from '@stdlib/constants-float64-sqrt-two';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport searchLeft from './search_left.js';\nimport searchRight from './search_right.js';\n\n\n// MAIN //\n\n/**\n* Evaluates the quantile function for a binomial distribution with number of trials `n` and success probability `p` at a probability `r`.\n*\n* @param {Probability} r - input value\n* @param {NonNegativeInteger} n - number of trials\n* @param {Probability} p  - success probability\n* @returns {NonNegativeInteger} evaluated quantile function\n*\n* @example\n* var y = quantile( 0.4, 20, 0.2 );\n* // returns 3\n*\n* @example\n* var y = quantile( 0.8, 20, 0.2 );\n* // returns 5\n*\n* @example\n* var y = quantile( 0.5, 10, 0.4 );\n* // returns 4\n*\n* @example\n* var y = quantile( 0.0, 10, 0.4 );\n* // returns 0\n*\n* @example\n* var y = quantile( 1.0, 10, 0.4 );\n* // returns 10\n*\n* @example\n* var y = quantile( NaN, 20, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.2, NaN, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.2, 20, NaN );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.5, 1.5, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.5, -2.0, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.5, 20, -1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.5, 20, 1.5 );\n* // returns NaN\n*/\nfunction quantile( r, n, p ) {\n\tvar sigmaInv;\n\tvar guess;\n\tvar sigma;\n\tvar corr;\n\tvar mu;\n\tvar x2;\n\tvar x;\n\n\tif (\n\t\tisnan( r ) ||\n\t\tisnan( n ) ||\n\t\tisnan( p ) ||\n\t\tr < 0.0 ||\n\t\tr > 1.0 ||\n\t\tp < 0.0 ||\n\t\tp > 1.0 ||\n\t\t!isNonNegativeInteger( n ) ||\n\t\tn === PINF\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( r === 1.0 || p === 1.0 ) {\n\t\treturn n;\n\t}\n\tif ( r === 0.0 || p === 0.0 || n === 0 ) {\n\t\treturn 0.0;\n\t}\n\t// Cornish-Fisher expansion:\n\tmu = n * p;\n\tsigma = sqrt( n * p * ( 1.0-p ) );\n\tsigmaInv = 1.0 / sigma;\n\tif ( r < 0.5 ) {\n\t\tx = -erfcinv( 2.0 * r ) * SQRT2;\n\t} else {\n\t\tx = erfcinv( 2.0 * ( 1.0-r ) ) * SQRT2;\n\t}\n\tx2 = x * x;\n\n\t// Skewness correction:\n\tcorr = x + ( sigmaInv * ( x2-1.0 ) / 6.0 );\n\tguess = round( mu + (sigma * corr) );\n\tif ( cdf( guess, n, p ) >= r ) {\n\t\treturn searchLeft( guess, r, n, p );\n\t}\n\treturn searchRight( guess, r, n, p );\n}\n\n\n// EXPORTS //\n\nexport default quantile;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Evaluates the quantile function for a degenerate distribution centered at `mu`.\n*\n* @param {Probability} p - input value\n* @param {number} mu - constant value of the distribution\n* @returns {number} evaluated quantile function\n*\n* @example\n* var y = quantile( 0.5, 2.0 );\n* // returns 2.0\n*\n* @example\n* var y = quantile( 0.9, 4.0 );\n* // returns 4.0\n*\n* @example\n* var y = quantile( 1.1, 0.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( -0.2, 0.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( NaN, 0.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.0, NaN );\n* // returns NaN\n*/\nfunction quantile( p, mu ) {\n\tif ( isnan( p ) || p < 0.0 || p > 1.0 ) {\n\t\treturn NaN;\n\t}\n\treturn mu;\n}\n\n\n// EXPORTS //\n\nexport default quantile;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the quantile function of a degenerate distribution centered at a provided mean value.\n*\n* @param {number} mu - value at which to center the distribution\n* @returns {Function} function to evaluate the quantile function\n*\n* @example\n* var quantile = factory( 5.0 );\n*\n* var y = quantile( 0.3 );\n* // returns 5.0\n*\n* y = quantile( 0.1 );\n* // returns 5.0\n*\n* y = quantile( 1.1 );\n* // returns NaN\n*/\nfunction factory( mu ) {\n\tif ( isnan( mu ) ) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn quantile;\n\n\t/**\n\t* Evaluates the quantile function of a degenerate distribution.\n\t*\n\t* @private\n\t* @param {Probability} p - input value\n\t* @returns {number} evaluated quantile function\n\t*\n\t* @example\n\t* var y = quantile( 0.5 );\n\t* // returns <number>\n\t*/\n\tfunction quantile( p ) {\n\t\tif ( isnan( p ) || p < 0.0 || p > 1.0 ) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn mu;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isPositiveInteger } from '@stdlib/assert-is-positive-integer';\nimport { isPrimitive as isProbability } from '@stdlib/assert-is-probability';\nimport defineProperty from '@stdlib/utils-define-property';\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport setReadOnlyAccessor from '@stdlib/utils-define-nonenumerable-read-only-accessor';\nimport kurtosis from '@stdlib/stats-base-dists-binomial-kurtosis';\nimport mean from '@stdlib/stats-base-dists-binomial-mean';\nimport median from '@stdlib/stats-base-dists-binomial-median';\nimport mode from '@stdlib/stats-base-dists-binomial-mode';\nimport skewness from '@stdlib/stats-base-dists-binomial-skewness';\nimport stdev from '@stdlib/stats-base-dists-binomial-stdev';\nimport variance from '@stdlib/stats-base-dists-binomial-variance';\nimport cdf from '@stdlib/stats-base-dists-binomial-cdf';\nimport logpmf from '@stdlib/stats-base-dists-binomial-logpmf';\nimport mgf from '@stdlib/stats-base-dists-binomial-mgf';\nimport pmf from '@stdlib/stats-base-dists-binomial-pmf';\nimport quantile from '@stdlib/stats-base-dists-binomial-quantile';\nimport format from '@stdlib/string-format';\n\n\n// FUNCTIONS //\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n*/\nfunction binomialCDF( x ) {\n\treturn cdf( x, this.n, this.p );\n}\n\n/**\n* Evaluates the natural logarithm of the probability mass function (PMF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logPMF\n*/\nfunction binomialLogPMF( x ) {\n\treturn logpmf( x, this.n, this.p );\n}\n\n/**\n* Evaluates the moment-generating function (MGF).\n*\n* @private\n* @param {number} t - input value\n* @returns {number} evaluated MGF\n*/\nfunction binomialMGF( t ) {\n\treturn mgf( t, this.n, this.p );\n}\n\n/**\n* Evaluates the probability mass function (PMF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated PMF\n*/\nfunction binomialPMF( x ) {\n\treturn pmf( x, this.n, this.p );\n}\n\n/**\n* Evaluates the quantile function.\n*\n* @private\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n*/\nfunction binomialQuantile( p ) {\n\treturn quantile( p, this.n, this.p );\n}\n\n\n// MAIN //\n\n/**\n* Binomial distribution constructor.\n*\n* @constructor\n* @param {PositiveInteger} [n=1] - number of trials\n* @param {Probability} [p=0.5] - success probability\n* @throws {TypeError} `n` must be a positive integer\n* @throws {TypeError} `p` must be a number between 0 and 1\n* @returns {Binomial} distribution instance\n*\n* @example\n* var binomial = new Binomial( 5, 0.1 );\n*\n* var y = binomial.cdf( 0.8 );\n* // returns ~0.59\n*\n* var v = binomial.mode;\n* // returns 0.0\n*/\nfunction Binomial() {\n\tvar n;\n\tvar p;\n\tif ( !(this instanceof Binomial) ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn new Binomial();\n\t\t}\n\t\treturn new Binomial( arguments[ 0 ], arguments[ 1 ] );\n\t}\n\tif ( arguments.length ) {\n\t\tn = arguments[ 0 ];\n\t\tp = arguments[ 1 ];\n\t\tif ( !isPositiveInteger( n ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Number of trials must be a positive integer. Value: `%s`.', n ) );\n\t\t}\n\t\tif ( !isProbability( p ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Success probability must be a number between 0 and 1. Value: `%s`.', p ) );\n\t\t}\n\t} else {\n\t\tn = 1;\n\t\tp = 0.5;\n\t}\n\tdefineProperty( this, 'n', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn n;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isPositiveInteger( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid assignment. Must be a positive integer. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\tn = value;\n\t\t}\n\t});\n\tdefineProperty( this, 'p', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn p;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isProbability( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid assignment. Must be a number on the interval: [0, 1]. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\tp = value;\n\t\t}\n\t});\n\treturn this;\n}\n\n/**\n* Binomial distribution excess kurtosis.\n*\n* @name kurtosis\n* @memberof Binomial.prototype\n* @type {number}\n* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}\n*\n* @example\n* var binomial = new Binomial( 12, 0.4 );\n*\n* var v = binomial.kurtosis;\n* // returns ~-0.153\n*/\nsetReadOnlyAccessor( Binomial.prototype, 'kurtosis', function get() {\n\treturn kurtosis( this.n, this.p );\n});\n\n/**\n* Binomial distribution expected value.\n*\n* @name mean\n* @memberof Binomial.prototype\n* @type {number}\n* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}\n*\n* @example\n* var binomial = new Binomial( 12, 0.4 );\n*\n* var v = binomial.mean;\n* // returns ~4.8\n*/\nsetReadOnlyAccessor( Binomial.prototype, 'mean', function get() {\n\treturn mean( this.n, this.p );\n});\n\n/**\n* Binomial distribution median.\n*\n* @name median\n* @memberof Binomial.prototype\n* @type {number}\n* @see [median]{@link https://en.wikipedia.org/wiki/Median}\n*\n* @example\n* var binomial = new Binomial( 12, 0.4 );\n*\n* var v = binomial.median;\n* // returns 5.0\n*/\nsetReadOnlyAccessor( Binomial.prototype, 'median', function get() {\n\treturn median( this.n, this.p );\n});\n\n/**\n* Binomial distribution mode.\n*\n* @name mode\n* @memberof Binomial.prototype\n* @type {NonNegativeInteger}\n* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}\n*\n* @example\n* var binomial = new Binomial( 12, 0.4 );\n*\n* var v = binomial.mode;\n* // returns 5.0\n*/\nsetReadOnlyAccessor( Binomial.prototype, 'mode', function get() {\n\treturn mode( this.n, this.p );\n});\n\n/**\n* Binomial distribution skewness.\n*\n* @name skewness\n* @memberof Binomial.prototype\n* @type {number}\n* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}\n*\n* @example\n* var binomial = new Binomial( 12, 0.4 );\n*\n* var v = binomial.skewness;\n* // returns ~0.118\n*/\nsetReadOnlyAccessor( Binomial.prototype, 'skewness', function get() {\n\treturn skewness( this.n, this.p );\n});\n\n/**\n* Binomial distribution standard deviation.\n*\n* @name stdev\n* @memberof Binomial.prototype\n* @type {number}\n* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}\n*\n* @example\n* var binomial = new Binomial( 12, 0.4 );\n*\n* var v = binomial.stdev;\n* // returns ~1.697\n*/\nsetReadOnlyAccessor( Binomial.prototype, 'stdev', function get() {\n\treturn stdev( this.n, this.p );\n});\n\n/**\n* Binomial distribution variance.\n*\n* @name variance\n* @memberof Binomial.prototype\n* @type {number}\n* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}\n*\n* @example\n* var binomial = new Binomial( 12, 0.4 );\n*\n* var v = binomial.variance;\n* // returns ~2.88\n*/\nsetReadOnlyAccessor( Binomial.prototype, 'variance', function get() {\n\treturn variance( this.n, this.p );\n});\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @name cdf\n* @memberof Binomial.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var binomial = new Binomial( 4, 0.2 );\n*\n* var v = binomial.cdf( 0.5 );\n* // returns ~0.41\n*/\nsetReadOnly( Binomial.prototype, 'cdf', binomialCDF );\n\n/**\n* Evaluates the natural logarithm of the probability density function (PMF).\n*\n* @name logpmf\n* @memberof Binomial.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logPMF\n* @see [pmf]{@link https://en.wikipedia.org/wiki/Probability_mass_function}\n*\n* @example\n* var binomial = new Binomial( 4, 0.2 );\n*\n* var v = binomial.logpmf( 2.0 );\n* // returns ~-1.873\n*/\nsetReadOnly( Binomial.prototype, 'logpmf', binomialLogPMF );\n\n/**\n* Evaluates the moment-generating function (MGF).\n*\n* @name mgf\n* @memberof Binomial.prototype\n* @type {Function}\n* @param {number} t - input value\n* @returns {number} evaluated MGF\n* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}\n*\n* @example\n* var binomial = new Binomial( 4, 0.2 );\n*\n* var v = binomial.mgf( 0.5 );\n* // returns ~1.629\n*/\nsetReadOnly( Binomial.prototype, 'mgf', binomialMGF );\n\n/**\n* Evaluates the probability density function (PMF).\n*\n* @name pmf\n* @memberof Binomial.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated PMF\n* @see [pmf]{@link https://en.wikipedia.org/wiki/Probability_mass_function}\n*\n* @example\n* var binomial = new Binomial( 4, 0.2 );\n*\n* var v = binomial.pmf( 2.0 );\n* // returns ~0.154\n*/\nsetReadOnly( Binomial.prototype, 'pmf', binomialPMF );\n\n/**\n* Evaluates the quantile function.\n*\n* @name quantile\n* @memberof Binomial.prototype\n* @type {Function}\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}\n*\n* @example\n* var binomial = new Binomial( 4, 0.2 );\n*\n* var v = binomial.quantile( 0.5 );\n* // returns 1.0\n*/\nsetReadOnly( Binomial.prototype, 'quantile', binomialQuantile );\n\n\n// EXPORTS //\n\nexport default Binomial;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Binomial distribution cumulative distribution function (CDF).\n*\n* @module @stdlib/stats-base-dists-binomial-cdf\n*\n* @example\n* import cdf from '@stdlib/stats-base-dists-binomial-cdf';\n*\n* var y = cdf( 3.0, 20, 0.2 );\n* // returns ~0.411\n*\n* y = cdf( 21.0, 20, 0.2 );\n* // returns 1.0\n*\n* y = cdf( 5.0, 10, 0.4 );\n* // returns ~0.834\n*\n* y = cdf( 0.0, 10, 0.4 );\n* // returns ~0.06\n*\n* @example\n* import { factory as factory } from '@stdlib/stats-base-dists-binomial-cdf';\n*\n* var cdf = factory( 10, 0.5 );\n*\n* var y = cdf( 3.0 );\n* // returns ~0.172\n*\n* y = cdf( 1.0 );\n* // returns ~0.011\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport cdf from './cdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( cdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNonNegativeInteger from '@stdlib/math-base-assert-is-nonnegative-integer';\nimport constantFunction from '@stdlib/utils-constant-function';\nimport betainc from '@stdlib/math-base-special-betainc';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport floor from '@stdlib/math-base-special-floor';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the cumulative distribution function (CDF) for a binomial distribution with number of trials `n` and success probability `p`.\n*\n* @param {NonNegativeInteger} n - number of trials\n* @param {Probability} p - success probability\n* @returns {Function} CDF\n*\n* @example\n* var cdf = factory( 10, 0.5 );\n* var y = cdf( 3.0 );\n* // returns ~0.172\n*\n* y = cdf( 1.0 );\n* // returns ~0.011\n*/\nfunction factory( n, p ) {\n\tif (\n\t\tisnan( n ) ||\n\t\tisnan( p ) ||\n\t\tp < 0.0 ||\n\t\tp > 1.0 ||\n\t\t!isNonNegativeInteger( n ) ||\n\t\tn === PINF\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn cdf;\n\n\t/**\n\t* Evaluates the cumulative distribution function (CDF) for a binomial distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated CDF\n\t*\n\t* @example\n\t* var y = cdf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction cdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x < 0.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\tif ( x >= n ) {\n\t\t\treturn 1.0;\n\t\t}\n\t\t// Ensure left-continuity:\n\t\tx = floor( x + 1.0e-7 );\n\t\treturn betainc( p, x + 1.0, n - x, true, true );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if a value is an integer.\n*\n* @module @stdlib/assert-is-integer\n*\n* @example\n* import isInteger from '@stdlib/assert-is-integer';\n*\n* var bool = isInteger( 5.0 );\n* // returns true\n*\n* bool = isInteger( new Number( 5.0 ) );\n* // returns true\n*\n* bool = isInteger( -3.14 );\n* // returns false\n*\n* bool = isInteger( null );\n* // returns false\n*\n* @example\n* // Use interface to check for integer primitives...\n* import { isPrimitive as isInteger } from '@stdlib/assert-is-integer';\n*\n* var bool = isInteger( -3.0 );\n* // returns true\n*\n* bool = isInteger( new Number( -3.0 ) );\n* // returns false\n*\n* @example\n* // Use interface to check for integer objects...\n* import { isObject as isInteger } from '@stdlib/assert-is-integer';\n*\n* var bool = isInteger( 3.0 );\n* // returns false\n*\n* bool = isInteger( new Number( 3.0 ) );\n* // returns true\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport isInteger from './main.js';\nimport isPrimitive from './primitive.js';\nimport isObject from './object.js';\n\n\n// MAIN //\n\nsetReadOnly( isInteger, 'isPrimitive', isPrimitive );\nsetReadOnly( isInteger, 'isObject', isObject );\n\n\n// EXPORTS //\n\nexport default isInteger;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if a value is a positive integer.\n*\n* @module @stdlib/assert-is-positive-integer\n*\n* @example\n* import isPositiveInteger from '@stdlib/assert-is-positive-integer';\n*\n* var bool = isPositiveInteger( 5.0 );\n* // returns true\n*\n* bool = isPositiveInteger( new Number( 5.0 ) );\n* // returns true\n*\n* bool = isPositiveInteger( -5.0 );\n* // returns false\n*\n* bool = isPositiveInteger( 3.14 );\n* // returns false\n*\n* bool = isPositiveInteger( null );\n* // returns false\n*\n* @example\n* import { isPrimitive as isPositiveInteger } from '@stdlib/assert-is-positive-integer';\n*\n* var bool = isPositiveInteger( 3.0 );\n* // returns true\n*\n* bool = isPositiveInteger( new Number( 3.0 ) );\n* // returns false\n*\n* @example\n* import { isObject as isPositiveInteger } from '@stdlib/assert-is-positive-integer';\n*\n* var bool = isPositiveInteger( 3.0 );\n* // returns false\n*\n* bool = isPositiveInteger( new Number( 3.0 ) );\n* // returns true\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport isPositiveInteger from './main.js';\nimport isPrimitive from './primitive.js';\nimport isObject from './object.js';\n\n\n// MAIN //\n\nsetReadOnly( isPositiveInteger, 'isPrimitive', isPrimitive );\nsetReadOnly( isPositiveInteger, 'isObject', isObject );\n\n\n// EXPORTS //\n\nexport default isPositiveInteger;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Natural logarithm of the probability mass function (PDF) for a degenerate distribution.\n*\n* @module @stdlib/stats-base-dists-degenerate-logpmf\n*\n* @example\n* import logpmf from '@stdlib/stats-base-dists-degenerate-logpmf';\n*\n* var y = logpmf( 2.0, 0.0 );\n* // returns -Infinity\n*\n* @example\n* import { factory as factory } from '@stdlib/stats-base-dists-degenerate-logpmf';\n*\n* var logpmf = factory( 10.0 );\n*\n* var y = logpmf( 10.0 );\n* // returns 0.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport logpmf from './logpmf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( logpmf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default logpmf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Natural logarithm of the probability mass function (PMF) for a binomial distribution.\n*\n* @module @stdlib/stats-base-dists-binomial-logpmf\n*\n* @example\n* import logpmf from '@stdlib/stats-base-dists-binomial-logpmf';\n*\n* var y = logpmf( 3.0, 20, 0.2 );\n* // returns ~-1.583\n*\n* y = logpmf( 21.0, 20, 0.2 );\n* // returns -Infinity\n*\n* y = logpmf( 5.0, 10, 0.4 );\n* // returns ~-1.606\n*\n* y = logpmf( 0.0, 10, 0.4 );\n* // returns ~-5.108\n*\n* @example\n* import { factory as factory } from '@stdlib/stats-base-dists-binomial-logpmf';\n*\n* var logpmf = factory( 10, 0.5 );\n*\n* var y = logpmf( 3.0 );\n* // returns ~-2.146\n*\n* y = logpmf( 5.0 );\n* // returns ~-1.402\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport logpmf from './logpmf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( logpmf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default logpmf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNonNegativeInteger from '@stdlib/math-base-assert-is-nonnegative-integer';\nimport constantFunction from '@stdlib/utils-constant-function';\nimport binomcoefln from '@stdlib/math-base-special-binomcoefln';\nimport { factory as degenerate } from '@stdlib/stats-base-dists-degenerate-logpmf';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport log1p from '@stdlib/math-base-special-log1p';\nimport ln from '@stdlib/math-base-special-ln';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the natural logarithm of the probability mass function (PMF) for a binomial distribution with number of trials `n` and success probability `p`.\n*\n* @param {NonNegativeInteger} n - number of trials\n* @param {Probability} p - success probability\n* @returns {Function} logPMF\n*\n* @example\n* var logpmf = factory( 10, 0.5 );\n* var y = logpmf( 3.0 );\n* // returns ~-2.144\n*\n* y = logpmf( 5.0 );\n* // returns ~-1.402\n*/\nfunction factory( n, p ) {\n\tif (\n\t\tisnan( n ) ||\n\t\tisnan( p ) ||\n\t\t!isNonNegativeInteger( n ) ||\n\t\tn === PINF ||\n\t\tp < 0.0 ||\n\t\tp > 1.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\tif ( p === 0.0 || n === 0 ) {\n\t\treturn degenerate( 0.0 );\n\t}\n\tif ( p === 1.0 ) {\n\t\treturn degenerate( n );\n\t}\n\treturn logpmf;\n\n\t/**\n\t* Evaluates the natural logarithm of the probability mass function (PMF) for a binomial distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {number} evaluated logPMF\n\t*\n\t* @example\n\t* var y = logpmf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction logpmf( x ) {\n\t\tvar out;\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( isNonNegativeInteger( x ) ) {\n\t\t\tif ( x > n ) {\n\t\t\t\treturn NINF;\n\t\t\t}\n\t\t\tout = binomcoefln( n, x );\n\t\t\tout += (x * ln( p )) + ((n - x) * log1p( -p ));\n\t\t\treturn out;\n\t\t}\n\t\treturn NINF;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate the moment-generating function (MGF) for a binomial distribution.\n*\n* @module @stdlib/stats-base-dists-binomial-mgf\n*\n* @example\n* import mgf from '@stdlib/stats-base-dists-binomial-mgf';\n*\n* var y = mgf( 0.5, 20, 0.2 );\n* // returns ~11.471\n*\n* y = mgf( 5.0, 20, 0.2 );\n* // returns ~4.798e29\n*\n* y = mgf( 0.9, 10, 0.4 )\n* // returns ~99.338\n*\n* @example\n* import { factory as factory } from '@stdlib/stats-base-dists-binomial-mgf';\n*\n* var mgf = factory( 10, 0.5 );\n*\n* var y = mgf( 0.3 );\n* // returns ~5.013\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport mgf from './mgf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( mgf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default mgf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNonNegativeInteger from '@stdlib/math-base-assert-is-nonnegative-integer';\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport exp from '@stdlib/math-base-special-exp';\nimport pow from '@stdlib/math-base-special-pow';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the moment-generating function (MGF) of a binomial distribution with number of trials `n` and success probability `p`.\n*\n* @param {NonNegativeInteger} n - number of trials\n* @param {Probability} p - success probability\n* @returns {Function} MGF\n*\n* @example\n* var mgf = factory( 10, 0.5 );\n* var y = mgf( 0.3 );\n* // returns ~5.013\n*/\nfunction factory( n, p ) {\n\tif ( isnan( n ) ||\n\t\tisnan( p ) ||\n\t\tp < 0.0 ||\n\t\tp > 1.0 ||\n\t\t!isNonNegativeInteger( n ) ||\n\t\tn === PINF\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn mgf;\n\n\t/**\n\t* Evaluates the moment-generating function (MGF) for a binomial distribution.\n\t*\n\t* @private\n\t* @param {number} t - input value\n\t* @returns {number} evaluated MGF\n\t*\n\t* @example\n\t* var y = mgf( 0.5 );\n\t* // returns <number>\n\t*/\n\tfunction mgf( t ) {\n\t\tvar base;\n\t\tif ( isnan( t ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tbase = 1.0 - p + (p * exp(t));\n\t\treturn pow( base, n );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Degenerate distribution probability mass function (PDF).\n*\n* @module @stdlib/stats-base-dists-degenerate-pmf\n*\n* @example\n* import pmf from '@stdlib/stats-base-dists-degenerate-pmf';\n*\n* var y = pmf( 2.0, 0.0 );\n* // returns 0.0\n*\n* @example\n* import { factory as factory } from '@stdlib/stats-base-dists-degenerate-pmf';\n*\n* var pmf = factory( 10.0 );\n*\n* var y = pmf( 10.0 );\n* // returns 1.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport pmf from './pmf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( pmf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default pmf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Binomial distribution probability mass function (PMF).\n*\n* @module @stdlib/stats-base-dists-binomial-pmf\n*\n* @example\n* import pmf from '@stdlib/stats-base-dists-binomial-pmf';\n*\n* var y = pmf( 3.0, 20, 0.2 );\n* // returns ~0.205\n*\n* y = pmf( 21.0, 20, 0.2 );\n* // returns 0.0\n*\n* y = pmf( 5.0, 10, 0.4 );\n* // returns ~0.201\n*\n* y = pmf( 0.0, 10, 0.4 );\n* // returns ~0.06\n*\n* @example\n* import { factory as factory } from '@stdlib/stats-base-dists-binomial-pmf';\n*\n* var pmf = factory( 10, 0.5 );\n*\n* var y = pmf( 3.0 );\n* // returns ~0.117\n*\n* y = pmf( 5.0 );\n* // returns ~0.246\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport pmf from './pmf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( pmf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default pmf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNonNegativeInteger from '@stdlib/math-base-assert-is-nonnegative-integer';\nimport constantFunction from '@stdlib/utils-constant-function';\nimport binomcoefln from '@stdlib/math-base-special-binomcoefln';\nimport { factory as degenerate } from '@stdlib/stats-base-dists-degenerate-pmf';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport log1p from '@stdlib/math-base-special-log1p';\nimport exp from '@stdlib/math-base-special-exp';\nimport ln from '@stdlib/math-base-special-ln';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the probability mass function (PMF) for a binomial distribution with number of trials `n` and success probability `p`.\n*\n* @param {NonNegativeInteger} n - number of trials\n* @param {Probability} p - success probability\n* @returns {Function} PMF\n*\n* @example\n* var pmf = factory( 10, 0.5 );\n* var y = pmf( 3.0 );\n* // returns ~0.117\n*\n* y = pmf( 5.0 );\n* // returns ~0.246\n*/\nfunction factory( n, p ) {\n\tif (\n\t\tisnan( n ) ||\n\t\tisnan( p ) ||\n\t\t!isNonNegativeInteger( n ) ||\n\t\tn === PINF ||\n\t\tp < 0.0 ||\n\t\tp > 1.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\tif ( p === 0.0 || n === 0 ) {\n\t\treturn degenerate( 0.0 );\n\t}\n\tif ( p === 1.0 ) {\n\t\treturn degenerate( n );\n\t}\n\treturn pmf;\n\n\t/**\n\t* Evaluates the probability mass function (PMF) for a binomial distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated PMF\n\t*\n\t* @example\n\t* var y = pmf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction pmf( x ) {\n\t\tvar lnl;\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( isNonNegativeInteger( x ) ) {\n\t\t\tif ( x > n ) {\n\t\t\t\treturn 0.0;\n\t\t\t}\n\t\t\tlnl = binomcoefln( n, x );\n\t\t\tlnl += (x * ln( p )) + ((n - x) * log1p( -p ));\n\t\t\treturn exp( lnl );\n\t\t}\n\t\treturn 0.0;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Degenerate distribution quantile function.\n*\n* @module @stdlib/stats-base-dists-degenerate-quantile\n*\n* @example\n* import quantile from '@stdlib/stats-base-dists-degenerate-quantile';\n*\n* var y = quantile( 0.5, 2.0 );\n* // returns 2.0\n*\n* @example\n* import { factory as factory } from '@stdlib/stats-base-dists-degenerate-quantile';\n*\n* var quantile = factory( 10.0 );\n*\n* var y = quantile( 0.5 );\n* // returns 10.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport quantile from './quantile.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( quantile, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default quantile;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Binomial distribution quantile function.\n*\n* @module @stdlib/stats-base-dists-binomial-quantile\n*\n* @example\n* import quantile from '@stdlib/stats-base-dists-binomial-quantile';\n*\n* var y = quantile( 0.4, 20, 0.2 );\n* // returns 2\n*\n* y = quantile( 0.8, 20, 0.2 );\n* // returns 5\n*\n* y = quantile( 0.5, 10, 0.4 );\n* // returns 4\n*\n* @example\n* import { factory as factory } from '@stdlib/stats-base-dists-binomial-quantile';\n*\n* var quantile = factory( 10, 0.5 );\n*\n* var y = quantile( 0.1 );\n* // returns 3\n*\n* y = quantile( 0.9 );\n* // returns 7\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport quantile from './quantile.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( quantile, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default quantile;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNonNegativeInteger from '@stdlib/math-base-assert-is-nonnegative-integer';\nimport constantFunction from '@stdlib/utils-constant-function';\nimport { factory as degenerate } from '@stdlib/stats-base-dists-degenerate-quantile';\nimport erfcinv from '@stdlib/math-base-special-erfcinv';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport round from '@stdlib/math-base-special-round';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport cdf from '@stdlib/stats-base-dists-binomial-cdf';\nimport SQRT2 from '@stdlib/constants-float64-sqrt-two';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport searchLeft from './search_left.js';\nimport searchRight from './search_right.js';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the quantile function for a binomial distribution with number of trials `n` and success probability `p`.\n*\n* @param {NonNegativeInteger} n - number of trials\n* @param {Probability} p - success probability\n* @returns {Function} quantile function\n*\n* @example\n* var quantile = factory( 10, 0.5 );\n* var y = quantile( 0.1 );\n* // returns 3\n*\n* y = quantile( 0.9 );\n* // returns 7\n*/\nfunction factory( n, p ) {\n\tvar sigmaInv;\n\tvar sigma;\n\tvar mu;\n\n\tif (\n\t\tisnan( n ) ||\n\t\tisnan( p ) ||\n\t\t!isNonNegativeInteger( n ) ||\n\t\tn === PINF ||\n\t\tp < 0.0 ||\n\t\tp > 1.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\tif ( p === 0.0 || n === 0.0 ) {\n\t\treturn degenerate( 0.0 );\n\t}\n\tif ( p === 1.0 ) {\n\t\treturn degenerate( n );\n\t}\n\tmu = n * p;\n\tsigma = sqrt( n * p * ( 1.0-p ) );\n\tsigmaInv = 1.0 / sigma;\n\treturn quantile;\n\n\t/**\n\t* Evaluates the quantile function for a binomial distribution.\n\t*\n\t* @private\n\t* @param {Probability} r - input value\n\t* @returns {NonNegativeInteger} evaluated quantile function\n\t*\n\t* @example\n\t* var y = quantile( 0.3 );\n\t* // returns <number>\n\t*/\n\tfunction quantile( r ) {\n\t\tvar guess;\n\t\tvar corr;\n\t\tvar x2;\n\t\tvar x;\n\n\t\tif ( isnan( r ) || r < 0.0 || r > 1.0 ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( r === 0.0 ) {\n\t\t\treturn 0;\n\t\t}\n\t\tif ( r === 1.0 ) {\n\t\t\treturn n;\n\t\t}\n\t\t// Cornish-Fisher expansion:\n\t\tif ( r < 0.5 ) {\n\t\t\tx = -erfcinv( 2.0 * r ) * SQRT2;\n\t\t} else {\n\t\t\tx = erfcinv( 2.0 * ( 1.0-r ) ) * SQRT2;\n\t\t}\n\t\tx2 = x * x;\n\n\t\t// Skewness correction:\n\t\tcorr = x + ( sigmaInv * ( x2-1.0 ) / 6.0 );\n\t\tguess = round( mu + (sigma * corr) );\n\t\tif ( cdf( guess, n, p ) >= r ) {\n\t\t\treturn searchLeft( guess, r, n, p );\n\t\t}\n\t\treturn searchRight( guess, r, n, p );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace binomial\n*/\nvar binomial = {};\n\n/**\n* @name cdf\n* @memberof binomial\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/binomial/cdf}\n*/\nimport cdf from '@stdlib/stats-base-dists-binomial-cdf';\nsetReadOnly( binomial, 'cdf', cdf );\n\n/**\n* @name Binomial\n* @memberof binomial\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/binomial/ctor}\n*/\nimport Binomial from '@stdlib/stats-base-dists-binomial-ctor';\nsetReadOnly( binomial, 'Binomial', Binomial );\n\n/**\n* @name entropy\n* @memberof binomial\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/binomial/entropy}\n*/\nimport entropy from '@stdlib/stats-base-dists-binomial-entropy';\nsetReadOnly( binomial, 'entropy', entropy );\n\n/**\n* @name kurtosis\n* @memberof binomial\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/binomial/kurtosis}\n*/\nimport kurtosis from '@stdlib/stats-base-dists-binomial-kurtosis';\nsetReadOnly( binomial, 'kurtosis', kurtosis );\n\n/**\n* @name logpmf\n* @memberof binomial\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/binomial/logpmf}\n*/\nimport logpmf from '@stdlib/stats-base-dists-binomial-logpmf';\nsetReadOnly( binomial, 'logpmf', logpmf );\n\n/**\n* @name mean\n* @memberof binomial\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/binomial/mean}\n*/\nimport mean from '@stdlib/stats-base-dists-binomial-mean';\nsetReadOnly( binomial, 'mean', mean );\n\n/**\n* @name median\n* @memberof binomial\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/binomial/median}\n*/\nimport median from '@stdlib/stats-base-dists-binomial-median';\nsetReadOnly( binomial, 'median', median );\n\n/**\n* @name mgf\n* @memberof binomial\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/binomial/mgf}\n*/\nimport mgf from '@stdlib/stats-base-dists-binomial-mgf';\nsetReadOnly( binomial, 'mgf', mgf );\n\n/**\n* @name mode\n* @memberof binomial\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/binomial/mode}\n*/\nimport mode from '@stdlib/stats-base-dists-binomial-mode';\nsetReadOnly( binomial, 'mode', mode );\n\n/**\n* @name pmf\n* @memberof binomial\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/binomial/pmf}\n*/\nimport pmf from '@stdlib/stats-base-dists-binomial-pmf';\nsetReadOnly( binomial, 'pmf', pmf );\n\n/**\n* @name quantile\n* @memberof binomial\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/binomial/quantile}\n*/\nimport quantile from '@stdlib/stats-base-dists-binomial-quantile';\nsetReadOnly( binomial, 'quantile', quantile );\n\n/**\n* @name skewness\n* @memberof binomial\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/binomial/skewness}\n*/\nimport skewness from '@stdlib/stats-base-dists-binomial-skewness';\nsetReadOnly( binomial, 'skewness', skewness );\n\n/**\n* @name stdev\n* @memberof binomial\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/binomial/stdev}\n*/\nimport stdev from '@stdlib/stats-base-dists-binomial-stdev';\nsetReadOnly( binomial, 'stdev', stdev );\n\n/**\n* @name variance\n* @memberof binomial\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/binomial/variance}\n*/\nimport variance from '@stdlib/stats-base-dists-binomial-variance';\nsetReadOnly( binomial, 'variance', variance );\n\n\n// EXPORTS //\n\nexport default binomial;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNonNegativeInteger from '@stdlib/math-base-assert-is-nonnegative-integer';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport exp from '@stdlib/math-base-special-exp';\nimport ln from '@stdlib/math-base-special-ln';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Returns the entropy of a binomial distribution.\n*\n* @param {NonNegativeInteger} n - number of trials\n* @param {Probability} p - success probability\n* @returns {number} entropy\n*\n* @example\n* var v = entropy( 100, 0.1 );\n* // returns ~2.511\n*\n* @example\n* var v = entropy( 20, 0.5 );\n* // returns ~2.223\n*\n* @example\n* var v = entropy( 10.3, 0.5 );\n* // returns NaN\n*\n* @example\n* var v = entropy( 20, 1.1 );\n* // returns NaN\n*\n* @example\n* var v = entropy( 20, NaN );\n* // returns NaN\n*/\nfunction entropy( n, p ) {\n\tvar nlq;\n\tvar out;\n\tvar i;\n\tvar q;\n\n\tif (\n\t\tisnan( n ) ||\n\t\tisnan( p ) ||\n\t\tp < 0.0 ||\n\t\tp > 1.0 ||\n\t\t!isNonNegativeInteger( n ) ||\n\t\tn === PINF\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( p === 0 || p === 1 || n === 0 ) {\n\t\treturn 0.0;\n\t}\n\tq = 1.0 - p;\n\tnlq = n * ln( q );\n\tout = exp( nlq ) * nlq;\n\tfor ( i = 1; i <= n; i++ ) {\n\t\tnlq += ln( ( n - i + 1 ) / i ) + ln( p / q );\n\t\tout += exp( nlq ) * nlq;\n\t}\n\treturn -out;\n}\n\n\n// EXPORTS //\n\nexport default entropy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C code, long comment, copyright, license, and constants are from [Cephes]{@link http://www.netlib.org/cephes}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright 1984, 1995, 2000 by Stephen L. Moshier\n*\n* Some software in this archive may be from the book _Methods and Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster International, 1989) or from the Cephes Mathematical Library, a commercial product. In either event, it is copyrighted by the author. What you see here may be used freely but it comes with no support or guarantee.\n*\n* Stephen L. Moshier\n* moshier@na-net.ornl.gov\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport PIO2 from '@stdlib/constants-float64-half-pi';\nimport PIO4 from '@stdlib/constants-float64-fourth-pi';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport polyvalP from './polyval_p.js';\nimport polyvalQ from './polyval_q.js';\n\n\n// VARIABLES //\n\nvar MOREBITS = 6.123233995736765886130e-17; // pi/2 = PIO2 + MOREBITS.\nvar T3P8 = 2.41421356237309504880; // tan( 3*pi/8 )\n\n\n// MAIN //\n\n/**\n* Computes the arctangent of a number.\n*\n* ## Method\n*\n* -   Range reduction is from three intervals into the interval from 0 to 0.66. The approximant uses a rational function of degree 4/5 of the form\n*\n*     ```tex\n*     x + x^3 \\frac{P(x)}{Q(x)}\n*     ```\n*\n* ## Notes\n*\n* -   Relative error:\n*\n*     | arithmetic | domain  | # trials | peak    | rms     |\n*     |:-----------|:--------|:---------|:--------|:--------|\n*     | DEC        | -10, 10 | 50000    | 2.4e-17 | 8.3e-18 |\n*     | IEEE       | -10, 10 | 10^6     | 1.8e-16 | 5.0e-17 |\n*\n* @param {number} x - input value\n* @returns {number} arctangent (in radians)\n*\n* @example\n* var v = atan( 0.0 );\n* // returns ~0.0\n*\n* @example\n* import PI from '@stdlib/constants-float64-pi';\n*\n* var v = atan( -PI/4.0 );\n* // returns ~-0.666\n*\n* @example\n* import PI from '@stdlib/constants-float64-pi';\n*\n* var v = atan( PI/4.0 );\n* // returns ~0.666\n*\n* @example\n* var v = atan( NaN );\n* // returns NaN\n*/\nfunction atan( x ) {\n\tvar flg;\n\tvar sgn;\n\tvar y;\n\tvar z;\n\tif ( isnan( x ) || x === 0.0 ) {\n\t\treturn x;\n\t}\n\tif ( x === PINF ) {\n\t\treturn PIO2;\n\t}\n\tif ( x === NINF ) {\n\t\treturn -PIO2;\n\t}\n\tif ( x < 0.0 ) {\n\t\tsgn = true;\n\t\tx = -x;\n\t}\n\t// Range reduction:\n\tflg = 0;\n\tif ( x > T3P8 ) {\n\t\ty = PIO2;\n\t\tflg = 1;\n\t\tx = -( 1.0/x );\n\t}\n\telse if ( x <= 0.66 ) {\n\t\ty = 0.0;\n\t}\n\telse {\n\t\ty = PIO4;\n\t\tflg = 2;\n\t\tx = (x-1.0) / (x+1.0);\n\t}\n\tz = x * x;\n\tz = z*polyvalP( z ) / polyvalQ( z );\n\tz = ( x*z ) + x;\n\tif ( flg === 2 ) {\n\t\tz += 0.5 * MOREBITS;\n\t}\n\telse if ( flg === 1 ) {\n\t\tz += MOREBITS;\n\t}\n\ty += z;\n\treturn ( sgn ) ? -y : y;\n}\n\n\n// EXPORTS //\n\nexport default atan;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original code, copyright and license are from [Go]{@link https://golang.org/src/math/atan2.go}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (c) 2009 The Go Authors. All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without\n* modification, are permitted provided that the following conditions are\n* met:\n*\n*    * Redistributions of source code must retain the above copyright\n* notice, this list of conditions and the following disclaimer.\n*    * Redistributions in binary form must reproduce the above\n* copyright notice, this list of conditions and the following disclaimer\n* in the documentation and/or other materials provided with the\n* distribution.\n*    * Neither the name of Google Inc. nor the names of its\n* contributors may be used to endorse or promote products derived from\n* this software without specific prior written permission.\n*\n* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n* \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n* LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n* A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n* OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n* DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n* THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n* OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isinfinite from '@stdlib/math-base-assert-is-infinite';\nimport copysign from '@stdlib/math-base-special-copysign';\nimport signbit from '@stdlib/number-float64-base-signbit';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport atan from '@stdlib/math-base-special-atan';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport PI from '@stdlib/constants-float64-pi';\n\n\n// MAIN //\n\n/**\n* Computes the angle in the plane (in radians) between the positive x-axis and the ray from `(0,0)` to the point `(x,y)`.\n*\n* ## Special Cases\n*\n* ```tex\n* \\begin{align*}\n* \\operatorname{atan2}(y,\\mathrm{NaN}) &= \\mathrm{NaN}\\\\\n* \\operatorname{atan2}(\\mathrm{NaN},x) &= \\mathrm{NaN}\\\\\n* \\operatorname{atan2}( +0,x \\ge 0 ) &= +0 \\\\\n* \\operatorname{atan2}( -0, x \\ge 0 ) &= -0 \\\\\n* \\operatorname{atan2}( +0,x \\le -0 ) &= +\\Pi \\\\\n* \\operatorname{atan2}( -0, x \\le -0 ) &= -\\Pi \\\\\n* \\operatorname{atan2}(+\\infty, +\\infty) &= +\\tfrac{\\Pi}{4} \\\\\n* \\operatorname{atan2}(-\\infty, +\\infty) &= -\\tfrac{\\Pi}{4} \\\\\n* \\operatorname{atan2}(+\\infty, -\\infty) &= +\\tfrac{3\\Pi}{4} \\\\\n* \\operatorname{atan2}(-\\infty, -\\infty) &= -\\tfrac{3\\Pi}{4} \\\\\n* \\operatorname{atan2}(y, +\\infty) &= 0.0 \\\\\n* \\operatorname{atan2}(y>0, -\\infty) &= +\\Pi \\\\\n* \\operatorname{atan2}(y<0, -\\infty) &= -\\Pi \\\\\n* \\operatorname{atan2}(+\\infty, x ) &= +\\tfrac{\\Pi}{2} \\\\\n* \\operatorname{atan2}(-\\infty, x ) &= -\\tfrac{\\Pi}{2} \\\\\n* \\end{align*}\n* ```\n*\n* @param {number} y - `y` coordinate\n* @param {number} x - `x` coordinate\n* @returns {number} angle (in radians)\n*\n* @example\n* var v = atan2( 2.0, 2.0 ); // => atan(1.0)\n* // returns ~0.785\n*\n* @example\n* var v = atan2( 6.0, 2.0 ); // => atan(3.0)\n* // returns ~1.249\n*\n* @example\n* var v = atan2( -1.0, -1.0 ); // => atan(1.0) - π\n* // returns ~-2.356\n*\n* @example\n* var v = atan2( 3.0, 0.0 ); // => π/2\n* // returns ~1.571\n*\n* @example\n* var v = atan2( -2.0, 0.0 ); // => -π/2\n* // returns ~-1.571\n*\n* @example\n* var v = atan2( 0.0, 0.0 );\n* // returns 0.0\n*\n* @example\n* var v = atan2( 3.0, NaN );\n* // returns NaN\n*\n* @example\n* var v = atan2( NaN, 2.0 );\n* // returns NaN\n*/\nfunction atan2( y, x ) {\n\tvar q;\n\tif ( isnan( x ) || isnan( y ) ) {\n\t\treturn NaN;\n\t}\n\tif ( isinfinite( x ) ) {\n\t\tif ( x === PINF ) {\n\t\t\tif ( isinfinite( y ) ) {\n\t\t\t\treturn copysign( PI / 4.0, y );\n\t\t\t}\n\t\t\treturn copysign( 0.0, y );\n\t\t}\n\t\t// Case: x is -Infinity\n\t\tif ( isinfinite( y ) ) {\n\t\t\treturn copysign( 3.0*PI/4.0, y );\n\t\t}\n\t\treturn copysign( PI, y );\n\t}\n\tif ( isinfinite( y ) ) {\n\t\treturn copysign( PI / 2.0, y );\n\t}\n\tif ( y === 0.0 ) {\n\t\tif ( x >= 0.0 && !signbit( x ) ) {\n\t\t\treturn copysign( 0.0, y );\n\t\t}\n\t\treturn copysign( PI, y );\n\t}\n\tif ( x === 0.0 ) {\n\t\treturn copysign( PI / 2.0, y );\n\t}\n\tq = atan( y / x );\n\tif ( x < 0.0 ) {\n\t\tif ( q <= 0.0 ) {\n\t\t\treturn q + PI;\n\t\t}\n\t\treturn q - PI;\n\t}\n\treturn q;\n}\n\n\n// EXPORTS //\n\nexport default atan2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport getHighWord from '@stdlib/number-float64-base-get-high-word';\n\n\n// MAIN //\n\n/**\n* Returns a boolean indicating if the sign bit is on (true) or off (false).\n*\n* @param {number} x - input value\n* @returns {boolean} boolean indicating if sign bit is on or off\n*\n* @example\n* var bool = signbit( 4.0 );\n* // returns false\n*\n* @example\n* var bool = signbit( -9.14e-307 );\n* // returns true\n*\n* @example\n* var bool = signbit( 0.0 );\n* // returns false\n*\n* @example\n* var bool = signbit( -0.0 );\n* // returns true\n*/\nfunction signbit( x ) {\n\t// Extract from the input value a higher order word (unsigned 32-bit integer) containing the exponent and sign:\n\tvar high = getHighWord( x );\n\n\t// Shift off all bits which are not the sign bit and check if the sign bit is on:\n\treturn ( high >>> 31 ) ? true : false; // eslint-disable-line no-unneeded-ternary\n}\n\n\n// EXPORTS //\n\nexport default signbit;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn -64.85021904942025;\n\t}\n\treturn -64.85021904942025 + (x * (-122.88666844901361 + (x * (-75.00855792314705 + (x * (-16.157537187333652 + (x * -0.8750608600031904))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 194.5506571482614;\n\t}\n\treturn 194.5506571482614 + (x * (485.3903996359137 + (x * (432.88106049129027 + (x * (165.02700983169885 + (x * (24.858464901423062 + (x * 1.0))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport atan2 from '@stdlib/math-base-special-atan2';\n\n\n// VARIABLES //\n\nvar ONE_OVER_PI = 0.3183098861837907;\n\n\n// MAIN //\n\n/**\n* Evaluates the cumulative distribution function (CDF) for a Cauchy distribution with location parameter `x0` and scale parameter `gamma` at a value `x`.\n*\n* @param {number} x - input value\n* @param {number} x0 - location parameter\n* @param {PositiveNumber} gamma - scale parameter\n* @returns {Probability} evaluated CDF\n*\n* @example\n* var y = cdf( 4.0, 0.0, 2.0 );\n* // returns ~0.852\n*\n* @example\n* var y = cdf( 1.0, 0.0, 2.0 );\n* // returns ~0.648\n*\n* @example\n* var y = cdf( 1.0, 3.0, 2.0 );\n* // returns 0.25\n*\n* @example\n* var y = cdf( NaN, 0.0, 2.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 1.0, 2.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = cdf( 1.0, NaN, 3.0 );\n* // returns NaN\n*/\nfunction cdf( x, x0, gamma ) {\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( gamma ) ||\n\t\tisnan( x0 ) ||\n\t\tgamma <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn ( ONE_OVER_PI * atan2( x-x0, gamma ) ) + 0.5;\n}\n\n\n// EXPORTS //\n\nexport default cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isNumber } from '@stdlib/assert-is-number';\nimport isNan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Tests if a value is a `NaN` number primitive.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a `NaN` number primitive\n*\n* @example\n* var bool = isnan( NaN );\n* // returns true\n*\n* @example\n* var bool = isnan( 3.14 );\n* // returns false\n*\n* @example\n* var bool = isnan( new Number( NaN ) );\n* // returns false\n*/\nfunction isnan( value ) {\n\treturn (\n\t\tisNumber( value ) &&\n\t\tisNan( value )\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isnan;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isObject as isNumber } from '@stdlib/assert-is-number';\nimport isNan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Tests if a value is a number object having a value of `NaN`.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a number object having a value of `NaN`\n*\n* @example\n* var bool = isnan( NaN );\n* // returns false\n*\n* @example\n* var bool = isnan( new Number( NaN ) );\n* // returns true\n*/\nfunction isnan( value ) {\n\treturn (\n\t\tisNumber( value ) &&\n\t\tisNan( value.valueOf() )\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isnan;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPrimitive from './primitive.js';\nimport isObject from './object.js';\n\n\n// MAIN //\n\n/**\n* Tests if a value is `NaN`.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is `NaN`\n*\n* @example\n* var bool = isnan( NaN );\n* // returns true\n*\n* @example\n* var bool = isnan( new Number( NaN ) );\n* // returns true\n*\n* @example\n* var bool = isnan( 3.14 );\n* // returns false\n*\n* @example\n* var bool = isnan( null );\n* // returns false\n*/\nfunction isnan( value ) {\n\treturn ( isPrimitive( value ) || isObject( value ) );\n}\n\n\n// EXPORTS //\n\nexport default isnan;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport ln from '@stdlib/math-base-special-ln';\nimport PI from '@stdlib/constants-float64-pi';\n\n\n// MAIN //\n\n/**\n* Returns the differential entropy of a Cauchy distribution.\n*\n* @param {number} x0 - location parameter\n* @param {PositiveNumber} gamma - scale parameter\n* @returns {PositiveNumber} entropy\n*\n* @example\n* var v = entropy( 10.0, 5.0 );\n* // returns ~4.14\n*\n* @example\n* var v = entropy( 7.0, 0.1 );\n* // returns ~0.228\n*\n* @example\n* var v = entropy( 10.0, -0.5 );\n* // returns NaN\n*/\nfunction entropy( x0, gamma ) {\n\tif (\n\t\tisnan( gamma ) ||\n\t\tisnan( x0 ) ||\n\t\tgamma <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn ln( gamma ) + ln( 4.0*PI );\n}\n\n\n// EXPORTS //\n\nexport default entropy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns the median of a Cauchy distribution.\n*\n* @param {number} x0 - location parameter\n* @param {PositiveNumber} gamma - scale parameter\n* @returns {number} median\n*\n* @example\n* var v = median( 10.0, 5.0 );\n* // returns 10.0\n*\n* @example\n* var v = median( 7.0, 0.1 );\n* // returns 7.0\n*\n* @example\n* var v = median( 10.0, -0.5 );\n* // returns NaN\n*/\nfunction median( x0, gamma ) {\n\tif (\n\t\tisnan( gamma ) ||\n\t\tisnan( x0 ) ||\n\t\tgamma <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn x0;\n}\n\n\n// EXPORTS //\n\nexport default median;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns the mode of a Cauchy distribution.\n*\n* @param {number} x0 - location parameter\n* @param {PositiveNumber} gamma - scale parameter\n* @returns {number} mode\n*\n* @example\n* var v = mode( 10.0, 5.0 );\n* // returns 10.0\n*\n* @example\n* var v = mode( 7.0, 0.1 );\n* // returns 7.0\n*\n* @example\n* var v = mode( 10.0, -0.5 );\n* // returns NaN\n*/\nfunction mode( x0, gamma ) {\n\tif (\n\t\tisnan( gamma ) ||\n\t\tisnan( x0 ) ||\n\t\tgamma <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn x0;\n}\n\n\n// EXPORTS //\n\nexport default mode;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Cauchy distribution cumulative distribution function (CDF).\n*\n* @module @stdlib/stats-base-dists-cauchy-cdf\n*\n* @example\n* import cdf from '@stdlib/stats-base-dists-cauchy-cdf';\n*\n* var y = cdf( 2.0, 0.0, 1.0 );\n* // returns ~0.852\n*\n* @example\n* import { factory as factory } from '@stdlib/stats-base-dists-cauchy-cdf';\n*\n* var cdf = factory( 1.5, 3.0 );\n*\n* var y = cdf( 1.0 );\n* // returns ~0.447\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport cdf from './cdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( cdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport atan2 from '@stdlib/math-base-special-atan2';\n\n\n// VARIABLES //\n\nvar ONE_OVER_PI = 0.3183098861837907;\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the cumulative distribution function (CDF) for a Cauchy distribution with location parameter `x0` and scale parameter `gamma`.\n*\n* @param {number} x0 - location parameter\n* @param {PositiveNumber} gamma - scale parameter\n* @returns {Function} CDF\n*\n* @example\n* var cdf = factory( 10.0, 2.0 );\n*\n* var y = cdf( 10.0 );\n* // returns 0.5\n*\n* y = cdf( 12.0 );\n* // returns 0.75\n*/\nfunction factory( x0, gamma ) {\n\tif (\n\t\tisnan( gamma ) ||\n\t\tisnan( x0 ) ||\n\t\tgamma <= 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn cdf;\n\n\t/**\n\t* Evaluates the cumulative distribution function (CDF) for a Cauchy distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated CDF\n\t*\n\t* @example\n\t* var y = cdf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction cdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn ( ONE_OVER_PI * atan2( x-x0, gamma ) ) + 0.5;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if a value is `NaN`.\n*\n* @module @stdlib/assert-is-nan\n*\n* @example\n* import isnan from '@stdlib/assert-is-nan';\n*\n* var bool = isnan( NaN );\n* // returns true\n*\n* bool = isnan( new Number( NaN ) );\n* // returns true\n*\n* bool = isnan( 3.14 );\n* // returns false\n*\n* bool = isnan( null );\n* // returns false\n*\n* @example\n* import { isPrimitive as isnan } from '@stdlib/assert-is-nan';\n*\n* var bool = isnan( NaN );\n* // returns true\n*\n* bool = isnan( 3.14 );\n* // returns false\n*\n* bool = isnan( new Number( NaN ) );\n* // returns false\n*\n* @example\n* import { isObject as isnan } from '@stdlib/assert-is-nan';\n*\n* var bool = isnan( NaN );\n* // returns false\n*\n* bool = isnan( new Number( NaN ) );\n* // returns true\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport isnan from './main.js';\nimport isPrimitive from './primitive.js';\nimport isObject from './object.js';\n\n\n// MAIN //\n\nsetReadOnly( isnan, 'isPrimitive', isPrimitive );\nsetReadOnly( isnan, 'isObject', isObject );\n\n\n// EXPORTS //\n\nexport default isnan;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport atan2 from '@stdlib/math-base-special-atan2';\nimport ln from '@stdlib/math-base-special-ln';\n\n\n// VARIABLES //\n\nvar ONE_OVER_PI = 0.3183098861837907;\n\n\n// MAIN //\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (logCDF) for a Cauchy distribution with location parameter `x0` and scale parameter `gamma` at a value `x`.\n*\n* @param {number} x - input value\n* @param {number} x0 - location parameter\n* @param {PositiveNumber} gamma - scale parameter\n* @returns {number} evaluated logCDF\n*\n* @example\n* var y = logcdf( 4.0, 0.0, 2.0 );\n* // returns ~-0.16\n*\n* @example\n* var y = logcdf( 1.0, 0.0, 2.0 );\n* // returns ~-0.435\n*\n* @example\n* var y = logcdf( 1.0, 3.0, 2.0 );\n* // returns ~-1.386\n*\n* @example\n* var y = logcdf( NaN, 0.0, 2.0 );\n* // returns NaN\n*\n* @example\n* var y = logcdf( 1.0, 2.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = logcdf( 1.0, NaN, 3.0 );\n* // returns NaN\n*/\nfunction logcdf( x, x0, gamma ) {\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( gamma ) ||\n\t\tisnan( x0 ) ||\n\t\tgamma <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn ln( ( ONE_OVER_PI * atan2( x-x0, gamma ) ) + 0.5 );\n}\n\n\n// EXPORTS //\n\nexport default logcdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport log1p from '@stdlib/math-base-special-log1p';\nimport pow from '@stdlib/math-base-special-pow';\nimport ln from '@stdlib/math-base-special-ln';\nimport LNPI from '@stdlib/constants-float64-ln-pi';\n\n\n// MAIN //\n\n/**\n* Evaluates the natural logarithm of the probability density function (logPDF) for a Cauchy distribution with location parameter `x0` and scale parameter `gamma` at a value `x`.\n*\n* @param {number} x - input value\n* @param {number} x0 - location parameter\n* @param {PositiveNumber} gamma - scale parameter\n* @returns {number} evaluated logPDF\n*\n* @example\n* var y = logpdf( 2.0, 1.0, 1.0 );\n* // returns ~-1.838\n*\n* @example\n* var y = logpdf( 4.0, 3.0, 0.1 );\n* // returns ~-3.457\n*\n* @example\n* var y = logpdf( 4.0, 3.0, 3.0 );\n* // returns ~-2.349\n*\n* @example\n* var y = logpdf( NaN, 1.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = logpdf( 2.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = logpdf( 2.0, 1.0, NaN );\n* // returns NaN\n*\n* @example\n* // Negative scale parameter:\n* var y = logpdf( 2.0, 1.0, -2.0 );\n* // returns NaN\n*/\nfunction logpdf( x, x0, gamma ) {\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( gamma ) ||\n\t\tisnan( x0 ) ||\n\t\tgamma <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn -( LNPI + ln( gamma ) + log1p( pow( (x-x0)/gamma, 2.0 ) ) );\n}\n\n\n// EXPORTS //\n\nexport default logpdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport pow from '@stdlib/math-base-special-pow';\nimport PI from '@stdlib/constants-float64-pi';\n\n\n// MAIN //\n\n/**\n* Evaluates the probability density function (PDF) for a Cauchy distribution with location parameter `x0` and scale parameter `gamma` at a value `x`.\n*\n* @param {number} x - input value\n* @param {number} x0 - location parameter\n* @param {PositiveNumber} gamma - scale parameter\n* @returns {number} evaluated PDF\n*\n* @example\n* var y = pdf( 2.0, 1.0, 1.0 );\n* // returns ~0.159\n*\n* @example\n* var y = pdf( 4.0, 3.0, 0.1 );\n* // returns ~0.0315\n*\n* @example\n* var y = pdf( 4.0, 3.0, 3.0 );\n* // returns ~0.095\n*\n* @example\n* var y = pdf( NaN, 1.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = pdf( 2.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = pdf( 2.0, 1.0, NaN );\n* // returns NaN\n*\n* @example\n* // Negative scale parameter:\n* var y = pdf( 2.0, 1.0, -2.0 );\n* // returns NaN\n*/\nfunction pdf( x, x0, gamma ) {\n\tvar denom;\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( gamma ) ||\n\t\tisnan( x0 ) ||\n\t\tgamma <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tdenom = PI * gamma * ( 1.0 + pow( (x-x0)/gamma, 2.0 ) );\n\treturn 1.0 / denom;\n}\n\n\n// EXPORTS //\n\nexport default pdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport tan from '@stdlib/math-base-special-tan';\nimport PI from '@stdlib/constants-float64-pi';\n\n\n// MAIN //\n\n/**\n* Evaluates the quantile function for a Cauchy distribution with location parameter `x0` and scale parameter `gamma` at a probability `p`.\n*\n* @param {Probability} p - input value\n* @param {number} x0 - location parameter\n* @param {PositiveNumber} gamma - scale parameter\n* @returns {number} evaluated quantile function\n*\n* @example\n* var y = quantile( 0.3, 2.0, 2.0 );\n* // returns ~0.547\n*\n* @example\n* var y = quantile( 0.8, 10, 2.0 );\n* // returns ~12.753\n*\n* @example\n* var y = quantile( 0.1, 10.0, 2.0 );\n* // returns ~3.845\n*\n* @example\n* var y = quantile( 1.1, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( -0.2, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( NaN, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.0, 0.0, NaN );\n* // returns NaN\n*\n* @example\n* // Negative scale parameter:\n* var y = quantile( 0.5, 0.0, -1.0 );\n* // returns NaN\n*/\nfunction quantile( p, x0, gamma ) {\n\tif (\n\t\tisnan( x0 ) ||\n\t\tisnan( gamma ) ||\n\t\tgamma <= 0.0 ||\n\t\tisnan( p ) ||\n\t\tp < 0.0 ||\n\t\tp > 1.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn x0 + ( gamma * tan( PI*( p-0.5 ) ) );\n}\n\n\n// EXPORTS //\n\nexport default quantile;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nimport defineProperty from '@stdlib/utils-define-property';\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport setReadOnlyAccessor from '@stdlib/utils-define-nonenumerable-read-only-accessor';\nimport { isPrimitive as isPositive } from '@stdlib/assert-is-positive-number';\nimport { isPrimitive as isNumber } from '@stdlib/assert-is-number';\nimport isnan from '@stdlib/assert-is-nan';\nimport entropy from '@stdlib/stats-base-dists-cauchy-entropy';\nimport median from '@stdlib/stats-base-dists-cauchy-median';\nimport mode from '@stdlib/stats-base-dists-cauchy-mode';\nimport cdf from '@stdlib/stats-base-dists-cauchy-cdf';\nimport logcdf from '@stdlib/stats-base-dists-cauchy-logcdf';\nimport logpdf from '@stdlib/stats-base-dists-cauchy-logpdf';\nimport pdf from '@stdlib/stats-base-dists-cauchy-pdf';\nimport quantile from '@stdlib/stats-base-dists-cauchy-quantile';\nimport format from '@stdlib/string-format';\n\n\n// FUNCTIONS //\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {Probability} evaluated CDF\n*/\nfunction cauchyCDF( x ) {\n\treturn cdf( x, this.x0, this.gamma );\n}\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (logCDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logCDF\n*/\nfunction cauchyLogCDF( x ) {\n\treturn logcdf( x, this.x0, this.gamma );\n}\n\n/**\n* Evaluates the natural logarithm of the probability density function (logPDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n*/\nfunction cauchyLogPDF( x ) {\n\treturn logpdf( x, this.x0, this.gamma );\n}\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n*/\nfunction cauchyPDF( x ) {\n\treturn pdf( x, this.x0, this.gamma );\n}\n\n/**\n* Evaluates the quantile function.\n*\n* @private\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n*/\nfunction cauchyQuantile( p ) {\n\treturn quantile( p, this.x0, this.gamma );\n}\n\n\n// MAIN //\n\n/**\n* Cauchy distribution constructor.\n*\n* @constructor\n* @param {number} [x0=0.0] - location parameter\n* @param {PositiveNumber} [gamma=1.0] - scale parameter\n* @throws {TypeError} `gamma` must be a positive number\n* @returns {Cauchy} distribution instance\n*\n* @example\n* var cauchy = new Cauchy( 1.0, 1.0 );\n*\n* var y = cauchy.cdf( 0.8 );\n* // returns ~0.437\n*\n* var v = cauchy.median;\n* // returns 1.0\n*/\nfunction Cauchy() {\n\tvar gamma;\n\tvar x0;\n\tif ( !(this instanceof Cauchy) ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn new Cauchy();\n\t\t}\n\t\treturn new Cauchy( arguments[ 0 ], arguments[ 1 ] );\n\t}\n\tif ( arguments.length ) {\n\t\tx0 = arguments[ 0 ];\n\t\tgamma = arguments[ 1 ];\n\t\tif ( !isNumber( x0 ) || isnan( x0 ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Location parameter must be a number. Value: `%s`.', x0 ) );\n\t\t}\n\t\tif ( !isPositive( gamma ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Scale parameter must be a positive number. Value: `%s`.', gamma ) );\n\t\t}\n\t} else {\n\t\tx0 = 0.0;\n\t\tgamma = 1.0;\n\t}\n\tdefineProperty( this, 'x0', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn x0;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isNumber( value ) || isnan( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid assignment. Must be a number. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\tx0 = value;\n\t\t}\n\t});\n\tdefineProperty( this, 'gamma', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn gamma;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isPositive( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid assignment. Must be a positive number. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\tgamma = value;\n\t\t}\n\t});\n\treturn this;\n}\n\n/**\n* Cauchy distribution differential entropy.\n*\n* @name entropy\n* @memberof Cauchy.prototype\n* @type {number}\n* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}\n*\n* @example\n* var cauchy = new Cauchy( 4.0, 12.0 );\n*\n* var v = cauchy.entropy;\n* // returns ~5.016\n*/\nsetReadOnlyAccessor( Cauchy.prototype, 'entropy', function get() {\n\treturn entropy( this.x0, this.gamma );\n});\n\n/**\n* Cauchy distribution median.\n*\n* @name median\n* @memberof Cauchy.prototype\n* @type {number}\n* @see [median]{@link https://en.wikipedia.org/wiki/Median}\n*\n* @example\n* var cauchy = new Cauchy( 4.0, 12.0 );\n*\n* var v = cauchy.median;\n* // returns 4.0\n*/\nsetReadOnlyAccessor( Cauchy.prototype, 'median', function get() {\n\treturn median( this.x0, this.gamma );\n});\n\n/**\n* Cauchy distribution mode.\n*\n* @name mode\n* @memberof Cauchy.prototype\n* @type {number}\n* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}\n*\n* @example\n* var cauchy = new Cauchy( 4.0, 12.0 );\n*\n* var v = cauchy.mode;\n* // returns 4.0\n*/\nsetReadOnlyAccessor( Cauchy.prototype, 'mode', function get() {\n\treturn mode( this.x0, this.gamma );\n});\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @name cdf\n* @memberof Cauchy.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var cauchy = new Cauchy( 2.0, 4.0 );\n*\n* var v = cauchy.cdf( 0.5 );\n* // returns ~0.386\n*/\nsetReadOnly( Cauchy.prototype, 'cdf', cauchyCDF );\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (logCDF).\n*\n* @name logcdf\n* @memberof Cauchy.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logCDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var cauchy = new Cauchy( 2.0, 4.0 );\n*\n* var v = cauchy.logcdf( 0.5 );\n* // returns ~-0.952\n*/\nsetReadOnly( Cauchy.prototype, 'logcdf', cauchyLogCDF );\n\n/**\n* Evaluates the natural logarithm of the probability density function (logPDF).\n*\n* @name logpdf\n* @memberof Cauchy.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var cauchy = new Cauchy( 2.0, 4.0 );\n*\n* var v = cauchy.logpdf( 0.8 );\n* // returns ~-2.617\n*/\nsetReadOnly( Cauchy.prototype, 'logpdf', cauchyLogPDF );\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @name pdf\n* @memberof Cauchy.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var cauchy = new Cauchy( 2.0, 4.0 );\n*\n* var v = cauchy.pdf( 0.8 );\n* // returns ~0.073\n*/\nsetReadOnly( Cauchy.prototype, 'pdf', cauchyPDF );\n\n/**\n* Evaluates the quantile function.\n*\n* @name quantile\n* @memberof Cauchy.prototype\n* @type {Function}\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}\n*\n* @example\n* var cauchy = new Cauchy( 2.0, 4.0 );\n*\n* var v = cauchy.quantile( 0.5 );\n* // returns 2.0\n*/\nsetReadOnly( Cauchy.prototype, 'quantile', cauchyQuantile );\n\n\n// EXPORTS //\n\nexport default Cauchy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Cauchy distribution cumulative distribution function (CDF).\n*\n* @module @stdlib/stats-base-dists-cauchy-logcdf\n*\n* @example\n* import logcdf from '@stdlib/stats-base-dists-cauchy-logcdf';\n*\n* var y = logcdf( 2.0, 0.0, 1.0 );\n* // returns ~-0.16\n*\n* @example\n* import { factory as factory } from '@stdlib/stats-base-dists-cauchy-logcdf';\n*\n* var logCDF = factory( 1.5, 3.0 );\n*\n* var y = logCDF( 1.0 );\n* // returns ~-0.805\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport logcdf from './logcdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( logcdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default logcdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport atan2 from '@stdlib/math-base-special-atan2';\nimport ln from '@stdlib/math-base-special-ln';\n\n\n// VARIABLES //\n\nvar ONE_OVER_PI = 0.3183098861837907;\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the natural logarithm of the cumulative distribution function (logCDF) for a Cauchy distribution with location parameter `x0` and scale parameter `gamma`.\n*\n* @param {number} x0 - location parameter\n* @param {PositiveNumber} gamma - scale parameter\n* @returns {Function} logCDF\n*\n* @example\n* var logcdf = factory( 10.0, 2.0 );\n*\n* var y = logcdf( 10.0 );\n* // returns ~-0.693\n*\n* y = logcdf( 12.0 );\n* // returns ~-0.288\n*/\nfunction factory( x0, gamma ) {\n\tif (\n\t\tisnan( gamma ) ||\n\t\tisnan( x0 ) ||\n\t\tgamma <= 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn logcdf;\n\n\t/**\n\t* Evaluates the  natural logarithm of the cumulative distribution function (logCDF) for a Cauchy distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {number} evaluated logCDF\n\t*\n\t* @example\n\t* var y = logcdf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction logcdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn ln( ( ONE_OVER_PI * atan2( x-x0, gamma ) ) + 0.5 );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Cauchy distribution logarithm of probability density function (logPDF).\n*\n* @module @stdlib/stats-base-dists-cauchy-logpdf\n*\n* @example\n* import logpdf from '@stdlib/stats-base-dists-cauchy-logpdf';\n*\n* var y = logpdf( 2.0, 0.0, 1.0 );\n* // returns ~-2.765\n*\n* @example\n* import { factory as factory } from '@stdlib/stats-base-dists-cauchy-logpdf';\n*\n* var logpdf = factory( 10.0, 2.0 );\n*\n* var y = logpdf( 10.0 );\n* // returns ~-1.839\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport logpdf from './logpdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( logpdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default logpdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport log1p from '@stdlib/math-base-special-log1p';\nimport pow from '@stdlib/math-base-special-pow';\nimport ln from '@stdlib/math-base-special-ln';\nimport LNPI from '@stdlib/constants-float64-ln-pi';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the natural logarithm of the probability density function (logPDF) for a Cauchy distribution with location parameter `x0` and scale parameter `gamma`.\n*\n* @param {number} x0 - location parameter\n* @param {PositiveNumber} gamma - scale parameter\n* @returns {Function} logPDF\n*\n* @example\n* var logpdf = factory( 4.0, 2.0 );\n*\n* var y = logpdf( 10.0 );\n* // returns ~-4.14\n*\n* y = logpdf( 3.0 );\n* // returns ~-2.061\n*/\nfunction factory( x0, gamma ) {\n\tif (\n\t\tisnan( gamma ) ||\n\t\tisnan( x0 ) ||\n\t\tgamma <= 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn logpdf;\n\n\t/**\n\t* Evaluates the natural logarithm of the probability density function (logPDF) for a Cauchy distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {number} evaluated logPDF\n\t*\n\t* @example\n\t* var y = logpdf( 2.3 );\n\t* // returns <number>\n\t*/\n\tfunction logpdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn -( LNPI + ln( gamma ) + log1p( pow( (x-x0)/gamma, 2.0 ) ) );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Cauchy distribution probability density function (PDF).\n*\n* @module @stdlib/stats-base-dists-cauchy-pdf\n*\n* @example\n* import pdf from '@stdlib/stats-base-dists-cauchy-pdf';\n*\n* var y = pdf( 2.0, 0.0, 1.0 );\n* // returns ~0.063\n*\n* @example\n* import { factory as factory } from '@stdlib/stats-base-dists-cauchy-pdf';\n*\n* var pdf = factory( 10.0, 2.0 );\n*\n* var y = pdf( 10.0 );\n* // returns ~0.159\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport pdf from './pdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( pdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default pdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport pow from '@stdlib/math-base-special-pow';\nimport PI from '@stdlib/constants-float64-pi';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the probability density function (PDF) for a Cauchy distribution with location parameter `x0` and scale parameter `gamma`.\n*\n* @param {number} x0 - location parameter\n* @param {PositiveNumber} gamma - scale parameter\n* @returns {Function} PDF\n*\n* @example\n* var pdf = factory( 4.0, 2.0 );\n*\n* var y = pdf( 10.0 );\n* // returns ~0.0159\n*\n* y = pdf( 3.0 );\n* // returns ~0.127\n*/\nfunction factory( x0, gamma ) {\n\tvar gpi;\n\tif (\n\t\tisnan( gamma ) ||\n\t\tisnan( x0 ) ||\n\t\tgamma <= 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\tgpi = gamma * PI;\n\treturn pdf;\n\n\t/**\n\t* Evaluates the probability density function (PDF) for a Cauchy distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {number} evaluated PDF\n\t*\n\t* @example\n\t* var y = pdf( 2.3 );\n\t* // returns <number>\n\t*/\n\tfunction pdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn 1.0 / ( gpi * (1.0 + pow( (x-x0)/gamma, 2.0 )) );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Cauchy distribution quantile function.\n*\n* @module @stdlib/stats-base-dists-cauchy-quantile\n*\n* @example\n* import quantile from '@stdlib/stats-base-dists-cauchy-quantile';\n*\n* var y = quantile( 0.8, 0.0, 1.0 );\n* // returns ~1.376\n*\n* @example\n* import { factory as factory } from '@stdlib/stats-base-dists-cauchy-quantile';\n*\n* var quantile = factory( 10.0, 2.0 );\n*\n* var y = quantile( 0.5 );\n* // returns 10.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport quantile from './quantile.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( quantile, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default quantile;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport tan from '@stdlib/math-base-special-tan';\nimport PI from '@stdlib/constants-float64-pi';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the quantile function for a Cauchy distribution with location parameter `x0` and scale parameter `gamma`.\n*\n* @param {number} x0 - location parameter\n* @param {PositiveNumber} gamma - scale parameter\n* @returns {Function} quantile function\n*\n* @example\n* var quantile = factory( 10.0, 2.0 );\n* var y = quantile( 0.2 );\n* // returns ~7.247\n*\n* y = quantile( 0.8 );\n* // returns ~12.753\n*/\nfunction factory( x0, gamma ) {\n\tif (\n\t\tisnan( x0 ) ||\n\t\tisnan( gamma ) ||\n\t\tgamma <= 0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn quantile;\n\n\t/**\n\t* Evaluates the quantile function for a Cauchy distribution.\n\t*\n\t* @private\n\t* @param {Probability} p - input value\n\t* @returns {number} evaluated quantile function\n\t*\n\t* @example\n\t* var y = quantile( 0.3 );\n\t* // returns <number>\n\t*/\n\tfunction quantile( p ) {\n\t\tif ( isnan( p ) || p < 0.0 || p > 1.0 ) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn x0 + ( gamma * tan( PI*( p-0.5 ) ) );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace cauchy\n*/\nvar cauchy = {};\n\n/**\n* @name cdf\n* @memberof cauchy\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/cauchy/cdf}\n*/\nimport cdf from '@stdlib/stats-base-dists-cauchy-cdf';\nsetReadOnly( cauchy, 'cdf', cdf );\n\n/**\n* @name Cauchy\n* @memberof cauchy\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/cauchy/ctor}\n*/\nimport Cauchy from '@stdlib/stats-base-dists-cauchy-ctor';\nsetReadOnly( cauchy, 'Cauchy', Cauchy );\n\n/**\n* @name entropy\n* @memberof cauchy\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/cauchy/entropy}\n*/\nimport entropy from '@stdlib/stats-base-dists-cauchy-entropy';\nsetReadOnly( cauchy, 'entropy', entropy );\n\n/**\n* @name logcdf\n* @memberof cauchy\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/cauchy/logcdf}\n*/\nimport logcdf from '@stdlib/stats-base-dists-cauchy-logcdf';\nsetReadOnly( cauchy, 'logcdf', logcdf );\n\n/**\n* @name logpdf\n* @memberof cauchy\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/cauchy/logpdf}\n*/\nimport logpdf from '@stdlib/stats-base-dists-cauchy-logpdf';\nsetReadOnly( cauchy, 'logpdf', logpdf );\n\n/**\n* @name median\n* @memberof cauchy\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/cauchy/median}\n*/\nimport median from '@stdlib/stats-base-dists-cauchy-median';\nsetReadOnly( cauchy, 'median', median );\n\n/**\n* @name mode\n* @memberof cauchy\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/cauchy/mode}\n*/\nimport mode from '@stdlib/stats-base-dists-cauchy-mode';\nsetReadOnly( cauchy, 'mode', mode );\n\n/**\n* @name pdf\n* @memberof cauchy\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/cauchy/pdf}\n*/\nimport pdf from '@stdlib/stats-base-dists-cauchy-pdf';\nsetReadOnly( cauchy, 'pdf', pdf );\n\n/**\n* @name quantile\n* @memberof cauchy\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/cauchy/quantile}\n*/\nimport quantile from '@stdlib/stats-base-dists-cauchy-quantile';\nsetReadOnly( cauchy, 'quantile', quantile );\n\n\n// EXPORTS //\n\nexport default cauchy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport gammainc from '@stdlib/math-base-special-gammainc';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Evaluates the cumulative distribution function (CDF) for a gamma distribution with shape parameter `alpha` and rate parameter `beta` at a value `x`.\n*\n* @param {number} x - input value\n* @param {NonNegativeNumber} alpha - shape parameter\n* @param {PositiveNumber} beta - rate parameter\n* @returns {Probability} evaluated CDF\n*\n* @example\n* var y = cdf( 2.0, 1.0, 1.0 );\n* // returns ~0.865\n*\n* @example\n* var y = cdf( 2.0, 3.0, 1.0 );\n* // returns ~0.323\n*\n* @example\n* var y = cdf( -1.0, 2.0, 2.0 );\n* // returns 0.0\n*\n* @example\n* var y = cdf( +Infinity, 4.0, 2.0 );\n* // returns 1.0\n*\n* @example\n* var y = cdf( -Infinity, 4.0, 2.0 );\n* // returns 0.0\n*\n* @example\n* var y = cdf( NaN, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2.0, -1.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2.0, 1.0, -1.0 );\n* // returns NaN\n*/\nfunction cdf( x, alpha, beta ) {\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( alpha ) ||\n\t\tisnan( beta ) ||\n\t\talpha < 0.0 ||\n\t\tbeta <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( alpha === 0.0 ) {\n\t\treturn ( x < 0 ) ? 0.0 : 1.0;\n\t}\n\tif ( x <= 0.0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( x === PINF ) {\n\t\treturn 1.0;\n\t}\n\treturn gammainc( x * beta, alpha );\n}\n\n\n// EXPORTS //\n\nexport default cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Evaluates the cumulative distribution function (CDF) for a degenerate distribution with mean value `mu`.\n*\n* @param {number} x - input value\n* @param {number} mu - constant value of distribution\n* @returns {Probability} evaluated cumulative distribution function\n*\n* @example\n* var y = cdf( 2.0, 3.0 );\n* // returns 0.0\n*\n* @example\n* var y = cdf( 4.0, 3.0 );\n* // returns 1.0\n*\n* @example\n* var y = cdf( 3.0, 3.0 );\n* // returns 1.0\n*\n* @example\n* var y = cdf( NaN, 0.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, NaN );\n* // returns NaN\n*/\nfunction cdf( x, mu ) {\n\tif ( isnan( x ) || isnan( mu ) ) {\n\t\treturn NaN;\n\t}\n\treturn (x < mu) ? 0.0 : 1.0;\n}\n\n\n// EXPORTS //\n\nexport default cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the cumulative distribution function (CDF) of a degenerate distribution centered at a provided mean value.\n*\n* @param {number} mu - constant value of distribution\n* @returns {Function} function to evaluate the cumulative distribution function\n*\n* @example\n* var cdf = factory( 5.0 );\n*\n* var y = cdf( 3.0 );\n* // returns 0.0\n*\n* y = cdf( 6.0 );\n* // returns 1.0\n*\n* y = cdf( NaN );\n* // returns NaN\n*/\nfunction factory( mu ) {\n\tif ( isnan( mu ) ) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn cdf;\n\n\t/**\n\t* Evaluates the cumulative distribution function (CDF) of a degenerate distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated cumulative distribution function\n\t*\n\t* @example\n\t* var y = cdf( 10.0 );\n\t* // returns <number>\n\t*/\n\tfunction cdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn (x < mu) ? 0.0 : 1.0;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport { factory as degenerate } from '@stdlib/stats-base-dists-degenerate-cdf';\nimport gammainc from '@stdlib/math-base-special-gammainc';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the cumulative distribution function (CDF) for a gamma distribution with shape parameter `alpha` and rate parameter `beta`.\n*\n* @param {NonNegativeNumber} alpha - shape parameter\n* @param {PositiveNumber} beta - rate parameter\n* @returns {Function} CDF\n*\n* @example\n* var cdf = factory( 0.5, 0.1 );\n* var y = cdf( 12.0 );\n* // returns ~0.879\n*\n* y = cdf( 8.0 );\n* // returns ~0.794\n*/\nfunction factory( alpha, beta ) {\n\tif (\n\t\tisnan( alpha ) ||\n\t\tisnan( beta ) ||\n\t\talpha < 0.0 ||\n\t\tbeta <= 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\tif ( alpha === 0.0 ) {\n\t\treturn degenerate( 0.0 );\n\t}\n\treturn cdf;\n\n\t/**\n\t* Evaluates the cumulative distribution function (CDF) for a gamma distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated CDF\n\t*\n\t* @example\n\t* var y = cdf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction cdf( x ) {\n\t\tif ( x <= 0.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\tif ( x === PINF ) {\n\t\t\treturn 1.0;\n\t\t}\n\t\treturn gammainc( x * beta, alpha );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport gammaCDF from '@stdlib/stats-base-dists-gamma-cdf';\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Evaluates the cumulative distribution function (CDF) for a chi distribution with degrees of freedom `k` at a value `x`.\n*\n* @param {number} x - input value\n* @param {NonNegativeNumber} k - degrees of freedom\n* @returns {Probability} evaluated CDF\n*\n* @example\n* var y = cdf( 2.0, 3.0 );\n* // returns ~0.739\n*\n* @example\n* var y = cdf( 1.0, 0.5 );\n* // returns ~0.846\n*\n* @example\n* var y = cdf( -1.0, 4.0 );\n* // returns 0.0\n*\n* @example\n* var y = cdf( NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* // Negative degrees of freedom:\n* var y = cdf( 2.0, -1.0 );\n* // returns NaN\n*/\nfunction cdf( x, k ) {\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( k ) ||\n\t\tk < 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( k === 0.0 ) {\n\t\treturn ( x < 0 ) ? 0.0 : 1.0;\n\t}\n\tif ( x <= 0.0 ) {\n\t\treturn 0.0;\n\t}\n\treturn gammaCDF( x*x, k/2.0, 0.5 );\n}\n\n\n// EXPORTS //\n\nexport default cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport digamma from '@stdlib/math-base-special-digamma';\nimport gammaln from '@stdlib/math-base-special-gammaln';\nimport LN2 from '@stdlib/constants-float64-ln-two';\n\n\n// MAIN //\n\n/**\n* Returns the differential entropy of a chi distribution.\n*\n* @param {PositiveNumber} k - degrees of freedom\n* @returns {number} entropy\n*\n* @example\n* var v = entropy( 9.0 );\n* // returns ~1.052\n*\n* @example\n* var v = entropy( 1.0 );\n* // returns ~0.726\n*\n* @example\n* var v = entropy( -0.2 );\n* // returns NaN\n*\n* @example\n* var v = entropy( NaN );\n* // returns NaN\n*/\nfunction entropy( k ) {\n\tvar kh;\n\tif ( isnan( k ) || k <= 0.0 ) {\n\t\treturn NaN;\n\t}\n\tkh = k / 2.0;\n\treturn gammaln( kh ) + ( 0.5 * ( k - LN2 - ( ( k-1.0 )*digamma( kh ) ) ) );\n}\n\n\n// EXPORTS //\n\nexport default entropy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport gamma from '@stdlib/math-base-special-gamma';\nimport SQRT_TWO from '@stdlib/constants-float64-sqrt-two';\n\n\n// MAIN //\n\n/**\n* Returns the expected value of a chi distribution.\n*\n* @param {NonNegativeNumber} k - degrees of freedom\n* @returns {NonNegativeNumber} expected value\n*\n* @example\n* var v = mean( 9.0 );\n* // returns ~2.918\n*\n* @example\n* var v = mean( 1.0 );\n* // returns ~0.798\n*\n* @example\n* var v = mean( -0.2 );\n* // returns NaN\n*\n* @example\n* var v = mean( NaN );\n* // returns NaN\n*/\nfunction mean( k ) {\n\tif ( isnan( k ) || k < 0.0 ) {\n\t\treturn NaN;\n\t}\n\treturn SQRT_TWO * gamma( ( k+1.0 ) / 2.0 ) / gamma( k / 2.0 );\n}\n\n\n// EXPORTS //\n\nexport default mean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport mean from '@stdlib/stats-base-dists-chi-mean';\n\n\n// MAIN //\n\n/**\n* Returns the variance of a chi distribution.\n*\n* @param {NonNegativeNumber} k - degrees of freedom\n* @returns {NonNegativeNumber} variance\n*\n* @example\n* var v = variance( 9.0 );\n* // returns ~0.485\n*\n* @example\n* var v = variance( 1.0 );\n* // returns ~0.363\n*\n* @example\n* var v = variance( -0.2 );\n* // returns NaN\n*\n* @example\n* var v = variance( NaN );\n* // returns NaN\n*/\nfunction variance( k ) {\n\tvar mu;\n\tif ( isnan( k ) || k < 0.0 ) {\n\t\treturn NaN;\n\t}\n\tmu = mean( k );\n\treturn k - ( mu*mu );\n}\n\n\n// EXPORTS //\n\nexport default variance;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport variance from '@stdlib/stats-base-dists-chi-variance';\nimport mean from '@stdlib/stats-base-dists-chi-mean';\nimport sqrt from '@stdlib/math-base-special-sqrt';\n\n\n// MAIN //\n\n/**\n* Returns the skewness of a chi distribution.\n*\n* @param {PositiveNumber} k - degrees of freedom\n* @returns {PositiveNumber} skewness\n*\n* @example\n* var v = skewness( 9.0 );\n* // returns ~0.252\n*\n* @example\n* var v = skewness( 1.0 );\n* // returns ~0.995\n*\n* @example\n* var v = skewness( -0.2 );\n* // returns NaN\n*\n* @example\n* var v = skewness( NaN );\n* // returns NaN\n*/\nfunction skewness( k ) {\n\tvar sigma3;\n\tvar sigma2;\n\tvar sigma;\n\tvar mu;\n\tif ( isnan( k ) || k <= 0.0 ) {\n\t\treturn NaN;\n\t}\n\tmu = mean( k );\n\tsigma = sqrt( variance( k ) );\n\tsigma2 = sigma * sigma;\n\tsigma3 = sigma2 * sigma;\n\treturn ( mu / sigma3 ) * ( 1.0 - ( 2.0*sigma2 ) );\n}\n\n\n// EXPORTS //\n\nexport default skewness;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport skewness from '@stdlib/stats-base-dists-chi-skewness';\nimport variance from '@stdlib/stats-base-dists-chi-variance';\nimport mean from '@stdlib/stats-base-dists-chi-mean';\nimport sqrt from '@stdlib/math-base-special-sqrt';\n\n\n// MAIN //\n\n/**\n* Returns the excess kurtosis of a chi distribution.\n*\n* @param {PositiveNumber} k - degrees of freedom\n* @returns {PositiveNumber} excess kurtosis\n*\n* @example\n* var v = kurtosis( 9.0 );\n* // returns ~0.011\n*\n* @example\n* var v = kurtosis( 1.0 );\n* // returns ~0.869\n*\n* @example\n* var v = kurtosis( -0.2 );\n* // returns NaN\n*\n* @example\n* var v = kurtosis( NaN );\n* // returns NaN\n*/\nfunction kurtosis( k ) {\n\tvar sigma2;\n\tvar sigma;\n\tvar g1;\n\tvar mu;\n\tif ( isnan( k ) || k <= 0.0 ) {\n\t\treturn NaN;\n\t}\n\tsigma2 = variance( k );\n\tsigma = sqrt( sigma2 );\n\tmu = mean( k );\n\tg1 = skewness( k );\n\treturn ( 2.0/sigma2 ) * ( 1.0 - ( mu*sigma*g1 ) - sigma2 );\n}\n\n\n// EXPORTS //\n\nexport default kurtosis;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport sqrt from '@stdlib/math-base-special-sqrt';\n\n\n// MAIN //\n\n/**\n* Returns the mode of a chi distribution.\n*\n* @param {PositiveNumber} k - degrees of freedom\n* @returns {NonNegativeNumber} mode\n*\n* @example\n* var v = mode( 9.0 );\n* // returns ~2.828\n*\n* @example\n* var v = mode( 1.0 );\n* // returns 0.0\n*\n* @example\n* var v = mode( -0.2 );\n* // returns NaN\n*\n* @example\n* var v = mode( NaN );\n* // returns NaN\n*/\nfunction mode( k ) {\n\tif ( isnan( k ) || k < 1.0 ) {\n\t\treturn NaN;\n\t}\n\treturn sqrt( k - 1.0 );\n}\n\n\n// EXPORTS //\n\nexport default mode;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport mean from '@stdlib/stats-base-dists-chi-mean';\nimport sqrt from '@stdlib/math-base-special-sqrt';\n\n\n// MAIN //\n\n/**\n* Returns the standard deviation of a chi distribution.\n*\n* @param {NonNegativeNumber} k - degrees of freedom\n* @returns {NonNegativeNumber} standard deviation\n*\n* @example\n* var v = stdev( 9.0 );\n* // returns ~0.697\n*\n* @example\n* var v = stdev( 1.0 );\n* // returns ~0.603\n*\n* @example\n* var v = stdev( -0.2 );\n* // returns NaN\n*\n* @example\n* var v = stdev( NaN );\n* // returns NaN\n*/\nfunction stdev( k ) {\n\tvar mu;\n\tif ( isnan( k ) || k < 0.0 ) {\n\t\treturn NaN;\n\t}\n\tmu = mean( k );\n\treturn sqrt( k - ( mu*mu ) );\n}\n\n\n// EXPORTS //\n\nexport default stdev;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport gammaln from '@stdlib/math-base-special-gammaln';\nimport ln from '@stdlib/math-base-special-ln';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport LN2 from '@stdlib/constants-float64-ln-two';\n\n\n// MAIN //\n\n/**\n* Evaluates the natural logarithm of the probability density function (PDF) for a chi distribution with degrees of freedom `k` at a value `x`.\n*\n* @param {number} x - input value\n* @param {NonNegativeNumber} k - degrees of freedom\n* @returns {number} evaluated logPDF\n*\n* @example\n* var y = logpdf( 0.3, 4.0 );\n* // returns ~-4.35\n*\n* @example\n* var y = logpdf( 0.7, 0.7 );\n* // returns ~-0.622\n*\n* @example\n* var y = logpdf( -1.0, 0.5 );\n* // returns -Infinity\n*\n* @example\n* var y = logpdf( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = logpdf( NaN, 2.0 );\n* // returns NaN\n*\n* @example\n* // Negative degrees of freedom:\n* var y = logpdf( 2.0, -1.0 );\n* // returns NaN\n*/\nfunction logpdf( x, k ) {\n\tvar out;\n\tvar kh;\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( k ) ||\n\t\tk < 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( k === 0.0 ) {\n\t\t// Point mass at 0...\n\t\treturn ( x === 0.0 ) ? PINF : NINF;\n\t}\n\tif ( x < 0.0 || x === PINF ) {\n\t\treturn NINF;\n\t}\n\tkh = k / 2.0;\n\tout = ( ( 1.0-kh ) * LN2 ) + ( ( k-1.0 ) * ln( x ) ) - ( (x*x) / 2.0 );\n\tout -= gammaln( kh );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default logpdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport PINF from '@stdlib/constants-float64-pinf';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Evaluates the natural logarithm of the probability density function (logPDF) for a degenerate distribution centered at `mu`.\n*\n* @param {number} x - input value\n* @param {number} mu - constant value of the distribution\n* @returns {number} natural logarithm of probability density function\n*\n* @example\n* var y = logpdf( 2.0, 3.0 );\n* // returns -Infinity\n*\n* @example\n* var y = logpdf( 3.0, 3.0 );\n* // returns Infinity\n*\n* @example\n* var y = logpdf( NaN, 0.0 );\n* // returns NaN\n*\n* @example\n* var y = logpdf( 0.0, NaN );\n* // returns NaN\n*/\nfunction logpdf( x, mu ) {\n\tif ( isnan( x ) || isnan( mu ) ) {\n\t\treturn NaN;\n\t}\n\treturn ( x === mu ) ? PINF : NINF;\n}\n\n\n// EXPORTS //\n\nexport default logpdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the natural logarithm of the probability density function (logPDF) of a degenerate distribution centered at a provided mean value.\n*\n* @param {number} mu - value at which to center the distribution\n* @returns {Function} function to evaluate the natural logarithm of the probability density function\n*\n* @example\n* var logpdf = factory( 5.0 );\n*\n* var y = logpdf( 0.0 );\n* // returns -Infinity\n*\n* y = logpdf( 5.0 );\n* // returns Infinity\n*/\nfunction factory( mu ) {\n\tif ( isnan( mu ) ) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn logpdf;\n\n\t/**\n\t* Evaluates the natural logarithm of the probability density function (logPDF) of a degenerate distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {number} natural logarithm of the probability density function\n\t*\n\t* @example\n\t* var y = logpdf( 10.0 );\n\t* // returns <number>\n\t*/\n\tfunction logpdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn ( x === mu ) ? PINF : NINF;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport gamma from '@stdlib/math-base-special-gamma';\nimport exp from '@stdlib/math-base-special-exp';\nimport pow from '@stdlib/math-base-special-pow';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Evaluates the probability density function (PDF) for a chi distribution with degrees of freedom `k` at a value `x`.\n*\n* @param {number} x - input value\n* @param {NonNegativeNumber} k - degrees of freedom\n* @returns {number} evaluated PDF\n*\n* @example\n* var y = pdf( 0.3, 4.0 );\n* // returns ~0.013\n*\n* @example\n* var y = pdf( 0.7, 0.7 );\n* // returns ~0.537\n*\n* @example\n* var y = pdf( -1.0, 0.5 );\n* // returns 0.0\n*\n* @example\n* var y = pdf( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = pdf( NaN, 2.0 );\n* // returns NaN\n*\n* @example\n* // Negative degrees of freedom:\n* var y = pdf( 2.0, -1.0 );\n* // returns NaN\n*/\nfunction pdf( x, k ) {\n\tvar out;\n\tvar kh;\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( k ) ||\n\t\tk < 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( k === 0.0 ) {\n\t\t// Point mass at 0...\n\t\treturn ( x === 0.0 ) ? PINF : 0.0;\n\t}\n\tif ( x < 0.0 ) {\n\t\treturn 0.0;\n\t}\n\tkh = k / 2.0;\n\tout = pow( 2.0, 1.0-kh ) * pow( x, k-1.0 ) * exp( -(x*x)/2.0 );\n\tout /= gamma( kh );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default pdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport PINF from '@stdlib/constants-float64-pinf';\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Evaluates the probability density function (PDF) for a degenerate distribution centered at `mu`.\n*\n* @param {number} x - input value\n* @param {number} mu - constant value of the distribution\n* @returns {number} evaluated probability density function\n*\n* @example\n* var y = pdf( 2.0, 3.0 );\n* // returns 0.0\n*\n* @example\n* var y = pdf( 3.0, 3.0 );\n* // returns Infinity\n*\n* @example\n* var y = pdf( NaN, 0.0 );\n* // returns NaN\n*\n* @example\n* var y = pdf( 0.0, NaN );\n* // returns NaN\n*/\nfunction pdf( x, mu ) {\n\tif ( isnan( x ) || isnan( mu ) ) {\n\t\treturn NaN;\n\t}\n\treturn ( x === mu ) ? PINF : 0.0;\n}\n\n\n// EXPORTS //\n\nexport default pdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the probability density function (PDF) of a degenerate distribution centered at a provided mean value.\n*\n* @param {number} mu - value at which to center the distribution\n* @returns {Function} function to evaluate the probability density function\n*\n* @example\n* var pdf = factory( 5.0 );\n*\n* var y = pdf( 0.0 );\n* // returns 0.0\n*\n* y = pdf( 5.0 );\n* // returns Infinity\n*/\nfunction factory( mu ) {\n\tif ( isnan( mu ) ) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn pdf;\n\n\t/**\n\t* Evaluates the probability density function (PDF) of a degenerate distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {number} evaluated probability density function\n\t*\n\t* @example\n\t* var y = pdf( 10.0 );\n\t* // returns <number>\n\t*/\n\tfunction pdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn ( x === mu ) ? PINF : 0.0;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport gammaincinv from '@stdlib/math-base-special-gammaincinv';\n\n\n// MAIN //\n\n/**\n* Evaluates the quantile function for a gamma distribution with shape parameter `alpha` and rate parameter `beta` at a probability `p`.\n*\n* @param {Probability} p - input value\n* @param {NonNegativeNumber} alpha - shape parameter\n* @param {PositiveNumber} beta - rate parameter\n* @returns {number} evaluated quantile function\n*\n* @example\n* var y = quantile( 0.8, 2.0, 1.0 );\n* // returns ~2.994\n*\n* @example\n* var y = quantile( 0.5, 4.0, 2.0 );\n* // returns ~1.836\n*\n* @example\n* var y = quantile( 1.1, 1.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( -0.2, 1.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( NaN, 1.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.0, 1.0, NaN );\n* // returns NaN\n*\n* @example\n* // Non-positive shape parameter:\n* var y = quantile( 0.5, -1.0, 1.0 );\n* // returns NaN\n*\n* @example\n* // Non-positive rate parameter:\n* var y = quantile( 0.5, 1.0, -1.0 );\n* // returns NaN\n*/\nfunction quantile( p, alpha, beta ) {\n\tif (\n\t\tisnan( alpha ) ||\n\t\tisnan( beta ) ||\n\t\tisnan( p ) ||\n\t\talpha < 0.0 ||\n\t\tbeta <= 0.0 ||\n\t\tp < 0.0 ||\n\t\tp > 1.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( alpha === 0.0 ) {\n\t\treturn 0.0;\n\t}\n\treturn ( 1.0 / beta ) * gammaincinv( p, alpha );\n}\n\n\n// EXPORTS //\n\nexport default quantile;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport gammaincinv from '@stdlib/math-base-special-gammaincinv';\nimport { factory as degenerate } from '@stdlib/stats-base-dists-degenerate-quantile';\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the quantile function for a gamma distribution with shape parameter `alpha` and rate parameter `beta`.\n*\n* @param {NonNegativeNumber} alpha - shape parameter\n* @param {PositiveNumber} beta - rate parameter\n* @returns {Function} quantile function\n*\n* @example\n* var quantile = factory( 2.5, 0.5 );\n* var y = quantile( 0.5 );\n* // returns ~4.351\n*\n* y = quantile( 0.8 );\n* // returns ~7.289\n*/\nfunction factory( alpha, beta ) {\n\tif (\n\t\tisnan( alpha ) ||\n\t\tisnan( beta ) ||\n\t\talpha < 0.0 ||\n\t\tbeta <= 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\tif ( alpha === 0.0 ) {\n\t\treturn degenerate( 0.0 );\n\t}\n\treturn quantile;\n\n\t/**\n\t* Evaluates the quantile function for a gamma distribution.\n\t*\n\t* @private\n\t* @param {Probability} p - input value\n\t* @returns {number} evaluated quantile function\n\t*\n\t* @example\n\t* var y = quantile( 0.3 );\n\t* // returns <number>\n\t*/\n\tfunction quantile( p ) {\n\t\tif ( isnan( p ) || p < 0.0 || p > 1.0 ) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn ( 1.0 / beta ) * gammaincinv( p, alpha );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport gammaQuantile from '@stdlib/stats-base-dists-gamma-quantile';\nimport sqrt from '@stdlib/math-base-special-sqrt';\n\n\n// MAIN //\n\n/**\n* Evaluates the quantile function for a chi distribution with degrees of freedom `k` at a probability `p`.\n*\n* @param {Probability} p - input value\n* @param {NonNegativeNumber} k - degrees of freedom\n* @returns {number} evaluated quantile function\n*\n* @example\n* var y = quantile( 0.8, 1.0 );\n* // returns ~1.282\n*\n* @example\n* var y = quantile( 0.5, 4.0 );\n* // returns ~1.832\n*\n* @example\n* var y = quantile( 0.8, 0.1 );\n* // returns ~0.116\n*\n* @example\n* var y = quantile( -0.2, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 1.1, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = quantile( NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* // Negative degrees of freedom:\n* var y = quantile( 0.5, -1.0 );\n* // returns NaN\n*/\nfunction quantile( p, k ) {\n\treturn sqrt( gammaQuantile( p, k/2.0, 0.5 ) );\n}\n\n\n// EXPORTS //\n\nexport default quantile;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nimport defineProperty from '@stdlib/utils-define-property';\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport setReadOnlyAccessor from '@stdlib/utils-define-nonenumerable-read-only-accessor';\nimport { isPrimitive as isPositive } from '@stdlib/assert-is-positive-number';\nimport entropy from '@stdlib/stats-base-dists-chi-entropy';\nimport kurtosis from '@stdlib/stats-base-dists-chi-kurtosis';\nimport mean from '@stdlib/stats-base-dists-chi-mean';\nimport mode from '@stdlib/stats-base-dists-chi-mode';\nimport skewness from '@stdlib/stats-base-dists-chi-skewness';\nimport stdev from '@stdlib/stats-base-dists-chi-stdev';\nimport variance from '@stdlib/stats-base-dists-chi-variance';\nimport cdf from '@stdlib/stats-base-dists-chi-cdf';\nimport logpdf from '@stdlib/stats-base-dists-chi-logpdf';\nimport pdf from '@stdlib/stats-base-dists-chi-pdf';\nimport quantile from '@stdlib/stats-base-dists-chi-quantile';\nimport format from '@stdlib/string-format';\n\n\n// FUNCTIONS //\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n*/\nfunction chiCDF( x ) {\n\treturn cdf( x, this.k );\n}\n\n/**\n* Evaluates the natural logarithm of the probability density function (PDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n*/\nfunction chiLogPDF( x ) {\n\treturn logpdf( x, this.k );\n}\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n*/\nfunction chiPDF( x ) {\n\treturn pdf( x, this.k );\n}\n\n/**\n* Evaluates the quantile function.\n*\n* @private\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n*/\nfunction chiQuantile( p ) {\n\treturn quantile( p, this.k );\n}\n\n\n// MAIN //\n\n/**\n* Chi distribution constructor.\n*\n* @constructor\n* @param {PositiveNumber} [k=1.0] - degrees of freedom\n* @throws {TypeError} `k` must be a positive number\n* @returns {Chi} distribution instance\n*\n* @example\n* var chi = new Chi( 1.0 );\n*\n* var y = chi.cdf( 0.8 );\n* // returns ~0.576\n*\n* var v = chi.mode;\n* // returns 0.0\n*/\nfunction Chi() {\n\tvar k;\n\tif ( !(this instanceof Chi) ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn new Chi();\n\t\t}\n\t\treturn new Chi( arguments[ 0 ] );\n\t}\n\tif ( arguments.length ) {\n\t\tk = arguments[ 0 ];\n\t\tif ( !isPositive( k ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Rate parameter must be a positive number. Value: `%s`.', k ) );\n\t\t}\n\t} else {\n\t\tk = 1.0;\n\t}\n\tdefineProperty( this, 'k', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn k;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isPositive( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid assignment. Must be a positive number. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\tk = value;\n\t\t}\n\t});\n\treturn this;\n}\n\n/**\n* Chi distribution differential entropy.\n*\n* @name entropy\n* @memberof Chi.prototype\n* @type {number}\n* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}\n*\n* @example\n* var chi = new Chi( 4.0 );\n*\n* var v = chi.entropy;\n* // returns ~1.019\n*/\nsetReadOnlyAccessor( Chi.prototype, 'entropy', function get() {\n\treturn entropy( this.k );\n});\n\n/**\n* Chi distribution excess kurtosis.\n*\n* @name kurtosis\n* @memberof Chi.prototype\n* @type {number}\n* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}\n*\n* @example\n* var chi = new Chi( 4.0 );\n*\n* var v = chi.kurtosis;\n* // returns ~0.059\n*/\nsetReadOnlyAccessor( Chi.prototype, 'kurtosis', function get() {\n\treturn kurtosis( this.k );\n});\n\n/**\n* Chi distribution expected value.\n*\n* @name mean\n* @memberof Chi.prototype\n* @type {number}\n* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}\n*\n* @example\n* var chi = new Chi( 4.0 );\n*\n* var v = chi.mean;\n* // returns ~1.88\n*/\nsetReadOnlyAccessor( Chi.prototype, 'mean', function get() {\n\treturn mean( this.k );\n});\n\n/**\n* Chi distribution mode.\n*\n* @name mode\n* @memberof Chi.prototype\n* @type {number}\n* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}\n*\n* @example\n* var chi = new Chi( 4.0 );\n*\n* var v = chi.mode;\n* // returns ~1.732\n*/\nsetReadOnlyAccessor( Chi.prototype, 'mode', function get() {\n\treturn mode( this.k );\n});\n\n/**\n* Chi distribution skewness.\n*\n* @name skewness\n* @memberof Chi.prototype\n* @type {number}\n* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}\n*\n* @example\n* var chi = new Chi( 4.0 );\n*\n* var v = chi.skewness;\n* // returns ~0.406\n*/\nsetReadOnlyAccessor( Chi.prototype, 'skewness', function get() {\n\treturn skewness( this.k );\n});\n\n/**\n* Chi distribution standard deviation.\n*\n* @name stdev\n* @memberof Chi.prototype\n* @type {number}\n* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}\n*\n* @example\n* var chi = new Chi( 4.0 );\n*\n* var v = chi.stdev;\n* // returns ~0.682\n*/\nsetReadOnlyAccessor( Chi.prototype, 'stdev', function get() {\n\treturn stdev( this.k );\n});\n\n/**\n* Chi distribution variance.\n*\n* @name variance\n* @memberof Chi.prototype\n* @type {number}\n* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}\n*\n* @example\n* var chi = new Chi( 4.0 );\n*\n* var v = chi.variance;\n* // returns ~0.466\n*/\nsetReadOnlyAccessor( Chi.prototype, 'variance', function get() {\n\treturn variance( this.k );\n});\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @name cdf\n* @memberof Chi.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var chi = new Chi( 2.0 );\n*\n* var v = chi.cdf( 0.5 );\n* // returns ~0.118\n*/\nsetReadOnly( Chi.prototype, 'cdf', chiCDF );\n\n/**\n* Evaluates the natural logarithm of the probability density function (PDF).\n*\n* @name logpdf\n* @memberof Chi.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var chi = new Chi( 2.0 );\n*\n* var v = chi.logpdf( 0.8 );\n* // returns ~-0.543\n*/\nsetReadOnly( Chi.prototype, 'logpdf', chiLogPDF );\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @name pdf\n* @memberof Chi.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var chi = new Chi( 2.0 );\n*\n* var v = chi.pdf( 0.8 );\n* // returns ~0.581\n*/\nsetReadOnly( Chi.prototype, 'pdf', chiPDF );\n\n/**\n* Evaluates the quantile function.\n*\n* @name quantile\n* @memberof Chi.prototype\n* @type {Function}\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}\n*\n* @example\n* var chi = new Chi( 2.0 );\n*\n* var v = chi.quantile( 0.5 );\n* // returns ~1.177\n*/\nsetReadOnly( Chi.prototype, 'quantile', chiQuantile );\n\n\n// EXPORTS //\n\nexport default Chi;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Degenerate distribution cumulative distribution function (CDF).\n*\n* @module @stdlib/stats-base-dists-degenerate-cdf\n*\n* @example\n* import cdf from '@stdlib/stats-base-dists-degenerate-cdf';\n*\n* var y = cdf( 2.0, 5.0 );\n* // returns 0.0\n*\n* @example\n* import { factory as factory } from '@stdlib/stats-base-dists-degenerate-cdf';\n*\n* var cdf = factory( 5.0 );\n*\n* var y = cdf( 3.0 );\n* // returns 0.0\n*\n* y = cdf( 6.0 );\n* // returns 1.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport cdf from './cdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( cdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Gamma distribution cumulative distribution function (CDF).\n*\n* @module @stdlib/stats-base-dists-gamma-cdf\n*\n* @example\n* import cdf from '@stdlib/stats-base-dists-gamma-cdf';\n*\n* var y = cdf( 2.0, 8.0, 3.0 );\n* // returns ~0.256\n*\n* y = cdf( 0.0, 1.0, 1.0 );\n* // returns 0.0\n*\n* var mycdf = cdf.factory( 2.0, 0.5 );\n* y = mycdf( 6.0 );\n* // returns ~0.801\n*\n* y = mycdf( 2.0 );\n* // returns ~0.264\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport cdf from './cdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( cdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Chi distribution cumulative distribution function (CDF).\n*\n* @module @stdlib/stats-base-dists-chi-cdf\n*\n* @example\n* import cdf from '@stdlib/stats-base-dists-chi-cdf';\n*\n* var y = cdf( 2.0, 8.0 );\n* // returns ~0.143\n*\n* y = cdf( 0.0, 1.0 );\n* // returns 0.0\n*\n* @example\n* import { factory as factory } from '@stdlib/stats-base-dists-chi-cdf';\n*\n* var cdf = factory( 1.0 );\n*\n* var y = cdf( 2.0 );\n* // returns ~0.954\n*\n* y = cdf( 1.2 );\n* // returns ~0.77\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport cdf from './cdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( cdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { factory as degenerate } from '@stdlib/stats-base-dists-degenerate-cdf';\nimport { factory as gammaFactory } from '@stdlib/stats-base-dists-gamma-cdf';\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the cumulative distribution function (CDF) for a chi distribution with degrees of freedom `k`.\n*\n* @param {NonNegativeNumber} k - degrees of freedom\n* @returns {Function} CDF\n*\n* @example\n* var cdf = factory( 3.0 );\n*\n* var y = cdf( 6.0 );\n* // returns ~1.0\n*\n* y = cdf( 1.5 );\n* // returns ~0.478\n*/\nfunction factory( k ) {\n\tvar gamma;\n\tif ( k === 0.0 ) {\n\t\treturn degenerate( 0.0 );\n\t}\n\tgamma = gammaFactory( k/2.0, 0.5 );\n\treturn cdf;\n\n\t/**\n\t* Evaluates the cumulative distribution function (CDF) for a chi distribution with degrees of freedom `k`.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated CDF\n\t*/\n\tfunction cdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x < 0.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn gamma( x*x );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Degenerate distribution logarithm of probability density function (logPDF).\n*\n* @module @stdlib/stats-base-dists-degenerate-logpdf\n*\n* @example\n* import logpdf from '@stdlib/stats-base-dists-degenerate-logpdf';\n*\n* var y = logpdf( 2.0, 0.0 );\n* // returns -Infinity\n*\n* @example\n* import { factory as factory } from '@stdlib/stats-base-dists-degenerate-logpdf';\n*\n* var logPDF = factory( 10.0 );\n*\n* var y = logPDF( 10.0 );\n* // returns Infinity\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport logpdf from './logpdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( logpdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default logpdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Natural logarithm of the probability density function (PDF) for a chi distribution.\n*\n* @module @stdlib/stats-base-dists-chi-logpdf\n*\n* @example\n* import logpdf from '@stdlib/stats-base-dists-chi-logpdf';\n*\n* var y = logpdf( 2.0, 1.0 );\n* // returns ~-2.226\n*\n* @example\n* import { factory as factory } from '@stdlib/stats-base-dists-chi-logpdf';\n*\n* var logpdf = factory( 6.0 );\n*\n* var y = logpdf( 3.0 );\n* // returns ~-1.088\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport logpdf from './logpdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( logpdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default logpdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport { factory as degenerate } from '@stdlib/stats-base-dists-degenerate-logpdf';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport gammaln from '@stdlib/math-base-special-gammaln';\nimport ln from '@stdlib/math-base-special-ln';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport LN2 from '@stdlib/constants-float64-ln-two';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the natural logarithm of the probability density function (PDF) for a chi distribution with degrees of freedom `k`.\n*\n* @param {NonNegativeNumber} k - degrees of freedom\n* @returns {Function} logPDF\n*\n* @example\n* var logpdf = factory( 0.5 );\n*\n* var y = logpdf( 2.0 );\n* // returns ~-3.115\n*\n* y = logpdf( 1.0 );\n* // returns ~-1.268\n*/\nfunction factory( k ) {\n\tvar km1;\n\tvar kh;\n\n\tif ( isnan( k ) || k < 0.0 ) {\n\t\treturn constantFunction( NaN );\n\t}\n\tif ( k === 0.0 ) {\n\t\treturn degenerate( 0.0 );\n\t}\n\n\tkh = k / 2.0;\n\tkm1 = k - 1.0;\n\treturn logpdf;\n\n\t/**\n\t* Evaluates the natural logarithm of the probability density function (PDF) for a chi distribution with degrees of freedom `k`.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {number} evaluated logPDF\n\t*\n\t* @example\n\t* var y = logpdf( 1.0 );\n\t* // returns <number>\n\t*/\n\tfunction logpdf( x ) {\n\t\tvar out;\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x < 0.0 || x === PINF ) {\n\t\t\treturn NINF;\n\t\t}\n\t\tout = ( ( 1.0-kh ) * LN2 ) + ( km1 * ln( x ) ) - ( (x*x) / 2.0 );\n\t\tout -= gammaln( kh );\n\t\treturn out;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Degenerate distribution probability density function (PDF).\n*\n* @module @stdlib/stats-base-dists-degenerate-pdf\n*\n* @example\n* import pdf from '@stdlib/stats-base-dists-degenerate-pdf';\n*\n* var y = pdf( 2.0, 0.0 );\n* // returns 0.0\n*\n* @example\n* import { factory as factory } from '@stdlib/stats-base-dists-degenerate-pdf';\n*\n* var pdf = factory( 10.0 );\n*\n* var y = pdf( 10.0 );\n* // returns Infinity\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport pdf from './pdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( pdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default pdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Chi distribution probability density function (PDF).\n*\n* @module @stdlib/stats-base-dists-chi-pdf\n*\n* @example\n* import pdf from '@stdlib/stats-base-dists-chi-pdf';\n*\n* var y = pdf( 2.0, 1.0 );\n* // returns ~0.108\n*\n* @example\n* import { factory as factory } from '@stdlib/stats-base-dists-chi-pdf';\n*\n* var pdf = factory( 6.0 );\n*\n* var y = pdf( 3.0 );\n* // returns ~0.337\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport pdf from './pdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( pdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default pdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport { factory as degenerate } from '@stdlib/stats-base-dists-degenerate-pdf';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport gamma from '@stdlib/math-base-special-gamma';\nimport exp from '@stdlib/math-base-special-exp';\nimport pow from '@stdlib/math-base-special-pow';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the probability density function (PDF) for a chi distribution with degrees of freedom `k`.\n*\n* @param {NonNegativeNumber} k - degrees of freedom\n* @returns {Function} PDF\n*\n* @example\n* var pdf = factory( 0.5 );\n*\n* var y = pdf( 2.0 );\n* // returns ~0.04\n*\n* y = pdf( 1.0 );\n* // returns ~0.281\n*/\nfunction factory( k ) {\n\tvar km1;\n\tvar kh;\n\n\tif ( isnan( k ) || k < 0.0 ) {\n\t\treturn constantFunction( NaN );\n\t}\n\tif ( k === 0.0 ) {\n\t\treturn degenerate( 0.0 );\n\t}\n\n\tkh = k / 2.0;\n\tkm1 = k - 1.0;\n\treturn pdf;\n\n\t/**\n\t* Evaluates the probability density function (PDF) for a chi distribution with degrees of freedom `k`.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {number} evaluated PDF\n\t*\n\t* @example\n\t* var y = pdf( 1.0 );\n\t* // returns <number>\n\t*/\n\tfunction pdf( x ) {\n\t\tvar out;\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x < 0.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\tout = pow( 2.0, 1.0-kh ) * pow( x, km1 ) * exp( -(x*x)/2.0 );\n\t\tout /= gamma( kh );\n\t\treturn out;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Gamma distribution quantile function.\n*\n* @module @stdlib/stats-base-dists-gamma-quantile\n*\n* @example\n* import quantile from '@stdlib/stats-base-dists-gamma-quantile';\n*\n* var y = quantile( 0.8, 1.0, 1.0 );\n* // returns ~1.609\n*\n* var myquantile = quantile.factory( 2.0, 2.0 );\n* y = myquantile( 0.8 );\n* // returns ~1.497\n*\n* y = myquantile( 0.4 );\n* // returns ~0.688\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport quantile from './quantile.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( quantile, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default quantile;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Chi distribution quantile function.\n*\n* @module @stdlib/stats-base-dists-chi-quantile\n*\n* @example\n* import quantile from '@stdlib/stats-base-dists-chi-quantile';\n*\n* var y = quantile( 0.8, 3.0 );\n* // returns ~2.154\n*\n* var myquantile = quantile.factory( 2.0 );\n*\n* y = myquantile( 0.3 );\n* // returns ~0.844\n*\n* y = myquantile( 0.7 );\n* // returns ~1.552\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport quantile from './quantile.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( quantile, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default quantile;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { factory as gammaFactory } from '@stdlib/stats-base-dists-gamma-quantile';\nimport sqrt from '@stdlib/math-base-special-sqrt';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the quantile function for a chi distribution with degrees of freedom `k`.\n*\n* @param {NonNegativeNumber} k - degrees of freedom\n* @returns {Function} quantile function\n*\n* @example\n* var quantile = factory( 0.4 );\n*\n* var y = quantile( 0.9 );\n* // returns ~1.1\n*\n* y = quantile( 1.0 );\n* // returns Infinity\n*/\nfunction factory( k ) {\n\tvar gamma = gammaFactory( k/2.0, 0.5 );\n\treturn quantile;\n\n\t/**\n\t* Evaluates the quantile function for a chi distribution.\n\t*\n\t* @private\n\t* @param {Probability} p - input value\n\t* @returns {number} evaluated quantile function\n\t*\n\t* @example\n\t* var y = quantile( 0.3 );\n\t* // returns <number>\n\t*/\n\tfunction quantile( p ) {\n\t\treturn sqrt( gamma( p ) );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace chi\n*/\nvar chi = {};\n\n/**\n* @name cdf\n* @memberof chi\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/chi/cdf}\n*/\nimport cdf from '@stdlib/stats-base-dists-chi-cdf';\nsetReadOnly( chi, 'cdf', cdf );\n\n/**\n* @name Chi\n* @memberof chi\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/chi/ctor}\n*/\nimport Chi from '@stdlib/stats-base-dists-chi-ctor';\nsetReadOnly( chi, 'Chi', Chi );\n\n/**\n* @name entropy\n* @memberof chi\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/chi/entropy}\n*/\nimport entropy from '@stdlib/stats-base-dists-chi-entropy';\nsetReadOnly( chi, 'entropy', entropy );\n\n/**\n* @name kurtosis\n* @memberof chi\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/chi/kurtosis}\n*/\nimport kurtosis from '@stdlib/stats-base-dists-chi-kurtosis';\nsetReadOnly( chi, 'kurtosis', kurtosis );\n\n/**\n* @name logpdf\n* @memberof chi\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/chi/logpdf}\n*/\nimport logpdf from '@stdlib/stats-base-dists-chi-logpdf';\nsetReadOnly( chi, 'logpdf', logpdf );\n\n/**\n* @name mean\n* @memberof chi\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/chi/mean}\n*/\nimport mean from '@stdlib/stats-base-dists-chi-mean';\nsetReadOnly( chi, 'mean', mean );\n\n/**\n* @name mode\n* @memberof chi\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/chi/mode}\n*/\nimport mode from '@stdlib/stats-base-dists-chi-mode';\nsetReadOnly( chi, 'mode', mode );\n\n/**\n* @name pdf\n* @memberof chi\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/chi/pdf}\n*/\nimport pdf from '@stdlib/stats-base-dists-chi-pdf';\nsetReadOnly( chi, 'pdf', pdf );\n\n/**\n* @name quantile\n* @memberof chi\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/chi/quantile}\n*/\nimport quantile from '@stdlib/stats-base-dists-chi-quantile';\nsetReadOnly( chi, 'quantile', quantile );\n\n/**\n* @name skewness\n* @memberof chi\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/chi/skewness}\n*/\nimport skewness from '@stdlib/stats-base-dists-chi-skewness';\nsetReadOnly( chi, 'skewness', skewness );\n\n/**\n* @name stdev\n* @memberof chi\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/chi/stdev}\n*/\nimport stdev from '@stdlib/stats-base-dists-chi-stdev';\nsetReadOnly( chi, 'stdev', stdev );\n\n/**\n* @name variance\n* @memberof chi\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/chi/variance}\n*/\nimport variance from '@stdlib/stats-base-dists-chi-variance';\nsetReadOnly( chi, 'variance', variance );\n\n\n// EXPORTS //\n\nexport default chi;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport gammaCDF from '@stdlib/stats-base-dists-gamma-cdf';\n\n\n// MAIN //\n\n/**\n* Evaluates the cumulative distribution function (CDF) for a chi-squared distribution with degrees of freedom `k` at a value `x`.\n*\n* @param {number} x - input value\n* @param {NonNegativeNumber} k - degrees of freedom\n* @returns {Probability} evaluated CDF\n*\n* @example\n* var y = cdf( 2.0, 3.0 );\n* // returns ~0.428\n*\n* @example\n* var y = cdf( 1.0, 0.5 );\n* // returns ~0.846\n*\n* @example\n* var y = cdf( -1.0, 4.0 );\n* // returns 0.0\n*\n* @example\n* var y = cdf( NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* // Negative degrees of freedom:\n* var y = cdf( 2.0, -1.0 );\n* // returns NaN\n*/\nfunction cdf( x, k ) {\n\treturn gammaCDF( x, k/2.0, 0.5 );\n}\n\n\n// EXPORTS //\n\nexport default cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport digamma from '@stdlib/math-base-special-digamma';\nimport gamma from '@stdlib/math-base-special-gamma';\nimport ln from '@stdlib/math-base-special-ln';\n\n\n// MAIN //\n\n/**\n* Returns the differential entropy of a chi-squared distribution.\n*\n* @param {PositiveNumber} k - degrees of freedom\n* @returns {number} entropy\n*\n* @example\n* var v = entropy( 9.0 );\n* // returns ~2.786\n*\n* @example\n* var v = entropy( 1.0 );\n* // returns ~0.784\n*\n* @example\n* var v = entropy( -0.2 );\n* // returns NaN\n*\n* @example\n* var v = entropy( NaN );\n* // returns NaN\n*/\nfunction entropy( k ) {\n\tvar kh;\n\tif ( isnan( k ) || k <= 0.0 ) {\n\t\treturn NaN;\n\t}\n\tkh = k / 2.0;\n\treturn kh + ln( 2.0*gamma( kh ) ) + ( ( 1.0-kh ) * digamma( kh ) );\n}\n\n\n// EXPORTS //\n\nexport default entropy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns the excess kurtosis of a chi-squared distribution.\n*\n* @param {PositiveNumber} k - degrees of freedom\n* @returns {PositiveNumber} excess kurtosis\n*\n* @example\n* var v = kurtosis( 9.0 );\n* // returns ~1.333\n*\n* @example\n* var v = kurtosis( 1.0 );\n* // returns 12.0\n*\n* @example\n* var v = kurtosis( -0.2 );\n* // returns NaN\n*\n* @example\n* var v = kurtosis( NaN );\n* // returns NaN\n*/\nfunction kurtosis( k ) {\n\tif ( isnan( k ) || k <= 0.0 ) {\n\t\treturn NaN;\n\t}\n\treturn 12.0 / k;\n}\n\n\n// EXPORTS //\n\nexport default kurtosis;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns the expected value of a chi-squared distribution.\n*\n* @param {NonNegativeNumber} k - degrees of freedom\n* @returns {NonNegativeNumber} expected value\n*\n* @example\n* var v = mean( 9.0 );\n* // returns 9.0\n*\n* @example\n* var v = mean( 1.0 );\n* // returns 1.0\n*\n* @example\n* var v = mean( -0.2 );\n* // returns NaN\n*\n* @example\n* var v = mean( NaN );\n* // returns NaN\n*/\nfunction mean( k ) {\n\tif ( isnan( k ) || k < 0.0 ) {\n\t\treturn NaN;\n\t}\n\treturn k;\n}\n\n\n// EXPORTS //\n\nexport default mean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport gammaQuantile from '@stdlib/stats-base-dists-gamma-quantile';\n\n\n// MAIN //\n\n/**\n* Evaluates the quantile function for a chi-squared distribution with degrees of freedom `k` at a probability `p`.\n*\n* @param {Probability} p - input value\n* @param {NonNegativeNumber} k - degrees of freedom\n* @returns {number} evaluated quantile function\n*\n* @example\n* var y = quantile( 0.8, 1.0 );\n* // returns ~1.642\n*\n* @example\n* var y = quantile( 0.5, 4.0 );\n* // returns ~3.357\n*\n* @example\n* var y = quantile( 0.8, 0.1 );\n* // returns ~0.014\n*\n* @example\n* var y = quantile( -0.2, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 1.1, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = quantile( NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* // Negative degrees of freedom:\n* var y = quantile( 0.5, -1.0 );\n* // returns NaN\n*/\nfunction quantile( p, k ) {\n\treturn gammaQuantile( p, k/2.0, 0.5 );\n}\n\n\n// EXPORTS //\n\nexport default quantile;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport quantile from '@stdlib/stats-base-dists-chisquare-quantile';\n\n\n// MAIN //\n\n/**\n* Returns the median of a chi-squared distribution.\n*\n* @param {NonNegativeNumber} k - degrees of freedom\n* @returns {NonNegativeNumber} median\n*\n* @example\n* var v = median( 9.0 );\n* // returns ~8.343\n*\n* @example\n* var v = median( 2.0 );\n* // returns ~1.386\n*\n* @example\n* var v = median( -0.2 );\n* // returns NaN\n*\n* @example\n* var v = median( NaN );\n* // returns NaN\n*/\nfunction median( k ) {\n\treturn quantile( 0.5, k );\n}\n\n\n// EXPORTS //\n\nexport default median;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport max from '@stdlib/math-base-special-max';\n\n\n// MAIN //\n\n/**\n* Returns the mode of a chi-squared distribution.\n*\n* @param {NonNegativeNumber} k - degrees of freedom\n* @returns {NonNegativeNumber} mode\n*\n* @example\n* var v = mode( 9.0 );\n* // returns 7.0\n*\n* @example\n* var v = mode( 1.0 );\n* // returns 0.0\n*\n* @example\n* var v = mode( -0.2 );\n* // returns NaN\n*\n* @example\n* var v = mode( NaN );\n* // returns NaN\n*/\nfunction mode( k ) {\n\tif ( isnan( k ) || k < 0.0 ) {\n\t\treturn NaN;\n\t}\n\treturn max( k - 2.0, 0.0 );\n}\n\n\n// EXPORTS //\n\nexport default mode;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport sqrt from '@stdlib/math-base-special-sqrt';\n\n\n// MAIN //\n\n/**\n* Returns the skewness of a chi-squared distribution.\n*\n* @param {PositiveNumber} k - degrees of freedom\n* @returns {PositiveNumber} skewness\n*\n* @example\n* var v = skewness( 9.0 );\n* // returns ~0.943\n*\n* @example\n* var v = skewness( 1.0 );\n* // returns ~2.828\n*\n* @example\n* var v = skewness( -0.2 );\n* // returns NaN\n*\n* @example\n* var v = skewness( NaN );\n* // returns NaN\n*/\nfunction skewness( k ) {\n\tif ( isnan( k ) || k <= 0.0 ) {\n\t\treturn NaN;\n\t}\n\treturn sqrt( 8.0 / k );\n}\n\n\n// EXPORTS //\n\nexport default skewness;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport sqrt from '@stdlib/math-base-special-sqrt';\n\n\n// MAIN //\n\n/**\n* Returns the standard deviation of a chi-squared distribution.\n*\n* @param {NonNegativeNumber} k - degrees of freedom\n* @returns {NonNegativeNumber} standard deviation\n*\n* @example\n* var v = stdev( 9.0 );\n* // returns ~4.243\n*\n* @example\n* var v = stdev( 1.0 );\n* // returns ~1.414\n*\n* @example\n* var v = stdev( -0.2 );\n* // returns NaN\n*\n* @example\n* var v = stdev( NaN );\n* // returns NaN\n*/\nfunction stdev( k ) {\n\tif ( isnan( k ) || k < 0.0 ) {\n\t\treturn NaN;\n\t}\n\treturn sqrt( 2.0 * k );\n}\n\n\n// EXPORTS //\n\nexport default stdev;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns the variance of a chi-squared distribution.\n*\n* @param {NonNegativeNumber} k - degrees of freedom\n* @returns {NonNegativeNumber} variance\n*\n* @example\n* var v = variance( 9.0 );\n* // returns 18.0\n*\n* @example\n* var v = variance( 1.0 );\n* // returns 2.0\n*\n* @example\n* var v = variance( -0.2 );\n* // returns NaN\n*\n* @example\n* var v = variance( NaN );\n* // returns NaN\n*/\nfunction variance( k ) {\n\tif ( isnan( k ) || k < 0.0 ) {\n\t\treturn NaN;\n\t}\n\treturn 2.0 * k;\n}\n\n\n// EXPORTS //\n\nexport default variance;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport pow from '@stdlib/math-base-special-pow';\n\n\n// MAIN //\n\n/**\n* Evaluates the moment-generating function (MGF) for a chi-squared distribution with degrees of freedom `k` at a value `t`.\n*\n* @param {number} t - input value\n* @param {NonNegativeNumber} k - degrees of freedom\n* @returns {number} evaluated MGF\n*\n* @example\n* var y = mgf( 0.4, 2 );\n* // returns ~5.0\n*\n* @example\n* var y = mgf( -1.0, 5.0 );\n* // returns ~0.0642\n*\n* @example\n* var y = mgf( 0.0, 10.0 );\n* // returns 1.0\n*/\nfunction mgf( t, k ) {\n\tif (\n\t\tisnan( t ) ||\n\t\tisnan( k ) ||\n\t\tk < 0.0 ||\n\t\tt >= 0.5\n\t) {\n\t\treturn NaN;\n\t}\n\treturn pow( 1-(2*t), -k/2 );\n}\n\n\n// EXPORTS //\n\nexport default mgf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_58_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* Copyright John Maddock 2006-7, 2013-14.\n* Copyright Paul A. Bristow 2007, 2013-14.\n* Copyright Nikhar Agrawal 2013-14.\n* Copyright Christopher Kormanyos 2013-14.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport gammaln from '@stdlib/math-base-special-gammaln';\nimport exp from '@stdlib/math-base-special-exp';\nimport ln from '@stdlib/math-base-special-ln';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport FLOAT64_MAX from '@stdlib/constants-float64-max';\nimport regularisedGammaPrefix from './regularised_gamma_prefix.js';\n\n\n// MAIN //\n\n/**\n* Calculates the partial derivative with respect to x of the incomplete gamma function.\n*\n* @private\n* @param {PositiveNumber} a - function parameter\n* @param {NonNegativeNumber} x - function parameter\n* @returns {number} function value\n*/\nfunction gammaPDerivative( a, x ) {\n\tvar f1;\n\tif ( a <= 0.0 ) {\n\t\treturn NaN;\n\t}\n\tif ( x < 0.0 ) {\n\t\treturn NaN;\n\t}\n\tif ( x === 0.0 ) {\n\t\tif ( a > 1.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn ( a === 1.0 ) ? 1.0 : PINF;\n\t}\n\tf1 = regularisedGammaPrefix( a, x );\n\tif ( x < 1.0 && ( FLOAT64_MAX * x < f1 ) ) {\n\t\treturn PINF;\n\t}\n\tif ( f1 === 0.0 ) {\n\t\t// Underflow in calculation, use logs instead:\n\t\tf1 = (a * ln( x )) - x - gammaln( a ) - ln( x );\n\t\tf1 = exp( f1 );\n\t} else {\n\t\tf1 /= x;\n\t}\n\treturn f1;\n}\n\n\n// EXPORTS //\n\nexport default gammaPDerivative;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* Copyright John Maddock 2006-7, 2013-14.\n* Copyright Paul A. Bristow 2007, 2013-14.\n* Copyright Nikhar Agrawal 2013-14.\n* Copyright Christopher Kormanyos 2013-14.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport lanczosSumExpGScaled from '@stdlib/math-base-special-gamma-lanczos-sum-expg-scaled';\nimport gammaln from '@stdlib/math-base-special-gammaln';\nimport gamma from '@stdlib/math-base-special-gamma';\nimport log1p from '@stdlib/math-base-special-log1p';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport abs from '@stdlib/math-base-special-abs';\nimport exp from '@stdlib/math-base-special-exp';\nimport pow from '@stdlib/math-base-special-pow';\nimport max from '@stdlib/math-base-special-max';\nimport min from '@stdlib/math-base-special-min';\nimport ln from '@stdlib/math-base-special-ln';\nimport MAX_LN from '@stdlib/constants-float64-max-ln';\nimport MIN_LN from '@stdlib/constants-float64-min-ln';\nimport G from '@stdlib/constants-float64-gamma-lanczos-g';\nimport E from '@stdlib/constants-float64-e';\n\n\n// MAIN //\n\n/**\n* Computes `(z^a)*(e^-z) / gamma(a)`.\n*\n* @private\n* @param {number} a - input value\n* @param {number} z - input value\n* @returns {number} function value\n*/\nfunction regularisedGammaPrefix( a, z ) {\n\tvar prefix;\n\tvar amza;\n\tvar agh;\n\tvar alz;\n\tvar amz;\n\tvar sq;\n\tvar d;\n\n\tagh = a + G - 0.5;\n\td = ( (z - a) - G + 0.5 ) / agh;\n\tif ( a < 1.0 ) {\n\t\t// Treat a < 1 as a special case because our Lanczos approximations are optimized against the factorials with a > 1, and for high precision types very small values of `a` can give rather erroneous results for gamma:\n\t\tif ( z <= MIN_LN ) {\n\t\t\t// Use logs, so should be free of cancellation errors:\n\t\t\treturn exp( ( a * ln(z) ) - z - gammaln( a ) );\n\t\t}\n\t\t// No danger of overflow as gamma(a) < 1/a for small a, so direct calculation:\n\t\treturn pow( z, a ) * exp( -z ) / gamma( a );\n\t}\n\tif ( abs(d*d*a) <= 100.0 && a > 150.0 ) {\n\t\t// Special case for large a and a ~ z:\n\t\tprefix = ( a * ( log1p( d ) - d ) ) + ( z * ( 0.5-G ) / agh );\n\t\tprefix = exp( prefix );\n\t}\n\telse {\n\t\t// General case. Direct computation is most accurate, but use various fallbacks for different parts of the problem domain:\n\t\talz = a * ln(z / agh);\n\t\tamz = a - z;\n\t\tif (\n\t\t\tmin(alz, amz) <= MIN_LN ||\n\t\t\tmax(alz, amz) >= MAX_LN\n\t\t) {\n\t\t\tamza = amz / a;\n\t\t\tif (\n\t\t\t\tmin(alz, amz)/2.0 > MIN_LN &&\n\t\t\t\tmax(alz, amz)/2.0 < MAX_LN\n\t\t\t) {\n\t\t\t\t// Compute square root of the result and then square it:\n\t\t\t\tsq = pow( z / agh, a / 2.0 ) * exp( amz / 2.0 );\n\t\t\t\tprefix = sq * sq;\n\t\t\t}\n\t\t\telse if (\n\t\t\t\tmin(alz, amz)/4.0 > MIN_LN &&\n\t\t\t\tmax(alz, amz)/4.0 < MAX_LN &&\n\t\t\t\tz > a\n\t\t\t) {\n\t\t\t\t// Compute the 4th root of the result then square it twice:\n\t\t\t\tsq = pow( z / agh, a / 4.0 ) * exp( amz / 4.0 );\n\t\t\t\tprefix = sq * sq;\n\t\t\t\tprefix *= prefix;\n\t\t\t}\n\t\t\telse if (\n\t\t\t\tamza > MIN_LN &&\n\t\t\t\tamza < MAX_LN\n\t\t\t) {\n\t\t\t\tprefix = pow( (z * exp(amza)) / agh, a );\n\t\t\t}\n\t\t\telse {\n\t\t\t\tprefix = exp( alz + amz );\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tprefix = pow( z / agh, a ) * exp( amz );\n\t\t}\n\t}\n\tprefix *= sqrt( agh / E ) / lanczosSumExpGScaled( a );\n\treturn prefix;\n}\n\n\n// EXPORTS //\n\nexport default regularisedGammaPrefix;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport gammaDeriv from './gamma_p_derivative.js';\n\n\n// MAIN //\n\n/**\n* Evaluates the probability density function (PDF) for a gamma distribution with shape parameter `alpha` and rate parameter `beta` at a value `x`.\n*\n* @param {number} x - input value\n* @param {NonNegativeNumber} alpha - shape parameter\n* @param {PositiveNumber} beta - rate parameter\n* @returns {number} evaluated PDF\n*\n* @example\n* var y = pdf( 2.0, 0.5, 1.0 );\n* // returns ~0.054\n*\n* @example\n* var y = pdf( 0.1, 1.0, 1.0 );\n* // returns ~0.905\n*\n* @example\n* var y = pdf( -1.0, 4.0, 2.0 );\n* // returns 0.0\n*\n* @example\n* var y = pdf( NaN, 0.6, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = pdf( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = pdf( 0.0, 1.0, NaN );\n* // returns NaN\n*\n* @example\n* // Negative shape parameter:\n* var y = pdf( 2.0, -1.0, 1.0 );\n* // returns NaN\n*\n* @example\n* // Negative rate parameter:\n* var y = pdf( 2.0, 1.0, -1.0 );\n* // returns NaN\n*/\nfunction pdf( x, alpha, beta ) {\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( alpha ) ||\n\t\tisnan( beta ) ||\n\t\talpha < 0.0 ||\n\t\tbeta <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x < 0.0 || x === PINF ) {\n\t\treturn 0.0;\n\t}\n\tif ( alpha === 0.0 ) {\n\t\t// Point mass at 0...\n\t\treturn ( x === 0.0 ) ? PINF : 0.0;\n\t}\n\treturn gammaDeriv( alpha, x * beta ) * beta;\n}\n\n\n// EXPORTS //\n\nexport default pdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport { factory as degenerate } from '@stdlib/stats-base-dists-degenerate-pdf';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport gammaDeriv from './gamma_p_derivative.js';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the probability density function (PDF) for a gamma distribution with shape parameter `alpha` and rate parameter `beta`.\n*\n* @param {NonNegativeNumber} alpha - shape parameter\n* @param {PositiveNumber} beta - rate parameter\n* @returns {Function} PDF\n*\n* @example\n* var pdf = factory( 3.0, 1.5 );\n*\n* var y = pdf( 1.0 );\n* // returns ~0.377\n*\n* y = pdf( 4.0 );\n* // returns ~0.067\n*/\nfunction factory( alpha, beta ) {\n\tif (\n\t\tisnan( alpha ) ||\n\t\tisnan( beta ) ||\n\t\talpha < 0.0 ||\n\t\tbeta <= 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\tif ( alpha === 0.0 ) {\n\t\treturn degenerate( 0.0 );\n\t}\n\treturn pdf;\n\n\t/**\n\t* Evaluates the probability density function (PDF) for a gamma distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {number} evaluated PDF\n\t*\n\t* @example\n\t* var y = pdf( -1.2 );\n\t* // returns <number>\n\t*/\n\tfunction pdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x < 0.0 || x === PINF ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn gammaDeriv( alpha, x * beta ) * beta;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport gammaPDF from '@stdlib/stats-base-dists-gamma-pdf';\n\n\n// MAIN //\n\n/**\n* Evaluates the probability density function (PDF) for a chi-squared distribution with degrees of freedom `k` at a value `x`.\n*\n* @param {number} x - input value\n* @param {NonNegativeNumber} k - degrees of freedom\n* @returns {number} evaluated PDF\n*\n* @example\n* var y = pdf( 0.3, 4.0 );\n* // returns ~0.065\n*\n* @example\n* var y = pdf( 0.7, 0.7 );\n* // returns ~0.274\n*\n* @example\n* var y = pdf( -1.0, 0.5 );\n* // returns 0.0\n*\n* @example\n* var y = pdf( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = pdf( NaN, 2.0 );\n* // returns NaN\n*\n* @example\n* // Negative degrees of freedom:\n* var y = pdf( 2.0, -1.0 );\n* // returns NaN\n*/\nfunction pdf( x, k ) {\n\treturn gammaPDF( x, k/2.0, 0.5 );\n}\n\n\n// EXPORTS //\n\nexport default pdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nimport defineProperty from '@stdlib/utils-define-property';\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport setReadOnlyAccessor from '@stdlib/utils-define-nonenumerable-read-only-accessor';\nimport { isPrimitive as isPositive } from '@stdlib/assert-is-positive-number';\nimport entropy from '@stdlib/stats-base-dists-chisquare-entropy';\nimport kurtosis from '@stdlib/stats-base-dists-chisquare-kurtosis';\nimport mean from '@stdlib/stats-base-dists-chisquare-mean';\nimport median from '@stdlib/stats-base-dists-chisquare-median';\nimport mode from '@stdlib/stats-base-dists-chisquare-mode';\nimport skewness from '@stdlib/stats-base-dists-chisquare-skewness';\nimport stdev from '@stdlib/stats-base-dists-chisquare-stdev';\nimport variance from '@stdlib/stats-base-dists-chisquare-variance';\nimport cdf from '@stdlib/stats-base-dists-chisquare-cdf';\nimport mgf from '@stdlib/stats-base-dists-chisquare-mgf';\nimport pdf from '@stdlib/stats-base-dists-chisquare-pdf';\nimport quantile from '@stdlib/stats-base-dists-chisquare-quantile';\nimport format from '@stdlib/string-format';\n\n\n// FUNCTIONS //\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n*/\nfunction chisquareCDF( x ) {\n\treturn cdf( x, this.k );\n}\n\n/**\n* Evaluates the moment-generating function (MGF).\n*\n* @private\n* @param {number} t - input value\n* @returns {number} evaluated MGF\n*/\nfunction chisquareMGF( t ) {\n\treturn mgf( t, this.k );\n}\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n*/\nfunction chisquarePDF( x ) {\n\treturn pdf( x, this.k );\n}\n\n/**\n* Evaluates the quantile function.\n*\n* @private\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n*/\nfunction chisquareQuantile( p ) {\n\treturn quantile( p, this.k );\n}\n\n\n// MAIN //\n\n/**\n* Chi-squared distribution constructor.\n*\n* @constructor\n* @param {PositiveNumber} [k=1.0] - degrees of freedom\n* @throws {TypeError} `k` must be a positive number\n* @returns {ChiSquare} distribution instance\n*\n* @example\n* var chisquare = new ChiSquare( 1.0 );\n*\n* var y = chisquare.cdf( 0.8 );\n* // returns ~0.629\n*\n* var v = chisquare.mode;\n* // returns 0.0\n*/\nfunction ChiSquare() {\n\tvar k;\n\tif ( !(this instanceof ChiSquare) ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn new ChiSquare();\n\t\t}\n\t\treturn new ChiSquare( arguments[ 0 ] );\n\t}\n\tif ( arguments.length ) {\n\t\tk = arguments[ 0 ];\n\t\tif ( !isPositive( k ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Rate parameter must be a positive number. Value: `%s`.', k ) );\n\t\t}\n\t} else {\n\t\tk = 1.0;\n\t}\n\tdefineProperty( this, 'k', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn k;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isPositive( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid assignment. Must be a positive number. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\tk = value;\n\t\t}\n\t});\n\treturn this;\n}\n\n/**\n* Chi-squared distribution differential entropy.\n*\n* @name entropy\n* @memberof ChiSquare.prototype\n* @type {number}\n* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}\n*\n* @example\n* var chisquare = new ChiSquare( 4.0 );\n*\n* var v = chisquare.entropy;\n* // returns ~2.27\n*/\nsetReadOnlyAccessor( ChiSquare.prototype, 'entropy', function get() {\n\treturn entropy( this.k );\n});\n\n/**\n* Chi-squared distribution excess kurtosis.\n*\n* @name kurtosis\n* @memberof ChiSquare.prototype\n* @type {number}\n* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}\n*\n* @example\n* var chisquare = new ChiSquare( 4.0 );\n*\n* var v = chisquare.kurtosis;\n* // returns 3.0\n*/\nsetReadOnlyAccessor( ChiSquare.prototype, 'kurtosis', function get() {\n\treturn kurtosis( this.k );\n});\n\n/**\n* Chi-squared distribution expected value.\n*\n* @name mean\n* @memberof ChiSquare.prototype\n* @type {number}\n* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}\n*\n* @example\n* var chisquare = new ChiSquare( 4.0 );\n*\n* var v = chisquare.mean;\n* // returns 4.0\n*/\nsetReadOnlyAccessor( ChiSquare.prototype, 'mean', function get() {\n\treturn mean( this.k );\n});\n\n/**\n* Chi-squared distribution median.\n*\n* @name median\n* @memberof ChiSquare.prototype\n* @type {number}\n* @see [median]{@link https://en.wikipedia.org/wiki/Median}\n*\n* @example\n* var chisquare = new ChiSquare( 4.0 );\n*\n* var v = chisquare.median;\n* // returns ~3.357\n*/\nsetReadOnlyAccessor( ChiSquare.prototype, 'median', function get() {\n\treturn median( this.k );\n});\n\n/**\n* Chi-squared distribution mode.\n*\n* @name mode\n* @memberof ChiSquare.prototype\n* @type {number}\n* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}\n*\n* @example\n* var chisquare = new ChiSquare( 4.0 );\n*\n* var v = chisquare.mode;\n* // returns 2.0\n*/\nsetReadOnlyAccessor( ChiSquare.prototype, 'mode', function get() {\n\treturn mode( this.k );\n});\n\n/**\n* Chi-squared distribution skewness.\n*\n* @name skewness\n* @memberof ChiSquare.prototype\n* @type {number}\n* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}\n*\n* @example\n* var chisquare = new ChiSquare( 4.0 );\n*\n* var v = chisquare.skewness;\n* // returns ~1.414\n*/\nsetReadOnlyAccessor( ChiSquare.prototype, 'skewness', function get() {\n\treturn skewness( this.k );\n});\n\n/**\n* Chi-squared distribution standard deviation.\n*\n* @name stdev\n* @memberof ChiSquare.prototype\n* @type {number}\n* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}\n*\n* @example\n* var chisquare = new ChiSquare( 4.0 );\n*\n* var v = chisquare.stdev;\n* // returns ~2.828\n*/\nsetReadOnlyAccessor( ChiSquare.prototype, 'stdev', function get() {\n\treturn stdev( this.k );\n});\n\n/**\n* Chi-squared distribution variance.\n*\n* @name variance\n* @memberof ChiSquare.prototype\n* @type {number}\n* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}\n*\n* @example\n* var chisquare = new ChiSquare( 4.0 );\n*\n* var v = chisquare.variance;\n* // returns 8.0\n*/\nsetReadOnlyAccessor( ChiSquare.prototype, 'variance', function get() {\n\treturn variance( this.k );\n});\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @name cdf\n* @memberof ChiSquare.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var chisquare = new ChiSquare( 2.0 );\n*\n* var v = chisquare.cdf( 0.5 );\n* // returns ~0.221\n*/\nsetReadOnly( ChiSquare.prototype, 'cdf', chisquareCDF );\n\n/**\n* Evaluates the moment-generating function (MGF).\n*\n* @name mgf\n* @memberof ChiSquare.prototype\n* @type {Function}\n* @param {number} t - input value\n* @returns {number} evaluated MGF\n* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}\n*\n* @example\n* var chisquare = new ChiSquare( 2.0 );\n*\n* var v = chisquare.mgf( 0.2 );\n* // returns ~1.667\n*/\nsetReadOnly( ChiSquare.prototype, 'mgf', chisquareMGF );\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @name pdf\n* @memberof ChiSquare.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var chisquare = new ChiSquare( 2.0 );\n*\n* var v = chisquare.pdf( 0.8 );\n* // returns ~0.335\n*/\nsetReadOnly( ChiSquare.prototype, 'pdf', chisquarePDF );\n\n/**\n* Evaluates the quantile function.\n*\n* @name quantile\n* @memberof ChiSquare.prototype\n* @type {Function}\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}\n*\n* @example\n* var chisquare = new ChiSquare( 2.0 );\n*\n* var v = chisquare.quantile( 0.5 );\n* // returns ~1.386\n*/\nsetReadOnly( ChiSquare.prototype, 'quantile', chisquareQuantile );\n\n\n// EXPORTS //\n\nexport default ChiSquare;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_58_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* Copyright John Maddock 2006-7, 2013-14.\n* Copyright Paul A. Bristow 2007, 2013-14.\n* Copyright Nikhar Agrawal 2013-14.\n* Copyright Christopher Kormanyos 2013-14.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport gammaln from '@stdlib/math-base-special-gammaln';\nimport exp from '@stdlib/math-base-special-exp';\nimport ln from '@stdlib/math-base-special-ln';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport FLOAT64_MAX from '@stdlib/constants-float64-max';\nimport regularisedGammaPrefix from './regularised_gamma_prefix.js';\n\n\n// MAIN //\n\n/**\n* Calculates the partial derivative with respect to x of the incomplete gamma function.\n*\n* @private\n* @param {PositiveNumber} a - function parameter\n* @param {NonNegativeNumber} x - function parameter\n* @returns {number} function value\n*/\nfunction gammaPDerivative( a, x ) {\n\tvar f1;\n\tif ( a <= 0.0 ) {\n\t\treturn NaN;\n\t}\n\tif ( x < 0.0 ) {\n\t\treturn NaN;\n\t}\n\tif ( x === 0.0 ) {\n\t\tif ( a > 1.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn ( a === 1.0 ) ? 1.0 : PINF;\n\t}\n\tf1 = regularisedGammaPrefix( a, x );\n\tif ( x < 1.0 && ( FLOAT64_MAX * x < f1 ) ) {\n\t\treturn PINF;\n\t}\n\tif ( f1 === 0.0 ) {\n\t\t// Underflow in calculation, use logs instead:\n\t\tf1 = (a * ln( x )) - x - gammaln( a ) - ln( x );\n\t\tf1 = exp( f1 );\n\t} else {\n\t\tf1 /= x;\n\t}\n\treturn f1;\n}\n\n\n// EXPORTS //\n\nexport default gammaPDerivative;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* Copyright John Maddock 2006-7, 2013-14.\n* Copyright Paul A. Bristow 2007, 2013-14.\n* Copyright Nikhar Agrawal 2013-14.\n* Copyright Christopher Kormanyos 2013-14.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport lanczosSumExpGScaled from '@stdlib/math-base-special-gamma-lanczos-sum-expg-scaled';\nimport gammaln from '@stdlib/math-base-special-gammaln';\nimport gamma from '@stdlib/math-base-special-gamma';\nimport log1p from '@stdlib/math-base-special-log1p';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport abs from '@stdlib/math-base-special-abs';\nimport exp from '@stdlib/math-base-special-exp';\nimport pow from '@stdlib/math-base-special-pow';\nimport max from '@stdlib/math-base-special-max';\nimport min from '@stdlib/math-base-special-min';\nimport ln from '@stdlib/math-base-special-ln';\nimport MAX_LN from '@stdlib/constants-float64-max-ln';\nimport MIN_LN from '@stdlib/constants-float64-min-ln';\nimport G from '@stdlib/constants-float64-gamma-lanczos-g';\nimport E from '@stdlib/constants-float64-e';\n\n\n// MAIN //\n\n/**\n* Computes `(z^a)*(e^-z) / gamma(a)`.\n*\n* @private\n* @param {number} a - input value\n* @param {number} z - input value\n* @returns {number} function value\n*/\nfunction regularisedGammaPrefix( a, z ) {\n\tvar prefix;\n\tvar amza;\n\tvar agh;\n\tvar alz;\n\tvar amz;\n\tvar sq;\n\tvar d;\n\n\tagh = a + G - 0.5;\n\td = ( (z - a) - G + 0.5 ) / agh;\n\tif ( a < 1.0 ) {\n\t\t// Treat a < 1 as a special case because our Lanczos approximations are optimized against the factorials with a > 1, and for high precision types very small values of `a` can give rather erroneous results for gamma:\n\t\tif ( z <= MIN_LN ) {\n\t\t\t// Use logs, so should be free of cancellation errors:\n\t\t\treturn exp( ( a * ln(z) ) - z - gammaln( a ) );\n\t\t}\n\t\t// No danger of overflow as gamma(a) < 1/a for small a, so direct calculation:\n\t\treturn pow( z, a ) * exp( -z ) / gamma( a );\n\t}\n\tif ( abs(d*d*a) <= 100.0 && a > 150.0 ) {\n\t\t// Special case for large a and a ~ z:\n\t\tprefix = ( a * ( log1p( d ) - d ) ) + ( z * ( 0.5-G ) / agh );\n\t\tprefix = exp( prefix );\n\t}\n\telse {\n\t\t// General case. Direct computation is most accurate, but use various fallbacks for different parts of the problem domain:\n\t\talz = a * ln(z / agh);\n\t\tamz = a - z;\n\t\tif (\n\t\t\tmin(alz, amz) <= MIN_LN ||\n\t\t\tmax(alz, amz) >= MAX_LN\n\t\t) {\n\t\t\tamza = amz / a;\n\t\t\tif (\n\t\t\t\tmin(alz, amz)/2.0 > MIN_LN &&\n\t\t\t\tmax(alz, amz)/2.0 < MAX_LN\n\t\t\t) {\n\t\t\t\t// Compute square root of the result and then square it:\n\t\t\t\tsq = pow( z / agh, a / 2.0 ) * exp( amz / 2.0 );\n\t\t\t\tprefix = sq * sq;\n\t\t\t}\n\t\t\telse if (\n\t\t\t\tmin(alz, amz)/4.0 > MIN_LN &&\n\t\t\t\tmax(alz, amz)/4.0 < MAX_LN &&\n\t\t\t\tz > a\n\t\t\t) {\n\t\t\t\t// Compute the 4th root of the result then square it twice:\n\t\t\t\tsq = pow( z / agh, a / 4.0 ) * exp( amz / 4.0 );\n\t\t\t\tprefix = sq * sq;\n\t\t\t\tprefix *= prefix;\n\t\t\t}\n\t\t\telse if (\n\t\t\t\tamza > MIN_LN &&\n\t\t\t\tamza < MAX_LN\n\t\t\t) {\n\t\t\t\tprefix = pow( (z * exp(amza)) / agh, a );\n\t\t\t}\n\t\t\telse {\n\t\t\t\tprefix = exp( alz + amz );\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tprefix = pow( z / agh, a ) * exp( amz );\n\t\t}\n\t}\n\tprefix *= sqrt( agh / E ) / lanczosSumExpGScaled( a );\n\treturn prefix;\n}\n\n\n// EXPORTS //\n\nexport default regularisedGammaPrefix;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport ln from '@stdlib/math-base-special-ln';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport gammaDeriv from './gamma_p_derivative.js';\n\n\n// MAIN //\n\n/**\n* Evaluates the logarithm of the probability density function (PDF) for a gamma distribution with shape parameter `alpha` and rate parameter `beta` at a value `x`.\n*\n* @param {number} x - input value\n* @param {NonNegativeNumber} alpha - shape parameter\n* @param {PositiveNumber} beta - rate parameter\n* @returns {number} evaluated logPDF\n*\n* @example\n* var y = logpdf( 2.0, 0.5, 1.0 );\n* // returns ~-2.919\n*\n* @example\n* var y = logpdf( 0.1, 1.0, 1.0 );\n* // returns ~-0.1\n*\n* @example\n* var y = logpdf( -1.0, 4.0, 2.0 );\n* // returns -Infinity\n*\n* @example\n* var y = logpdf( NaN, 0.6, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = logpdf( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = logpdf( 0.0, 1.0, NaN );\n* // returns NaN\n*\n* @example\n* // Negative shape parameter:\n* var y = logpdf( 2.0, -1.0, 1.0 );\n* // returns NaN\n*\n* @example\n* // Negative rate parameter:\n* var y = logpdf( 2.0, 1.0, -1.0 );\n* // returns NaN\n*/\nfunction logpdf( x, alpha, beta ) {\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( alpha ) ||\n\t\tisnan( beta ) ||\n\t\talpha < 0.0 ||\n\t\tbeta <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x < 0.0 || x === PINF ) {\n\t\treturn NINF;\n\t}\n\tif ( alpha === 0.0 ) {\n\t\t// Point mass at 0...\n\t\treturn ( x === 0.0 ) ? PINF : NINF;\n\t}\n\treturn ln( gammaDeriv( alpha, x * beta ) ) + ln( beta );\n}\n\n\n// EXPORTS //\n\nexport default logpdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport { factory as degenerate } from '@stdlib/stats-base-dists-degenerate-logpdf';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport ln from '@stdlib/math-base-special-ln';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport gammaDeriv from './gamma_p_derivative.js';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the logarithm of the probability density function (PDF) for a gamma distribution with shape parameter `alpha` and rate parameter `beta`.\n*\n* @param {NonNegativeNumber} alpha - shape parameter\n* @param {PositiveNumber} beta - rate parameter\n* @returns {Function} logPDF\n*\n* @example\n* var logpdf = factory( 3.0, 1.5 );\n*\n* var y = logpdf( 1.0 );\n* // returns ~-0.977\n*\n* y = logpdf( 4.0 );\n* // returns ~-2.704\n*/\nfunction factory( alpha, beta ) {\n\tif (\n\t\tisnan( alpha ) ||\n\t\tisnan( beta ) ||\n\t\talpha < 0.0 ||\n\t\tbeta <= 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\tif ( alpha === 0.0 ) {\n\t\treturn degenerate( 0.0 );\n\t}\n\treturn logpdf;\n\n\t/**\n\t* Evaluates the logarithm of the probability density function (PDF) for a gamma distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {number} evaluated logPDF\n\t*\n\t* @example\n\t* var y = logpdf( -1.2 );\n\t* // returns <number>\n\t*/\n\tfunction logpdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x < 0.0 || x === PINF ) {\n\t\t\treturn NINF;\n\t\t}\n\t\treturn ln( gammaDeriv( alpha, x * beta ) ) + ln( beta );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport gammaLogPDF from '@stdlib/stats-base-dists-gamma-logpdf';\n\n\n// MAIN //\n\n/**\n* Evaluates the natural logarithm of the probability density function (PDF) for a chi-squared distribution with degrees of freedom `k` at a value `x`.\n*\n* @param {number} x - input value\n* @param {NonNegativeNumber} k - degrees of freedom\n* @returns {number} evaluated logPDF\n*\n* @example\n* var y = logpdf( 0.3, 4.0 );\n* // returns ~-2.74\n*\n* @example\n* var y = logpdf( 0.7, 0.7 );\n* // returns ~-1.295\n*\n* @example\n* var y = logpdf( -1.0, 0.5 );\n* // returns -Infinity\n*\n* @example\n* var y = logpdf( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = logpdf( NaN, 2.0 );\n* // returns NaN\n*\n* @example\n* // Negative degrees of freedom:\n* var y = logpdf( 2.0, -1.0 );\n* // returns NaN\n*/\nfunction logpdf( x, k ) {\n\treturn gammaLogPDF( x, k/2.0, 0.5 );\n}\n\n\n// EXPORTS //\n\nexport default logpdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Chi-squared distribution cumulative distribution function (CDF).\n*\n* @module @stdlib/stats-base-dists-chisquare-cdf\n*\n* @example\n* import cdf from '@stdlib/stats-base-dists-chisquare-cdf';\n*\n* var y = cdf( 2.0, 8.0 );\n* // returns ~0.019\n*\n* y = cdf( 0.0, 1.0 );\n* // returns 0.0\n*\n* @example\n* import { factory as factory } from '@stdlib/stats-base-dists-chisquare-cdf';\n*\n* var cdf = factory( 1.0 );\n*\n* var y = cdf( 2.0 );\n* // returns ~0.843\n*\n* y = cdf( 1.2 );\n* // returns ~0.727\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport cdf from './cdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( cdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { factory as gammaFactory } from '@stdlib/stats-base-dists-gamma-cdf';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the cumulative distribution function (CDF) for a chi-squared distribution with degrees of freedom `k`.\n*\n* @param {NonNegativeNumber} k - degrees of freedom\n* @returns {Function} CDF\n*\n* @example\n* var cdf = factory( 3.0 );\n*\n* var y = cdf( 6.0 );\n* // returns ~0.888\n*\n* y = cdf( 1.5 );\n* // returns ~0.318\n*/\nfunction factory( k ) {\n\treturn gammaFactory( k/2.0, 0.5 );\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Chi-squared distribution quantile function.\n*\n* @module @stdlib/stats-base-dists-chisquare-quantile\n*\n* @example\n* import quantile from '@stdlib/stats-base-dists-chisquare-quantile';\n*\n* var y = quantile( 0.8, 3.0 );\n* // returns ~4.642\n*\n* var myquantile = quantile.factory( 2.0 );\n*\n* y = myquantile( 0.3 );\n* // returns ~0.713\n*\n* y = myquantile( 0.7 );\n* // returns ~2.408\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport quantile from './quantile.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( quantile, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default quantile;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { factory as gammaFactory } from '@stdlib/stats-base-dists-gamma-quantile';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the quantile function for a chi-squared distribution with degrees of freedom `k`.\n*\n* @param {NonNegativeNumber} k - degrees of freedom\n* @returns {Function} quantile function\n*\n* @example\n* var quantile = factory( 0.4 );\n*\n* var y = quantile( 0.9 );\n* // returns ~1.21\n*\n* y = quantile( 1.0 );\n* // returns Infinity\n*/\nfunction factory( k ) {\n\treturn gammaFactory( k/2.0, 0.5 );\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Moment-generating function (MGF) for a chi-squared distribution.\n*\n* @module @stdlib/stats-base-dists-chisquare-mgf\n*\n* @example\n* import mgf from '@stdlib/stats-base-dists-chisquare-mgf';\n*\n* var y = mgf( 0.4, 2 );\n* // returns ~5.0\n*\n* y = mgf( -1.0, 5.0 );\n* // returns ~0.0642\n*\n* y = mgf( 0.0, 10.0 );\n* // returns 1.0\n*\n* @example\n* import { factory as factory } from '@stdlib/stats-base-dists-chisquare-mgf';\n*\n* var mgf = factory( 1.0 );\n*\n* var y = mgf( 0.2 );\n* // returns ~1.291\n*\n* y = mgf( 0.4 );\n* // returns ~2.236\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport mgf from './mgf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( mgf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default mgf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport pow from '@stdlib/math-base-special-pow';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the moment-generating function (MGF) of a chi-squared distribution with degrees of freedom `k`.\n*\n* @param {NonNegativeNumber} k - degrees of freedom\n* @returns {Function} MGF\n*\n* @example\n* var mgf = factory( 1.0 );\n*\n* var y = mgf( 0.2 );\n* // returns ~1.291\n*\n* y = mgf( 0.4 );\n* // returns ~2.236\n*/\nfunction factory( k ) {\n\tif ( isnan( k ) || k < 0.0 ) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn mgf;\n\n\t/**\n\t* Evaluates the moment-generating function (MGF) for a chi-squared distribution.\n\t*\n\t* @private\n\t* @param {number} t - input value\n\t* @returns {number} evaluated MGF\n\t*\n\t* @example\n\t* var y = mgf( 0.5 );\n\t* // returns <number>\n\t*/\n\tfunction mgf( t ) {\n\t\tif ( isnan( t ) || t >= 0.5 ) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn pow( 1-(2*t), -k/2 );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Gamma distribution probability density function (PDF).\n*\n* @module @stdlib/stats-base-dists-gamma-pdf\n*\n* @example\n* import pdf from '@stdlib/stats-base-dists-gamma-pdf';\n*\n* var y = pdf( 2.0, 0.5, 1.0 );\n* // returns ~0.054\n*\n* var myPDF = pdf.factory( 6.0, 7.0 );\n* y = myPDF( 2.0 );\n* // returns ~0.026\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport pdf from './pdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( pdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default pdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Chi-squared distribution probability density function (PDF).\n*\n* @module @stdlib/stats-base-dists-chisquare-pdf\n*\n* @example\n* import pdf from '@stdlib/stats-base-dists-chisquare-pdf';\n*\n* var y = pdf( 2.0, 1.0 );\n* // returns ~0.104\n*\n* @example\n* import { factory as factory } from '@stdlib/stats-base-dists-chisquare-pdf';\n*\n* var pdf = factory( 6.0 );\n*\n* var y = pdf( 3.0 );\n* // returns ~0.126\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport pdf from './pdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( pdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default pdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { factory as gammaFactory } from '@stdlib/stats-base-dists-gamma-pdf';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the probability density function (PDF) for a chi-squared distribution with degrees of freedom `k`.\n*\n* @param {NonNegativeNumber} k - degrees of freedom\n* @returns {Function} PDF\n*\n* @example\n* var pdf = factory( 0.5 );\n*\n* var y = pdf( 2.0 );\n* // returns ~0.051\n*\n* y = pdf( 1.0 );\n* // returns ~0.141\n*/\nfunction factory( k ) {\n\treturn gammaFactory( k/2.0, 0.5 );\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Gamma distribution logarithm of probability density function (PDF).\n*\n* @module @stdlib/stats-base-dists-gamma-logpdf\n*\n* @example\n* import logpdf from '@stdlib/stats-base-dists-gamma-logpdf';\n*\n* var y = logpdf( 2.0, 0.5, 1.0 );\n* // returns ~-2.919\n*\n* @example\n* import { factory as factory } from '@stdlib/stats-base-dists-gamma-logpdf';\n*\n* var logpdf = factory( 6.0, 7.0 );\n* var y = logpdf( 2.0 );\n* // returns ~-3.646\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport logpdf from './logpdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( logpdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default logpdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Natural logarithm of the probability density function (PDF) for a chi-squared distribution.\n*\n* @module @stdlib/stats-base-dists-chisquare-logpdf\n*\n* @example\n* import logpdf from '@stdlib/stats-base-dists-chisquare-logpdf';\n*\n* var y = logpdf( 2.0, 1.0 );\n* // returns ~-2.266\n*\n* @example\n* import { factory as factory } from '@stdlib/stats-base-dists-chisquare-logpdf';\n*\n* var logpdf = factory( 6.0 );\n*\n* var y = logpdf( 3.0 );\n* // returns ~-2.071\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport logpdf from './logpdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( logpdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default logpdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { factory as gammaFactory } from '@stdlib/stats-base-dists-gamma-logpdf';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the natural logarithm of the probability density function (PDF) for a chi-squared distribution with degrees of freedom `k`.\n*\n* @param {NonNegativeNumber} k - degrees of freedom\n* @returns {Function} logPDF\n*\n* @example\n* var logpdf = factory( 0.5 );\n*\n* var y = logpdf( 2.0 );\n* // returns ~-2.981\n*\n* y = logpdf( 1.0 );\n* // returns ~-1.961\n*/\nfunction factory( k ) {\n\treturn gammaFactory( k/2.0, 0.5 );\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace chisquare\n*/\nvar chisquare = {};\n\n/**\n* @name cdf\n* @memberof chisquare\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/chisquare/cdf}\n*/\nimport cdf from '@stdlib/stats-base-dists-chisquare-cdf';\nsetReadOnly( chisquare, 'cdf', cdf );\n\n/**\n* @name ChiSquare\n* @memberof chisquare\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/chisquare/ctor}\n*/\nimport ChiSquare from '@stdlib/stats-base-dists-chisquare-ctor';\nsetReadOnly( chisquare, 'ChiSquare', ChiSquare );\n\n/**\n* @name entropy\n* @memberof chisquare\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/chisquare/entropy}\n*/\nimport entropy from '@stdlib/stats-base-dists-chisquare-entropy';\nsetReadOnly( chisquare, 'entropy', entropy );\n\n/**\n* @name kurtosis\n* @memberof chisquare\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/chisquare/kurtosis}\n*/\nimport kurtosis from '@stdlib/stats-base-dists-chisquare-kurtosis';\nsetReadOnly( chisquare, 'kurtosis', kurtosis );\n\n/**\n* @name logpdf\n* @memberof chisquare\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/chisquare/logpdf}\n*/\nimport logpdf from '@stdlib/stats-base-dists-chisquare-logpdf';\nsetReadOnly( chisquare, 'logpdf', logpdf );\n\n/**\n* @name mean\n* @memberof chisquare\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/chisquare/mean}\n*/\nimport mean from '@stdlib/stats-base-dists-chisquare-mean';\nsetReadOnly( chisquare, 'mean', mean );\n\n/**\n* @name median\n* @memberof chisquare\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/chisquare/median}\n*/\nimport median from '@stdlib/stats-base-dists-chisquare-median';\nsetReadOnly( chisquare, 'median', median );\n\n/**\n* @name mgf\n* @memberof chisquare\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/chisquare/mgf}\n*/\nimport mgf from '@stdlib/stats-base-dists-chisquare-mgf';\nsetReadOnly( chisquare, 'mgf', mgf );\n\n/**\n* @name mode\n* @memberof chisquare\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/chisquare/mode}\n*/\nimport mode from '@stdlib/stats-base-dists-chisquare-mode';\nsetReadOnly( chisquare, 'mode', mode );\n\n/**\n* @name pdf\n* @memberof chisquare\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/chisquare/pdf}\n*/\nimport pdf from '@stdlib/stats-base-dists-chisquare-pdf';\nsetReadOnly( chisquare, 'pdf', pdf );\n\n/**\n* @name quantile\n* @memberof chisquare\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/chisquare/quantile}\n*/\nimport quantile from '@stdlib/stats-base-dists-chisquare-quantile';\nsetReadOnly( chisquare, 'quantile', quantile );\n\n/**\n* @name skewness\n* @memberof chisquare\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/chisquare/skewness}\n*/\nimport skewness from '@stdlib/stats-base-dists-chisquare-skewness';\nsetReadOnly( chisquare, 'skewness', skewness );\n\n/**\n* @name stdev\n* @memberof chisquare\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/chisquare/stdev}\n*/\nimport stdev from '@stdlib/stats-base-dists-chisquare-stdev';\nsetReadOnly( chisquare, 'stdev', stdev );\n\n/**\n* @name variance\n* @memberof chisquare\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/chisquare/variance}\n*/\nimport variance from '@stdlib/stats-base-dists-chisquare-variance';\nsetReadOnly( chisquare, 'variance', variance );\n\n\n// EXPORTS //\n\nexport default chisquare;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport sinpi from '@stdlib/math-base-special-sinpi';\nimport PI from '@stdlib/constants-float64-pi';\n\n\n// MAIN //\n\n/**\n* Evaluates the cumulative distribution function (CDF) for a raised cosine distribution with location parameter `mu` and scale parameter `s` at a value `x`.\n*\n* @param {number} x - input value\n* @param {number} mu - location parameter\n* @param {NonNegativeNumber} s - scale parameter\n* @returns {Probability} evaluated CDF\n*\n* @example\n* var y = cdf( 0.5, 0.0, 1.0 );\n* // returns ~0.909\n*\n* @example\n* var y = cdf( 1.2, 0.0, 1.0 );\n* // returns 1.0\n*\n* @example\n* var y = cdf( -0.9, 0.0, 1.0);\n* // returns ~0.0\n*\n* @example\n* var y = cdf( 2.0, 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( NaN, 0.0, 1.0 );\n* // returns NaN\n*/\nfunction cdf( x, mu, s ) {\n\tvar z;\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( mu ) ||\n\t\tisnan( s ) ||\n\t\ts < 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( s === 0.0 ) {\n\t\treturn ( x < mu ) ? 0.0 : 1.0;\n\t}\n\tif ( x < mu - s ) {\n\t\treturn 0.0;\n\t}\n\tif ( x > mu + s ) {\n\t\treturn 1.0;\n\t}\n\tz = ( x - mu ) / s;\n\treturn ( 1.0 + z + ( sinpi( z ) / PI ) ) / 2.0;\n}\n\n\n// EXPORTS //\n\nexport default cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Raised cosine distribution cumulative distribution function (CDF).\n*\n* @module @stdlib/stats-base-dists-cosine-cdf\n*\n* @example\n* import cdf from '@stdlib/stats-base-dists-cosine-cdf';\n*\n* var y = cdf( 0.5, 0.0, 1.0 );\n* // returns ~0.909\n*\n* var mycdf = cdf.factory( 3.0, 1.5 );\n*\n* y = mycdf( 4.0 );\n* // returns ~0.971\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport cdf from './cdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( cdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport { factory as degenerate } from '@stdlib/stats-base-dists-degenerate-cdf';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport sinpi from '@stdlib/math-base-special-sinpi';\nimport PI from '@stdlib/constants-float64-pi';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the cumulative distribution function (CDF) for a raised cosine distribution with location parameter `mu` and scale parameter `s`.\n*\n* @param {number} mu - location parameter\n* @param {NonNegativeNumber} s - scale parameter\n* @returns {Function} CDF\n*\n* @example\n* var cdf = factory( 3.0, 1.5 );\n*\n* var y = cdf( 1.9 );\n* // returns ~0.015\n*\n* y = cdf( 4.0 );\n* // returns ~0.971\n*/\nfunction factory( mu, s ) {\n\tif ( isnan( mu ) || isnan( s ) || s < 0.0 ) {\n\t\treturn constantFunction( NaN );\n\t}\n\tif ( s === 0.0 ) {\n\t\treturn degenerate( mu );\n\t}\n\treturn cdf;\n\n\t/**\n\t* Evaluates the cumulative distribution function (CDF) for a raised cosine distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated CDF\n\t*\n\t* @example\n\t* var y = cdf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction cdf( x ) {\n\t\tvar z;\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x < mu - s ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\tif ( x > mu + s ) {\n\t\t\treturn 1.0;\n\t\t}\n\t\tz = ( x - mu ) / s;\n\t\treturn ( 1.0 + z + ( sinpi( z ) / PI ) ) / 2.0;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Square of the mathematical constant `π`.\n*\n* @module @stdlib/constants-float64-pi-squared\n* @type {number}\n*\n* @example\n* import PI_SQUARED from '@stdlib/constants-float64-pi-squared';\n* // returns 9.869604401089358\n*/\n\n\n// MAIN //\n\n/**\n* Square of the mathematical constant `π`.\n*\n* @constant\n* @type {number}\n* @default 9.869604401089358\n* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Pi}\n*/\nvar PI_SQUARED = 9.86960440108935861883449099987615113531369940724079062641334937622004482241920524300177340371855223182402591377; // eslint-disable-line max-len\n\n\n// EXPORTS //\n\nexport default PI_SQUARED;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport pow from '@stdlib/math-base-special-pow';\nimport PI_SQUARED from '@stdlib/constants-float64-pi-squared';\n\n\n// MAIN //\n\n/**\n* Returns the excess kurtosis for a raised cosine distribution with location `mu` and scale `s`.\n*\n* @param {number} mu - location parameter\n* @param {PositiveNumber} s - scale parameter\n* @returns {number} excess kurtosis\n*\n* @example\n* var y = kurtosis( 0.0, 1.0 );\n* // returns ~-0.594\n*\n* @example\n* var y = kurtosis( 5.0, 2.0 );\n* // returns ~-0.594\n*\n* @example\n* var y = kurtosis( NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = kurtosis( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = kurtosis( 0.0, 0.0 );\n* // returns NaN\n*/\nfunction kurtosis( mu, s ) {\n\tvar out;\n\tif (\n\t\tisnan( mu ) ||\n\t\tisnan( s ) ||\n\t\ts <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tout = 6.0 * ( 90.0 - ( PI_SQUARED*PI_SQUARED ) );\n\tout /= 5.0 * pow( PI_SQUARED-6.0, 2.0 );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default kurtosis;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns the expected value for a raised cosine distribution with location `mu` and scale `s`.\n*\n* @param {number} mu - location parameter\n* @param {PositiveNumber} s - scale parameter\n* @returns {number} expected value\n*\n* @example\n* var y = mean( 0.0, 1.0 );\n* // returns 0.0\n*\n* @example\n* var y = mean( 5.0, 2.0 );\n* // returns 5.0\n*\n* @example\n* var y = mean( NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = mean( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = mean( 0.0, 0.0 );\n* // returns NaN\n*/\nfunction mean( mu, s ) {\n\tif (\n\t\tisnan( mu ) ||\n\t\tisnan( s ) ||\n\t\ts <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn mu;\n}\n\n\n// EXPORTS //\n\nexport default mean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns the median for a raised cosine distribution with location `mu` and scale `s`.\n*\n* @param {number} mu - location parameter\n* @param {PositiveNumber} s - scale parameter\n* @returns {number} median\n*\n* @example\n* var y = median( 0.0, 1.0 );\n* // returns 0.0\n*\n* @example\n* var y = median( 5.0, 2.0 );\n* // returns 5.0\n*\n* @example\n* var y = median( NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = median( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = median( 0.0, 0.0 );\n* // returns NaN\n*/\nfunction median( mu, s ) {\n\tif (\n\t\tisnan( mu ) ||\n\t\tisnan( s ) ||\n\t\ts <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn mu;\n}\n\n\n// EXPORTS //\n\nexport default median;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns the mode for a raised cosine distribution with location `mu` and scale `s`.\n*\n* @param {number} mu - location parameter\n* @param {PositiveNumber} s - scale parameter\n* @returns {number} mode\n*\n* @example\n* var y = mode( 0.0, 1.0 );\n* // returns 0.0\n*\n* @example\n* var y = mode( 5.0, 2.0 );\n* // returns 5.0\n*\n* @example\n* var y = mode( NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = mode( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = mode( 0.0, 0.0 );\n* // returns NaN\n*/\nfunction mode( mu, s ) {\n\tif (\n\t\tisnan( mu ) ||\n\t\tisnan( s ) ||\n\t\ts <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn mu;\n}\n\n\n// EXPORTS //\n\nexport default mode;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns the skewness for a raised cosine distribution with location `mu` and scale `s`.\n*\n* @param {number} mu - location parameter\n* @param {PositiveNumber} s - scale parameter\n* @returns {number} skewness\n*\n* @example\n* var y = skewness( 0.0, 1.0 );\n* // returns 0.0\n*\n* @example\n* var y = skewness( 5.0, 2.0 );\n* // returns 0.0\n*\n* @example\n* var y = skewness( NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = skewness( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = skewness( 0.0, 0.0 );\n* // returns NaN\n*/\nfunction skewness( mu, s ) {\n\tif (\n\t\tisnan( mu ) ||\n\t\tisnan( s ) ||\n\t\ts <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn 0.0;\n}\n\n\n// EXPORTS //\n\nexport default skewness;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport PI_SQUARED from '@stdlib/constants-float64-pi-squared';\n\n\n// MAIN //\n\n/**\n* Returns the standard deviation for a raised cosine distribution with location `mu` and scale `s`.\n*\n* @param {number} mu - location parameter\n* @param {PositiveNumber} s - scale parameter\n* @returns {number} standard deviation\n*\n* @example\n* var y = stdev( 0.0, 1.0 );\n* // returns ~0.362\n*\n* @example\n* var y = stdev( 5.0, 2.0 );\n* // returns ~0.723\n*\n* @example\n* var y = stdev( NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = stdev( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = stdev( 0.0, 0.0 );\n* // returns NaN\n*/\nfunction stdev( mu, s ) {\n\tif (\n\t\tisnan( mu ) ||\n\t\tisnan( s ) ||\n\t\ts <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn s * sqrt( ( 1.0/3.0 ) - ( 2/PI_SQUARED ) );\n}\n\n\n// EXPORTS //\n\nexport default stdev;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport PI_SQUARED from '@stdlib/constants-float64-pi-squared';\n\n\n// MAIN //\n\n/**\n* Returns the variance for a raised cosine distribution with location `mu` and scale `s`.\n*\n* @param {number} mu - location parameter\n* @param {PositiveNumber} s - scale parameter\n* @returns {number} variance\n*\n* @example\n* var y = variance( 0.0, 1.0 );\n* // returns ~0.131\n*\n* @example\n* var y = variance( 5.0, 2.0 );\n* // returns ~0.523\n*\n* @example\n* var y = variance( NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = variance( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = variance( 0.0, 0.0 );\n* // returns NaN\n*/\nfunction variance( mu, s ) {\n\tif (\n\t\tisnan( mu ) ||\n\t\tisnan( s ) ||\n\t\ts <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn ( s*s ) * ( ( 1.0/3.0 ) - ( 2/PI_SQUARED ) );\n}\n\n\n// EXPORTS //\n\nexport default variance;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport sinpi from '@stdlib/math-base-special-sinpi';\nimport ln from '@stdlib/math-base-special-ln';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport PI from '@stdlib/constants-float64-pi';\n\n\n// MAIN //\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (CDF) for a raised cosine distribution with location parameter `mu` and scale parameter `s` at a value `x`.\n*\n* @param {number} x - input value\n* @param {number} mu - location parameter\n* @param {NonNegativeNumber} s - scale parameter\n* @returns {number} evaluated logCDF\n*\n* @example\n* var y = logcdf( 0.5, 0.0, 1.0 );\n* // returns ~-0.095\n*\n* @example\n* var y = logcdf( 1.2, 0.0, 1.0 );\n* // returns 0.0\n*\n* @example\n* var y = logcdf( -0.9, 0.0, 1.0 );\n* // returns ~-7.108\n*\n* @example\n* var y = logcdf( 2.0, 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = logcdf( 2.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = logcdf( NaN, 0.0, 1.0 );\n* // returns NaN\n*/\nfunction logcdf( x, mu, s ) {\n\tvar z;\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( mu ) ||\n\t\tisnan( s ) ||\n\t\ts < 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( s === 0.0 ) {\n\t\treturn ( x < mu ) ? NINF : 0.0;\n\t}\n\tif ( x < mu - s ) {\n\t\treturn NINF;\n\t}\n\tif ( x > mu + s ) {\n\t\treturn 0.0;\n\t}\n\tz = ( x - mu ) / s;\n\treturn ln( ( 1.0 + z + ( sinpi( z ) / PI ) ) / 2.0 );\n}\n\n\n// EXPORTS //\n\nexport default logcdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport NINF from '@stdlib/constants-float64-ninf';\n\n\n// MAIN //\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (logCDF) for a degenerate distribution with mean `mu`.\n*\n* @param {number} x - input value\n* @param {number} mu - constant value of distribution\n* @returns {number} natural logarithm of cumulative distribution function\n*\n* @example\n* var y = logcdf( 2.0, 3.0 );\n* // returns -Infinity\n*\n* @example\n* var y = logcdf( 4.0, 3.0 );\n* // returns 0.0\n*\n* @example\n* var y = logcdf( 3.0, 3.0 );\n* // returns 0.0\n*\n* @example\n* var y = logcdf( NaN, 0.0 );\n* // returns NaN\n*\n* @example\n* var y = logcdf( 0.0, NaN );\n* // returns NaN\n*/\nfunction logcdf( x, mu ) {\n\tif ( isnan( x ) || isnan( mu ) ) {\n\t\treturn NaN;\n\t}\n\treturn ( x < mu ) ? NINF : 0.0;\n}\n\n\n// EXPORTS //\n\nexport default logcdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport NINF from '@stdlib/constants-float64-ninf';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the natural logarithm of the cumulative distribution function (logCDF) of a degenerate distribution centered at a provided mean value.\n*\n* @param {number} mu - value at which to center the distribution\n* @returns {Function} logCDF\n*\n* @example\n* var logcdf = factory( 5.0 );\n*\n* var y = logcdf( 3.0 );\n* // returns -Infinity\n*\n* y = logcdf( 6.0 );\n* // returns 0.0\n*\n* y = logcdf( NaN );\n* // returns NaN\n*/\nfunction factory( mu ) {\n\tif ( isnan( mu ) ) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn logcdf;\n\n\t/**\n\t* Evaluates the natural logarithm of the cumulative distribution function (logCDF) of a degenerate distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {number} natural logarithm of cumulative distribution function\n\t*\n\t* @example\n\t* var y = logcdf( 10.0 );\n\t* // returns <number>\n\t*/\n\tfunction logcdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn ( x < mu ) ? NINF : 0.0;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Degenerate distribution logarithm of cumulative distribution function (CDF).\n*\n* @module @stdlib/stats-base-dists-degenerate-logcdf\n*\n* @example\n* import logcdf from '@stdlib/stats-base-dists-degenerate-logcdf';\n*\n* var y = logcdf( 2.0, 5.0 );\n* // returns -Infinity\n*\n* @example\n* import { factory as factory } from '@stdlib/stats-base-dists-degenerate-logcdf';\n*\n* var logcdf = factory( 5.0 );\n*\n* var y = logcdf( 3.0 );\n* // returns -Infinity\n*\n* y = logcdf( 6.0 );\n* // returns 0.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport logcdf from './logcdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( logcdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default logcdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Natural logarithm of cumulative distribution function (CDF) for a raised cosine distribution.\n*\n* @module @stdlib/stats-base-dists-cosine-logcdf\n*\n* @example\n* import logcdf from '@stdlib/stats-base-dists-cosine-logcdf';\n*\n* var y = logcdf( 0.5, 0.0, 1.0 );\n* // returns ~-0.095\n*\n* var mylogcdf = logcdf.factory( 3.0, 1.5 );\n*\n* y = mylogcdf( 4.0 );\n* // returns ~--0.029\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport logcdf from './logcdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( logcdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default logcdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport { factory as degenerate } from '@stdlib/stats-base-dists-degenerate-logcdf';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport sinpi from '@stdlib/math-base-special-sinpi';\nimport ln from '@stdlib/math-base-special-ln';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport PI from '@stdlib/constants-float64-pi';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the natural logarithm of the cumulative distribution function (CDF) for a raised cosine distribution with location parameter `mu` and scale parameter `s`.\n*\n* @param {number} mu - location parameter\n* @param {NonNegativeNumber} s - scale parameter\n* @returns {Function} logCDF\n*\n* @example\n* var logcdf = factory( 3.0, 1.5 );\n*\n* var y = logcdf( 1.9 );\n* // returns ~-4.2\n*\n* y = logcdf( 4.0 );\n* // returns ~-0.029\n*/\nfunction factory( mu, s ) {\n\tif ( isnan( mu ) || isnan( s ) || s < 0.0 ) {\n\t\treturn constantFunction( NaN );\n\t}\n\tif ( s === 0.0 ) {\n\t\treturn degenerate( mu );\n\t}\n\treturn logcdf;\n\n\t/**\n\t* Evaluates the natural logarithm of the cumulative distribution function (CDF) for a raised cosine distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {number} evaluated logCDF\n\t*\n\t* @example\n\t* var y = logcdf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction logcdf( x ) {\n\t\tvar z;\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x < mu - s ) {\n\t\t\treturn NINF;\n\t\t}\n\t\tif ( x > mu + s ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\tz = ( x - mu ) / s;\n\t\treturn ln( ( 1.0 + z + ( sinpi( z ) / PI ) ) / 2.0 );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* Notes:\n*\t=> cos(-x) = cos(x)\n*\t=> sin(-x) = -sin(x)\n*\t=> cos(π/2) = 0\n*\t=> cos(0) = 1\n*\t=> cos(π) = -1\n*/\n\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isInfinite from '@stdlib/math-base-assert-is-infinite';\nimport abs from '@stdlib/math-base-special-abs';\nimport cos from '@stdlib/math-base-special-cos';\nimport sin from '@stdlib/math-base-special-sin';\nimport floor from '@stdlib/math-base-special-floor';\nimport PI from '@stdlib/constants-float64-pi';\nimport MAX_INTEGER from '@stdlib/constants-float64-max-safe-integer';\n\n\n// VARIABLES //\n\nvar MAX_INTEGER_P1 = MAX_INTEGER + 1;\n\n\n// MAIN //\n\n/**\n* Computes the value of `cos(πx)`.\n*\n* @param {number} x - input value\n* @returns {number} function value\n*\n* @example\n* var y = cospi( 0.0 );\n* // returns 1.0\n*\n* @example\n* var y = cospi( 0.5 );\n* // returns 0.0\n*\n* @example\n* var y = cospi( 0.1 );\n* // returns ~0.951\n*\n* @example\n* var y = cospi( NaN );\n* // returns NaN\n*/\nfunction cospi( x ) {\n\tvar ax;\n\tvar ix;\n\tvar rx;\n\tvar y;\n\tif ( isnan( x ) ) {\n\t\treturn NaN;\n\t}\n\tif ( isInfinite( x ) ) {\n\t\treturn NaN;\n\t}\n\tax = abs( x );\n\tif ( ax > MAX_INTEGER_P1 ) {\n\t\t// Always even integer...\n\t\treturn 1.0;\n\t}\n\t// Argument reduction (reduce to [0,1))...\n\tix = floor( ax );\n\trx = ax - ix;\n\tif ( rx === 0.5 ) {\n\t\treturn 0.0;\n\t}\n\tif ( rx < 0.25 ) {\n\t\ty = cos( PI*rx );\n\t}\n\telse if ( rx < 0.75 ) {\n\t\trx = 0.5 - rx;\n\t\ty = sin( PI*rx ); // recall sin(-x) = -sin(x), thus returned result will be properly signed\n\t}\n\telse {\n\t\trx = 1.0 - rx;\n\t\ty = -cos( PI*rx );\n\t}\n\t// If the integer of `x` is odd, we need to flip the sign...\n\treturn ( ix%2 === 1 ) ? -y : y;\n}\n\n\n// EXPORTS //\n\nexport default cospi;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport cospi from '@stdlib/math-base-special-cospi';\nimport ln from '@stdlib/math-base-special-ln';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Evaluates the logarithm of the probability density function (PDF) for a raised cosine distribution with location parameter `mu` and scale parameter `s` at a value `x`.\n*\n* @param {number} x - input value\n* @param {number} mu - location parameter\n* @param {NonNegativeNumber} s - scale parameter\n* @returns {number} evaluated logPDF\n*\n* @example\n* var y = logpdf( 2.0, 0.0, 3.0 );\n* // returns ~-2.485\n*\n* @example\n* var y = logpdf( 1.5, 4.0, 4.0 );\n* // returns ~-2.562\n*\n* @example\n* var y = logpdf( NaN, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = logpdf( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = logpdf( 0.0, 0.0, NaN );\n* // returns NaN\n*\n* @example\n* // Negative scale parameter:\n* var y = logpdf( 2.0, 0.0, -1.0 );\n* // returns NaN\n*\n* @example\n* var y = logpdf( 2.0, 8.0, 0.0 );\n* // returns -Infinity\n*\n* @example\n* var y = logpdf( 8.0, 8.0, 0.0 );\n* // returns Infinity\n*/\nfunction logpdf( x, mu, s ) {\n\tvar z;\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( mu ) ||\n\t\tisnan( s ) ||\n\t\ts < 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( s === 0.0 ) {\n\t\treturn ( x === mu ) ? PINF : NINF;\n\t}\n\tif (\n\t\tx < mu - s ||\n\t\tx > mu + s\n\t) {\n\t\treturn NINF;\n\t}\n\tz = ( x - mu ) / s;\n\treturn ln( 1.0 + cospi( z ) ) - ln( 2.0 * s );\n}\n\n\n// EXPORTS //\n\nexport default logpdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Raised cosine distribution logarithm of probability density function (PDF).\n*\n* @module @stdlib/stats-base-dists-cosine-logpdf\n*\n* @example\n* import logpdf from '@stdlib/stats-base-dists-cosine-logpdf';\n*\n* var y = logpdf( 2.0, 0.0, 1.0 );\n* // returns ~-2.254\n*\n* var mylogpdf = logpdf.factory( 10.0, 2.0 );\n* y = mylogpdf( 10.0 );\n* // returns ~-0.693\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport logpdf from './logpdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( logpdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default logpdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport { factory as degenerate } from '@stdlib/stats-base-dists-degenerate-logpdf';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport cospi from '@stdlib/math-base-special-cospi';\nimport ln from '@stdlib/math-base-special-ln';\nimport NINF from '@stdlib/constants-float64-ninf';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the logarithm of the probability density function (PDF) for a raised cosine distribution.\n*\n* @param {number} mu - location parameter\n* @param {NonNegativeNumber} s - scale parameter\n* @returns {Function} logPDF\n*\n* @example\n* var logpdf = factory( 10.0, 2.0 );\n* var y = logpdf( 10.0 );\n* // returns ~-0.693\n*\n* y = logpdf( 9.0 );\n* // returns ~-1.386\n*/\nfunction factory( mu, s ) {\n\tif ( isnan( mu ) || isnan( s ) || s < 0.0 ) {\n\t\treturn constantFunction( NaN );\n\t}\n\tif ( s === 0.0 ) {\n\t\treturn degenerate( mu );\n\t}\n\treturn logpdf;\n\n\t/**\n\t* Evaluates the logarithm of the probability density function (PDF) for a raised cosine distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {number} evaluated logPDF\n\t*\n\t* @example\n\t* var y = logpdf( -1.2 );\n\t* // returns <number>\n\t*/\n\tfunction logpdf( x ) {\n\t\tvar z;\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif (\n\t\t\tx < mu - s ||\n\t\t\tx > mu + s\n\t\t) {\n\t\t\treturn NINF;\n\t\t}\n\t\tz = ( x - mu ) / s;\n\t\treturn ln( 1.0 + cospi( z ) ) - ln( 2.0 * s );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C code, long comment, copyright, license, and constants are from [Cephes]{@link http://www.netlib.org/cephes}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright 1984, 1995, 2000 by Stephen L. Moshier\n*\n* Some software in this archive may be from the book _Methods and Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster International, 1989) or from the Cephes Mathematical Library, a commercial product. In either event, it is copyrighted by the author. What you see here may be used freely but it comes with no support or guarantee.\n*\n* Stephen L. Moshier\n* moshier@na-net.ornl.gov\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport PINF from '@stdlib/constants-float64-pinf';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport abs from '@stdlib/math-base-special-abs';\nimport exp from '@stdlib/math-base-special-exp';\nimport LN2 from '@stdlib/constants-float64-ln-two';\nimport rateval from './rational_pq.js';\n\n\n// VARIABLES //\n\n// ln(2^1024)\nvar MAXLOG = 7.09782712893383996843e2;\n\n// ln(2^-1022)\nvar MINLOG = -7.08396418532264106224e2;\n\nvar POS_OVERFLOW = MAXLOG + LN2;\nvar NEG_OVERFLOW = MINLOG - LN2;\n\nvar LARGE = MAXLOG - LN2;\n\n\n// MAIN //\n\n/**\n* Computes the hyperbolic sine of a number.\n*\n* ## Method\n*\n* The range is partitioned into two segments. If \\\\( |x| \\le 1 \\\\), we use a rational function of the form\n*\n* ```tex\n* x + x^3 \\frac{\\mathrm{P}(x)}{\\mathrm{Q}(x)}\n* ```\n*\n* Otherwise, the calculation is\n*\n* ```tex\n* \\operatorname{sinh}(x) = \\frac{ e^x - e^{-x} }{2}.\n* ```\n*\n* ## Notes\n*\n* -   Relative error:\n*\n*     | arithmetic | domain   | # trials | peak    | rms     |\n*     |:----------:|:--------:|:--------:|:-------:|:-------:|\n*     | DEC        | +- 88    | 50000    | 4.0e-17 | 7.7e-18 |\n*     | IEEE       | +-MAXLOG | 30000    | 2.6e-16 | 5.7e-17 |\n*\n*\n* @param {number} x - input value (in radians)\n* @returns {number} hyperbolic sine\n*\n* @example\n* var v = sinh( 0.0 );\n* // returns 0.0\n*\n* @example\n* var v = sinh( 2.0 );\n* // returns ~3.627\n*\n* @example\n* var v = sinh( -2.0 );\n* // returns ~-3.627\n*\n* @example\n* var v = sinh( NaN );\n* // returns NaN\n*/\nfunction sinh( x ) {\n\tvar a;\n\tif ( x === 0.0 ) {\n\t\treturn x; // handles `+-0`\n\t}\n\ta = abs( x );\n\tif ( x > POS_OVERFLOW || x < NEG_OVERFLOW ) {\n\t\treturn ( x > 0.0 ) ? PINF : NINF;\n\t}\n\tif ( a > 1.0 ) {\n\t\tif ( a >= LARGE ) {\n\t\t\ta = exp( 0.5*a );\n\t\t\ta *= 0.5 * a;\n\t\t\tif ( x < 0.0 ) {\n\t\t\t\ta = -a;\n\t\t\t}\n\t\t\treturn a;\n\t\t}\n\t\ta = exp( a );\n\t\ta = (0.5*a) - (0.5/a);\n\t\tif ( x < 0.0 ) {\n\t\t\ta = -a;\n\t\t}\n\t\treturn a;\n\t}\n\ta *= a;\n\treturn x + ( x*a*rateval( a ) );\n}\n\n\n// EXPORTS //\n\nexport default sinh;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn 0.16666666666666666;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = -351754.9648081514 + (x * (-11561.443576500522 + (x * (-163.72585752598383 + (x * -0.789474443963537))))); // eslint-disable-line max-len\n\t\ts2 = -2110529.7888489086 + (x * (36157.827983443196 + (x * (-277.7110814206028 + (x * 1.0))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = -0.789474443963537 + (x * (-163.72585752598383 + (x * (-11561.443576500522 + (x * -351754.9648081514))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (-277.7110814206028 + (x * (36157.827983443196 + (x * -2110529.7888489086))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport sinh from '@stdlib/math-base-special-sinh';\nimport exp from '@stdlib/math-base-special-exp';\nimport PI_SQUARED from '@stdlib/constants-float64-pi-squared';\n\n\n// MAIN //\n\n/**\n* Evaluates the moment-generating function (MGF) for a raised cosine distribution with location parameter `mu` and scale parameter `s` at a value `t`.\n*\n* @param {number} t - input value\n* @param {number} mu - location parameter\n* @param {PositiveNumber} s - scale parameter\n* @returns {number} evaluated MGF\n*\n* @example\n* var y = mgf( 0.5, 0.0, 1.0 );\n* // returns ~1.016\n*\n* @example\n* var y = mgf( 1.2, 0.0, 1.0 );\n* // returns ~1.098\n*\n* @example\n* var y = mgf( -0.9, 0.0, 3.0);\n* // returns ~1.578\n*\n* @example\n* var y = mgf( 2.0, 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = mgf( 2.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = mgf( NaN, 0.0, 1.0 );\n* // returns NaN\n*/\nfunction mgf( t, mu, s ) {\n\tvar out;\n\tvar st;\n\tif (\n\t\tisnan( t ) ||\n\t\tisnan( mu ) ||\n\t\tisnan( s ) ||\n\t\ts <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tst = s * t;\n\tout = PI_SQUARED * sinh( st );\n\tout /= st * ( PI_SQUARED + ( st*st ) );\n\tout *= exp( mu * t );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default mgf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport cospi from '@stdlib/math-base-special-cospi';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Evaluates the probability density function (PDF) for a raised cosine distribution with location parameter `mu` and scale parameter `s` at a value `x`.\n*\n* @param {number} x - input value\n* @param {number} mu - location parameter\n* @param {NonNegativeNumber} s - scale parameter\n* @returns {number} evaluated PDF\n*\n* @example\n* var y = pdf( 2.0, 0.0, 3.0 );\n* // returns ~0.083\n*\n* @example\n* var y = pdf( 2.5, 4.0, 2.0 );\n* // returns ~0.073\n*\n* @example\n* var y = pdf( NaN, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = pdf( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = pdf( 0.0, 0.0, NaN );\n* // returns NaN\n*\n* @example\n* // Negative scale parameter:\n* var y = pdf( 2.0, 0.0, -1.0 );\n* // returns NaN\n*\n* @example\n* var y = pdf( 2.0, 8.0, 0.0 );\n* // returns 0.0\n*\n* @example\n* var y = pdf( 8.0, 8.0, 0.0 );\n* // returns Infinity\n*/\nfunction pdf( x, mu, s ) {\n\tvar z;\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( mu ) ||\n\t\tisnan( s ) ||\n\t\ts < 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( s === 0.0 ) {\n\t\treturn ( x === mu ) ? PINF : 0.0;\n\t}\n\tif (\n\t\tx < mu - s ||\n\t\tx > mu + s\n\t) {\n\t\treturn 0.0;\n\t}\n\tz = ( x - mu ) / s;\n\treturn ( 1.0 + cospi( z ) ) / ( 2.0 * s );\n}\n\n\n// EXPORTS //\n\nexport default pdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Raised cosine distribution moment-generating function (MGF).\n*\n* @module @stdlib/stats-base-dists-cosine-mgf\n*\n* @example\n* import mgf from '@stdlib/stats-base-dists-cosine-mgf';\n*\n* var y = mgf( 0.5, 0.0, 1.0 );\n* // returns ~1.016\n*\n* var mymgf = mgf.factory( 3.0, 1.5 );\n*\n* y = mymgf( 1.0 );\n* // returns ~23.219\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport mgf from './mgf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( mgf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default mgf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport sinh from '@stdlib/math-base-special-sinh';\nimport exp from '@stdlib/math-base-special-exp';\nimport PI_SQUARED from '@stdlib/constants-float64-pi-squared';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the moment-generating function (MGF) for a raised cosine distribution with location parameter `mu` and scale parameter `s`.\n*\n* @param {number} mu - location parameter\n* @param {PositiveNumber} s - scale parameter\n* @returns {Function} MGF\n*\n* @example\n* var mgf = factory( 3.0, 1.5 );\n*\n* var y = mgf( 1.9 );\n* // returns ~495.57\n*\n* y = mgf( -1.0 );\n* // returns ~0.058\n*/\nfunction factory( mu, s ) {\n\tif (\n\t\tisnan( mu ) ||\n\t\tisnan( s ) ||\n\t\ts <= 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn mgf;\n\n\t/**\n\t* Evaluates the moment-generating function (MGF) for a raised cosine distribution.\n\t*\n\t* @private\n\t* @param {number} t - input value\n\t* @returns {number} evaluated MGF\n\t*\n\t* @example\n\t* var y = mgf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction mgf( t ) {\n\t\tvar out;\n\t\tvar st;\n\t\tif ( isnan( t ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tst = s * t;\n\t\tout = PI_SQUARED * sinh( st );\n\t\tout /= st * ( PI_SQUARED + ( st*st ) );\n\t\tout *= exp( mu * t );\n\t\treturn out;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Raised cosine distribution probability density function (PDF).\n*\n* @module @stdlib/stats-base-dists-cosine-pdf\n*\n* @example\n* import pdf from '@stdlib/stats-base-dists-cosine-pdf';\n*\n* var y = pdf( 2.0, 0.0, 3.0 );\n* // returns ~0.083\n*\n* var myPDF = pdf.factory( 0.0, 3.0 );\n* y = myPDF( 2.0 );\n* // returns ~0.083\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport pdf from './pdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( pdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default pdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport { factory as degenerate } from '@stdlib/stats-base-dists-degenerate-pdf';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport cospi from '@stdlib/math-base-special-cospi';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the probability density function (PDF) for a raised cosine distribution.\n*\n* @param {number} mu - location parameter\n* @param {NonNegativeNumber} s - scale parameter\n* @returns {Function} PDF\n*\n* @example\n* var pdf = factory( 0.0, 3.0 );\n* var y = pdf( 2.0 );\n* // returns ~0.083\n*\n* y = pdf( 5.0 );\n* // returns 0.0\n*/\nfunction factory( mu, s ) {\n\tif ( isnan( mu ) || isnan( s ) || s < 0.0 ) {\n\t\treturn constantFunction( NaN );\n\t}\n\tif ( s === 0.0 ) {\n\t\treturn degenerate( mu );\n\t}\n\treturn pdf;\n\n\t/**\n\t* Evaluates the probability density function (PDF) for a raised cosine distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {number} evaluated PDF\n\t*\n\t* @example\n\t* var y = pdf( -1.2 );\n\t* // returns <number>\n\t*/\n\tfunction pdf( x ) {\n\t\tvar z;\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif (\n\t\t\tx < mu - s ||\n\t\t\tx > mu + s\n\t\t) {\n\t\t\treturn 0.0;\n\t\t}\n\t\tz = ( x - mu ) / s;\n\t\treturn ( 1.0 + cospi( z ) ) / ( 2.0 * s );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport cosineCDF from '@stdlib/stats-base-dists-cosine-cdf';\n\n\n// VARIABLES //\n\nvar MAX_ITERATIONS = 1e4;\nvar TOLERANCE = 1e-12;\n\n\n// MAIN //\n\n/**\n* Bisection method to find quantile as there is no closed-form expression for the inverse of the CDF.\n*\n* @private\n* @param {Probability} p - input value\n* @param {number} mu - location parameter\n* @param {NonNegativeNumber} s - scale parameter\n* @returns {number} evaluated quantile function\n*/\nfunction bisect( p, mu, s ) {\n\tvar a;\n\tvar b;\n\tvar c;\n\tvar m;\n\tvar n;\n\n\tn = 1;\n\ta = mu - s;\n\tb = mu + s;\n\twhile ( n < MAX_ITERATIONS ) {\n\t\tm = ( a + b ) / 2.0;\n\t\tif ( b - a < TOLERANCE ) {\n\t\t\treturn m;\n\t\t}\n\t\tc = cosineCDF( m, mu, s);\n\t\tif ( p > c ) {\n\t\t\ta = m;\n\t\t} else {\n\t\t\tb = m;\n\t\t}\n\t\tn += 1;\n\t}\n\treturn m;\n}\n\n\n// EXPORTS //\n\nexport default bisect;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport bisect from './bisect.js';\n\n\n// MAIN //\n\n/**\n* Evaluates the quantile function for a raised cosine distribution with location parameter `mu` and scale parameter `s` at a probability `p`.\n*\n* @param {Probability} p - input value\n* @param {number} mu - location parameter\n* @param {NonNegativeNumber} s - scale parameter\n* @returns {number} evaluated quantile function\n*\n* @example\n* var y = quantile( 0.8, 0.0, 1.0 );\n* // returns ~0.327\n*\n* @example\n* var y = quantile( 0.5, 4.0, 2.0 );\n* // returns ~4.0\n*\n* @example\n* var y = quantile( 1.1, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( -0.2, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( NaN, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.0, 0.0, NaN );\n* // returns NaN\n*\n* @example\n* // Negative scale parameter:\n* var y = quantile( 0.5, 0.0, -1.0 );\n* // returns NaN\n*/\nfunction quantile( p, mu, s ) {\n\tif (\n\t\tisnan( mu ) ||\n\t\tisnan( s ) ||\n\t\tisnan( p ) ||\n\t\ts < 0.0 ||\n\t\tp < 0.0 ||\n\t\tp > 1.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( s === 0.0 ) {\n\t\treturn mu;\n\t}\n\treturn bisect( p, mu, s );\n}\n\n\n// EXPORTS //\n\nexport default quantile;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nimport defineProperty from '@stdlib/utils-define-property';\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport setReadOnlyAccessor from '@stdlib/utils-define-nonenumerable-read-only-accessor';\nimport { isPrimitive as isPositive } from '@stdlib/assert-is-positive-number';\nimport { isPrimitive as isNumber } from '@stdlib/assert-is-number';\nimport isnan from '@stdlib/assert-is-nan';\nimport kurtosis from '@stdlib/stats-base-dists-cosine-kurtosis';\nimport mean from '@stdlib/stats-base-dists-cosine-mean';\nimport median from '@stdlib/stats-base-dists-cosine-median';\nimport mode from '@stdlib/stats-base-dists-cosine-mode';\nimport skewness from '@stdlib/stats-base-dists-cosine-skewness';\nimport stdev from '@stdlib/stats-base-dists-cosine-stdev';\nimport variance from '@stdlib/stats-base-dists-cosine-variance';\nimport cdf from '@stdlib/stats-base-dists-cosine-cdf';\nimport logcdf from '@stdlib/stats-base-dists-cosine-logcdf';\nimport logpdf from '@stdlib/stats-base-dists-cosine-logpdf';\nimport mgf from '@stdlib/stats-base-dists-cosine-mgf';\nimport pdf from '@stdlib/stats-base-dists-cosine-pdf';\nimport quantile from '@stdlib/stats-base-dists-cosine-quantile';\nimport format from '@stdlib/string-format';\n\n\n// FUNCTIONS //\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {Probability} evaluated CDF\n*/\nfunction cosineCDF( x ) {\n\treturn cdf( x, this.mu, this.s );\n}\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (logCDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logCDF\n*/\nfunction cosineLogCDF( x ) {\n\treturn logcdf( x, this.mu, this.s );\n}\n\n/**\n* Evaluates the natural logarithm of the probability density function (logPDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n*/\nfunction cosineLogPDF( x ) {\n\treturn logpdf( x, this.mu, this.s );\n}\n\n/**\n* Evaluates the moment-generating function (MGF).\n*\n* @private\n* @param {number} t - input value\n* @returns {number} evaluated MGF\n*/\nfunction cosineMGF( t ) {\n\treturn mgf( t, this.mu, this.s );\n}\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n*/\nfunction cosinePDF( x ) {\n\treturn pdf( x, this.mu, this.s );\n}\n\n/**\n* Evaluates the quantile function.\n*\n* @private\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n*/\nfunction cosineQuantile( p ) {\n\treturn quantile( p, this.mu, this.s );\n}\n\n\n// MAIN //\n\n/**\n* Cosine distribution constructor.\n*\n* @constructor\n* @param {number} [mu=0.0] - location parameter\n* @param {PositiveNumber} [s=1.0] - scale parameter\n* @throws {TypeError} `s` must be a positive number\n* @returns {Cosine} distribution instance\n*\n* @example\n* var cosine = new Cosine( 1.0, 1.0 );\n*\n* var y = cosine.cdf( 1.5 );\n* // returns ~0.909\n*\n* var mu = cosine.mean;\n* // returns 1.0\n*/\nfunction Cosine() {\n\tvar mu;\n\tvar s;\n\tif ( !(this instanceof Cosine) ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn new Cosine();\n\t\t}\n\t\treturn new Cosine( arguments[ 0 ], arguments[ 1 ] );\n\t}\n\tif ( arguments.length ) {\n\t\tmu = arguments[ 0 ];\n\t\ts = arguments[ 1 ];\n\t\tif ( !isNumber( mu ) || isnan( mu ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Location parameter must be a number. Value: `%s`.', mu ) );\n\t\t}\n\t\tif ( !isPositive( s ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Scale parameter must be a positive number. Value: `%s`.', s ) );\n\t\t}\n\t} else {\n\t\tmu = 0.0;\n\t\ts = 1.0;\n\t}\n\tdefineProperty( this, 'mu', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn mu;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isNumber( value ) || isnan( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid assignment. Must be a number. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\tmu = value;\n\t\t}\n\t});\n\tdefineProperty( this, 's', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn s;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isPositive( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid assignment. Must be a positive number. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\ts = value;\n\t\t}\n\t});\n\treturn this;\n}\n\n/**\n* Cosine distribution excess kurtosis.\n*\n* @name kurtosis\n* @memberof Cosine.prototype\n* @type {number}\n* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}\n*\n* @example\n* var cosine = new Cosine( 4.0, 12.0 );\n*\n* var v = cosine.kurtosis;\n* // returns ~-0.594\n*/\nsetReadOnlyAccessor( Cosine.prototype, 'kurtosis', function get() {\n\treturn kurtosis( this.mu, this.s );\n});\n\n/**\n* Cosine distribution expected value.\n*\n* @name mean\n* @memberof Cosine.prototype\n* @type {number}\n* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}\n*\n* @example\n* var cosine = new Cosine( 4.0, 12.0 );\n*\n* var v = cosine.mean;\n* // returns 4.0\n*/\nsetReadOnlyAccessor( Cosine.prototype, 'mean', function get() {\n\treturn mean( this.mu, this.s );\n});\n\n/**\n* Cosine distribution median.\n*\n* @name median\n* @memberof Cosine.prototype\n* @type {number}\n* @see [median]{@link https://en.wikipedia.org/wiki/Median}\n*\n* @example\n* var cosine = new Cosine( 4.0, 12.0 );\n*\n* var v = cosine.median;\n* // returns 4.0\n*/\nsetReadOnlyAccessor( Cosine.prototype, 'median', function get() {\n\treturn median( this.mu, this.s );\n});\n\n/**\n* Cosine distribution mode.\n*\n* @name mode\n* @memberof Cosine.prototype\n* @type {number}\n* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}\n*\n* @example\n* var cosine = new Cosine( 4.0, 12.0 );\n*\n* var v = cosine.mode;\n* // returns 4.0\n*/\nsetReadOnlyAccessor( Cosine.prototype, 'mode', function get() {\n\treturn mode( this.mu, this.s );\n});\n\n/**\n* Cosine distribution skewness.\n*\n* @name skewness\n* @memberof Cosine.prototype\n* @type {number}\n* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}\n*\n* @example\n* var cosine = new Cosine( 4.0, 12.0 );\n*\n* var v = cosine.skewness;\n* // returns 0.0\n*/\nsetReadOnlyAccessor( Cosine.prototype, 'skewness', function get() {\n\treturn skewness( this.mu, this.s );\n});\n\n/**\n* Cosine distribution standard deviation.\n*\n* @name stdev\n* @memberof Cosine.prototype\n* @type {number}\n* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}\n*\n* @example\n* var cosine = new Cosine( 4.0, 12.0 );\n*\n* var v = cosine.stdev;\n* // returns ~4.338\n*/\nsetReadOnlyAccessor( Cosine.prototype, 'stdev', function get() {\n\treturn stdev( this.mu, this.s );\n});\n\n/**\n* Cosine distribution variance.\n*\n* @name variance\n* @memberof Cosine.prototype\n* @type {number}\n* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}\n*\n* @example\n* var cosine = new Cosine( 4.0, 12.0 );\n*\n* var v = cosine.variance;\n* // returns ~18.819\n*/\nsetReadOnlyAccessor( Cosine.prototype, 'variance', function get() {\n\treturn variance( this.mu, this.s );\n});\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @name cdf\n* @memberof Cosine.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var cosine = new Cosine( 2.0, 4.0 );\n*\n* var v = cosine.cdf( 0.5 );\n* // returns ~0.165\n*/\nsetReadOnly( Cosine.prototype, 'cdf', cosineCDF );\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (logCDF).\n*\n* @name logcdf\n* @memberof Cosine.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logCDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var cosine = new Cosine( 2.0, 4.0 );\n*\n* var v = cosine.logcdf( 0.5 );\n* // returns ~-1.799\n*/\nsetReadOnly( Cosine.prototype, 'logcdf', cosineLogCDF );\n\n/**\n* Evaluates the natural logarithm of the probability density function (logPDF).\n*\n* @name logpdf\n* @memberof Cosine.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var cosine = new Cosine( 2.0, 4.0 );\n*\n* var v = cosine.logpdf( 0.8 );\n* // returns ~-1.617\n*/\nsetReadOnly( Cosine.prototype, 'logpdf', cosineLogPDF );\n\n/**\n* Evaluates the moment-generating function (MGF).\n*\n* @name mgf\n* @memberof Cosine.prototype\n* @type {Function}\n* @param {number} t - input value\n* @returns {number} evaluated MGF\n* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}\n*\n* @example\n* var cosine = new Cosine( 2.0, 4.0 );\n*\n* var v = cosine.mgf( 0.2 );\n* // returns ~1.555\n*/\nsetReadOnly( Cosine.prototype, 'mgf', cosineMGF );\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @name pdf\n* @memberof Cosine.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var cosine = new Cosine( 2.0, 4.0 );\n*\n* var v = cosine.pdf( 0.8 );\n* // returns ~0.198\n*/\nsetReadOnly( Cosine.prototype, 'pdf', cosinePDF );\n\n/**\n* Evaluates the quantile function.\n*\n* @name quantile\n* @memberof Cosine.prototype\n* @type {Function}\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}\n*\n* @example\n* var cosine = new Cosine( 2.0, 4.0 );\n*\n* var v = cosine.quantile( 0.5 );\n* // returns ~2.0\n*/\nsetReadOnly( Cosine.prototype, 'quantile', cosineQuantile );\n\n\n// EXPORTS //\n\nexport default Cosine;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Raised cosine distribution quantile function.\n*\n* @module @stdlib/stats-base-dists-cosine-quantile\n*\n* @example\n* import quantile from '@stdlib/stats-base-dists-cosine-quantile';\n*\n* var y = quantile( 0.8, 0.0, 1.0 );\n* // returns ~0.327\n*\n* var myQuantile = quantile.factory( 10.0, 2.0 );\n* y = myQuantile( 0.5 );\n* // returns ~10.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport quantile from './quantile.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( quantile, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default quantile;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport { factory as degenerate } from '@stdlib/stats-base-dists-degenerate-quantile';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport bisect from './bisect.js';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the quantile function for a raised cosine distribution.\n*\n* @param {number} mu - location parameter\n* @param {NonNegativeNumber} s - scale parameter\n* @returns {Function} quantile function\n*\n* @example\n* var quantile = factory( 10.0, 2.0 );\n* var y = quantile( 0.5 );\n* // returns ~10.0\n*\n* y = quantile( 0.8 );\n* // returns ~10.655\n*/\nfunction factory( mu, s ) {\n\tif ( isnan( mu ) || isnan( s ) || s < 0.0 ) {\n\t\treturn constantFunction( NaN );\n\t}\n\tif ( s === 0.0 ) {\n\t\treturn degenerate( mu );\n\t}\n\treturn quantile;\n\n\t/**\n\t* Evaluates the quantile function for a raised cosine distribution.\n\t*\n\t* @private\n\t* @param {Probability} p - input value\n\t* @returns {number} evaluated quantile function\n\t*\n\t* @example\n\t* var y = quantile( 0.3 );\n\t* // returns <number>\n\t*/\n\tfunction quantile( p ) {\n\t\tif ( isnan( p ) || p < 0.0 || p > 1.0 ) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn bisect( p, mu, s );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace cosine\n*/\nvar cosine = {};\n\n/**\n* @name cdf\n* @memberof cosine\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/cosine/cdf}\n*/\nimport cdf from '@stdlib/stats-base-dists-cosine-cdf';\nsetReadOnly( cosine, 'cdf', cdf );\n\n/**\n* @name Cosine\n* @memberof cosine\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/cosine/ctor}\n*/\nimport Cosine from '@stdlib/stats-base-dists-cosine-ctor';\nsetReadOnly( cosine, 'Cosine', Cosine );\n\n/**\n* @name kurtosis\n* @memberof cosine\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/cosine/kurtosis}\n*/\nimport kurtosis from '@stdlib/stats-base-dists-cosine-kurtosis';\nsetReadOnly( cosine, 'kurtosis', kurtosis );\n\n/**\n* @name logcdf\n* @memberof cosine\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/cosine/logcdf}\n*/\nimport logcdf from '@stdlib/stats-base-dists-cosine-logcdf';\nsetReadOnly( cosine, 'logcdf', logcdf );\n\n/**\n* @name logpdf\n* @memberof cosine\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/cosine/logpdf}\n*/\nimport logpdf from '@stdlib/stats-base-dists-cosine-logpdf';\nsetReadOnly( cosine, 'logpdf', logpdf );\n\n/**\n* @name mean\n* @memberof cosine\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/cosine/mean}\n*/\nimport mean from '@stdlib/stats-base-dists-cosine-mean';\nsetReadOnly( cosine, 'mean', mean );\n\n/**\n* @name median\n* @memberof cosine\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/cosine/median}\n*/\nimport median from '@stdlib/stats-base-dists-cosine-median';\nsetReadOnly( cosine, 'median', median );\n\n/**\n* @name mgf\n* @memberof cosine\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/cosine/mgf}\n*/\nimport mgf from '@stdlib/stats-base-dists-cosine-mgf';\nsetReadOnly( cosine, 'mgf', mgf );\n\n/**\n* @name mode\n* @memberof cosine\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/cosine/mode}\n*/\nimport mode from '@stdlib/stats-base-dists-cosine-mode';\nsetReadOnly( cosine, 'mode', mode );\n\n/**\n* @name pdf\n* @memberof cosine\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/cosine/pdf}\n*/\nimport pdf from '@stdlib/stats-base-dists-cosine-pdf';\nsetReadOnly( cosine, 'pdf', pdf );\n\n/**\n* @name quantile\n* @memberof cosine\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/cosine/quantile}\n*/\nimport quantile from '@stdlib/stats-base-dists-cosine-quantile';\nsetReadOnly( cosine, 'quantile', quantile );\n\n/**\n* @name skewness\n* @memberof cosine\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/cosine/skewness}\n*/\nimport skewness from '@stdlib/stats-base-dists-cosine-skewness';\nsetReadOnly( cosine, 'skewness', skewness );\n\n/**\n* @name stdev\n* @memberof cosine\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/cosine/stdev}\n*/\nimport stdev from '@stdlib/stats-base-dists-cosine-stdev';\nsetReadOnly( cosine, 'stdev', stdev );\n\n/**\n* @name variance\n* @memberof cosine\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/cosine/variance}\n*/\nimport variance from '@stdlib/stats-base-dists-cosine-variance';\nsetReadOnly( cosine, 'variance', variance );\n\n\n// EXPORTS //\n\nexport default cosine;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns the entropy of a degenerate distribution.\n*\n* @param {number} mu - constant value of distribution\n* @returns {NonNegativeNumber} entropy\n*\n* @example\n* var v = entropy( 0.1 );\n* // returns 0.0\n*\n* @example\n* var v = entropy( 0.5 );\n* // returns 0.0\n*\n* @example\n* var v = entropy( 10.0 );\n* // returns 0.0\n*\n* @example\n* var v = entropy( NaN );\n* // returns NaN\n*/\nfunction entropy( mu ) {\n\tif ( isnan( mu ) ) {\n\t\treturn NaN;\n\t}\n\treturn 0.0;\n}\n\n\n// EXPORTS //\n\nexport default entropy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns the expected value of a degenerate distribution.\n*\n* @param {number} mu - constant value of distribution\n* @returns {number} expected value\n*\n* @example\n* var v = mean( 0.1 );\n* // returns 0.1\n*\n* @example\n* var v = mean( 0.5 );\n* // returns 0.5\n*\n* @example\n* var v = mean( 10.0 );\n* // returns 10.0\n*\n* @example\n* var v = mean( NaN );\n* // returns NaN\n*/\nfunction mean( mu ) {\n\treturn mu;\n}\n\n\n// EXPORTS //\n\nexport default mean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns the mode of a degenerate distribution.\n*\n* @param {number} mu - constant value of distribution\n* @returns {number} mode\n*\n* @example\n* var v = mode( 0.1 );\n* // returns 0.1\n*\n* @example\n* var v = mode( 0.5 );\n* // returns 0.5\n*\n* @example\n* var v = mode( 10.0 );\n* // returns 10.0\n*\n* @example\n* var v = mode( NaN );\n* // returns NaN\n*/\nfunction mode( mu ) {\n\treturn mu;\n}\n\n\n// EXPORTS //\n\nexport default mode;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns the median of a degenerate distribution.\n*\n* @param {number} mu - constant value of distribution\n* @returns {number} median\n*\n* @example\n* var v = median( 0.1 );\n* // returns 0.1\n*\n* @example\n* var v = median( 0.5 );\n* // returns 0.5\n*\n* @example\n* var v = median( 10.0 );\n* // returns 10.0\n*\n* @example\n* var v = median( NaN );\n* // returns NaN\n*/\nfunction median( mu ) {\n\treturn mu;\n}\n\n\n// EXPORTS //\n\nexport default median;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns the standard deviation of a degenerate distribution.\n*\n* @param {number} mu - constant value of distribution\n* @returns {NonNegativeNumber} standard deviation\n*\n* @example\n* var v = stdev( 0.1 );\n* // returns 0.0\n*\n* @example\n* var v = stdev( 0.5 );\n* // returns 0.0\n*\n* @example\n* var v = stdev( 10.0 );\n* // returns 0.0\n*\n* @example\n* var v = stdev( NaN );\n* // returns NaN\n*/\nfunction stdev( mu ) {\n\tif ( isnan( mu ) ) {\n\t\treturn NaN;\n\t}\n\treturn 0.0;\n}\n\n\n// EXPORTS //\n\nexport default stdev;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns the variance of a degenerate distribution.\n*\n* @param {number} mu - constant value of distribution\n* @returns {NonNegativeNumber} variance\n*\n* @example\n* var v = variance( 0.1 );\n* // returns 0.0\n*\n* @example\n* var v = variance( 0.5 );\n* // returns 0.0\n*\n* @example\n* var v = variance( 10.0 );\n* // returns 0.0\n*\n* @example\n* var v = variance( NaN );\n* // returns NaN\n*/\nfunction variance( mu ) {\n\tif ( isnan( mu ) ) {\n\t\treturn NaN;\n\t}\n\treturn 0.0;\n}\n\n\n// EXPORTS //\n\nexport default variance;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport exp from '@stdlib/math-base-special-exp';\n\n\n// MAIN //\n\n/**\n* Evaluates the moment-generating function (MGF) for a degenerate distribution centered at `mu`.\n*\n* @param {number} t - input value\n* @param {number} mu - value at which to center the distribution\n* @returns {number} evaluated MGF\n*\n* @example\n* var y = mgf( 1.0, 1.0 );\n* // returns ~2.718\n*\n* @example\n* var y = mgf( 2.0, 3.0 );\n* // returns ~403.429\n*\n* @example\n* var y = mgf( NaN, 0.0 );\n* // returns NaN\n*\n* @example\n* var y = mgf( 0.0, NaN );\n* // returns NaN\n*/\nfunction mgf( t, mu ) {\n\tif ( isnan( t ) || isnan( mu ) ) {\n\t\treturn NaN;\n\t}\n\treturn exp( mu*t );\n}\n\n\n// EXPORTS //\n\nexport default mgf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport exp from '@stdlib/math-base-special-exp';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the moment-generating function (MGF) of a degenerate distribution centered at a provided mean value.\n*\n* @param {number} mu - value at which to center the distribution\n* @returns {Function} MGF\n*\n* @example\n* var mgf = factory( 2.0 );\n*\n* var y = mgf( 0.0 );\n* // returns 1.0\n*\n* y = mgf( 2.0 );\n* // returns ~54.598\n*/\nfunction factory( mu ) {\n\tif ( isnan( mu ) ) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn mgf;\n\n\t/**\n\t* Evaluates the moment-generating function (MGF) of a degenerate distribution.\n\t*\n\t* @private\n\t* @param {number} t - input value\n\t* @returns {number} evaluated MGF\n\t*\n\t* @example\n\t* var y = mgf( 10.0 );\n\t* // returns <number>\n\t*/\n\tfunction mgf( t ) {\n\t\tif ( isnan( t ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn exp( mu*t );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nimport defineProperty from '@stdlib/utils-define-property';\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport setReadOnlyAccessor from '@stdlib/utils-define-nonenumerable-read-only-accessor';\nimport isNumber from '@stdlib/assert-is-number';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport entropy from '@stdlib/stats-base-dists-degenerate-entropy';\nimport mean from '@stdlib/stats-base-dists-degenerate-mean';\nimport mode from '@stdlib/stats-base-dists-degenerate-mode';\nimport median from '@stdlib/stats-base-dists-degenerate-median';\nimport stdev from '@stdlib/stats-base-dists-degenerate-stdev';\nimport variance from '@stdlib/stats-base-dists-degenerate-variance';\nimport cdf from '@stdlib/stats-base-dists-degenerate-cdf';\nimport mgf from '@stdlib/stats-base-dists-degenerate-mgf';\nimport pdf from '@stdlib/stats-base-dists-degenerate-pdf';\nimport pmf from '@stdlib/stats-base-dists-degenerate-pmf';\nimport logcdf from '@stdlib/stats-base-dists-degenerate-logcdf';\nimport logpdf from '@stdlib/stats-base-dists-degenerate-logpdf';\nimport logpmf from '@stdlib/stats-base-dists-degenerate-logpmf';\nimport quantile from '@stdlib/stats-base-dists-degenerate-quantile';\nimport format from '@stdlib/string-format';\n\n\n// FUNCTIONS //\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n*/\nfunction degenerateCDF( x ) {\n\treturn cdf( x, this.mu );\n}\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logCDF\n*/\nfunction degenerateLogCDF( x ) {\n\treturn logcdf( x, this.mu );\n}\n\n/**\n* Evaluates the natural logarithm of the probability density function (PDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n*/\nfunction degenerateLogPDF( x ) {\n\treturn logpdf( x, this.mu );\n}\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n*/\nfunction degeneratePDF( x ) {\n\treturn pdf( x, this.mu );\n}\n\n/**\n* Evaluates the natural logarithm of the probability mass function (PMF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logPMF\n*/\nfunction degenerateLogPMF( x ) {\n\treturn logpmf( x, this.mu );\n}\n\n/**\n* Evaluates the moment-generating function (MGF).\n*\n* @private\n* @param {number} t - input value\n* @returns {number} evaluated MGF\n*/\nfunction degenerateMGF( t ) {\n\treturn mgf( t, this.mu );\n}\n\n/**\n* Evaluates the probability mass function (PMF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated PMF\n*/\nfunction degeneratePMF( x ) {\n\treturn pmf( x, this.mu );\n}\n\n/**\n* Evaluates the quantile function.\n*\n* @private\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n*/\nfunction degenerateQuantile( p ) {\n\treturn quantile( p, this.mu );\n}\n\n\n// MAIN //\n\n/**\n* Degenerate distribution constructor.\n*\n* @constructor\n* @param {number} [mu=0.0] - constant value of distribution\n* @throws {TypeError} `mu` must be a number\n* @returns {Degenerate} distribution instance\n*\n* @example\n* var degenerate = new Degenerate();\n*\n* var y = degenerate.cdf( 1.8 );\n* // returns 1.0\n*\n* var v = degenerate.median;\n* // returns 0.0\n*/\nfunction Degenerate() {\n\tvar mu;\n\tif ( !(this instanceof Degenerate) ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn new Degenerate();\n\t\t}\n\t\treturn new Degenerate( arguments[ 0 ] );\n\t}\n\tif ( arguments.length ) {\n\t\tmu = arguments[ 0 ];\n\t\tif ( !isNumber( mu ) || isnan( mu ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Mean parameter `%s` must be a number. Value: `%s`.', 'mu', mu ) );\n\t\t}\n\t} else {\n\t\tmu = 0.0;\n\t}\n\tdefineProperty( this, 'mu', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn mu;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isNumber( value ) || isnan( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid assignment. Must be a number. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\tmu = value;\n\t\t}\n\t});\n\treturn this;\n}\n\n/**\n* Degenerate distribution differential entropy.\n*\n* @name entropy\n* @memberof Degenerate.prototype\n* @type {number}\n* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}\n*\n* @example\n* var degenerate = new Degenerate( 20.0 );\n*\n* var v = degenerate.entropy;\n* // returns 0.0\n*/\nsetReadOnlyAccessor( Degenerate.prototype, 'entropy', function get() {\n\treturn entropy( this.mu );\n});\n\n/**\n* Degenerate distribution expected value.\n*\n* @name mean\n* @memberof Degenerate.prototype\n* @type {number}\n* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}\n*\n* @example\n* var degenerate = new Degenerate( 20.0 );\n*\n* var v = degenerate.mean;\n* // returns 20.0\n*/\nsetReadOnlyAccessor( Degenerate.prototype, 'mean', function get() {\n\treturn mean( this.mu );\n});\n\n/**\n* Degenerate distribution mode.\n*\n* @name mode\n* @memberof Degenerate.prototype\n* @type {number}\n* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}\n*\n* @example\n* var degenerate = new Degenerate( 20.0 );\n*\n* var v = degenerate.mode;\n* // returns 20.0\n*/\nsetReadOnlyAccessor( Degenerate.prototype, 'mode', function get() {\n\treturn mode( this.mu );\n});\n\n/**\n* Degenerate distribution median.\n*\n* @name median\n* @memberof Degenerate.prototype\n* @type {number}\n* @see [median]{@link https://en.wikipedia.org/wiki/Median}\n*\n* @example\n* var degenerate = new Degenerate( -0.4 );\n*\n* var v = degenerate.median;\n* // returns -0.4\n*/\nsetReadOnlyAccessor( Degenerate.prototype, 'median', function get() {\n\treturn median( this.mu );\n});\n\n/**\n* Degenerate distribution standard deviation.\n*\n* @name stdev\n* @memberof Degenerate.prototype\n* @type {PositiveNumber}\n* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}\n*\n* @example\n* var degenerate = new Degenerate( 40.0 );\n*\n* var v = degenerate.stdev;\n* // returns 0.0\n*/\nsetReadOnlyAccessor( Degenerate.prototype, 'stdev', function get() {\n\treturn stdev( this.mu );\n});\n\n/**\n* Degenerate distribution variance.\n*\n* @name variance\n* @memberof Degenerate.prototype\n* @type {PositiveNumber}\n* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}\n*\n* @example\n* var degenerate = new Degenerate( 40.0 );\n*\n* var v = degenerate.variance;\n* // returns 0.0\n*/\nsetReadOnlyAccessor( Degenerate.prototype, 'variance', function get() {\n\treturn variance( this.mu );\n});\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @name cdf\n* @memberof Degenerate.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var degenerate = new Degenerate( -0.5 );\n*\n* var v = degenerate.cdf( 1.5 );\n* // returns 1.0\n*/\nsetReadOnly( Degenerate.prototype, 'cdf', degenerateCDF );\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (logCDF).\n*\n* @name logcdf\n* @memberof Degenerate.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logCDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var degenerate = new Degenerate( 3.0 );\n*\n* var v = degenerate.logcdf( 4.0 );\n* // returns 0.0\n*/\nsetReadOnly( Degenerate.prototype, 'logcdf', degenerateLogCDF );\n\n/**\n* Evaluates the natural logarithm of the probability density function (logPDF).\n*\n* @name logpdf\n* @memberof Degenerate.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var degenerate = new Degenerate( -4.0 );\n*\n* var v = degenerate.logpdf( 4.0 );\n* // returns -Infinity\n*/\nsetReadOnly( Degenerate.prototype, 'logpdf', degenerateLogPDF );\n\n/**\n* Evaluates the natural logarithm of the probability mass function (logPMF).\n*\n* @name logpdf\n* @memberof Degenerate.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logPMF\n* @see [pmf]{@link https://en.wikipedia.org/wiki/Probability_mass_function}\n*\n* @example\n* var degenerate = new Degenerate( 20.0 );\n*\n* var v = degenerate.logpmf( 20.0 );\n* // returns 0.0\n*/\nsetReadOnly( Degenerate.prototype, 'logpmf', degenerateLogPMF );\n\n/**\n* Evaluates the moment-generating function (MGF).\n*\n* @name mgf\n* @memberof Degenerate.prototype\n* @type {Function}\n* @param {number} t - input value\n* @returns {number} evaluated MGF\n* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}\n*\n* @example\n* var degenerate = new Degenerate( 2.0 );\n*\n* var v = degenerate.mgf( -3.0 );\n* // returns ~0.002\n*/\nsetReadOnly( Degenerate.prototype, 'mgf', degenerateMGF );\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @name pdf\n* @memberof Degenerate.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n* @see [pmf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var degenerate = new Degenerate( 0.2 );\n*\n* var v = degenerate.pdf( 0.2 );\n* // returns +Infinity\n*\n* v = degenerate.pdf( 0.4 );\n* // returns 0.0\n*/\nsetReadOnly( Degenerate.prototype, 'pdf', degeneratePDF );\n\n/**\n* Evaluates the probability mass function (PMF).\n*\n* @name pmf\n* @memberof Degenerate.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated PMF\n* @see [pmf]{@link https://en.wikipedia.org/wiki/Probability_mass_function}\n*\n* @example\n* var degenerate = new Degenerate( 0.2 );\n*\n* var v = degenerate.pmf( 0.4 );\n* // returns 0.0\n*\n* v = degenerate.pmf( 0.2 );\n* // returns 1.0\n*/\nsetReadOnly( Degenerate.prototype, 'pmf', degeneratePMF );\n\n/**\n* Evaluates the quantile function.\n*\n* @name quantile\n* @memberof Degenerate.prototype\n* @type {Function}\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}\n*\n* @example\n* var degenerate = new Degenerate( 0.2 );\n*\n* var v = degenerate.quantile( 0.9 );\n* // returns 0.2\n*/\nsetReadOnly( Degenerate.prototype, 'quantile', degenerateQuantile );\n\n\n// EXPORTS //\n\nexport default Degenerate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Degenerate distribution moment-generating function (MGF).\n*\n* @module @stdlib/stats-base-dists-degenerate-mgf\n*\n* @example\n* import mgf from '@stdlib/stats-base-dists-degenerate-mgf';\n*\n* var y = mgf( 2.0, 0.0 );\n* // returns 1.0\n*\n* @example\n* import { factory as factory } from '@stdlib/stats-base-dists-degenerate-mgf';\n*\n* var mgf = factory( 10.0 );\n*\n* var y = mymgf( 0.1 );\n* // returns ~2.718\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport mgf from './mgf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( mgf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default mgf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace degenerate\n*/\nvar degenerate = {};\n\n/**\n* @name cdf\n* @memberof degenerate\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/degenerate/cdf}\n*/\nimport cdf from '@stdlib/stats-base-dists-degenerate-cdf';\nsetReadOnly( degenerate, 'cdf', cdf );\n\n/**\n* @name Degenerate\n* @memberof degenerate\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/degenerate/ctor}\n*/\nimport Degenerate from '@stdlib/stats-base-dists-degenerate-ctor';\nsetReadOnly( degenerate, 'Degenerate', Degenerate );\n\n/**\n* @name entropy\n* @memberof degenerate\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/degenerate/entropy}\n*/\nimport entropy from '@stdlib/stats-base-dists-degenerate-entropy';\nsetReadOnly( degenerate, 'entropy', entropy );\n\n/**\n* @name logcdf\n* @memberof degenerate\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/degenerate/logcdf}\n*/\nimport logcdf from '@stdlib/stats-base-dists-degenerate-logcdf';\nsetReadOnly( degenerate, 'logcdf', logcdf );\n\n/**\n* @name logpdf\n* @memberof degenerate\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/degenerate/logpdf}\n*/\nimport logpdf from '@stdlib/stats-base-dists-degenerate-logpdf';\nsetReadOnly( degenerate, 'logpdf', logpdf );\n\n/**\n* @name logpmf\n* @memberof degenerate\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/degenerate/logpmf}\n*/\nimport logpmf from '@stdlib/stats-base-dists-degenerate-logpmf';\nsetReadOnly( degenerate, 'logpmf', logpmf );\n\n/**\n* @name mean\n* @memberof degenerate\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/degenerate/mean}\n*/\nimport mean from '@stdlib/stats-base-dists-degenerate-mean';\nsetReadOnly( degenerate, 'mean', mean );\n\n/**\n* @name median\n* @memberof degenerate\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/degenerate/median}\n*/\nimport median from '@stdlib/stats-base-dists-degenerate-median';\nsetReadOnly( degenerate, 'median', median );\n\n/**\n* @name mgf\n* @memberof degenerate\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/degenerate/mgf}\n*/\nimport mgf from '@stdlib/stats-base-dists-degenerate-mgf';\nsetReadOnly( degenerate, 'mgf', mgf );\n\n/**\n* @name mode\n* @memberof degenerate\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/degenerate/mode}\n*/\nimport mode from '@stdlib/stats-base-dists-degenerate-mode';\nsetReadOnly( degenerate, 'mode', mode );\n\n/**\n* @name pdf\n* @memberof degenerate\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/degenerate/pdf}\n*/\nimport pdf from '@stdlib/stats-base-dists-degenerate-pdf';\nsetReadOnly( degenerate, 'pdf', pdf );\n\n/**\n* @name pmf\n* @memberof degenerate\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/degenerate/pmf}\n*/\nimport pmf from '@stdlib/stats-base-dists-degenerate-pmf';\nsetReadOnly( degenerate, 'pmf', pmf );\n\n/**\n* @name quantile\n* @memberof degenerate\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/degenerate/quantile}\n*/\nimport quantile from '@stdlib/stats-base-dists-degenerate-quantile';\nsetReadOnly( degenerate, 'quantile', quantile );\n\n/**\n* @name stdev\n* @memberof degenerate\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/degenerate/stdev}\n*/\nimport stdev from '@stdlib/stats-base-dists-degenerate-stdev';\nsetReadOnly( degenerate, 'stdev', stdev );\n\n/**\n* @name variance\n* @memberof degenerate\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/degenerate/variance}\n*/\nimport variance from '@stdlib/stats-base-dists-degenerate-variance';\nsetReadOnly( degenerate, 'variance', variance );\n\n\n// EXPORTS //\n\nexport default degenerate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isInteger from '@stdlib/math-base-assert-is-integer';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport floor from '@stdlib/math-base-special-floor';\n\n\n// MAIN //\n\n/**\n* Evaluates the cumulative distribution function (CDF) for a discrete uniform distribution with minimum support `a` and maximum support `b` at a value `x`.\n*\n* @param {number} x - input value\n* @param {integer} a - minimum support\n* @param {integer} b - maximum support\n* @returns {Probability} evaluated CDF\n*\n* @example\n* var y = cdf( 9.0, 0.0, 10.0 );\n* // returns ~0.909\n*\n* @example\n* var y = cdf( 0.5, 0.0, 2.0 );\n* // returns ~0.333\n*\n* @example\n* var y = cdf( +Infinity, 2.0, 4.0 );\n* // returns 1.0\n*\n* @example\n* var y = cdf( -Infinity, 2.0, 4.0 );\n* // returns 0.0\n*\n* @example\n* var y = cdf( NaN, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2.0, 1.0, 0.0 );\n* // returns NaN\n*/\nfunction cdf( x, a, b ) {\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\t!isInteger( a ) ||\n\t\t!isInteger( b ) ||\n\t\ta > b\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x < a ) {\n\t\treturn 0.0;\n\t}\n\tif ( x >= b ) {\n\t\treturn 1.0;\n\t}\n\treturn ( floor( x ) - a + 1.0 ) / ( b - a + 1.0 );\n}\n\n\n// EXPORTS //\n\nexport default cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isInteger from '@stdlib/math-base-assert-is-integer';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport ln from '@stdlib/math-base-special-ln';\n\n\n// MAIN //\n\n/**\n* Returns the entropy of a discrete uniform distribution.\n*\n* @param {integer} a - minimum support\n* @param {integer} b - maximum support\n* @returns {number} entropy\n*\n* @example\n* var v = entropy( 0, 1 );\n* // returns ~0.693\n*\n* @example\n* var v = entropy( 4, 12 );\n* // returns ~2.197\n*\n* @example\n* var v = entropy( -4, 4 );\n* // returns ~2.197\n*\n* @example\n* var v = entropy( 1, 2.5 );\n* // returns NaN\n*\n* @example\n* var v = entropy( -0.1, 1 );\n* // returns NaN\n*\n* @example\n* var v = entropy( 2, NaN );\n* // returns NaN\n*\n* @example\n* var v = entropy( NaN, 2 );\n* // returns NaN\n*/\nfunction entropy( a, b ) {\n\tif (\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\t!isInteger( a ) ||\n\t\t!isInteger( b ) ||\n\t\ta > b\n\t) {\n\t\treturn NaN;\n\t}\n\treturn ln( b - a + 1 );\n}\n\n\n// EXPORTS //\n\nexport default entropy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isInteger from '@stdlib/math-base-assert-is-integer';\nimport pow from '@stdlib/math-base-special-pow';\n\n\n// MAIN //\n\n/**\n* Returns the excess kurtosis of a discrete uniform distribution.\n*\n* @param {integer} a - minimum support\n* @param {integer} b - maximum support\n* @returns {number} excess kurtosis\n*\n* @example\n* var v = kurtosis( 0, 1 );\n* // returns -2.0\n*\n* @example\n* var v = kurtosis( 4, 12 );\n* // returns ~-1.23\n*\n* @example\n* var v = kurtosis( -4, 4 );\n* // returns ~-1.23\n*\n* @example\n* var v = kurtosis( 1, 0.4 );\n* // returns NaN\n*\n* @example\n* var v = kurtosis( -0.1, 1 );\n* // returns NaN\n*\n* @example\n* var v = kurtosis( 2, NaN );\n* // returns NaN\n*\n* @example\n* var v = kurtosis( NaN, 2 );\n* // returns NaN\n*/\nfunction kurtosis( a, b ) {\n\tvar n2;\n\tif (\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\t!isInteger( a ) ||\n\t\t!isInteger( b ) ||\n\t\ta > b\n\t) {\n\t\treturn NaN;\n\t}\n\tn2 = pow( b - a + 1.0, 2.0 );\n\treturn -1.2 * ( n2 + 1.0 ) / ( n2 - 1.0 );\n}\n\n\n// EXPORTS //\n\nexport default kurtosis;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isInteger from '@stdlib/math-base-assert-is-integer';\n\n\n// MAIN //\n\n/**\n* Returns the expected value of a discrete uniform distribution.\n*\n* @param {integer} a - minimum support\n* @param {integer} b - maximum support\n* @returns {number} expected value\n*\n* @example\n* var v = mean( 0, 1 );\n* // returns 0.5\n*\n* @example\n* var v = mean( -4, 4 );\n* // returns 0.0\n*\n* @example\n* var v = mean( 0, 10 );\n* // returns 5.0\n*\n* @example\n* var v = mean( 1, -0.1 );\n* // returns NaN\n*\n* @example\n* var v = mean( -0.1, 1 );\n* // returns NaN\n*\n* @example\n* var v = mean( 2, NaN );\n* // returns NaN\n*\n* @example\n* var v = mean( NaN, 2 );\n* // returns NaN\n*/\nfunction mean( a, b ) {\n\tif (\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\t!isInteger( a ) ||\n\t\t!isInteger( b ) ||\n\t\ta > b\n\t) {\n\t\treturn NaN;\n\t}\n\treturn ( a/2 ) + ( b/2 );\n}\n\n\n// EXPORTS //\n\nexport default mean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isInteger from '@stdlib/math-base-assert-is-integer';\n\n\n// MAIN //\n\n/**\n* Returns the median of a discrete uniform distribution.\n*\n* @param {integer} a - minimum support\n* @param {integer} b - maximum support\n* @returns {number} median\n*\n* @example\n* var v = median( 0, 1 );\n* // returns 0.5\n*\n* @example\n* var v = median( -4, 4 );\n* // returns 0.0\n*\n* @example\n* var v = median( 0, 10 );\n* // returns 5.0\n*\n* @example\n* var v = median( 1, -0.1 );\n* // returns NaN\n*\n* @example\n* var v = median( -0.1, 1 );\n* // returns NaN\n*\n* @example\n* var v = median( 2, NaN );\n* // returns NaN\n*\n* @example\n* var v = median( NaN, 2 );\n* // returns NaN\n*/\nfunction median( a, b ) {\n\tif (\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\t!isInteger( a ) ||\n\t\t!isInteger( b ) ||\n\t\ta > b\n\t) {\n\t\treturn NaN;\n\t}\n\treturn ( a/2 ) + ( b/2 );\n}\n\n\n// EXPORTS //\n\nexport default median;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isInteger from '@stdlib/math-base-assert-is-integer';\n\n\n// MAIN //\n\n/**\n* Returns the skewness of a discrete uniform distribution.\n*\n* @param {integer} a - minimum support\n* @param {integer} b - maximum support\n* @returns {number} skewness\n*\n* @example\n* var v = skewness( 0, 1 );\n* // returns 0.0\n*\n* @example\n* var v = skewness( -4, 4 );\n* // returns 0.0\n*\n* @example\n* var v = skewness( 0, 10 );\n* // returns 0.0\n*\n* @example\n* var v = skewness( 1, -0.1 );\n* // returns NaN\n*\n* @example\n* var v = skewness( -0.1, 1 );\n* // returns NaN\n*\n* @example\n* var v = skewness( 2, NaN );\n* // returns NaN\n*\n* @example\n* var v = skewness( NaN, 2 );\n* // returns NaN\n*/\nfunction skewness( a, b ) {\n\tif (\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\t!isInteger( a ) ||\n\t\t!isInteger( b ) ||\n\t\ta > b\n\t) {\n\t\treturn NaN;\n\t}\n\treturn 0.0;\n}\n\n\n// EXPORTS //\n\nexport default skewness;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Discrete uniform distribution cumulative distribution function (CDF).\n*\n* @module @stdlib/stats-base-dists-discrete-uniform-cdf\n*\n* @example\n* import cdf from '@stdlib/stats-base-dists-discrete-uniform-cdf';\n*\n* var y = cdf( 3.0, 0, 4 );\n* // returns ~0.8\n*\n* var mycdf = cdf.factory( 0, 10 );\n* y = mycdf( 0.5 );\n* // returns ~0.091\n*\n* y = mycdf( 8.0 );\n* // returns ~0.818\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport cdf from './cdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( cdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isInteger from '@stdlib/math-base-assert-is-integer';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport floor from '@stdlib/math-base-special-floor';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the cumulative distribution function (CDF) for a discrete uniform distribution with minimum support `a` and maximum support `b`.\n*\n* @param {integer} a - minimum support\n* @param {integer} b - maximum support\n* @returns {Function} CDF\n*\n* @example\n* var cdf = factory( 0.0, 10.0 );\n* var y = cdf( 0.5 );\n* // returns ~0.091\n*\n* y = cdf( 8.0 );\n* // returns ~0.818\n*/\nfunction factory( a, b ) {\n\tvar am1;\n\tvar n;\n\tif (\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\t!isInteger( a ) ||\n\t\t!isInteger( b ) ||\n\t\ta > b\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\tam1 = a - 1.0;\n\tn = b - a + 1.0;\n\treturn cdf;\n\n\t/**\n\t* Evaluates the cumulative distribution function (CDF) for a discrete uniform distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated CDF\n\t*\n\t* @example\n\t* var y = cdf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction cdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x < a ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\tif ( x >= b ) {\n\t\t\treturn 1.0;\n\t\t}\n\t\treturn ( floor( x ) - am1 ) / n;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isInteger from '@stdlib/math-base-assert-is-integer';\nimport pow from '@stdlib/math-base-special-pow';\nimport sqrt from '@stdlib/math-base-special-sqrt';\n\n\n// VARIABLES //\n\nvar SQRT1O12 = sqrt( 1.0/12.0 );\n\n\n// MAIN //\n\n/**\n* Returns the standard deviation of a discrete uniform distribution.\n*\n* @param {integer} a - minimum support\n* @param {integer} b - maximum support\n* @returns {PositiveNumber} standard deviation\n*\n* @example\n* var v = stdev( 0, 1 );\n* // returns ~0.5\n*\n* @example\n* var v = stdev( 4, 12 );\n* // returns ~2.582\n*\n* @example\n* var v = stdev( -4, 4 );\n* // returns ~2.582\n*\n* @example\n* var v = stdev( 1, -0.1 );\n* // returns NaN\n*\n* @example\n* var v = stdev( 0.5, 1 );\n* // returns NaN\n*\n* @example\n* var v = stdev( 2, NaN );\n* // returns NaN\n*\n* @example\n* var v = stdev( NaN, 2 );\n* // returns NaN\n*/\nfunction stdev( a, b ) {\n\tif (\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\t!isInteger( a ) ||\n\t\t!isInteger( b ) ||\n\t\ta > b\n\t) {\n\t\treturn NaN;\n\t}\n\treturn SQRT1O12 * sqrt( ( pow( b-a+1, 2.0 ) - 1.0 ) );\n}\n\n\n// EXPORTS //\n\nexport default stdev;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isInteger from '@stdlib/math-base-assert-is-integer';\nimport pow from '@stdlib/math-base-special-pow';\n\n\n// MAIN //\n\n/**\n* Returns the variance of a discrete uniform distribution.\n*\n* @param {integer} a - minimum support\n* @param {integer} b - maximum support\n* @returns {PositiveNumber} variance\n*\n* @example\n* var v = variance( 0, 1 );\n* // returns ~0.25\n*\n* @example\n* var v = variance( 4, 12 );\n* // returns ~6.667\n*\n* @example\n* var v = variance( -4, 4 );\n* // returns ~6.667\n*\n* @example\n* var v = variance( 1, -0.1 );\n* // returns NaN\n*\n* @example\n* var v = variance( 0.5, 1 );\n* // returns NaN\n*\n* @example\n* var v = variance( 2, NaN );\n* // returns NaN\n*\n* @example\n* var v = variance( NaN, 2 );\n* // returns NaN\n*/\nfunction variance( a, b ) {\n\tif (\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\t!isInteger( a ) ||\n\t\t!isInteger( b ) ||\n\t\ta > b\n\t) {\n\t\treturn NaN;\n\t}\n\treturn ( pow( b-a+1, 2.0 ) - 1.0 ) / 12.0;\n}\n\n\n// EXPORTS //\n\nexport default variance;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isInteger from '@stdlib/math-base-assert-is-integer';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport floor from '@stdlib/math-base-special-floor';\nimport ln from '@stdlib/math-base-special-ln';\nimport NINF from '@stdlib/constants-float64-ninf';\n\n\n// MAIN //\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (CDF) for a discrete uniform distribution with minimum support `a` and maximum support `b` at a value `x`.\n*\n* @param {number} x - input value\n* @param {integer} a - minimum support\n* @param {integer} b - maximum support\n* @returns {number} evaluated logCDF\n*\n* @example\n* var y = logcdf( 9.0, 0, 10 );\n* // returns ~-0.095\n*\n* @example\n* var y = logcdf( 0.5, 0, 2 );\n* // returns ~-1.099\n*\n* @example\n* var y = logcdf( +Infinity, 2, 4 );\n* // returns 0.0\n*\n* @example\n* var y = logcdf( -Infinity, 2, 4 );\n* // returns -Infinity\n*\n* @example\n* var y = logcdf( NaN, 0, 1 );\n* // returns NaN\n*\n* @example\n* var y = logcdf( 0.0, NaN, 1 );\n* // returns NaN\n*\n* @example\n* var y = logcdf( 0.0, 0, NaN );\n* // returns NaN\n*\n* @example\n* var y = logcdf( 2.0, 1, 0 );\n* // returns NaN\n*/\nfunction logcdf( x, a, b ) {\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\t!isInteger( a ) ||\n\t\t!isInteger( b ) ||\n\t\ta > b\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x < a ) {\n\t\treturn NINF;\n\t}\n\tif ( x >= b ) {\n\t\treturn 0.0;\n\t}\n\treturn ln( floor( x ) - a + 1.0 ) - ln( b - a + 1.0 );\n}\n\n\n// EXPORTS //\n\nexport default logcdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isInteger from '@stdlib/math-base-assert-is-integer';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport ln from '@stdlib/math-base-special-ln';\nimport NINF from '@stdlib/constants-float64-ninf';\n\n\n// MAIN //\n\n/**\n* Evaluates the natural logarithm of the probability mass function (PMF) for a discrete uniform distribution with minimum support `a` and maximum support `b` at a value `x`.\n*\n* @param {number} x - input value\n* @param {integer} a - minimum support\n* @param {integer} b - maximum support\n* @returns {number} evaluated logPMF\n*\n* @example\n* var y = logpmf( 2.0, 0, 4 );\n* // returns ~-1.609\n*\n* @example\n* var y = logpmf( 5.0, 0, 4 );\n* // returns -Infinity\n*\n* @example\n* var y = logpmf( 2, 0, 8 );\n* // returns ~-2.197\n*\n* @example\n* var y = logpmf( NaN, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = logpmf( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = logpmf( 0.0, 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = logpmf( 2.0, 3.0, 1.0 );\n* // returns NaN\n*/\nfunction logpmf( x, a, b ) {\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\t!isInteger( a ) ||\n\t\t!isInteger( b ) ||\n\t\ta > b\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x < a || x > b || !isInteger( x ) ) {\n\t\treturn NINF;\n\t}\n\treturn -ln( b - a + 1.0 );\n}\n\n\n// EXPORTS //\n\nexport default logpmf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isInteger from '@stdlib/math-base-assert-is-integer';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport expm1 from '@stdlib/math-base-special-expm1';\nimport exp from '@stdlib/math-base-special-exp';\n\n\n// MAIN //\n\n/**\n* Evaluates the moment-generating function (MGF) of a discrete uniform distribution with minimum support `a` and maximum support `b` at a value `t`.\n*\n* @param {number} t - input value\n* @param {integer} a - minimum support\n* @param {integer} b - maximum support\n* @returns {number} evaluated MGF\n*\n* @example\n* var y = mgf( 2.0, 0, 4 );\n* // returns ~689.475\n*\n* @example\n* var y = mgf( -0.2, 0, 4 );\n* // returns ~0.697\n*\n* @example\n* var y = mgf( 2.0, 0, 1 );\n* // returns ~4.195\n*\n* @example\n* var y = mgf( 0.5, 3, 3 );\n* // returns ~4.482\n*\n* @example\n* var y = mgf( 0.5, 3, 2 );\n* // returns NaN\n*\n* @example\n* var y = mgf( NaN, 0, 1 );\n* // returns NaN\n*\n* @example\n* var y = mgf( 0.0, NaN, 1 );\n* // returns NaN\n*\n* @example\n* var y = mgf( 0.0, 0, NaN );\n* // returns NaN\n*/\nfunction mgf( t, a, b ) {\n\tvar ret;\n\tvar n;\n\tif (\n\t\tisnan( t ) ||\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\t!isInteger( a ) ||\n\t\t!isInteger( b ) ||\n\t\ta > b\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( t === 0.0 ) {\n\t\treturn 1.0;\n\t}\n\t// Case: t not equal to zero\n\tn = b - a + 1;\n\tret = exp( t*a ) * expm1( t*n );\n\tret /= n * expm1( t );\n\treturn ret;\n}\n\n\n// EXPORTS //\n\nexport default mgf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isInteger from '@stdlib/math-base-assert-is-integer';\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Evaluates the probability mass function (PMF) for a discrete uniform distribution with minimum support `a` and maximum support `b` at a value `x`.\n*\n* @param {number} x - input value\n* @param {integer} a - minimum support\n* @param {integer} b - maximum support\n* @returns {number} evaluated PMF\n*\n* @example\n* var y = pmf( 2.0, 0, 4 );\n* // returns ~0.2\n*\n* @example\n* var y = pmf( 5.0, 0, 4 );\n* // returns 0.0\n*\n* @example\n* var y = pmf( 2, 0, 8 );\n* // returns ~0.111\n*\n* @example\n* var y = pmf( NaN, 0, 1 );\n* // returns NaN\n*\n* @example\n* var y = pmf( 0.0, NaN, 1 );\n* // returns NaN\n*\n* @example\n* var y = pmf( 0.0, 0, NaN );\n* // returns NaN\n*\n* @example\n* var y = pmf( 2.0, 3, 1 );\n* // returns NaN\n*/\nfunction pmf( x, a, b ) {\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\t!isInteger( a ) ||\n\t\t!isInteger( b ) ||\n\t\ta > b\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x < a || x > b || !isInteger( x ) ) {\n\t\treturn 0.0;\n\t}\n\treturn 1.0 / ( b - a + 1.0 );\n}\n\n\n// EXPORTS //\n\nexport default pmf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isInteger from '@stdlib/math-base-assert-is-integer';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport floor from '@stdlib/math-base-special-floor';\n\n\n// MAIN //\n\n/**\n* Evaluates the quantile function for a discrete uniform distribution with minimum support `a` and maximum support `b` at a probability `p`.\n*\n* @param {Probability} p - input value\n* @param {integer} a - minimum support\n* @param {integer} b - maximum support\n* @returns {integer} evaluated quantile function\n*\n* @example\n* var y = quantile( 0.8, 0, 1 );\n* // returns 1\n*\n* @example\n* var y = quantile( 0.5, 0, 10 );\n* // returns 5\n*\n* @example\n* var y = quantile( 1.1, 0, 1 );\n* // returns NaN\n*\n* @example\n* var y = quantile( -0.2, 0, 1 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.5, 1, 1.5 );\n* // returns NaN\n*\n* @example\n* var y = quantile( NaN, 0, 1 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.0, 0, NaN );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.5, 2, 1 );\n* // returns NaN\n*/\nfunction quantile( p, a, b ) {\n\tvar n;\n\tif (\n\t\tisnan( p ) ||\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\t!isInteger( a ) ||\n\t\t!isInteger( b ) ||\n\t\ta > b ||\n\t\tp < 0.0 ||\n\t\tp > 1.0\n\t) {\n\t\treturn NaN;\n\t}\n\tn = b - a + 1;\n\treturn a + floor( p * n );\n}\n\n\n// EXPORTS //\n\nexport default quantile;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nimport defineProperty from '@stdlib/utils-define-property';\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport setReadOnlyAccessor from '@stdlib/utils-define-nonenumerable-read-only-accessor';\nimport { isPrimitive as isInteger } from '@stdlib/assert-is-integer';\nimport entropy from '@stdlib/stats-base-dists-discrete-uniform-entropy';\nimport kurtosis from '@stdlib/stats-base-dists-discrete-uniform-kurtosis';\nimport mean from '@stdlib/stats-base-dists-discrete-uniform-mean';\nimport median from '@stdlib/stats-base-dists-discrete-uniform-median';\nimport skewness from '@stdlib/stats-base-dists-discrete-uniform-skewness';\nimport stdev from '@stdlib/stats-base-dists-discrete-uniform-stdev';\nimport variance from '@stdlib/stats-base-dists-discrete-uniform-variance';\nimport cdf from '@stdlib/stats-base-dists-discrete-uniform-cdf';\nimport logcdf from '@stdlib/stats-base-dists-discrete-uniform-logcdf';\nimport logpmf from '@stdlib/stats-base-dists-discrete-uniform-logpmf';\nimport mgf from '@stdlib/stats-base-dists-discrete-uniform-mgf';\nimport pmf from '@stdlib/stats-base-dists-discrete-uniform-pmf';\nimport quantile from '@stdlib/stats-base-dists-discrete-uniform-quantile';\nimport format from '@stdlib/string-format';\n\n\n// FUNCTIONS //\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {Probability} evaluated CDF\n*/\nfunction discreteUniformCDF( x ) {\n\treturn cdf( x, this.a, this.b );\n}\n\n/**\n* Evaluates the the natural logarithm of the cumulative distribution function (logCDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logCDF\n*/\nfunction discreteUniformLogCDF( x ) {\n\treturn logcdf( x, this.a, this.b );\n}\n\n/**\n* Evaluates the natural logarithm of the probability mass function (logPMF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logPMF\n*/\nfunction discreteUniformLogPMF( x ) {\n\treturn logpmf( x, this.a, this.b );\n}\n\n/**\n* Evaluates the moment-generating function (MGF).\n*\n* @private\n* @param {number} t - input value\n* @returns {number} evaluated MGF\n*/\nfunction discreteUniformMGF( t ) {\n\treturn mgf( t, this.a, this.b );\n}\n\n/**\n* Evaluates the probability mass function (PMF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated PMF\n*/\nfunction discreteUniformPMF( x ) {\n\treturn pmf( x, this.a, this.b );\n}\n\n/**\n* Evaluates the quantile function.\n*\n* @private\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n*/\nfunction discreteUniformQuantile( p ) {\n\treturn quantile( p, this.a, this.b );\n}\n\n\n// MAIN //\n\n/**\n* Discrete uniform distribution constructor.\n*\n* @constructor\n* @param {integer} [a=0] - minimum support\n* @param {integer} [b=1] - maximum support\n* @throws {TypeError} `a` must be an integer\n* @throws {TypeError} `b` must be an integer\n* @throws {RangeError} `a` must be less than `b`\n* @returns {DiscreteUniform} distribution instance\n*\n* @example\n* var discreteUniform = new DiscreteUniform( 0, 1 );\n*\n* var y = discreteUniform.cdf( 0.8 );\n* // returns 0.5\n*\n* var mu = discreteUniform.mean;\n* // returns 0.5\n*/\nfunction DiscreteUniform() {\n\tvar a;\n\tvar b;\n\tif ( !(this instanceof DiscreteUniform) ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn new DiscreteUniform();\n\t\t}\n\t\treturn new DiscreteUniform( arguments[ 0 ], arguments[ 1 ] );\n\t}\n\tif ( arguments.length ) {\n\t\ta = arguments[ 0 ];\n\t\tb = arguments[ 1 ];\n\t\tif ( !isInteger( a ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Minimum support must be an integer. Value: `%s`.', a ) );\n\t\t}\n\t\tif ( !isInteger( b ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Maximum support must be an integer. Value: `%s`.', b ) );\n\t\t}\n\t\tif ( a > b ) {\n\t\t\tthrow new RangeError( format( 'invalid arguments. Minimum support must be less than or equal to maximum support. Value: `(%d, %d)`.', a, b ) );\n\t\t}\n\t} else {\n\t\ta = 0;\n\t\tb = 1;\n\t}\n\tdefineProperty( this, 'a', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn a;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isInteger( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid assignment. Must be an integer. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\tif ( value > b ) {\n\t\t\t\tthrow new RangeError( format( 'invalid assignment. Must be less than or equal to %u. Value: `%d`.', b, value ) );\n\t\t\t}\n\t\t\ta = value;\n\t\t}\n\t});\n\tdefineProperty( this, 'b', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn b;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isInteger( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid assignment. Must be an integer. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\tif ( a > value ) {\n\t\t\t\tthrow new RangeError( format( 'invalid assignment. Must be greater than or equal to %u. Value: `%s`.', a, value ) );\n\t\t\t}\n\t\t\tb = value;\n\t\t}\n\t});\n\treturn this;\n}\n\n/**\n* Discrete uniform distribution differential entropy.\n*\n* @name entropy\n* @memberof DiscreteUniform.prototype\n* @type {number}\n* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}\n*\n* @example\n* var discreteUniform = new DiscreteUniform( 4, 12 );\n*\n* var v = discreteUniform.entropy;\n* // returns ~2.197\n*/\nsetReadOnlyAccessor( DiscreteUniform.prototype, 'entropy', function get() {\n\treturn entropy( this.a, this.b );\n});\n\n/**\n* Discrete uniform distribution excess kurtosis.\n*\n* @name kurtosis\n* @memberof DiscreteUniform.prototype\n* @type {number}\n* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}\n*\n* @example\n* var discreteUniform = new DiscreteUniform( 4, 12 );\n*\n* var v = discreteUniform.kurtosis;\n* // returns -1.23\n*/\nsetReadOnlyAccessor( DiscreteUniform.prototype, 'kurtosis', function get() {\n\treturn kurtosis( this.a, this.b );\n});\n\n/**\n* Discrete uniform distribution expected value.\n*\n* @name mean\n* @memberof DiscreteUniform.prototype\n* @type {number}\n* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}\n*\n* @example\n* var discreteUniform = new DiscreteUniform( 4, 12 );\n*\n* var v = discreteUniform.mean;\n* // returns 8.0\n*/\nsetReadOnlyAccessor( DiscreteUniform.prototype, 'mean', function get() {\n\treturn mean( this.a, this.b );\n});\n\n/**\n* Discrete uniform distribution median.\n*\n* @name median\n* @memberof DiscreteUniform.prototype\n* @type {number}\n* @see [median]{@link https://en.wikipedia.org/wiki/Median}\n*\n* @example\n* var discreteUniform = new DiscreteUniform( 4, 12 );\n*\n* var v = discreteUniform.median;\n* // returns 8.0\n*/\nsetReadOnlyAccessor( DiscreteUniform.prototype, 'median', function get() {\n\treturn median( this.a, this.b );\n});\n\n/**\n* Discrete uniform distribution skewness.\n*\n* @name skewness\n* @memberof DiscreteUniform.prototype\n* @type {number}\n* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}\n*\n* @example\n* var discreteUniform = new DiscreteUniform( 4, 12 );\n*\n* var v = discreteUniform.skewness;\n* // returns 0.0\n*/\nsetReadOnlyAccessor( DiscreteUniform.prototype, 'skewness', function get() {\n\treturn skewness( this.a, this.b );\n});\n\n/**\n* Discrete uniform distribution standard deviation.\n*\n* @name stdev\n* @memberof DiscreteUniform.prototype\n* @type {PositiveNumber}\n* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}\n*\n* @example\n* var discreteUniform = new DiscreteUniform( 4, 12 );\n*\n* var v = discreteUniform.stdev;\n* // returns ~2.582\n*/\nsetReadOnlyAccessor( DiscreteUniform.prototype, 'stdev', function get() {\n\treturn stdev( this.a, this.b );\n});\n\n/**\n* Discrete uniform distribution variance.\n*\n* @name variance\n* @memberof DiscreteUniform.prototype\n* @type {PositiveNumber}\n* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}\n*\n* @example\n* var discreteUniform = new DiscreteUniform( 4, 12 );\n*\n* var v = discreteUniform.variance;\n* // returns ~6.667\n*/\nsetReadOnlyAccessor( DiscreteUniform.prototype, 'variance', function get() {\n\treturn variance( this.a, this.b );\n});\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @name cdf\n* @memberof DiscreteUniform.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var discreteUniform = new DiscreteUniform( 2, 4 );\n*\n* var v = discreteUniform.cdf( 3.0 );\n* // returns ~0.667\n*/\nsetReadOnly( DiscreteUniform.prototype, 'cdf', discreteUniformCDF );\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (logCDF).\n*\n* @name logcdf\n* @memberof DiscreteUniform.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logCDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var discreteUniform = new DiscreteUniform( 2, 4 );\n*\n* var v = discreteUniform.logcdf( 2.5 );\n* // returns ~-1.099\n*/\nsetReadOnly( DiscreteUniform.prototype, 'logcdf', discreteUniformLogCDF );\n\n/**\n* Evaluates the natural logarithm of the probability mass function (logPMF).\n*\n* @name logpmf\n* @memberof DiscreteUniform.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logPMF\n* @see [pmf]{@link https://en.wikipedia.org/wiki/Probability_mass_function}\n*\n* @example\n* var discreteUniform = new DiscreteUniform( 2, 4 );\n*\n* var v = discreteUniform.logpmf( 3.0 );\n* // returns ~-1.099\n*/\nsetReadOnly( DiscreteUniform.prototype, 'logpmf', discreteUniformLogPMF );\n\n/**\n* Evaluates the moment-generating function (MGF).\n*\n* @name mgf\n* @memberof DiscreteUniform.prototype\n* @type {Function}\n* @param {number} t - input value\n* @returns {number} evaluated MGF\n* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}\n*\n* @example\n* var discreteUniform = new DiscreteUniform( 2, 4 );\n*\n* var v = discreteUniform.mgf( 0.5 );\n* // returns ~4.863\n*/\nsetReadOnly( DiscreteUniform.prototype, 'mgf', discreteUniformMGF );\n\n/**\n* Evaluates the probability mass function (PMF).\n*\n* @name pmf\n* @memberof DiscreteUniform.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n* @see [pmf]{@link https://en.wikipedia.org/wiki/Probability_mass_function}\n*\n* @example\n* var discreteUniform = new DiscreteUniform( 2, 4 );\n*\n* var v = discreteUniform.pmf( 3.0 );\n* // returns ~0.333\n*/\nsetReadOnly( DiscreteUniform.prototype, 'pmf', discreteUniformPMF );\n\n/**\n* Evaluates the quantile function.\n*\n* @name quantile\n* @memberof DiscreteUniform.prototype\n* @type {Function}\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}\n*\n* @example\n* var discreteUniform = new DiscreteUniform( 2, 4 );\n*\n* var v = discreteUniform.quantile( 0.6 );\n* // returns 3.0\n*/\nsetReadOnly( DiscreteUniform.prototype, 'quantile', discreteUniformQuantile );\n\n\n// EXPORTS //\n\nexport default DiscreteUniform;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Natural logarithm of the cumulative distribution function (CDF) for a discrete uniform distribution.\n*\n* @module @stdlib/stats-base-dists-discrete-uniform-logcdf\n*\n* @example\n* import logcdf from '@stdlib/stats-base-dists-discrete-uniform-logcdf';\n*\n* var y = logcdf( 3.0, 0, 4 );\n* // returns ~-0.223\n*\n* var mylogcdf = logcdf.factory( 0, 10 );\n* y = mylogcdf( 0.5 );\n* // returns ~-2.398\n*\n* y = mylogcdf( 8.0 );\n* // returns ~-0.201\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport logcdf from './logcdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( logcdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default logcdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isInteger from '@stdlib/math-base-assert-is-integer';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport floor from '@stdlib/math-base-special-floor';\nimport ln from '@stdlib/math-base-special-ln';\nimport NINF from '@stdlib/constants-float64-ninf';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the natural logarithm of the cumulative distribution function (CDF) for a discrete uniform distribution with minimum support `a` and maximum support `b`.\n*\n* @param {integer} a - minimum support\n* @param {integer} b - maximum support\n* @returns {Function} logCDF\n*\n* @example\n* var logcdf = factory( 0, 10 );\n* var y = logcdf( 0.5 );\n* // returns ~-2.398\n*\n* y = logcdf( 8.0 );\n* // returns ~-0.201\n*/\nfunction factory( a, b ) {\n\tvar logn;\n\tvar am1;\n\tif (\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\t!isInteger( a ) ||\n\t\t!isInteger( b ) ||\n\t\ta > b\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\tam1 = a - 1.0;\n\tlogn = ln( b - a + 1.0 );\n\treturn logcdf;\n\n\t/**\n\t* Evaluates the natural logarithm of the cumulative distribution function (CDF) for a discrete uniform distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {number} evaluated logCDF\n\t*\n\t* @example\n\t* var y = logcdf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction logcdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x < a ) {\n\t\t\treturn NINF;\n\t\t}\n\t\tif ( x >= b ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn ln( floor( x ) - am1 ) - logn;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Natural logarithm of the probability mass function (PMF) for a discrete uniform distribution.\n*\n* @module @stdlib/stats-base-dists-discrete-uniform-logpmf\n*\n* @example\n* import logpmf from '@stdlib/stats-base-dists-discrete-uniform-logpmf';\n*\n* var y = logpmf( 3.0, 2, 6 );\n* // returns ~-1.609\n*\n* var myLogPMF = logpmf.factory( 6, 7 );\n* y = myLogPMF( 7.0 );\n* // returns ~-0.693\n*\n* y = myLogPMF( 5.0 );\n* // returns -Infinity\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport logpmf from './logpmf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( logpmf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default logpmf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isInteger from '@stdlib/math-base-assert-is-integer';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport ln from '@stdlib/math-base-special-ln';\nimport NINF from '@stdlib/constants-float64-ninf';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the natural logarithm of the probability mass function (PMF) for a discrete uniform distribution with minimum support `a` and maximum support `b`.\n*\n* @param {integer} a - minimum support\n* @param {integer} b - maximum support\n* @returns {Function} logPMF\n*\n* @example\n* var logpmf = factory( 0, 10 );\n* var y = logpmf( 2.0 );\n* // returns ~-2.398\n*\n* y = logpmf( 12.0 );\n* // returns -Infinity\n*/\nfunction factory( a, b ) {\n\tvar logn;\n\tif (\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\t!isInteger( a ) ||\n\t\t!isInteger( b ) ||\n\t\ta > b\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\tlogn = -ln( b - a + 1.0 );\n\treturn logpmf;\n\n\t/**\n\t* Evaluates the natural logarithm of the probability mass function (PMF) for a discrete uniform distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {number} evaluated logPMF\n\t*\n\t* @example\n\t* var y = logpmf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction logpmf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x < a || x > b || !isInteger( x ) ) {\n\t\t\treturn NINF;\n\t\t}\n\t\treturn logn;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate the moment-generating function (MGF) of a discrete uniform distribution.\n*\n* @module @stdlib/stats-base-dists-discrete-uniform-mgf\n*\n* @example\n* import mgf from '@stdlib/stats-base-dists-discrete-uniform-mgf';\n*\n* var y = mgf( 2.0, 0, 4 );\n* // returns ~689.475\n*\n* y = mgf( -0.2, 0, 4 );\n* // returns ~0.697\n*\n* y = mgf( 2.0, 0, 1 );\n* // returns ~4.195\n*\n* var mymgf = mgf.factory( 6, 7 );\n* y = mymgf( 0.1 );\n* // returns ~1.918\n*\n* y = mymgf( 1.1 );\n* // returns ~1471.722\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport mgf from './mgf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( mgf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default mgf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isInteger from '@stdlib/math-base-assert-is-integer';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport expm1 from '@stdlib/math-base-special-expm1';\nimport exp from '@stdlib/math-base-special-exp';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the moment-generating function (MGF) of a discrete uniform distribution with minimum support `a` and maximum support `b`.\n*\n* @param {integer} a - minimum support\n* @param {integer} b - maximum support\n* @returns {Function} MGF\n*\n* @example\n* var mgf = factory( 6, 7 );\n* var y = mgf( 0.1 );\n* // returns ~1.918\n*\n* y = mgf( 1.1 );\n* // returns ~1471.722\n*/\nfunction factory( a, b ) {\n\tvar n;\n\tif (\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\t!isInteger( a ) ||\n\t\t!isInteger( b ) ||\n\t\ta > b\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\tn = b - a + 1;\n\treturn mgf;\n\n\t/**\n\t* Evaluates the moment-generating function (MGF) of a discrete uniform distribution.\n\t*\n\t* @private\n\t* @param {number} t - input value\n\t* @returns {number} evaluated MGF\n\t*\n\t* @example\n\t* var y = mgf( 0.5 );\n\t* // returns <number>\n\t*/\n\tfunction mgf( t ) {\n\t\tvar ret;\n\t\tif ( isnan( t ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( t === 0.0 ) {\n\t\t\treturn 1.0;\n\t\t}\n\t\t// Case: t not equal to zero\n\t\tret = exp( t*a ) * expm1( t*n );\n\t\tret /= n * expm1( t );\n\t\treturn ret;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Discrete uniform distribution probability mass function (PMF).\n*\n* @module @stdlib/stats-base-dists-discrete-uniform-pmf\n*\n* @example\n* import pmf from '@stdlib/stats-base-dists-discrete-uniform-pmf';\n*\n* var y = pmf( 3.0, 2, 6 );\n* // returns ~0.2\n*\n* var myPMF = pmf.factory( 6, 7 );\n* y = myPMF( 7.0 );\n* // returns 0.5\n*\n* y = myPMF( 5.0 );\n* // returns 0.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport pmf from './pmf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( pmf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default pmf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isInteger from '@stdlib/math-base-assert-is-integer';\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the probability mass function (PMF) for a discrete uniform distribution with minimum support `a` and maximum support `b`.\n*\n* @param {integer} a - minimum support\n* @param {integer} b - maximum support\n* @returns {Function} PMF\n*\n* @example\n* var pmf = factory( 0, 10 );\n* var y = pmf( 2.0 );\n* // returns ~0.091\n*\n* y = pmf( 12.0 );\n* // returns 0.0\n*/\nfunction factory( a, b ) {\n\tvar ninv;\n\tif (\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\t!isInteger( a ) ||\n\t\t!isInteger( b ) ||\n\t\ta > b\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\tninv = 1.0 / ( b - a + 1.0 );\n\treturn pmf;\n\n\t/**\n\t* Evaluates the probability mass function (PMF) for a discrete uniform distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {number} evaluated PMF\n\t*\n\t* @example\n\t* var y = pmf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction pmf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x < a || x > b || !isInteger( x ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn ninv;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Discrete uniform distribution quantile function.\n*\n* @module @stdlib/stats-base-dists-discrete-uniform-quantile\n*\n* @example\n* import quantile from '@stdlib/stats-base-dists-discrete-uniform-quantile';\n*\n* var y = quantile( 0.8, 0, 1 );\n* // returns 1\n*\n* y = quantile( 0.5, 0, 10 );\n* // returns 5\n*\n* var myQuantile = quantile.factory( 0, 4 );\n* y = myQuantile( 0.8 );\n* // returns 4\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport quantile from './quantile.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( quantile, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default quantile;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isInteger from '@stdlib/math-base-assert-is-integer';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport floor from '@stdlib/math-base-special-floor';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the quantile function for a discrete uniform distribution with minimum support `a` an maximum support `b`.\n*\n* @param {integer} a - minimum support\n* @param {integer} b - maximum support\n* @returns {Function} quantile function\n*\n* @example\n* var quantile = factory( 2, 4 );\n* var y = quantile( 0.4 );\n* // returns 3\n*\n* y = quantile( 0.8 );\n* // returns 4\n*/\nfunction factory( a, b ) {\n\tvar n;\n\tif (\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\t!isInteger( a ) ||\n\t\t!isInteger( b ) ||\n\t\ta > b\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\tn = b - a + 1;\n\treturn quantile;\n\n\t/**\n\t* Evaluates the quantile function for a discrete uniform distribution.\n\t*\n\t* @private\n\t* @param {Probability} p - input value\n\t* @returns {number} evaluated quantile function\n\t*\n\t* @example\n\t* var y = quantile( 0.3 );\n\t* // returns <number>\n\t*/\n\tfunction quantile( p ) {\n\t\tif ( isnan( p ) || p < 0.0 || p > 1.0 ) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn a + floor( p * n );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace discreteUniform\n*/\nvar discreteUniform = {};\n\n/**\n* @name cdf\n* @memberof discreteUniform\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/discrete-uniform/cdf}\n*/\nimport cdf from '@stdlib/stats-base-dists-discrete-uniform-cdf';\nsetReadOnly( discreteUniform, 'cdf', cdf );\n\n/**\n* @name DiscreteUniform\n* @memberof discreteUniform\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/discrete-uniform/ctor}\n*/\nimport DiscreteUniform from '@stdlib/stats-base-dists-discrete-uniform-ctor';\nsetReadOnly( discreteUniform, 'DiscreteUniform', DiscreteUniform );\n\n/**\n* @name entropy\n* @memberof discreteUniform\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/discrete-uniform/entropy}\n*/\nimport entropy from '@stdlib/stats-base-dists-discrete-uniform-entropy';\nsetReadOnly( discreteUniform, 'entropy', entropy );\n\n/**\n* @name kurtosis\n* @memberof discreteUniform\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/discrete-uniform/kurtosis}\n*/\nimport kurtosis from '@stdlib/stats-base-dists-discrete-uniform-kurtosis';\nsetReadOnly( discreteUniform, 'kurtosis', kurtosis );\n\n/**\n* @name logcdf\n* @memberof discreteUniform\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/discrete-uniform/logcdf}\n*/\nimport logcdf from '@stdlib/stats-base-dists-discrete-uniform-logcdf';\nsetReadOnly( discreteUniform, 'logcdf', logcdf );\n\n/**\n* @name logpmf\n* @memberof discreteUniform\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/discrete-uniform/logpmf}\n*/\nimport logpmf from '@stdlib/stats-base-dists-discrete-uniform-logpmf';\nsetReadOnly( discreteUniform, 'logpmf', logpmf );\n\n/**\n* @name mean\n* @memberof discreteUniform\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/discrete-uniform/mean}\n*/\nimport mean from '@stdlib/stats-base-dists-discrete-uniform-mean';\nsetReadOnly( discreteUniform, 'mean', mean );\n\n/**\n* @name median\n* @memberof discreteUniform\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/discrete-uniform/median}\n*/\nimport median from '@stdlib/stats-base-dists-discrete-uniform-median';\nsetReadOnly( discreteUniform, 'median', median );\n\n/**\n* @name mgf\n* @memberof discreteUniform\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/discrete-uniform/mgf}\n*/\nimport mgf from '@stdlib/stats-base-dists-discrete-uniform-mgf';\nsetReadOnly( discreteUniform, 'mgf', mgf );\n\n/**\n* @name pmf\n* @memberof discreteUniform\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/discrete-uniform/pmf}\n*/\nimport pmf from '@stdlib/stats-base-dists-discrete-uniform-pmf';\nsetReadOnly( discreteUniform, 'pmf', pmf );\n\n/**\n* @name quantile\n* @memberof discreteUniform\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/discrete-uniform/quantile}\n*/\nimport quantile from '@stdlib/stats-base-dists-discrete-uniform-quantile';\nsetReadOnly( discreteUniform, 'quantile', quantile );\n\n/**\n* @name skewness\n* @memberof discreteUniform\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/discrete-uniform/skewness}\n*/\nimport skewness from '@stdlib/stats-base-dists-discrete-uniform-skewness';\nsetReadOnly( discreteUniform, 'skewness', skewness );\n\n/**\n* @name stdev\n* @memberof discreteUniform\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/discrete-uniform/stdev}\n*/\nimport stdev from '@stdlib/stats-base-dists-discrete-uniform-stdev';\nsetReadOnly( discreteUniform, 'stdev', stdev );\n\n/**\n* @name variance\n* @memberof discreteUniform\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/discrete-uniform/variance}\n*/\nimport variance from '@stdlib/stats-base-dists-discrete-uniform-variance';\nsetReadOnly( discreteUniform, 'variance', variance );\n\n\n// EXPORTS //\n\nexport default discreteUniform;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNonNegativeInteger from '@stdlib/math-base-assert-is-nonnegative-integer';\nimport gammaCDF from '@stdlib/stats-base-dists-gamma-cdf';\n\n\n// MAIN //\n\n/**\n* Evaluates the cumulative distribution function (CDF) for an Erlang distribution with shape parameter `k` and rate parameter `lambda` at a value `x`.\n*\n* @param {number} x - input value\n* @param {NonNegativeInteger} k - shape parameter\n* @param {PositiveNumber} lambda - rate parameter\n* @returns {Probability} evaluated CDF\n*\n* @example\n* var y = cdf( 2.0, 1, 1.0 );\n* // returns ~0.865\n*\n* @example\n* var y = cdf( 2.0, 3, 1.0 );\n* // returns ~0.323\n*\n* @example\n* var y = cdf( 2.0, 2.5, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( -1.0, 2, 2.0 );\n* // returns 0.0\n*\n* @example\n* var y = cdf( +Infinity, 4, 2.0 );\n* // returns 1.0\n*\n* @example\n* var y = cdf( -Infinity, 4, 2.0 );\n* // returns 0.0\n*\n* @example\n* var y = cdf( NaN, 0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, 0, NaN );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2.0, -1, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2.0, 1, -1.0 );\n* // returns NaN\n*/\nfunction cdf( x, k, lambda ) {\n\tif ( !isNonNegativeInteger( k ) ) {\n\t\treturn NaN;\n\t}\n\treturn gammaCDF( x, k, lambda );\n}\n\n\n// EXPORTS //\n\nexport default cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math-base-special-floor';\n\n\n// MAIN //\n\n/**\n* Tests if a finite double-precision floating-point number is a positive integer.\n*\n* @param {number} x - value to test\n* @returns {boolean} boolean indicating whether the value is a positive integer\n*\n* @example\n* var bool = isPositiveInteger( 1.0 );\n* // returns true\n*\n* @example\n* var bool = isPositiveInteger( 0.0 );\n* // returns false\n*\n* @example\n* var bool = isPositiveInteger( -10.0 );\n* // returns false\n*/\nfunction isPositiveInteger( x ) {\n\treturn (floor(x) === x && x > 0);\n}\n\n\n// EXPORTS //\n\nexport default isPositiveInteger;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPositiveInteger from '@stdlib/math-base-assert-is-positive-integer';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport digamma from '@stdlib/math-base-special-digamma';\nimport gamma from '@stdlib/math-base-special-gamma';\nimport ln from '@stdlib/math-base-special-ln';\n\n\n// MAIN //\n\n/**\n* Returns the differential entropy of an Erlang distribution.\n*\n* @param {PositiveInteger} k - shape parameter\n* @param {PositiveNumber} lambda - rate parameter\n* @returns {number} differential entropy\n*\n* @example\n* var v = entropy( 1, 1.0 );\n* // returns 1.0\n*\n* @example\n* var v = entropy( 4, 12.0 );\n* // returns ~-0.462\n*\n* @example\n* var v = entropy( 8, 2.0 );\n* // returns ~1.723\n*\n* @example\n* var v = entropy( 1.5, 2.0 );\n* // returns NaN\n*\n* @example\n* var v = entropy( 1, -0.1 );\n* // returns NaN\n*\n* @example\n* var v = entropy( -0.1, 1.0 );\n* // returns NaN\n*\n* @example\n* var v = entropy( 2, NaN );\n* // returns NaN\n*\n* @example\n* var v = entropy( NaN, 2.0 );\n* // returns NaN\n*/\nfunction entropy( k, lambda ) {\n\tif (\n\t\t!isPositiveInteger( k ) ||\n\t\tisnan( lambda ) ||\n\t\tlambda <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn ( ( 1-k ) * digamma( k ) ) + ln( gamma( k ) / lambda ) + k;\n}\n\n\n// EXPORTS //\n\nexport default entropy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPositiveInteger from '@stdlib/math-base-assert-is-positive-integer';\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns the excess kurtosis of an Erlang distribution.\n*\n* @param {PositiveInteger} k - shape parameter\n* @param {PositiveNumber} lambda - rate parameter\n* @returns {NonNegativeNumber} excess kurtosis\n*\n* @example\n* var v = kurtosis( 1, 1.0 );\n* // returns 6.0\n*\n* @example\n* var v = kurtosis( 4, 12.0 );\n* // returns 1.5\n*\n* @example\n* var v = kurtosis( 8, 2.0 );\n* // returns 0.75\n*\n* @example\n* var v = kurtosis( 1.5, 2.0 );\n* // returns NaN\n*\n* @example\n* var v = kurtosis( 1, -0.1 );\n* // returns NaN\n*\n* @example\n* var v = kurtosis( -0.1, 1.0 );\n* // returns NaN\n*\n* @example\n* var v = kurtosis( 2, NaN );\n* // returns NaN\n*\n* @example\n* var v = kurtosis( NaN, 2.0 );\n* // returns NaN\n*/\nfunction kurtosis( k, lambda ) {\n\tif (\n\t\t!isPositiveInteger( k ) ||\n\t\tisnan( lambda ) ||\n\t\tlambda <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn 6.0 / k;\n}\n\n\n// EXPORTS //\n\nexport default kurtosis;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPositiveInteger from '@stdlib/math-base-assert-is-positive-integer';\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns the expected value of an Erlang distribution.\n*\n* @param {PositiveInteger} k - shape parameter\n* @param {PositiveNumber} lambda - rate parameter\n* @returns {NonNegativeNumber} expected value\n*\n* @example\n* var v = mean( 1, 1.0 );\n* // returns 1.0\n*\n* @example\n* var v = mean( 4, 12.0 );\n* // returns ~0.333\n*\n* @example\n* var v = mean( 8, 2.0 );\n* // returns 4.0\n*\n* @example\n* var v = mean( 1.5, 2.0 );\n* // returns NaN\n*\n* @example\n* var v = mean( 1, -0.1 );\n* // returns NaN\n*\n* @example\n* var v = mean( -0.1, 1.0 );\n* // returns NaN\n*\n* @example\n* var v = mean( 2, NaN );\n* // returns NaN\n*\n* @example\n* var v = mean( NaN, 2.0 );\n* // returns NaN\n*/\nfunction mean( k, lambda ) {\n\tif (\n\t\t!isPositiveInteger( k ) ||\n\t\tisnan( lambda ) ||\n\t\tlambda <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn k / lambda;\n}\n\n\n// EXPORTS //\n\nexport default mean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPositiveInteger from '@stdlib/math-base-assert-is-positive-integer';\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns the mode of an Erlang distribution.\n*\n* @param {PositiveInteger} k - shape parameter\n* @param {PositiveNumber} lambda - rate parameter\n* @returns {NonNegativeNumber} mode\n*\n* @example\n* var v = mode( 1, 1.0 );\n* // returns 0.0\n*\n* @example\n* var v = mode( 4, 12.0 );\n* // returns 0.25\n*\n* @example\n* var v = mode( 8, 2.0 );\n* // returns 3.5\n*\n* @example\n* var v = mode( 1.5, 2.0 );\n* // returns NaN\n*\n* @example\n* var v = mode( 1, -0.1 );\n* // returns NaN\n*\n* @example\n* var v = mode( -0.1, 1.0 );\n* // returns NaN\n*\n* @example\n* var v = mode( 2, NaN );\n* // returns NaN\n*\n* @example\n* var v = mode( NaN, 2.0 );\n* // returns NaN\n*/\nfunction mode( k, lambda ) {\n\tif (\n\t\t!isPositiveInteger( k ) ||\n\t\tisnan( lambda ) ||\n\t\tlambda <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn ( k - 1 ) / lambda;\n}\n\n\n// EXPORTS //\n\nexport default mode;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPositiveInteger from '@stdlib/math-base-assert-is-positive-integer';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport sqrt from '@stdlib/math-base-special-sqrt';\n\n\n// MAIN //\n\n/**\n* Returns the skewness of an Erlang distribution.\n*\n* @param {PositiveInteger} k - shape parameter\n* @param {PositiveNumber} lambda - rate parameter\n* @returns {NonNegativeNumber} skewness\n*\n* @example\n* var v = skewness( 1, 1.0 );\n* // returns 2.0\n*\n* @example\n* var v = skewness( 4, 12.0 );\n* // returns 1.0\n*\n* @example\n* var v = skewness( 8, 2.0 );\n* // returns ~0.707\n*\n* @example\n* var v = skewness( 1.5, 2.0 );\n* // returns NaN\n*\n* @example\n* var v = skewness( 1, -0.1 );\n* // returns NaN\n*\n* @example\n* var v = skewness( -0.1, 1.0 );\n* // returns NaN\n*\n* @example\n* var v = skewness( 2, NaN );\n* // returns NaN\n*\n* @example\n* var v = skewness( NaN, 2.0 );\n* // returns NaN\n*/\nfunction skewness( k, lambda ) {\n\tif (\n\t\t!isPositiveInteger( k ) ||\n\t\tisnan( lambda ) ||\n\t\tlambda <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn 2.0 / sqrt( k );\n}\n\n\n// EXPORTS //\n\nexport default skewness;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPositiveInteger from '@stdlib/math-base-assert-is-positive-integer';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport sqrt from '@stdlib/math-base-special-sqrt';\n\n\n// MAIN //\n\n/**\n* Returns the standard deviation of an Erlang distribution.\n*\n* @param {PositiveInteger} k - shape parameter\n* @param {PositiveNumber} lambda - rate parameter\n* @returns {NonNegativeNumber} standard deviation\n*\n* @example\n* var v = stdev( 1, 1.0 );\n* // returns 1.0\n*\n* @example\n* var v = stdev( 4, 12.0 );\n* // returns ~0.167\n*\n* @example\n* var v = stdev( 8, 2.0 );\n* // returns ~1.414\n*\n* @example\n* var v = stdev( 1.5, 2.0 );\n* // returns NaN\n*\n* @example\n* var v = stdev( 1, -0.1 );\n* // returns NaN\n*\n* @example\n* var v = stdev( -0.1, 1.0 );\n* // returns NaN\n*\n* @example\n* var v = stdev( 2, NaN );\n* // returns NaN\n*\n* @example\n* var v = stdev( NaN, 2.0 );\n* // returns NaN\n*/\nfunction stdev( k, lambda ) {\n\tif (\n\t\t!isPositiveInteger( k ) ||\n\t\tisnan( lambda ) ||\n\t\tlambda <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn sqrt( k ) / lambda;\n}\n\n\n// EXPORTS //\n\nexport default stdev;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPositiveInteger from '@stdlib/math-base-assert-is-positive-integer';\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns the variance of an Erlang distribution.\n*\n* @param {PositiveInteger} k - shape parameter\n* @param {PositiveNumber} lambda - rate parameter\n* @returns {NonNegativeNumber} variance\n*\n* @example\n* var v = variance( 1, 1.0 );\n* // returns 1.0\n*\n* @example\n* var v = variance( 4, 12.0 );\n* // returns ~0.028\n*\n* @example\n* var v = variance( 8, 2.0 );\n* // returns 2.0\n*\n* @example\n* var v = variance( 1.5, 2.0 );\n* // returns NaN\n*\n* @example\n* var v = variance( 1, -0.1 );\n* // returns NaN\n*\n* @example\n* var v = variance( -0.1, 1.0 );\n* // returns NaN\n*\n* @example\n* var v = variance( 2, NaN );\n* // returns NaN\n*\n* @example\n* var v = variance( NaN, 2.0 );\n* // returns NaN\n*/\nfunction variance( k, lambda ) {\n\tif (\n\t\t!isPositiveInteger( k ) ||\n\t\tisnan( lambda ) ||\n\t\tlambda <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn k / ( lambda*lambda );\n}\n\n\n// EXPORTS //\n\nexport default variance;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNonNegativeInteger from '@stdlib/math-base-assert-is-nonnegative-integer';\nimport gammaLogPDF from '@stdlib/stats-base-dists-gamma-logpdf';\n\n\n// MAIN //\n\n/**\n* Evaluates the natural logarithm of the probability density function (PDF) for an Erlang distribution with shape parameter `k` and rate parameter `lambda` at a value `x`.\n*\n* @param {number} x - input value\n* @param {NonNegativeInteger} k - shape parameter\n* @param {PositiveNumber} lambda - rate parameter\n* @returns {number} evaluated logPDF\n*\n* @example\n* var y = logpdf( 0.1, 1, 1.0 );\n* // returns ~-0.1\n*\n* @example\n* var y = logpdf( 0.5, 2, 2.5 );\n* // returns ~-0.111\n*\n* @example\n* var y = logpdf( -1.0, 4, 2.0 );\n* // returns -Infinity\n*\n* @example\n* var y = logpdf( NaN, 1, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = logpdf( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = logpdf( 0.0, 1, NaN );\n* // returns NaN\n*\n* @example\n* var y = logpdf( 2.0, -2, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = logpdf( 2.0, 0.5, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = logpdf( 2.0, 0.0, 2.0 );\n* // returns -Infinity\n*\n* @example\n* var y = logpdf( 0.0, 0.0, 2.0 );\n* // returns Infinity\n*\n* @example\n* var y = logpdf( 2.0, 1, 0.0 );\n* // returns NaN\n*\n* @example\n* var y = logpdf( 2.0, 1, -1.0 );\n* // returns NaN\n*/\nfunction logpdf( x, k, lambda ) {\n\tif ( !isNonNegativeInteger( k ) ) {\n\t\treturn NaN;\n\t}\n\treturn gammaLogPDF( x, k, lambda );\n}\n\n\n// EXPORTS //\n\nexport default logpdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNonNegativeInteger from '@stdlib/math-base-assert-is-nonnegative-integer';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport pow from '@stdlib/math-base-special-pow';\n\n\n// MAIN //\n\n/**\n* Evaluates the moment-generating function (MGF) for an Erlang distribution with shape parameter `k` and rate parameter `lambda` at a value `t`.\n*\n* @param {number} t - input value\n* @param {NonNegativeInteger} k - shape parameter\n* @param {PositiveNumber} lambda - rate parameter\n* @returns {number} evaluated MGF\n*\n* @example\n* var y = mgf( 0.3, 1, 1.0 );\n* // returns ~1.429\n*\n* @example\n* var y = mgf( 2.0, 2, 3.0 );\n* // returns ~9.0\n*\n* @example\n* var y = mgf( -1.0, 2, 2.0 );\n* // returns ~0.444\n*\n* @example\n* var y = mgf( NaN, 1, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = mgf( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = mgf( 0.0, 1, NaN );\n* // returns NaN\n*\n* @example\n* var y = mgf( 0.2, -2, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = mgf( 0.2, 0.5, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = mgf( 0.2, 1, 0.0 );\n* // returns NaN\n*\n* @example\n* var y = mgf( 0.2, 1, -5.0 );\n* // returns NaN\n*/\nfunction mgf( t, k, lambda ) {\n\tif (\n\t\tisnan( t ) ||\n\t\t!isNonNegativeInteger( k ) ||\n\t\tisnan( lambda )||\n\t\tlambda < 0.0 ||\n\t\tt >= lambda\n\t) {\n\t\treturn NaN;\n\t}\n\treturn pow( 1.0 - (t/lambda), -k );\n}\n\n\n// EXPORTS //\n\nexport default mgf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNonNegativeInteger from '@stdlib/math-base-assert-is-nonnegative-integer';\nimport gammaPDF from '@stdlib/stats-base-dists-gamma-pdf';\n\n\n// MAIN //\n\n/**\n* Evaluates the probability density function (PDF) for an Erlang distribution with shape parameter `k` and rate parameter `lambda` at a value `x`.\n*\n* @param {number} x - input value\n* @param {NonNegativeInteger} k - shape parameter\n* @param {PositiveNumber} lambda - rate parameter\n* @returns {number} evaluated PDF\n*\n* @example\n* var y = pdf( 0.1, 1, 1.0 );\n* // returns ~0.905\n*\n* @example\n* var y = pdf( 0.5, 2, 2.5 );\n* // returns ~0.895\n*\n* @example\n* var y = pdf( -1.0, 4, 2.0 );\n* // returns 0.0\n*\n* @example\n* var y = pdf( NaN, 1, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = pdf( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = pdf( 0.0, 1, NaN );\n* // returns NaN\n*\n* @example\n* var y = pdf( 2.0, -2, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = pdf( 2.0, 0.5, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = pdf( 2.0, 0.0, 2.0 );\n* // returns 0.0\n*\n* @example\n* var y = pdf( 0.0, 0.0, 2.0 );\n* // returns Infinity\n*\n* @example\n* var y = pdf( 2.0, 1, 0.0 );\n* // returns NaN\n*\n* @example\n* var y = pdf( 2.0, 1, -1.0 );\n* // returns NaN\n*/\nfunction pdf( x, k, lambda ) {\n\tif ( !isNonNegativeInteger( k ) ) {\n\t\treturn NaN;\n\t}\n\treturn gammaPDF( x, k, lambda );\n}\n\n\n// EXPORTS //\n\nexport default pdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNonNegativeInteger from '@stdlib/math-base-assert-is-nonnegative-integer';\nimport quantileGamma from '@stdlib/stats-base-dists-gamma-quantile';\n\n\n// MAIN //\n\n/**\n* Evaluates the quantile function for an Erlang distribution with shape parameter `k` and rate parameter `lambda` at a probability `p`.\n*\n* @param {Probability} p - input value\n* @param {NonNegativeInteger} k - shape parameter\n* @param {PositiveNumber} lambda - rate parameter\n* @returns {number} evaluated quantile function\n*\n* @example\n* var y = quantile( 0.8, 2, 1.0 );\n* // returns ~2.994\n*\n* @example\n* var y = quantile( 0.5, 4, 2.0 );\n* // returns ~1.836\n*\n* @example\n* var y = quantile( 1.1, 1, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( -0.2, 1, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( NaN, 1, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.0, 1, NaN );\n* // returns NaN\n*\n* @example\n* // Non-integer shape parameter:\n* var y = quantile( 0.5, 0.5, 1.0 );\n* // returns NaN\n*\n* @example\n* // Non-positive shape parameter:\n* var y = quantile( 0.5, -1, 1.0 );\n* // returns NaN\n*\n* @example\n* // Non-positive rate parameter:\n* var y = quantile( 0.5, 1, -1.0 );\n* // returns NaN\n*/\nfunction quantile( p, k, lambda ) {\n\tif ( !isNonNegativeInteger( k ) ) {\n\t\treturn NaN;\n\t}\n\treturn quantileGamma( p, k, lambda );\n}\n\n\n// EXPORTS //\n\nexport default quantile;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nimport defineProperty from '@stdlib/utils-define-property';\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport setReadOnlyAccessor from '@stdlib/utils-define-nonenumerable-read-only-accessor';\nimport { isPrimitive as isPositiveInteger } from '@stdlib/assert-is-positive-integer';\nimport { isPrimitive as isPositive } from '@stdlib/assert-is-positive-number';\nimport entropy from '@stdlib/stats-base-dists-erlang-entropy';\nimport kurtosis from '@stdlib/stats-base-dists-erlang-kurtosis';\nimport mean from '@stdlib/stats-base-dists-erlang-mean';\nimport mode from '@stdlib/stats-base-dists-erlang-mode';\nimport skewness from '@stdlib/stats-base-dists-erlang-skewness';\nimport stdev from '@stdlib/stats-base-dists-erlang-stdev';\nimport variance from '@stdlib/stats-base-dists-erlang-variance';\nimport cdf from '@stdlib/stats-base-dists-erlang-cdf';\nimport logpdf from '@stdlib/stats-base-dists-erlang-logpdf';\nimport mgf from '@stdlib/stats-base-dists-erlang-mgf';\nimport pdf from '@stdlib/stats-base-dists-erlang-pdf';\nimport quantile from '@stdlib/stats-base-dists-erlang-quantile';\nimport format from '@stdlib/string-format';\n\n\n// FUNCTIONS //\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n*/\nfunction erlangCDF( x ) {\n\treturn cdf( x, this.k, this.lambda );\n}\n\n/**\n* Evaluates the natural logarithm of the probability density function (PDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n*/\nfunction erlangLogPDF( x ) {\n\treturn logpdf( x, this.k, this.lambda );\n}\n\n/**\n* Evaluates the moment-generating function (MGF).\n*\n* @private\n* @param {number} t - input value\n* @returns {number} evaluated MGF\n*/\nfunction erlangMGF( t ) {\n\treturn mgf( t, this.k, this.lambda );\n}\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n*/\nfunction erlangPDF( x ) {\n\treturn pdf( x, this.k, this.lambda );\n}\n\n/**\n* Evaluates the quantile function.\n*\n* @private\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n*/\nfunction erlangQuantile( p ) {\n\treturn quantile( p, this.k, this.lambda );\n}\n\n\n// MAIN //\n\n/**\n* Erlang distribution constructor.\n*\n* @constructor\n* @param {PositiveInteger} [k=1.0] - shape parameter\n* @param {PositiveNumber} [lambda=1.0] - rate parameter\n* @throws {TypeError} `k` must be a positive integer\n* @throws {TypeError} `lambda` must be a positive number\n* @returns {Erlang} distribution instance\n*\n* @example\n* var erlang = new Erlang( 1.0, 1.0 );\n*\n* var y = erlang.cdf( 0.8 );\n* // returns ~0.551\n*\n* var v = erlang.mode;\n* // returns 0.0\n*/\nfunction Erlang() {\n\tvar lambda;\n\tvar k;\n\tif ( !(this instanceof Erlang) ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn new Erlang();\n\t\t}\n\t\treturn new Erlang( arguments[ 0 ], arguments[ 1 ] );\n\t}\n\tif ( arguments.length ) {\n\t\tk = arguments[ 0 ];\n\t\tlambda = arguments[ 1 ];\n\t\tif ( !isPositiveInteger( k ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Shape parameter must be a positive integer. Value: `%s`.', k ) );\n\t\t}\n\t\tif ( !isPositive( lambda ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Rate parameter must be a positive number. Value: `%s`.', lambda ) );\n\t\t}\n\t} else {\n\t\tk = 1.0;\n\t\tlambda = 1.0;\n\t}\n\tdefineProperty( this, 'k', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn k;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isPositiveInteger( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid assignment. Must be a positive integer. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\tk = value;\n\t\t}\n\t});\n\tdefineProperty( this, 'lambda', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn lambda;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isPositive( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid assignment. Must be a positive number. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\tlambda = value;\n\t\t}\n\t});\n\treturn this;\n}\n\n/**\n* Erlang distribution differential entropy.\n*\n* @name entropy\n* @memberof Erlang.prototype\n* @type {number}\n* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}\n*\n* @example\n* var erlang = new Erlang( 4, 12.0 );\n*\n* var v = erlang.entropy;\n* // returns ~-0.462\n*/\nsetReadOnlyAccessor( Erlang.prototype, 'entropy', function get() {\n\treturn entropy( this.k, this.lambda );\n});\n\n/**\n* Erlang distribution excess kurtosis.\n*\n* @name kurtosis\n* @memberof Erlang.prototype\n* @type {number}\n* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}\n*\n* @example\n* var erlang = new Erlang( 4, 12.0 );\n*\n* var v = erlang.kurtosis;\n* // returns 1.5\n*/\nsetReadOnlyAccessor( Erlang.prototype, 'kurtosis', function get() {\n\treturn kurtosis( this.k, this.lambda );\n});\n\n/**\n* Erlang distribution expected value.\n*\n* @name mean\n* @memberof Erlang.prototype\n* @type {number}\n* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}\n*\n* @example\n* var erlang = new Erlang( 4, 12.0 );\n*\n* var v = erlang.mean;\n* // returns ~0.333\n*/\nsetReadOnlyAccessor( Erlang.prototype, 'mean', function get() {\n\treturn mean( this.k, this.lambda );\n});\n\n/**\n* Erlang distribution mode.\n*\n* @name mode\n* @memberof Erlang.prototype\n* @type {number}\n* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}\n*\n* @example\n* var erlang = new Erlang( 4, 12.0 );\n*\n* var v = erlang.mode;\n* // returns 0.25\n*/\nsetReadOnlyAccessor( Erlang.prototype, 'mode', function get() {\n\treturn mode( this.k, this.lambda );\n});\n\n/**\n* Erlang distribution skewness.\n*\n* @name skewness\n* @memberof Erlang.prototype\n* @type {number}\n* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}\n*\n* @example\n* var erlang = new Erlang( 4, 12.0 );\n*\n* var v = erlang.skewness;\n* // returns 1.0\n*/\nsetReadOnlyAccessor( Erlang.prototype, 'skewness', function get() {\n\treturn skewness( this.k, this.lambda );\n});\n\n/**\n* Erlang distribution standard deviation.\n*\n* @name stdev\n* @memberof Erlang.prototype\n* @type {number}\n* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}\n*\n* @example\n* var erlang = new Erlang( 4, 12.0 );\n*\n* var v = erlang.stdev;\n* // returns ~0.167\n*/\nsetReadOnlyAccessor( Erlang.prototype, 'stdev', function get() {\n\treturn stdev( this.k, this.lambda );\n});\n\n/**\n* Erlang distribution variance.\n*\n* @name variance\n* @memberof Erlang.prototype\n* @type {number}\n* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}\n*\n* @example\n* var erlang = new Erlang( 4, 12.0 );\n*\n* var v = erlang.variance;\n* // returns ~0.028\n*/\nsetReadOnlyAccessor( Erlang.prototype, 'variance', function get() {\n\treturn variance( this.k, this.lambda );\n});\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @name cdf\n* @memberof Erlang.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var erlang = new Erlang( 2, 4.0 );\n*\n* var v = erlang.cdf( 0.5 );\n* // returns ~0.594\n*/\nsetReadOnly( Erlang.prototype, 'cdf', erlangCDF );\n\n/**\n* Evaluates the natural logarithm of the probability density function (PDF).\n*\n* @name logpdf\n* @memberof Erlang.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var erlang = new Erlang( 2, 4.0 );\n*\n* var v = erlang.logpdf( 2.0 );\n* // returns ~-4.534\n*/\nsetReadOnly( Erlang.prototype, 'logpdf', erlangLogPDF );\n\n/**\n* Evaluates the moment-generating function (MGF).\n*\n* @name mgf\n* @memberof Erlang.prototype\n* @type {Function}\n* @param {number} t - input value\n* @returns {number} evaluated MGF\n* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}\n*\n* @example\n* var erlang = new Erlang( 2, 4.0 );\n*\n* var v = erlang.mgf( 0.5 );\n* // returns ~1.306\n*/\nsetReadOnly( Erlang.prototype, 'mgf', erlangMGF );\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @name pdf\n* @memberof Erlang.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var erlang = new Erlang( 2, 4.0 );\n*\n* var v = erlang.pdf( 2.0 );\n* // returns ~0.011\n*/\nsetReadOnly( Erlang.prototype, 'pdf', erlangPDF );\n\n/**\n* Evaluates the quantile function.\n*\n* @name quantile\n* @memberof Erlang.prototype\n* @type {Function}\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}\n*\n* @example\n* var erlang = new Erlang( 2, 4.0 );\n*\n* var v = erlang.quantile( 0.5 );\n* // returns ~0.42\n*/\nsetReadOnly( Erlang.prototype, 'quantile', erlangQuantile );\n\n\n// EXPORTS //\n\nexport default Erlang;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Erlang distribution cumulative distribution function (CDF).\n*\n* @module @stdlib/stats-base-dists-erlang-cdf\n*\n* @example\n* import cdf from '@stdlib/stats-base-dists-erlang-cdf';\n*\n* var y = cdf( 2.0, 8, 3.0 );\n* // returns ~0.256\n*\n* y = cdf( 0.0, 1, 1.0 );\n* // returns 0.0\n*\n* var mycdf = cdf.factory( 2, 0.5 );\n* y = mycdf( 6.0 );\n* // returns ~0.801\n*\n* y = mycdf( 2.0 );\n* // returns ~0.264\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport cdf from './cdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( cdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNonNegativeInteger from '@stdlib/math-base-assert-is-nonnegative-integer';\nimport constantFunction from '@stdlib/utils-constant-function';\nimport { factory as factoryGamma } from '@stdlib/stats-base-dists-gamma-cdf';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the cumulative distribution function (CDF) for an Erlang distribution with shape parameter `k` and rate parameter `lambda`.\n*\n* @param {NonNegativeInteger} k - shape parameter\n* @param {PositiveNumber} lambda - rate parameter\n* @returns {Function} CDF\n*\n* @example\n* var cdf = factory( 2, 0.1 );\n* var y = cdf( 12.0 );\n* // returns ~0.337\n*\n* y = cdf( 8.0 );\n* // returns ~0.191\n*/\nfunction factory( k, lambda ) {\n\tif ( !isNonNegativeInteger( k ) ) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn factoryGamma( k, lambda );\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Natural logarithm of the probability density function (PDF) for an Erlang distribution.\n*\n* @module @stdlib/stats-base-dists-erlang-logpdf\n*\n* @example\n* import logpdf from '@stdlib/stats-base-dists-erlang-logpdf';\n*\n* var y = logpdf( 0.5, 2, 2.5 );\n* // returns ~-0.111\n*\n* var myLogPDF = logpdf.factory( 6, 7.0 );\n* y = myLogPDF( 7.0 );\n* // returns ~-1.864\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport logpdf from './logpdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( logpdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default logpdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNonNegativeInteger from '@stdlib/math-base-assert-is-nonnegative-integer';\nimport constantFunction from '@stdlib/utils-constant-function';\nimport { factory as factoryGamma } from '@stdlib/stats-base-dists-gamma-logpdf';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the natural logarithm of the probability density function (PDF) for an Erlang distribution with shape parameter `k` and rate parameter `lambda`.\n*\n* @param {NonNegativeInteger} k - shape parameter\n* @param {PositiveNumber} lambda - rate parameter\n* @returns {Function} logPDF\n*\n* @example\n* var myLogPDF = factory( 6.0, 7.0 );\n* var y = myLogPDF( 7.0 );\n* // returns ~-32.382\n*/\nfunction factory( k, lambda ) {\n\tif ( !isNonNegativeInteger( k ) ) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn factoryGamma( k, lambda );\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate the moment-generating function (MGF) for an Erlang distribution.\n*\n* @module @stdlib/stats-base-dists-erlang-mgf\n*\n* @example\n* import mgf from '@stdlib/stats-base-dists-erlang-mgf';\n*\n* var y = mgf( 0.3, 1, 1.0 );\n* // returns ~1.429\n*\n* var myMGF = mgf.factory( 2, 0.5 );\n*\n* y = myMGF( 0.2 );\n* // returns ~2.778\n*\n* y = myMGF( -0.5 );\n* // returns 0.25\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport mgf from './mgf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( mgf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default mgf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNonNegativeInteger from '@stdlib/math-base-assert-is-nonnegative-integer';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport constantFunction from '@stdlib/utils-constant-function';\nimport pow from '@stdlib/math-base-special-pow';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the moment-generating function (MGF) of an Erlang distribution with shape parameter `k` and rate parameter `lambda`.\n*\n* @param {NonNegativeInteger} k - shape parameter\n* @param {PositiveNumber} lambda - rate parameter\n* @returns {Function} MGF\n*\n* @example\n* var mgf = factory( 2, 0.5 );\n*\n* var y = mgf( 0.2 );\n* // returns ~2.778\n*\n* y = mgf( -0.5 );\n* // returns 0.25\n*/\nfunction factory( k, lambda ) {\n\tif (\n\t\t!isNonNegativeInteger( k ) ||\n\t\tisnan( lambda ) ||\n\t\tlambda < 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn mgf;\n\n\t/**\n\t* Evaluates the moment-generating function (MGF) for an Erlang distribution.\n\t*\n\t* @private\n\t* @param {number} t - input value\n\t* @returns {number} evaluated MGF\n\t*\n\t* @example\n\t* var y = mgf( 0.5 );\n\t* // returns <number>\n\t*/\n\tfunction mgf( t ) {\n\t\tif ( isnan( t ) || t >= lambda ) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn pow( 1.0 - (t/lambda), -k );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Erlang distribution probability density function (PDF).\n*\n* @module @stdlib/stats-base-dists-erlang-pdf\n*\n* @example\n* import pdf from '@stdlib/stats-base-dists-erlang-pdf';\n*\n* var y = pdf( 0.5, 2, 2.5 );\n* // returns ~0.895\n*\n* var myPDF = pdf.factory( 6, 7.0 );\n* y = myPDF( 7.0 );\n* // returns ~0.155\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport pdf from './pdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( pdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default pdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNonNegativeInteger from '@stdlib/math-base-assert-is-nonnegative-integer';\nimport constantFunction from '@stdlib/utils-constant-function';\nimport { factory as factoryGamma } from '@stdlib/stats-base-dists-gamma-pdf';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the probability density function (PDF) for an Erlang distribution with shape parameter `k` and rate parameter `lambda`.\n*\n* @param {NonNegativeInteger} k - shape parameter\n* @param {PositiveNumber} lambda - rate parameter\n* @returns {Function} PDF\n*\n* @example\n* var myPDF = factory( 6.0, 7.0 );\n* var y = myPDF( 7.0 );\n* // returns ~8.639e-15\n*/\nfunction factory( k, lambda ) {\n\tif ( !isNonNegativeInteger( k ) ) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn factoryGamma( k, lambda );\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Erlang distribution quantile function.\n*\n* @module @stdlib/stats-base-dists-erlang-quantile\n*\n* @example\n* import quantile from '@stdlib/stats-base-dists-erlang-quantile';\n*\n* var y = quantile( 0.8, 1, 1.0 );\n* // returns ~1.609\n*\n* var myQuantile = quantile.factory( 10, 2.0 );\n* y = myQuantile( 0.4 );\n* // returns ~4.452\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport quantile from './quantile.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( quantile, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default quantile;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNonNegativeInteger from '@stdlib/math-base-assert-is-nonnegative-integer';\nimport constantFunction from '@stdlib/utils-constant-function';\nimport { factory as factoryGamma } from '@stdlib/stats-base-dists-gamma-quantile';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the quantile function for an Erlang distribution with shape parameter `k` and rate parameter `lambda`.\n*\n* @param {NonNegativeInteger} k - shape parameter\n* @param {PositiveNumber} lambda - rate parameter\n* @returns {Function} quantile function\n*\n* @example\n* var quantile = factory( 2, 0.5 );\n* var y = quantile( 0.5 );\n* // returns ~3.357\n*\n* y = quantile( 0.8 );\n* // returns ~5.989\n*/\nfunction factory( k, lambda ) {\n\tif ( !isNonNegativeInteger( k ) ) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn factoryGamma( k, lambda );\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace erlang\n*/\nvar erlang = {};\n\n/**\n* @name cdf\n* @memberof erlang\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/erlang/cdf}\n*/\nimport cdf from '@stdlib/stats-base-dists-erlang-cdf';\nsetReadOnly( erlang, 'cdf', cdf );\n\n/**\n* @name Erlang\n* @memberof erlang\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/erlang/ctor}\n*/\nimport Erlang from '@stdlib/stats-base-dists-erlang-ctor';\nsetReadOnly( erlang, 'Erlang', Erlang );\n\n/**\n* @name entropy\n* @memberof erlang\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/erlang/entropy}\n*/\nimport entropy from '@stdlib/stats-base-dists-erlang-entropy';\nsetReadOnly( erlang, 'entropy', entropy );\n\n/**\n* @name kurtosis\n* @memberof erlang\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/erlang/kurtosis}\n*/\nimport kurtosis from '@stdlib/stats-base-dists-erlang-kurtosis';\nsetReadOnly( erlang, 'kurtosis', kurtosis );\n\n/**\n* @name logpdf\n* @memberof erlang\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/erlang/logpdf}\n*/\nimport logpdf from '@stdlib/stats-base-dists-erlang-logpdf';\nsetReadOnly( erlang, 'logpdf', logpdf );\n\n/**\n* @name mean\n* @memberof erlang\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/erlang/mean}\n*/\nimport mean from '@stdlib/stats-base-dists-erlang-mean';\nsetReadOnly( erlang, 'mean', mean );\n\n/**\n* @name mgf\n* @memberof erlang\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/erlang/mgf}\n*/\nimport mgf from '@stdlib/stats-base-dists-erlang-mgf';\nsetReadOnly( erlang, 'mgf', mgf );\n\n/**\n* @name mode\n* @memberof erlang\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/erlang/mode}\n*/\nimport mode from '@stdlib/stats-base-dists-erlang-mode';\nsetReadOnly( erlang, 'mode', mode );\n\n/**\n* @name pdf\n* @memberof erlang\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/erlang/pdf}\n*/\nimport pdf from '@stdlib/stats-base-dists-erlang-pdf';\nsetReadOnly( erlang, 'pdf', pdf );\n\n/**\n* @name quantile\n* @memberof erlang\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/erlang/quantile}\n*/\nimport quantile from '@stdlib/stats-base-dists-erlang-quantile';\nsetReadOnly( erlang, 'quantile', quantile );\n\n/**\n* @name skewness\n* @memberof erlang\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/erlang/skewness}\n*/\nimport skewness from '@stdlib/stats-base-dists-erlang-skewness';\nsetReadOnly( erlang, 'skewness', skewness );\n\n/**\n* @name stdev\n* @memberof erlang\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/erlang/stdev}\n*/\nimport stdev from '@stdlib/stats-base-dists-erlang-stdev';\nsetReadOnly( erlang, 'stdev', stdev );\n\n/**\n* @name variance\n* @memberof erlang\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/erlang/variance}\n*/\nimport variance from '@stdlib/stats-base-dists-erlang-variance';\nsetReadOnly( erlang, 'variance', variance );\n\n\n// EXPORTS //\n\nexport default erlang;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport exp from '@stdlib/math-base-special-exp';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Evaluates the cumulative distribution function (CDF) for an exponential distribution with rate parameter `lambda` at a value `x`.\n*\n* @param {number} x - input value\n* @param {PositiveNumber} lambda - rate parameter\n* @returns {Probability} evaluated CDF\n*\n* @example\n* var y = cdf( 2.0, 0.1 );\n* // returns ~0.181\n*\n* @example\n* var y = cdf( 1.0, 2.0 );\n* // returns ~0.865\n*\n* @example\n* var y = cdf( -1.0, 4.0 );\n* // returns 0.0\n*\n* @example\n* var y = cdf( NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* // Negative rate parameter:\n* var y = cdf( 2.0, -1.0 );\n* // returns NaN\n*/\nfunction cdf( x, lambda ) {\n\tif (\n\t\tisnan( lambda ) ||\n\t\tlambda < 0.0 ||\n\t\tlambda === PINF\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x < 0.0 ) {\n\t\treturn 0.0;\n\t}\n\treturn 1.0 - exp( -lambda * x );\n}\n\n\n// EXPORTS //\n\nexport default cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport ln from '@stdlib/math-base-special-ln';\n\n\n// MAIN //\n\n/**\n* Returns the entropy of an exponential distribution.\n*\n* @param {NonNegativeNumber} lambda - rate parameter\n* @returns {number} entropy\n*\n* @example\n* var v = entropy( 9.0 );\n* // returns ~-1.197\n*\n* @example\n* var v = entropy( 1.0 );\n* // returns 1.0\n*\n* @example\n* var v = entropy( -0.2 );\n* // returns NaN\n*\n* @example\n* var v = entropy( NaN );\n* // returns NaN\n*/\nfunction entropy( lambda ) {\n\tif ( isnan( lambda ) || lambda < 0.0 ) {\n\t\treturn NaN;\n\t}\n\treturn 1.0 - ln( lambda );\n}\n\n\n// EXPORTS //\n\nexport default entropy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns the excess kurtosis of an exponential distribution.\n*\n* @param {NonNegativeNumber} lambda - rate parameter\n* @returns {NonNegativeNumber} excess kurtosis\n*\n* @example\n* var v = kurtosis( 9.0 );\n* // returns 6.0\n*\n* @example\n* var v = kurtosis( 1.0 );\n* // returns 6.0\n*\n* @example\n* var v = kurtosis( -0.2 );\n* // returns NaN\n*\n* @example\n* var v = kurtosis( NaN );\n* // returns NaN\n*/\nfunction kurtosis( lambda ) {\n\tif ( isnan( lambda ) || lambda < 0.0 ) {\n\t\treturn NaN;\n\t}\n\treturn 6.0;\n}\n\n\n// EXPORTS //\n\nexport default kurtosis;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns the expected value of an exponential distribution.\n*\n* @param {NonNegativeNumber} lambda - rate parameter\n* @returns {NonNegativeNumber} expected value\n*\n* @example\n* var v = mean( 9.0 );\n* // returns ~0.111\n*\n* @example\n* var v = mean( 1.0 );\n* // returns 1.0\n*\n* @example\n* var v = mean( -0.2 );\n* // returns NaN\n*\n* @example\n* var v = mean( NaN );\n* // returns NaN\n*/\nfunction mean( lambda ) {\n\tif ( isnan( lambda ) || lambda < 0.0 ) {\n\t\treturn NaN;\n\t}\n\treturn 1.0 / lambda;\n}\n\n\n// EXPORTS //\n\nexport default mean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport LN2 from '@stdlib/constants-float64-ln-two';\n\n\n// MAIN //\n\n/**\n* Returns the median of an exponential distribution.\n*\n* @param {NonNegativeNumber} lambda - rate parameter\n* @returns {NonNegativeNumber} median\n*\n* @example\n* var v = median( 9.0 );\n* // returns ~0.077\n*\n* @example\n* var v = median( 1.0 );\n* // returns ~0.693\n*\n* @example\n* var v = median( -0.2 );\n* // returns NaN\n*\n* @example\n* var v = median( NaN );\n* // returns NaN\n*/\nfunction median( lambda ) {\n\tif ( isnan( lambda ) || lambda < 0.0 ) {\n\t\treturn NaN;\n\t}\n\treturn ( 1.0 / lambda ) * LN2;\n}\n\n\n// EXPORTS //\n\nexport default median;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns the mode of an exponential distribution.\n*\n* @param {NonNegativeNumber} lambda - rate parameter\n* @returns {NonNegativeNumber} mode\n*\n* @example\n* var v = mode( 9.0 );\n* // returns 0.0\n*\n* @example\n* var v = mode( 1.0 );\n* // returns 0.0\n*\n* @example\n* var v = mode( -0.2 );\n* // returns NaN\n*\n* @example\n* var v = mode( NaN );\n* // returns NaN\n*/\nfunction mode( lambda ) {\n\tif ( isnan( lambda ) || lambda < 0.0 ) {\n\t\treturn NaN;\n\t}\n\treturn 0.0;\n}\n\n\n// EXPORTS //\n\nexport default mode;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns the skewness of an exponential distribution.\n*\n* @param {NonNegativeNumber} lambda - rate parameter\n* @returns {NonNegativeNumber} skewness\n*\n* @example\n* var v = skewness( 9.0 );\n* // returns 2.0\n*\n* @example\n* var v = skewness( 1.0 );\n* // returns 2.0\n*\n* @example\n* var v = skewness( -0.2 );\n* // returns NaN\n*\n* @example\n* var v = skewness( NaN );\n* // returns NaN\n*/\nfunction skewness( lambda ) {\n\tif ( isnan( lambda ) || lambda < 0.0 ) {\n\t\treturn NaN;\n\t}\n\treturn 2.0;\n}\n\n\n// EXPORTS //\n\nexport default skewness;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns the standard deviation of an exponential distribution.\n*\n* @param {NonNegativeNumber} lambda - rate parameter\n* @returns {NonNegativeNumber} standard deviation\n*\n* @example\n* var v = stdev( 9.0 );\n* // returns ~0.11\n*\n* @example\n* var v = stdev( 1.0 );\n* // returns 1.0\n*\n* @example\n* var v = stdev( -0.2 );\n* // returns NaN\n*\n* @example\n* var v = stdev( NaN );\n* // returns NaN\n*/\nfunction stdev( lambda ) {\n\tif ( isnan( lambda ) || lambda < 0.0 ) {\n\t\treturn NaN;\n\t}\n\treturn 1.0 / lambda;\n}\n\n\n// EXPORTS //\n\nexport default stdev;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns the variance of an exponential distribution.\n*\n* @param {NonNegativeNumber} lambda - rate parameter\n* @returns {NonNegativeNumber} variance\n*\n* @example\n* var v = variance( 9.0 );\n* // returns ~0.012\n*\n* @example\n* var v = variance( 1.0 );\n* // returns 1.0\n*\n* @example\n* var v = variance( -0.2 );\n* // returns NaN\n*\n* @example\n* var v = variance( NaN );\n* // returns NaN\n*/\nfunction variance( lambda ) {\n\tif ( isnan( lambda ) || lambda < 0.0 ) {\n\t\treturn NaN;\n\t}\n\treturn 1.0 / ( lambda*lambda );\n}\n\n\n// EXPORTS //\n\nexport default variance;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport log1p from '@stdlib/math-base-special-log1p';\nimport exp from '@stdlib/math-base-special-exp';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (CDF) for an exponential distribution with rate parameter `lambda` at a value `x`.\n*\n* @param {number} x - input value\n* @param {PositiveNumber} lambda - rate parameter\n* @returns {number} evaluated logCDF\n*\n* @example\n* var y = logcdf( 2.0, 0.1 );\n* // returns ~-1.708\n*\n* @example\n* var y = logcdf( 1.0, 2.0 );\n* // returns ~-0.145\n*\n* @example\n* var y = logcdf( -1.0, 4.0 );\n* // returns -Infinity\n*\n* @example\n* var y = logcdf( NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = logcdf( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* // Negative rate parameter:\n* var y = logcdf( 2.0, -1.0 );\n* // returns NaN\n*/\nfunction logcdf( x, lambda ) {\n\tif (\n\t\tisnan( lambda ) ||\n\t\tlambda < 0.0 ||\n\t\tlambda === PINF\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x < 0.0 ) {\n\t\treturn NINF;\n\t}\n\treturn log1p( -exp( -lambda * x ) );\n}\n\n\n// EXPORTS //\n\nexport default logcdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport ln from '@stdlib/math-base-special-ln';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Evaluates the natural logarithm of the probability density function (PDF) for an exponential distribution with rate parameter `lambda` at a value `x`.\n*\n* @param {number} x - input value\n* @param {PositiveNumber} lambda - rate parameter\n* @returns {number} evaluated logPDF\n*\n* @example\n* var y = logpdf( 0.3, 4.0 );\n* // returns ~0.186\n*\n* @example\n* var y = logpdf( 2.0, 0.7 );\n* // returns ~-1.757\n*\n* @example\n* var y = logpdf( -1.0, 0.5 );\n* // returns -Infinity\n*\n* @example\n* var y = logpdf( 0, NaN );\n* // returns NaN\n*\n* @example\n* var y = logpdf( NaN, 2.0 );\n* // returns NaN\n*\n* @example\n* // Negative rate:\n* var y = logpdf( 2.0, -1.0 );\n* // returns NaN\n*/\nfunction logpdf( x, lambda ) {\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( lambda ) ||\n\t\tlambda < 0.0 ||\n\t\tlambda === PINF\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x < 0.0 ) {\n\t\treturn NINF;\n\t}\n\treturn ( -x*lambda ) + ln( lambda );\n}\n\n\n// EXPORTS //\n\nexport default logpdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Evaluates the moment-generating function (MGF) for an exponential distribution with rate parameter `lambda` at a value `t`.\n*\n* @param {number} t - input value\n* @param {PositiveNumber} lambda - rate parameter\n* @returns {number} evaluated MGF\n*\n* @example\n* var v = mgf( 2.0, 3.0 );\n* // returns 3.0\n*\n* @example\n* var v = mgf( 0.4, 1.2 );\n* // returns 1.5\n*\n* @example\n* var v = mgf( 0.8, 1.6 );\n* // returns 2.0\n*\n* @example\n* var v = mgf( 4.0, 3.0 );\n* // returns NaN\n*\n* @example\n* var v = mgf( NaN, 3.0 );\n* // returns NaN\n*\n* @example\n* var v = mgf( 2.0, NaN );\n* // returns NaN\n*/\nfunction mgf( t, lambda ) {\n\tif (\n\t\tisnan( t ) ||\n\t\tisnan( lambda ) ||\n\t\tlambda <= 0.0 ||\n\t\tlambda === PINF ||\n\t\tt >= lambda\n\t) {\n\t\treturn NaN;\n\t}\n\treturn lambda / ( lambda - t );\n}\n\n\n// EXPORTS //\n\nexport default mgf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport exp from '@stdlib/math-base-special-exp';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Evaluates the probability density function (PDF) for an exponential distribution with rate parameter `lambda` at a value `x`.\n*\n* @param {number} x - input value\n* @param {PositiveNumber} lambda - rate parameter\n* @returns {number} evaluated PDF\n*\n* @example\n* var y = pdf( 0.3, 4.0 );\n* // returns ~1.205\n*\n* @example\n* var y = pdf( 2.0, 0.7 );\n* // returns ~0.173\n*\n* @example\n* var y = pdf( -1.0, 0.5 );\n* // returns 0.0\n*\n* @example\n* var y = pdf( 0, NaN );\n* // returns NaN\n*\n* @example\n* var y = pdf( NaN, 2.0 );\n* // returns NaN\n*\n* @example\n* // Negative rate:\n* var y = pdf( 2.0, -1.0 );\n* // returns NaN\n*/\nfunction pdf( x, lambda ) {\n\tvar scale;\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( lambda ) ||\n\t\tlambda < 0.0 ||\n\t\tlambda === PINF\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x < 0.0 ) {\n\t\treturn 0.0;\n\t}\n\tscale = 1.0 / lambda;\n\treturn exp( -x / scale ) / scale;\n}\n\n\n// EXPORTS //\n\nexport default pdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport ln from '@stdlib/math-base-special-ln';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Evaluates the quantile function for an exponential distribution with rate parameter `lambda` at a probability `p`.\n*\n* @param {Probability} p - input value\n* @param {PositiveNumber} lambda - rate parameter\n* @returns {number} evaluated quantile function\n*\n* @example\n* var y = quantile( 0.8, 1.0 );\n* // returns ~1.609\n*\n* @example\n* var y = quantile( 0.5, 4.0 );\n* // returns ~0.173\n*\n* @example\n* var y = quantile( 0.5, 0.1 );\n* // returns ~6.931\n*\n* @example\n* var y = quantile( -0.2, 0.1 );\n* // returns NaN\n*\n* @example\n* var y = quantile( NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* // Negative rate parameter:\n* var y = quantile( 0.5, -1.0 );\n* // returns NaN\n*/\nfunction quantile( p, lambda ) {\n\tif (\n\t\tisnan( lambda ) ||\n\t\tlambda < 0.0 ||\n\t\tlambda === PINF ||\n\t\tisnan( p ) ||\n\t\tp < 0.0 ||\n\t\tp > 1.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn -ln( 1.0 - p ) / lambda;\n}\n\n\n// EXPORTS //\n\nexport default quantile;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nimport defineProperty from '@stdlib/utils-define-property';\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport setReadOnlyAccessor from '@stdlib/utils-define-nonenumerable-read-only-accessor';\nimport { isPrimitive as isPositive } from '@stdlib/assert-is-positive-number';\nimport entropy from '@stdlib/stats-base-dists-exponential-entropy';\nimport kurtosis from '@stdlib/stats-base-dists-exponential-kurtosis';\nimport mean from '@stdlib/stats-base-dists-exponential-mean';\nimport median from '@stdlib/stats-base-dists-exponential-median';\nimport mode from '@stdlib/stats-base-dists-exponential-mode';\nimport skewness from '@stdlib/stats-base-dists-exponential-skewness';\nimport stdev from '@stdlib/stats-base-dists-exponential-stdev';\nimport variance from '@stdlib/stats-base-dists-exponential-variance';\nimport cdf from '@stdlib/stats-base-dists-exponential-cdf';\nimport logcdf from '@stdlib/stats-base-dists-exponential-logcdf';\nimport logpdf from '@stdlib/stats-base-dists-exponential-logpdf';\nimport mgf from '@stdlib/stats-base-dists-exponential-mgf';\nimport pdf from '@stdlib/stats-base-dists-exponential-pdf';\nimport quantile from '@stdlib/stats-base-dists-exponential-quantile';\nimport format from '@stdlib/string-format';\n\n\n// FUNCTIONS //\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n*/\nfunction exponentialCDF( x ) {\n\treturn cdf( x, this.lambda );\n}\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logCDF\n*/\nfunction exponentialLogCDF( x ) {\n\treturn logcdf( x, this.lambda );\n}\n\n/**\n* Evaluates the natural logarithm of the probability density function (PDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n*/\nfunction exponentialLogPDF( x ) {\n\treturn logpdf( x, this.lambda );\n}\n\n/**\n* Evaluates the moment-generating function (MGF).\n*\n* @private\n* @param {number} t - input value\n* @returns {number} evaluated MGF\n*/\nfunction exponentialMGF( t ) {\n\treturn mgf( t, this.lambda );\n}\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n*/\nfunction exponentialPDF( x ) {\n\treturn pdf( x, this.lambda );\n}\n\n/**\n* Evaluates the quantile function.\n*\n* @private\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n*/\nfunction exponentialQuantile( p ) {\n\treturn quantile( p, this.lambda );\n}\n\n\n// MAIN //\n\n/**\n* Exponential distribution constructor.\n*\n* @constructor\n* @param {PositiveNumber} [lambda=1.0] - rate parameter\n* @throws {TypeError} `lambda` must be a positive number\n* @returns {Exponential} distribution instance\n*\n* @example\n* var exponential = new Exponential( 1.0 );\n*\n* var y = exponential.cdf( 0.8 );\n* // returns ~0.551\n*\n* var v = exponential.mode;\n* // returns 0.0\n*/\nfunction Exponential() {\n\tvar lambda;\n\tif ( !(this instanceof Exponential) ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn new Exponential();\n\t\t}\n\t\treturn new Exponential( arguments[ 0 ] );\n\t}\n\tif ( arguments.length ) {\n\t\tlambda = arguments[ 0 ];\n\t\tif ( !isPositive( lambda ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Rate parameter must be a positive number. Value: `%s`.', lambda ) );\n\t\t}\n\t} else {\n\t\tlambda = 1.0;\n\t}\n\tdefineProperty( this, 'lambda', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn lambda;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isPositive( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid assignment. Must be a positive number. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\tlambda = value;\n\t\t}\n\t});\n\treturn this;\n}\n\n/**\n* Exponential distribution differential entropy.\n*\n* @name entropy\n* @memberof Exponential.prototype\n* @type {number}\n* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}\n*\n* @example\n* var exponential = new Exponential( 4.0 );\n*\n* var v = exponential.entropy;\n* // returns ~-0.386\n*/\nsetReadOnlyAccessor( Exponential.prototype, 'entropy', function get() {\n\treturn entropy( this.lambda );\n});\n\n/**\n* Exponential distribution excess kurtosis.\n*\n* @name kurtosis\n* @memberof Exponential.prototype\n* @type {number}\n* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}\n*\n* @example\n* var exponential = new Exponential( 4.0 );\n*\n* var v = exponential.kurtosis;\n* // returns 6.0\n*/\nsetReadOnlyAccessor( Exponential.prototype, 'kurtosis', function get() {\n\treturn kurtosis( this.lambda );\n});\n\n/**\n* Exponential distribution expected value.\n*\n* @name mean\n* @memberof Exponential.prototype\n* @type {number}\n* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}\n*\n* @example\n* var exponential = new Exponential( 4.0 );\n*\n* var v = exponential.mean;\n* // returns 0.25\n*/\nsetReadOnlyAccessor( Exponential.prototype, 'mean', function get() {\n\treturn mean( this.lambda );\n});\n\n/**\n* Exponential distribution median.\n*\n* @name median\n* @memberof Exponential.prototype\n* @type {number}\n* @see [median]{@link https://en.wikipedia.org/wiki/Median}\n*\n* @example\n* var exponential = new Exponential( 4.0 );\n*\n* var v = exponential.median;\n* // returns ~0.173\n*/\nsetReadOnlyAccessor( Exponential.prototype, 'median', function get() {\n\treturn median( this.lambda );\n});\n\n/**\n* Exponential distribution mode.\n*\n* @name mode\n* @memberof Exponential.prototype\n* @type {number}\n* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}\n*\n* @example\n* var exponential = new Exponential( 4.0 );\n*\n* var v = exponential.mode;\n* // returns 0.0\n*/\nsetReadOnlyAccessor( Exponential.prototype, 'mode', function get() {\n\treturn mode( this.lambda );\n});\n\n/**\n* Exponential distribution skewness.\n*\n* @name skewness\n* @memberof Exponential.prototype\n* @type {number}\n* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}\n*\n* @example\n* var exponential = new Exponential( 4.0 );\n*\n* var v = exponential.skewness;\n* // returns 2.0\n*/\nsetReadOnlyAccessor( Exponential.prototype, 'skewness', function get() {\n\treturn skewness( this.lambda );\n});\n\n/**\n* Exponential distribution standard deviation.\n*\n* @name stdev\n* @memberof Exponential.prototype\n* @type {number}\n* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}\n*\n* @example\n* var exponential = new Exponential( 4.0 );\n*\n* var v = exponential.stdev;\n* // returns ~0.25\n*/\nsetReadOnlyAccessor( Exponential.prototype, 'stdev', function get() {\n\treturn stdev( this.lambda );\n});\n\n/**\n* Exponential distribution variance.\n*\n* @name variance\n* @memberof Exponential.prototype\n* @type {number}\n* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}\n*\n* @example\n* var exponential = new Exponential( 4.0 );\n*\n* var v = exponential.variance;\n* // returns ~0.063\n*/\nsetReadOnlyAccessor( Exponential.prototype, 'variance', function get() {\n\treturn variance( this.lambda );\n});\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @name cdf\n* @memberof Exponential.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var exponential = new Exponential( 2.0 );\n*\n* var v = exponential.cdf( 0.5 );\n* // returns ~0.632\n*/\nsetReadOnly( Exponential.prototype, 'cdf', exponentialCDF );\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (CDF).\n*\n* @name logcdf\n* @memberof Exponential.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logCDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var exponential = new Exponential( 2.0 );\n*\n* var v = exponential.logcdf( 0.5 );\n* // returns ~-0.459\n*/\nsetReadOnly( Exponential.prototype, 'logcdf', exponentialLogCDF );\n\n/**\n* Evaluates the natural logarithm of the probability density function (PDF).\n*\n* @name logpdf\n* @memberof Exponential.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var exponential = new Exponential( 2.0 );\n*\n* var v = exponential.logpdf( 0.8 );\n* // returns ~-0.907\n*/\nsetReadOnly( Exponential.prototype, 'logpdf', exponentialLogPDF );\n\n/**\n* Evaluates the moment-generating function (MGF).\n*\n* @name mgf\n* @memberof Exponential.prototype\n* @type {Function}\n* @param {number} t - input value\n* @returns {number} evaluated MGF\n* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}\n*\n* @example\n* var exponential = new Exponential( 2.0 );\n*\n* var v = exponential.mgf( 0.5 );\n* // returns ~1.333\n*/\nsetReadOnly( Exponential.prototype, 'mgf', exponentialMGF );\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @name pdf\n* @memberof Exponential.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var exponential = new Exponential( 2.0 );\n*\n* var v = exponential.pdf( 0.8 );\n* // returns ~0.404\n*/\nsetReadOnly( Exponential.prototype, 'pdf', exponentialPDF );\n\n/**\n* Evaluates the quantile function.\n*\n* @name quantile\n* @memberof Exponential.prototype\n* @type {Function}\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}\n*\n* @example\n* var exponential = new Exponential( 2.0 );\n*\n* var v = exponential.quantile( 0.5 );\n* // returns ~0.347\n*/\nsetReadOnly( Exponential.prototype, 'quantile', exponentialQuantile );\n\n\n// EXPORTS //\n\nexport default Exponential;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Exponential distribution cumulative distribution function (CDF).\n*\n* @module @stdlib/stats-base-dists-exponential-cdf\n*\n* @example\n* import cdf from '@stdlib/stats-base-dists-exponential-cdf';\n*\n* var y = cdf( 2.0, 0.1 );\n* // returns ~0.181\n*\n* var myCDF = cdf.factory( 0.5 );\n* y = myCDF( 3.0 );\n* // returns ~0.777\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport cdf from './cdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( cdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport exp from '@stdlib/math-base-special-exp';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the cumulative distribution function (CDF) for an exponential distribution with rate parameter `lambda`.\n*\n* @param {PositiveNumber} lambda - rate parameter\n* @returns {Function} CDF\n*\n* @example\n* var cdf = factory( 0.5 );\n* var y = cdf( 3.0 );\n* // returns ~0.777\n*\n* y = cdf( 1.0 );\n* // returns ~0.393\n*/\nfunction factory( lambda ) {\n\tif (\n\t\tisnan( lambda ) ||\n\t\tlambda < 0.0 ||\n\t\tlambda === PINF\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn cdf;\n\n\t/**\n\t* Evaluates the cumulative distribution function (CDF) for an exponential distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated CDF\n\t*\n\t* @example\n\t* var y = cdf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction cdf( x ) {\n\t\tif ( x < 0.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn 1.0 - exp( -lambda * x );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Natural logarithm of the cumulative distribution function (CDF) for an exponential distribution.\n*\n* @module @stdlib/stats-base-dists-exponential-logcdf\n*\n* @example\n* import logcdf from '@stdlib/stats-base-dists-exponential-logcdf';\n*\n* var y = logcdf( 2.0, 0.1 );\n* // returns ~-1.708\n*\n* var mylogCDF = logcdf.factory( 0.5 );\n* y = mylogCDF( 3.0 );\n* // returns ~-0.252\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport logcdf from './logcdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( logcdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default logcdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport log1p from '@stdlib/math-base-special-log1p';\nimport exp from '@stdlib/math-base-special-exp';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the natural logarithm of the cumulative distribution function (CDF) for an exponential distribution with rate parameter `lambda`.\n*\n* @param {PositiveNumber} lambda - rate parameter\n* @returns {Function} logCDF\n*\n* @example\n* var logcdf = factory( 0.5 );\n* var y = logcdf( 3.0 );\n* // returns ~-0.252\n*\n* y = logcdf( 1.0 );\n* // returns ~-0.933\n*/\nfunction factory( lambda ) {\n\tif (\n\t\tisnan( lambda ) ||\n\t\tlambda < 0.0 ||\n\t\tlambda === PINF\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn logcdf;\n\n\t/**\n\t* Evaluates the natural logarithm of the cumulative distribution function (CDF) for an exponential distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {number} evaluated logCDF\n\t*\n\t* @example\n\t* var y = logcdf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction logcdf( x ) {\n\t\tif ( x < 0.0 ) {\n\t\t\treturn NINF;\n\t\t}\n\t\treturn log1p( -exp( -lambda * x ) );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Natural logarithm of the probability density function (PDF) for an exponential distribution.\n*\n* @module @stdlib/stats-base-dists-exponential-logpdf\n*\n* @example\n* import logpdf from '@stdlib/stats-base-dists-exponential-logpdf';\n*\n* var y = logpdf( 0.3, 4.0 );\n* // returns ~0.186\n*\n* var mylogPDF = logpdf.factory( 0.5 );\n*\n* y = mylogPDF( 3.0 );\n* // returns ~-2.193\n*\n* y = mylogPDF( 1.0 );\n* // returns ~-1.193\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport logpdf from './logpdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( logpdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default logpdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport ln from '@stdlib/math-base-special-ln';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the natural logarithm of the probability density function (PDF) for an exponential distribution with parameter `lambda`.\n*\n* @param {PositiveNumber} lambda - rate parameter\n* @returns {Function} logarithm of probability density function (logPDF)\n*\n* @example\n* var logpdf = factory( 0.5 );\n* var y = logpdf( 3.0 );\n* // returns ~-2.193\n*\n* y = logpdf( 1.0 );\n* // returns ~-1.193\n*/\nfunction factory( lambda ) {\n\tif ( isnan( lambda ) || lambda < 0.0 || lambda === PINF ) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn logpdf;\n\n\t/**\n\t* Evaluates the natural logarithm of the probability density function (PDF) for an exponential distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {number} evaluated logPDF\n\t*\n\t* @example\n\t* var y = logpdf( 2.3 );\n\t* // returns <number>\n\t*/\n\tfunction logpdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x < 0.0 ) {\n\t\t\treturn NINF;\n\t\t}\n\t\treturn -( x*lambda ) + ln( lambda );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate the moment-generating function (MGF) for an exponential distribution.\n*\n* @module @stdlib/stats-base-dists-exponential-mgf\n*\n* @example\n* import mgf from '@stdlib/stats-base-dists-exponential-mgf';\n*\n* var v = mgf( 2.0, 3.0 );\n* // returns 3.0\n*\n* var mymgf = mgf.factory( 4.0 );\n* v = mymgf( 3.0 );\n* // returns 4.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport mgf from './mgf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( mgf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default mgf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the moment-generating function (MGF) of an exponential distribution with rate parameter `lambda`.\n*\n* @param {PositiveNumber} lambda - rate parameter\n* @returns {Function} MGF\n*\n* @example\n* var mgf = factory( 4.0 );\n* var y = mgf( 3.0 );\n* // returns 4.0\n*\n* y = mgf( 0.5 );\n* // returns ~1.143\n*/\nfunction factory( lambda ) {\n\tif (\n\t\tisnan( lambda ) ||\n\t\tlambda <= 0.0 ||\n\t\tlambda === PINF\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn mgf;\n\n\t/**\n\t* Evaluates the moment-generating function (MGF) for an exponential distribution.\n\t*\n\t* @private\n\t* @param {number} t - input value\n\t* @returns {number} evaluated MGF\n\t*\n\t* @example\n\t* var y = mgf( 0.5 );\n\t* // returns <number>\n\t*/\n\tfunction mgf( t ) {\n\t\tif ( isnan( t ) || t >= lambda ) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn lambda / ( lambda - t );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Exponential distribution probability density function (PDF).\n*\n* @module @stdlib/stats-base-dists-exponential-pdf\n*\n* @example\n* import pdf from '@stdlib/stats-base-dists-exponential-pdf';\n*\n* var y = pdf( 0.3, 4.0 );\n* // returns ~1.205\n*\n* var myPDF = pdf.factory( 0.5 );\n*\n* y = myPDF( 3.0 );\n* // returns ~0.112\n*\n* y = myPDF( 1.0 );\n* // returns ~0.303\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport pdf from './pdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( pdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default pdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport exp from '@stdlib/math-base-special-exp';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the probability density function (PDF) for an exponential distribution with parameter `lambda`.\n*\n* @param {PositiveNumber} lambda - rate parameter\n* @returns {Function} probability density function (PDF)\n*\n* @example\n* var pdf = factory( 0.5 );\n* var y = pdf( 3.0 );\n* // returns ~0.112\n*\n* y = pdf( 1.0 );\n* // returns ~0.303\n*/\nfunction factory( lambda ) {\n\tvar scale;\n\tif ( isnan( lambda ) || lambda < 0.0 || lambda === PINF ) {\n\t\treturn constantFunction( NaN );\n\t}\n\tscale = 1.0 / lambda;\n\treturn pdf;\n\n\t/**\n\t* Evaluates the probability density function (PDF) for an exponential distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {number} evaluated PDF\n\t*\n\t* @example\n\t* var y = pdf( 2.3 );\n\t* // returns <number>\n\t*/\n\tfunction pdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x < 0.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn exp( -x / scale ) / scale;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Exponential distribution quantile function.\n*\n* @module @stdlib/stats-base-dists-exponential-quantile\n*\n* @example\n* import quantile from '@stdlib/stats-base-dists-exponential-quantile';\n*\n* var y = quantile( 0.5, 4.0 );\n* // returns ~0.173\n*\n* var myQuantile = quantile.factory( 0.4 );\n*\n* y = myQuantile( 0.4 );\n* // returns ~1.277\n*\n* y = myQuantile( 1.0 );\n* // returns Infinity\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport quantile from './quantile.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( quantile, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default quantile;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport ln from '@stdlib/math-base-special-ln';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the quantile function of an exponential distribution with rate parameter `lambda`.\n*\n* @param {PositiveNumber} lambda - rate parameter\n* @returns {Function} quantile function\n*\n* @example\n* var quantile = factory( 0.4 );\n* var y = quantile( 0.4 );\n* // returns ~1.277\n*\n* y = quantile( 1.0 );\n* // returns Infinity\n*/\nfunction factory( lambda ) {\n\tif ( lambda < 0.0 || lambda === PINF || isnan( lambda ) ) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn quantile;\n\n\t/**\n\t* Evaluates the quantile function for an exponential distribution.\n\t*\n\t* @private\n\t* @param {Probability} p - input value\n\t* @returns {number} evaluated quantile function\n\t*\n\t* @example\n\t* var y = quantile( 0.3 );\n\t* // returns <number>\n\t*/\n\tfunction quantile( p ) {\n\t\tif ( isnan( p ) || p < 0.0 || p > 1.0 ) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn -ln( 1.0 - p ) / lambda;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace exponential\n*/\nvar exponential = {};\n\n/**\n* @name cdf\n* @memberof exponential\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/exponential/cdf}\n*/\nimport cdf from '@stdlib/stats-base-dists-exponential-cdf';\nsetReadOnly( exponential, 'cdf', cdf );\n\n/**\n* @name Exponential\n* @memberof exponential\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/exponential/ctor}\n*/\nimport Exponential from '@stdlib/stats-base-dists-exponential-ctor';\nsetReadOnly( exponential, 'Exponential', Exponential );\n\n/**\n* @name entropy\n* @memberof exponential\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/exponential/entropy}\n*/\nimport entropy from '@stdlib/stats-base-dists-exponential-entropy';\nsetReadOnly( exponential, 'entropy', entropy );\n\n/**\n* @name kurtosis\n* @memberof exponential\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/exponential/kurtosis}\n*/\nimport kurtosis from '@stdlib/stats-base-dists-exponential-kurtosis';\nsetReadOnly( exponential, 'kurtosis', kurtosis );\n\n/**\n* @name logcdf\n* @memberof exponential\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/exponential/logcdf}\n*/\nimport logcdf from '@stdlib/stats-base-dists-exponential-logcdf';\nsetReadOnly( exponential, 'logcdf', logcdf );\n\n/**\n* @name logpdf\n* @memberof exponential\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/exponential/logpdf}\n*/\nimport logpdf from '@stdlib/stats-base-dists-exponential-logpdf';\nsetReadOnly( exponential, 'logpdf', logpdf );\n\n/**\n* @name mean\n* @memberof exponential\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/exponential/mean}\n*/\nimport mean from '@stdlib/stats-base-dists-exponential-mean';\nsetReadOnly( exponential, 'mean', mean );\n\n/**\n* @name median\n* @memberof exponential\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/exponential/median}\n*/\nimport median from '@stdlib/stats-base-dists-exponential-median';\nsetReadOnly( exponential, 'median', median );\n\n/**\n* @name mgf\n* @memberof exponential\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/exponential/mgf}\n*/\nimport mgf from '@stdlib/stats-base-dists-exponential-mgf';\nsetReadOnly( exponential, 'mgf', mgf );\n\n/**\n* @name mode\n* @memberof exponential\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/exponential/mode}\n*/\nimport mode from '@stdlib/stats-base-dists-exponential-mode';\nsetReadOnly( exponential, 'mode', mode );\n\n/**\n* @name pdf\n* @memberof exponential\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/exponential/pdf}\n*/\nimport pdf from '@stdlib/stats-base-dists-exponential-pdf';\nsetReadOnly( exponential, 'pdf', pdf );\n\n/**\n* @name quantile\n* @memberof exponential\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/exponential/quantile}\n*/\nimport quantile from '@stdlib/stats-base-dists-exponential-quantile';\nsetReadOnly( exponential, 'quantile', quantile );\n\n/**\n* @name skewness\n* @memberof exponential\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/exponential/skewness}\n*/\nimport skewness from '@stdlib/stats-base-dists-exponential-skewness';\nsetReadOnly( exponential, 'skewness', skewness );\n\n/**\n* @name stdev\n* @memberof exponential\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/exponential/stdev}\n*/\nimport stdev from '@stdlib/stats-base-dists-exponential-stdev';\nsetReadOnly( exponential, 'stdev', stdev );\n\n/**\n* @name variance\n* @memberof exponential\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/exponential/variance}\n*/\nimport variance from '@stdlib/stats-base-dists-exponential-variance';\nsetReadOnly( exponential, 'variance', variance );\n\n\n// EXPORTS //\n\nexport default exponential;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport betainc from '@stdlib/math-base-special-betainc';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Evaluates the cumulative distribution function (CDF) for an F distribution with numerator degrees of freedom `d1` and denominator degrees of freedom `d2` at a value `x`.\n*\n* @param {number} x - input value\n* @param {PositiveNumber} d1 - numerator degrees of freedom\n* @param {PositiveNumber} d2 - denominator degrees of freedom\n* @returns {Probability} evaluated CDF\n*\n* @example\n* var y = cdf( 2.0, 1.0, 1.0 );\n* // returns ~0.608\n*\n* @example\n* var y = cdf( 2.0, 8.0, 4.0 );\n* // returns ~0.737\n*\n* @example\n* var y = cdf( -1.0, 2.0, 2.0 );\n* // returns 0.0\n*\n* @example\n* var y = cdf( +Infinity, 4.0, 2.0 );\n* // returns 1.0\n*\n* @example\n* var y = cdf( -Infinity, 4.0, 2.0 );\n* // returns 0.0\n*\n* @example\n* var y = cdf( NaN, 1.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, 1.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2.0, 1.0, -1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2.0, -1.0, 1.0 );\n* // returns NaN\n*/\nfunction cdf( x, d1, d2 ) {\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( d1 ) ||\n\t\tisnan( d2 ) ||\n\t\td1 <= 0.0 ||\n\t\td2 <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x <= 0.0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( x === PINF ) {\n\t\treturn 1.0;\n\t}\n\tif ( d1 * x > d2 ) {\n\t\treturn betainc( (d1*x)/(d2+(d1*x)), d1/2.0, d2 /2.0, true, false );\n\t}\n\treturn betainc( d2/(d2+(d1*x)), d2/2.0, d1/2.0, true, true );\n}\n\n\n// EXPORTS //\n\nexport default cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport digamma from '@stdlib/math-base-special-digamma';\nimport gammaln from '@stdlib/math-base-special-gammaln';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport ln from '@stdlib/math-base-special-ln';\n\n\n// MAIN //\n\n/**\n* Returns the differential entropy of an F distribution.\n*\n* @param {PositiveNumber} d1 - numerator degrees of freedom\n* @param {PositiveNumber} d2 - denominator degrees of freedom\n* @returns {number} entropy\n*\n* @example\n* var v = entropy( 3.0, 7.0 );\n* // returns ~1.298\n*\n* @example\n* var v = entropy( 4.0, 12.0 );\n* // returns ~1.12\n*\n* @example\n* var v = entropy( 8.0, 7.0 );\n* // returns ~1.193\n*\n* @example\n* var v = entropy( 1.0, -0.1 );\n* // returns NaN\n*\n* @example\n* var v = entropy( -0.1, 1.0 );\n* // returns NaN\n*\n* @example\n* var v = entropy( 2.0, NaN );\n* // returns NaN\n*\n* @example\n* var v = entropy( NaN, 2.0 );\n* // returns NaN\n*/\nfunction entropy( d1, d2 ) {\n\tvar half;\n\tvar hd1;\n\tvar hd2;\n\tvar out;\n\n\tif (\n\t\tisnan( d1 ) ||\n\t\tisnan( d2 ) ||\n\t\td1 <= 0.0 ||\n\t\td2 <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\thalf = ( d1 + d2 ) / 2.0;\n\thd1 = d1 / 2.0;\n\thd2 = d2 / 2.0;\n\tout = ln( d2 / d1 ) + gammaln( hd1 ) + gammaln( hd2 ) - gammaln( half );\n\tout += ( 1.0-hd1 ) * digamma( hd1 );\n\tout += ( -1.0-hd2 ) * digamma( hd2 );\n\tout += half * digamma( half );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default entropy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport pow from '@stdlib/math-base-special-pow';\n\n\n// MAIN //\n\n/**\n* Returns the excess kurtosis of an F distribution.\n*\n* @param {PositiveNumber} d1 - numerator degrees of freedom\n* @param {PositiveNumber} d2 - denominator degrees of freedom\n* @returns {PositiveNumber} kurtosis\n*\n* @example\n* var v = kurtosis( 3.0, 9.0 );\n* // returns ~124.667\n*\n* @example\n* var v = kurtosis( 4.0, 12.0 );\n* // returns ~26.143\n*\n* @example\n* var v = kurtosis( 8.0, 9.0 );\n* // returns ~100.167\n*\n* @example\n* var v = kurtosis( 1.0, 8.0 );\n* // returns NaN\n*\n* @example\n* var v = kurtosis( 1.0, -0.1 );\n* // returns NaN\n*\n* @example\n* var v = kurtosis( -0.1, 1.0 );\n* // returns NaN\n*\n* @example\n* var v = kurtosis( 2.0, NaN );\n* // returns NaN\n*\n* @example\n* var v = kurtosis( NaN, 2.0 );\n* // returns NaN\n*/\nfunction kurtosis( d1, d2 ) {\n\tvar denom;\n\tvar num;\n\n\tif ( d1 <= 0.0 || d2 <= 8.0 ) {\n\t\treturn NaN;\n\t}\n\tnum = ( d1 * ( ( 5.0*d2 ) - 22.0 ) * ( d1+d2-2.0 ) ) +\n\t\t( ( d2-4.0 ) * pow( d2-2.0, 2.0 ) );\n\tdenom = d1 * ( d2-6.0 ) * ( d2-8.0 ) * ( d1+d2-2.0 );\n\treturn 12.0 * num / denom;\n}\n\n\n// EXPORTS //\n\nexport default kurtosis;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns the expected value of an F distribution.\n*\n* @param {PositiveNumber} d1 - numerator degrees of freedom\n* @param {PositiveNumber} d2 - denominator degrees of freedom\n* @returns {PositiveNumber} expected value\n*\n* @example\n* var v = mean( 3.0, 5.0 );\n* // returns ~1.667\n*\n* @example\n* var v = mean( 4.0, 12.0 );\n* // returns ~1.2\n*\n* @example\n* var v = mean( 8.0, 4.0 );\n* // returns 2.0\n*\n* @example\n* var v = mean( 1.0, -0.1 );\n* // returns NaN\n*\n* @example\n* var v = mean( -0.1, 1.0 );\n* // returns NaN\n*\n* @example\n* var v = mean( 2.0, NaN );\n* // returns NaN\n*\n* @example\n* var v = mean( NaN, 2.0 );\n* // returns NaN\n*/\nfunction mean( d1, d2 ) {\n\tif (\n\t\tisnan( d1 ) ||\n\t\tisnan( d2 ) ||\n\t\td1 <= 0.0 ||\n\t\td2 <= 2.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn d2 / ( d2 - 2.0 );\n}\n\n\n// EXPORTS //\n\nexport default mean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns the mode of an F distribution.\n*\n* @param {PositiveNumber} d1 - numerator degrees of freedom\n* @param {PositiveNumber} d2 - denominator degrees of freedom\n* @returns {PositiveNumber} mode\n*\n* @example\n* var v = mode( 3.0, 5.0 );\n* // returns ~0.238\n*\n* @example\n* var v = mode( 4.0, 12.0 );\n* // returns ~0.429\n*\n* @example\n* var v = mode( 8.0, 4.0 );\n* // returns 0.5\n*\n* @example\n* var v = mode( 3.0, -0.1 );\n* // returns NaN\n*\n* @example\n* var v = mode( -0.1, 1.0 );\n* // returns NaN\n*\n* @example\n* var v = mode( 3.0, NaN );\n* // returns NaN\n*\n* @example\n* var v = mode( NaN, 2.0 );\n* // returns NaN\n*/\nfunction mode( d1, d2 ) {\n\tif ( d1 <= 2.0 || d2 <= 0.0 ) {\n\t\treturn NaN;\n\t}\n\treturn ( ( d1-2.0 ) / d1 ) * ( d2 / ( d2+2.0 ) );\n}\n\n\n// EXPORTS //\n\nexport default mode;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport sqrt from '@stdlib/math-base-special-sqrt';\n\n\n// MAIN //\n\n/**\n* Returns the skewness of an F distribution.\n*\n* @param {PositiveNumber} d1 - numerator degrees of freedom\n* @param {PositiveNumber} d2 - denominator degrees of freedom\n* @returns {PositiveNumber} skewness\n*\n* @example\n* var v = skewness( 3.0, 7.0 );\n* // returns 11.0\n*\n* @example\n* var v = skewness( 4.0, 12.0 );\n* // returns ~3.207\n*\n* @example\n* var v = skewness( 8.0, 7.0 );\n* // returns ~10.088\n*\n* @example\n* var v = skewness( 1.0, 4.0 );\n* // returns NaN\n*\n* @example\n* var v = skewness( 1.0, -0.1 );\n* // returns NaN\n*\n* @example\n* var v = skewness( -0.1, 1.0 );\n* // returns NaN\n*\n* @example\n* var v = skewness( 2.0, NaN );\n* // returns NaN\n*\n* @example\n* var v = skewness( NaN, 2.0 );\n* // returns NaN\n*/\nfunction skewness( d1, d2 ) {\n\tvar out;\n\tif ( d1 <= 0.0 || d2 <= 6.0 ) {\n\t\treturn NaN;\n\t}\n\tout = ( ( 2.0*d1 ) + d2 - 2.0 ) * sqrt( 8.0 * ( d2-4.0 ) );\n\tout /= ( d2-6.0 ) * sqrt( d1 * ( d1+d2-2.0 ) );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default skewness;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport SQRT2 from '@stdlib/constants-float64-sqrt-two';\n\n\n// MAIN //\n\n/**\n* Returns the standard deviation of an F distribution.\n*\n* @param {PositiveNumber} d1 - numerator degrees of freedom\n* @param {PositiveNumber} d2 - denominator degrees of freedom\n* @returns {PositiveNumber} standard deviation\n*\n* @example\n* var v = stdev( 3.0, 5.0 );\n* // returns ~3.333\n*\n* @example\n* var v = stdev( 4.0, 12.0 );\n* // returns ~1.122\n*\n* @example\n* var v = stdev( 8.0, 5.0 );\n* // returns ~2.764\n*\n* @example\n* var v = stdev( 1.0, 4.0 );\n* // returns NaN\n*\n* @example\n* var v = stdev( 1.0, -0.1 );\n* // returns NaN\n*\n* @example\n* var v = stdev( -0.1, 1.0 );\n* // returns NaN\n*\n* @example\n* var v = stdev( 2.0, NaN );\n* // returns NaN\n*\n* @example\n* var v = stdev( NaN, 2.0 );\n* // returns NaN\n*/\nfunction stdev( d1, d2 ) {\n\tvar out;\n\tif ( d1 <= 0.0 || d2 <= 4.0 ) {\n\t\treturn NaN;\n\t}\n\tout = SQRT2 * ( d2 / ( d2-2.0 ) );\n\tout *= sqrt( ( d1+d2-2.0 ) / ( d1*(d2-4.0) ) );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default stdev;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport pow from '@stdlib/math-base-special-pow';\n\n\n// MAIN //\n\n/**\n* Returns the variance of an F distribution.\n*\n* @param {PositiveNumber} d1 - numerator degrees of freedom\n* @param {PositiveNumber} d2 - denominator degrees of freedom\n* @returns {PositiveNumber} variance\n*\n* @example\n* var v = variance( 3.0, 5.0 );\n* // returns ~11.111\n*\n* @example\n* var v = variance( 4.0, 12.0 );\n* // returns ~1.26\n*\n* @example\n* var v = variance( 8.0, 5.0 );\n* // returns ~7.639\n*\n* @example\n* var v = variance( 1.0, 4.0 );\n* // returns NaN\n*\n* @example\n* var v = variance( 1.0, -0.1 );\n* // returns NaN\n*\n* @example\n* var v = variance( -0.1, 1.0 );\n* // returns NaN\n*\n* @example\n* var v = variance( 2.0, NaN );\n* // returns NaN\n*\n* @example\n* var v = variance( NaN, 2.0 );\n* // returns NaN\n*/\nfunction variance( d1, d2 ) {\n\tvar out;\n\tif ( d1 <= 0.0 || d2 <= 4.0 ) {\n\t\treturn NaN;\n\t}\n\tout = 2.0 * d2 * d2 * ( d1 + d2 - 2.0 );\n\tout /= d1 * pow( d2 - 2.0, 2.0 ) * ( d2 - 4.0 );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default variance;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport ibetaPowerTerms from './ibeta_power_terms.js';\n\n\n// MAIN //\n\n/**\n* Computes the partial derivative with respect to x of the incomplete beta function.\n*\n* @private\n* @param {Probability} x - input value (not equal to 0.0 or 1.0)\n* @param {PositiveNumber} a - first parameter\n* @param {PositiveNumber} b - second parameter\n* @returns {number} value of the partial derivative\n*/\nfunction ibetaDerivative( x, a, b ) {\n\tvar f1;\n\tvar y;\n\n\tf1 = ibetaPowerTerms( a, b, x, 1.0 - x, true );\n\ty = ( 1.0 - x ) * x;\n\tf1 /= y;\n\treturn f1;\n}\n\n\n// EXPORTS //\n\nexport default ibetaDerivative;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_62_0/boost/math/special_functions/beta.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport lanczosSumExpGScaled from '@stdlib/math-base-special-gamma-lanczos-sum-expg-scaled';\nimport expm1 from '@stdlib/math-base-special-expm1';\nimport log1p from '@stdlib/math-base-special-log1p';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport abs from '@stdlib/math-base-special-abs';\nimport exp from '@stdlib/math-base-special-exp';\nimport pow from '@stdlib/math-base-special-pow';\nimport max from '@stdlib/math-base-special-max';\nimport min from '@stdlib/math-base-special-min';\nimport ln from '@stdlib/math-base-special-ln';\nimport MAX_LN from '@stdlib/constants-float64-max-ln';\nimport MIN_LN from '@stdlib/constants-float64-min-ln';\nimport G from '@stdlib/constants-float64-gamma-lanczos-g';\nimport E from '@stdlib/constants-float64-e';\n\n\n// MAIN //\n\n/**\n* Computes the leading power terms in the incomplete beta function.\n*\n* When normalized,\n*\n* ```tex\n* \\frac{ x^a y^b }{ \\operatorname{Beta}(a,b) }\n* ```\n*\n* and otherwise\n*\n* ```tex\n* x^a y^b\n* ```\n*\n* ## Notes\n*\n* -   Almost all of the error in the incomplete beta comes from this function, particularly when \\\\( a \\\\) and \\\\( b \\\\) are large. Computing large powers are _hard_ though, and using logarithms just leads to horrendous cancellation errors.\n*\n* -   For \\\\( l1 * l2 > 0 \\\\) or \\\\( \\operatorname{min}( a, b ) < 1 \\\\), the two power terms both go in the same direction (towards zero or towards infinity). In this case if either term overflows or underflows, then the product of the two must do so also. Alternatively, if one exponent is less than one, then we can't productively use it to eliminate overflow or underflow from the other term.  Problems with spurious overflow/underflow can't be ruled out in this case, but it is _very_ unlikely since one of the power terms will evaluate to a number close to 1.\n*\n* -   If \\\\( \\max( \\abs(l1), \\abs(l2) ) < 0.5 \\\\), both exponents are near one and both the exponents are greater than one, and, further, these two power terms tend in opposite directions (one toward zero, the other toward infinity), so we have to combine the terms to avoid any risk of overflow or underflow. We do this by moving one power term inside the other, we have:\n*\n*     ```tex\n*     (1 + l_1)^a \\cdot (1 + l_2)^b \\\\\n*     = ((1 + l_1) \\cdot (1 + l_2)^(b/a))^a \\\\\n*     = (1 + l_1 + l_3 + l_1*l_3)^a\n*     ```\n*\n*     and\n*\n*     ```tex\n*     l_3 = (1 + l_2)^(b/a) - 1 \\\\\n*     = \\exp((b/a) * \\ln(1 + l_2)) - 1\n*     ```\n*\n*     The tricky bit is deciding which term to move inside. By preference we move the larger term inside, so that the size of the largest exponent is reduced.  However, that can only be done as long as l3 (see above) is also small.\n*\n* @private\n* @param {NonNegativeNumber} a - function parameter\n* @param {NonNegativeNumber} b - function parameter\n* @param {Probability} x - function parameter\n* @param {Probability} y - probability equal to `1-x`\n* @param {boolean} normalized - boolean indicating whether to evaluate the power terms of the regularized or non-regularized incomplete beta function\n* @returns {number} power terms\n*/\nfunction ibetaPowerTerms( a, b, x, y, normalized ) {\n\tvar result;\n\tvar smallA;\n\tvar ratio;\n\tvar agh;\n\tvar bgh;\n\tvar cgh;\n\tvar l1;\n\tvar l2;\n\tvar l3;\n\tvar p1;\n\tvar b1;\n\tvar b2;\n\tvar c;\n\tvar l;\n\n\tif ( !normalized ) {\n\t\t// Can we do better here?\n\t\treturn pow( x, a ) * pow( y, b );\n\t}\n\tc = a + b;\n\n\t// Combine power terms with Lanczos approximation:\n\tagh = a + G - 0.5;\n\tbgh = b + G - 0.5;\n\tcgh = c + G - 0.5;\n\tresult = lanczosSumExpGScaled( c );\n\tresult /= lanczosSumExpGScaled( a ) * lanczosSumExpGScaled( b );\n\n\t// Combine with the leftover terms from the Lanczos approximation:\n\tresult *= sqrt( bgh / E );\n\tresult *= sqrt( agh / cgh );\n\n\t// `l1` and `l2` are the base of the exponents minus one:\n\tl1 = ( ( x * b ) - ( y * agh ) ) / agh;\n\tl2 = ( ( y * a ) - ( x * bgh ) ) / bgh;\n\tif ( min( abs(l1), abs(l2) ) < 0.2 ) {\n\t\t// When the base of the exponent is very near 1 we get really gross errors unless extra care is taken:\n\t\tif ( l1 * l2 > 0 || min( a, b ) < 1 ) {\n\t\t\tif ( abs(l1) < 0.1 ) {\n\t\t\t\tresult *= exp( a * log1p( l1 ) );\n\t\t\t} else {\n\t\t\t\tresult *= pow( ( x*cgh ) / agh, a );\n\t\t\t}\n\t\t\tif ( abs(l2) < 0.1 ) {\n\t\t\t\tresult *= exp( b * log1p( l2 ) );\n\t\t\t} else {\n\t\t\t\tresult *= pow((y * cgh) / bgh, b);\n\t\t\t}\n\t\t}\n\t\telse if ( max( abs(l1), abs(l2) ) < 0.5 ) {\n\t\t\tsmallA = a < b;\n\t\t\tratio = b / a;\n\t\t\tif (\n\t\t\t\t(smallA && (ratio * l2 < 0.1)) ||\n\t\t\t\t(!smallA && (l1 / ratio > 0.1))\n\t\t\t) {\n\t\t\t\tl3 = expm1( ratio * log1p( l2 ) );\n\t\t\t\tl3 = l1 + l3 + ( l3 * l1 );\n\t\t\t\tl3 = a * log1p( l3 );\n\t\t\t\tresult *= exp( l3 );\n\t\t\t}\n\t\t\telse {\n\t\t\t\tl3 = expm1( log1p( l1 ) / ratio );\n\t\t\t\tl3 = l2 + l3 + ( l3 * l2 );\n\t\t\t\tl3 = b * log1p( l3 );\n\t\t\t\tresult *= exp( l3 );\n\t\t\t}\n\t\t}\n\t\telse if ( abs(l1) < abs(l2) ) {\n\t\t\t// First base near 1 only:\n\t\t\tl = ( a * log1p( l1 ) ) + ( b * ln( ( y*cgh ) / bgh ) );\n\t\t\tif ( l <= MIN_LN || l >= MAX_LN ) {\n\t\t\t\tl += ln(result);\n\t\t\t\tif ( l >= MAX_LN ) {\n\t\t\t\t\treturn NaN;\n\t\t\t\t}\n\t\t\t\tresult = exp( l );\n\t\t\t} else {\n\t\t\t\tresult *= exp( l );\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t// Second base near 1 only:\n\t\t\tl = ( b * log1p( l2 ) ) + ( a * ln( (x*cgh) / agh ) );\n\t\t\tif ( l <= MIN_LN || l >= MAX_LN ) {\n\t\t\t\tl += ln(result);\n\t\t\t\tif ( l >= MAX_LN ) {\n\t\t\t\t\treturn NaN;\n\t\t\t\t}\n\t\t\t\tresult = exp( l );\n\t\t\t} else {\n\t\t\t\tresult *= exp( l );\n\t\t\t}\n\t\t}\n\t}\n\telse {\n\t\t// General case:\n\t\tb1 = (x * cgh) / agh;\n\t\tb2 = (y * cgh) / bgh;\n\t\tl1 = a * ln(b1);\n\t\tl2 = b * ln(b2);\n\t\tif (\n\t\t\tl1 >= MAX_LN ||\n\t\t\tl1 <= MIN_LN ||\n\t\t\tl2 >= MAX_LN ||\n\t\t\tl2 <= MIN_LN\n\t\t) {\n\t\t\t// Oops, under/overflow, sidestep if we can:\n\t\t\tif ( a < b ) {\n\t\t\t\tp1 = pow( b2, b / a );\n\t\t\t\tl3 = a * ( ln(b1) + ln(p1) );\n\t\t\t\tif ( l3 < MAX_LN && l3 > MIN_LN ) {\n\t\t\t\t\tresult *= pow( p1 * b1, a );\n\t\t\t\t} else {\n\t\t\t\t\tl2 += l1 + ln(result);\n\t\t\t\t\tif ( l2 >= MAX_LN ) {\n\t\t\t\t\t\treturn NaN;\n\t\t\t\t\t}\n\t\t\t\t\tresult = exp( l2 );\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tp1 = pow( b1, a / b );\n\t\t\t\tl3 = ( ln(p1) + ln(b2) ) * b;\n\t\t\t\tif ( l3 < MAX_LN && l3 > MIN_LN ) {\n\t\t\t\t\tresult *= pow( p1 * b2, b );\n\t\t\t\t} else {\n\t\t\t\t\tl2 += l1 + ln( result );\n\t\t\t\t\tif (l2 >= MAX_LN) {\n\t\t\t\t\t\treturn NaN;\n\t\t\t\t\t}\n\t\t\t\t\tresult = exp( l2 );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t// Finally the normal case:\n\t\t\tresult *= pow( b1, a ) * pow( b2, b );\n\t\t}\n\t}\n\treturn result;\n}\n\n\n// EXPORTS //\n\nexport default ibetaPowerTerms;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport ibetaDerivative from './ibeta_derivative.js';\n\n\n// MAIN //\n\n/**\n* Evaluates the probability density function (PDF) for an F distribution with numerator degrees of freedom `d1` and denominator degrees of freedom `d2` at a value `x`.\n*\n* @param {number} x - input value\n* @param {PositiveNumber} d1 - numerator degrees of freedom\n* @param {PositiveNumber} d2 - denominator degrees of freedom\n* @returns {number} evaluated PDF\n*\n* @example\n* var y = pdf( 2.0, 0.5, 1.0 );\n* // returns ~0.057\n*\n* @example\n* var y = pdf( 0.1, 1.0, 1.0 );\n* // returns ~0.915\n*\n* @example\n* var y = pdf( -1.0, 4.0, 2.0 );\n* // returns 0.0\n*\n* @example\n* var y = pdf( NaN, 1.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = pdf( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = pdf( 0.0, 1.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = pdf( 2.0, 1.0, -1.0 );\n* // returns NaN\n*\n* @example\n* var y = pdf( 2.0, -1.0, 1.0 );\n* // returns NaN\n*/\nfunction pdf( x, d1, d2 ) {\n\tvar v1x;\n\tvar y;\n\tvar z;\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( d1 ) ||\n\t\tisnan( d2 ) ||\n\t\td1 <= 0.0 ||\n\t\td2 <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x < 0.0 || x === PINF ) {\n\t\treturn 0.0;\n\t}\n\tif ( x === 0.0 ) {\n\t\tif ( d1 < 2.0 ) {\n\t\t\treturn PINF;\n\t\t}\n\t\tif ( d1 === 2.0 ) {\n\t\t\treturn 1.0;\n\t\t}\n\t\treturn 0.0;\n\t}\n\tv1x = d1 * x;\n\tif ( v1x > d2 ) {\n\t\ty = ( d2 * d1 ) / ( ( d2 + v1x ) * ( d2 + v1x ) );\n\t\treturn y * ibetaDerivative( d2 / ( d2+v1x ), d2/2.0, d1/2.0 );\n\t}\n\tz = d2 + v1x;\n\ty = ((z * d1) - (x * d1 * d1)) / ( z * z );\n\treturn y * ibetaDerivative( v1x / ( d2+v1x ), d1/2.0, d2/2.0 );\n}\n\n\n// EXPORTS //\n\nexport default pdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport kernelBetaincinv from '@stdlib/math-base-special-kernel-betaincinv';\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Evaluates the quantile function for an F distribution with numerator degrees of freedom `d1` and denominator degrees of freedom `d2` at a probability `p`.\n*\n* @param {Probability} p - input value\n* @param {PositiveNumber} d1 - numerator degrees of freedom\n* @param {PositiveNumber} d2 - denominator degrees of freedom\n* @returns {number} evaluated quantile function\n*\n* @example\n* var y = quantile( 0.8, 1.0, 1.0 );\n* // returns ~9.472\n*\n* @example\n* var y = quantile( 0.5, 4.0, 2.0 );\n* // returns ~1.207\n*\n* @example\n* var y = quantile( 1.1, 1.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( -0.2, 1.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( NaN, 1.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.5, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.5, 1.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.5, -1.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.5, 1.0, -1.0 );\n* // returns NaN\n*/\nfunction quantile( p, d1, d2 ) {\n\tvar xs;\n\tif (\n\t\tisnan( p ) ||\n\t\tisnan( d1 ) ||\n\t\tisnan( d2 ) ||\n\t\td1 <= 0.0 ||\n\t\td2 <= 0.0 ||\n\t\tp < 0.0 ||\n\t\tp > 1.0\n\t) {\n\t\treturn NaN;\n\t}\n\txs = kernelBetaincinv( d1/2.0, d2/2.0, p, 1.0 - p );\n\treturn d2 * xs[ 0 ] / ( d1 * xs[ 1 ] );\n}\n\n\n// EXPORTS //\n\nexport default quantile;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nimport defineProperty from '@stdlib/utils-define-property';\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport setReadOnlyAccessor from '@stdlib/utils-define-nonenumerable-read-only-accessor';\nimport { isPrimitive as isPositive } from '@stdlib/assert-is-positive-number';\nimport entropy from '@stdlib/stats-base-dists-f-entropy';\nimport kurtosis from '@stdlib/stats-base-dists-f-kurtosis';\nimport mean from '@stdlib/stats-base-dists-f-mean';\nimport mode from '@stdlib/stats-base-dists-f-mode';\nimport skewness from '@stdlib/stats-base-dists-f-skewness';\nimport stdev from '@stdlib/stats-base-dists-f-stdev';\nimport variance from '@stdlib/stats-base-dists-f-variance';\nimport cdf from '@stdlib/stats-base-dists-f-cdf';\nimport pdf from '@stdlib/stats-base-dists-f-pdf';\nimport quantile from '@stdlib/stats-base-dists-f-quantile';\nimport format from '@stdlib/string-format';\n\n\n// FUNCTIONS //\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n*/\nfunction fCDF( x ) {\n\treturn cdf( x, this.d1, this.d2 );\n}\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n*/\nfunction fPDF( x ) {\n\treturn pdf( x, this.d1, this.d2 );\n}\n\n/**\n* Evaluates the quantile function.\n*\n* @private\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n*/\nfunction fQuantile( p ) {\n\treturn quantile( p, this.d1, this.d2 );\n}\n\n\n// MAIN //\n\n/**\n* F distribution constructor.\n*\n* @constructor\n* @param {PositiveNumber} [d1=1.0] - numerator degrees of freedom\n* @param {PositiveNumber} [d2=1.0] - denominator degrees of freedom\n* @throws {TypeError} `d1` must be a positive number\n* @throws {TypeError} `d2` must be a positive number\n* @returns {F} distribution instance\n*\n* @example\n* var f = new F( 1.0, 1.0 );\n*\n* var y = f.cdf( 0.8 );\n* // returns ~0.465\n*\n* var v = f.mode;\n* // returns NaN\n*/\nfunction F() {\n\tvar d1;\n\tvar d2;\n\tif ( !(this instanceof F) ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn new F();\n\t\t}\n\t\treturn new F( arguments[ 0 ], arguments[ 1 ] );\n\t}\n\tif ( arguments.length ) {\n\t\td1 = arguments[ 0 ];\n\t\td2 = arguments[ 1 ];\n\t\tif ( !isPositive( d1 ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Numerator degrees of freedom must be a positive number. Value: `%s`.', d1 ) );\n\t\t}\n\t\tif ( !isPositive( d2 ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Denominator degrees of freedom must be a positive number. Value: `%s`.', d2 ) );\n\t\t}\n\t} else {\n\t\td1 = 1.0;\n\t\td2 = 1.0;\n\t}\n\tdefineProperty( this, 'd1', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn d1;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isPositive( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid assignment. Must be a positive number. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\td1 = value;\n\t\t}\n\t});\n\tdefineProperty( this, 'd2', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn d2;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isPositive( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid assignment. Must be a positive number. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\td2 = value;\n\t\t}\n\t});\n\treturn this;\n}\n\n/**\n* F distribution differential entropy.\n*\n* @name entropy\n* @memberof F.prototype\n* @type {number}\n* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}\n*\n* @example\n* var f = new F( 4.0, 12.0 );\n*\n* var v = f.entropy;\n* // returns ~1.12\n*/\nsetReadOnlyAccessor( F.prototype, 'entropy', function get() {\n\treturn entropy( this.d1, this.d2 );\n});\n\n/**\n* F distribution excess kurtosis.\n*\n* @name kurtosis\n* @memberof F.prototype\n* @type {number}\n* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}\n*\n* @example\n* var f = new F( 4.0, 12.0 );\n*\n* var v = f.kurtosis;\n* // returns ~26.143\n*/\nsetReadOnlyAccessor( F.prototype, 'kurtosis', function get() {\n\treturn kurtosis( this.d1, this.d2 );\n});\n\n/**\n* F distribution expected value.\n*\n* @name mean\n* @memberof F.prototype\n* @type {number}\n* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}\n*\n* @example\n* var f = new F( 4.0, 12.0 );\n*\n* var v = f.mean;\n* // returns 1.2\n*/\nsetReadOnlyAccessor( F.prototype, 'mean', function get() {\n\treturn mean( this.d1, this.d2 );\n});\n\n/**\n* F distribution mode.\n*\n* @name mode\n* @memberof F.prototype\n* @type {number}\n* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}\n*\n* @example\n* var f = new F( 4.0, 12.0 );\n*\n* var v = f.mode;\n* // returns ~0.429\n*/\nsetReadOnlyAccessor( F.prototype, 'mode', function get() {\n\treturn mode( this.d1, this.d2 );\n});\n\n/**\n* F distribution skewness.\n*\n* @name skewness\n* @memberof F.prototype\n* @type {number}\n* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}\n*\n* @example\n* var f = new F( 4.0, 12.0 );\n*\n* var v = f.skewness;\n* // returns ~3.207\n*/\nsetReadOnlyAccessor( F.prototype, 'skewness', function get() {\n\treturn skewness( this.d1, this.d2 );\n});\n\n/**\n* F distribution standard deviation.\n*\n* @name stdev\n* @memberof F.prototype\n* @type {PositiveNumber}\n* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}\n*\n* @example\n* var f = new F( 4.0, 12.0 );\n*\n* var v = f.stdev;\n* // returns ~1.122\n*/\nsetReadOnlyAccessor( F.prototype, 'stdev', function get() {\n\treturn stdev( this.d1, this.d2 );\n});\n\n/**\n* F distribution variance.\n*\n* @name variance\n* @memberof F.prototype\n* @type {PositiveNumber}\n* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}\n*\n* @example\n* var f = new F( 4.0, 12.0 );\n*\n* var v = f.variance;\n* // returns 1.26\n*/\nsetReadOnlyAccessor( F.prototype, 'variance', function get() {\n\treturn variance( this.d1, this.d2 );\n});\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @name cdf\n* @memberof F.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var f = new F( 2.0, 4.0 );\n*\n* var v = f.cdf( 0.5 );\n* // returns ~0.36\n*/\nsetReadOnly( F.prototype, 'cdf', fCDF );\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @name pdf\n* @memberof F.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var f = new F( 2.0, 4.0 );\n*\n* var v = f.pdf( 2.0 );\n* // returns ~0.125\n*/\nsetReadOnly( F.prototype, 'pdf', fPDF );\n\n/**\n* Evaluates the quantile function.\n*\n* @name quantile\n* @memberof F.prototype\n* @type {Function}\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}\n*\n* @example\n* var f = new F( 2.0, 4.0 );\n*\n* var v = f.quantile( 0.5 );\n* // returns ~0.828\n*/\nsetReadOnly( F.prototype, 'quantile', fQuantile );\n\n\n// EXPORTS //\n\nexport default F;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate the cumulative distribution function (CDF) for an F distribution.\n*\n* @module @stdlib/stats-base-dists-f-cdf\n*\n* @example\n* import cdf from '@stdlib/stats-base-dists-f-cdf';\n*\n* var y = cdf( 2.0, 1.0, 1.0 );\n* // returns ~0.608\n*\n* y = cdf( 2.0, 8.0, 4.0 );\n* // returns ~0.737\n*\n* y = cdf( -1.0, 2.0, 2.0 );\n* // returns 0.0\n*\n* var mycdf = cdf.factory( 10.0, 2.0 );\n*\n* y = mycdf( 10.0 );\n* // returns ~0.906\n*\n* y = mycdf( 8.0 );\n* // returns ~0.884\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport cdf from './cdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( cdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport betainc from '@stdlib/math-base-special-betainc';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the cumulative distribution function (CDF) for an F distribution with numerator degrees of freedom `d1` and denominator degrees of freedom `d2`.\n*\n* @param {PositiveNumber} d1 - numerator degrees of freedom\n* @param {PositiveNumber} d2 - denominator degrees of freedom\n* @returns {Function} CDF\n*\n* @example\n* var cdf = factory( 10.0, 2.0 );\n*\n* var y = cdf( 10.0 );\n* // returns ~0.906\n*\n* y = cdf( 8.0 );\n* // returns ~0.884\n*/\nfunction factory( d1, d2 ) {\n\tif (\n\t\tisnan( d1 ) ||\n\t\tisnan( d2 ) ||\n\t\td1 <= 0.0 ||\n\t\td2 <= 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn cdf;\n\n\t/**\n\t* Evaluates the cumulative distribution function (CDF) for an F distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated CDF\n\t*\n\t* @example\n\t* var y = cdf( 10.0 );\n\t* // returns <number>\n\t*/\n\tfunction cdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x <= 0.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\tif ( x === PINF ) {\n\t\t\treturn 1.0;\n\t\t}\n\t\tif ( d1 * x > d2 ) {\n\t\t\treturn betainc( (d1*x)/(d2+(d1*x)), d1/2.0, d2/2.0, true, false );\n\t\t}\n\t\treturn betainc( d2/(d2+(d1*x)), d2/2.0, d1/2.0, true, true );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate the probability density function (PDF) for an F distribution.\n*\n* @module @stdlib/stats-base-dists-f-pdf\n*\n* @example\n* import pdf from '@stdlib/stats-base-dists-f-pdf';\n*\n* var y = pdf( 2.0, 0.5, 1.0 );\n* // returns ~0.057\n*\n* y = pdf( 0.1, 1.0, 1.0 );\n* // returns ~0.915\n*\n* var mypdf = pdf.factory( 6.0, 7.0 );\n* y = mypdf( 7.0 );\n* // returns ~0.004\n*\n* y = mypdf( 2.0 );\n* // returns ~0.166\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport pdf from './pdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( pdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default pdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport ibetaDerivative from './ibeta_derivative.js';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the probability density function (PDF) for an F distribution with numerator degrees of freedom `d1` and denominator degrees of freedom `d2`.\n*\n* @param {PositiveNumber} d1 - numerator degrees of freedom\n* @param {PositiveNumber} d2 - denominator degrees of freedom\n* @returns {Function} PDF\n*\n* @example\n* var pdf = factory( 6.0, 7.0 );\n* var y = pdf( 7.0 );\n* // returns ~0.004\n*\n* y = pdf( 2.0 );\n* // returns ~0.166\n*/\nfunction factory( d1, d2 ) {\n\tvar zeroVal;\n\tvar d1by2;\n\tvar d2by2;\n\tvar d1d2;\n\tif (\n\t\tisnan( d1 ) ||\n\t\tisnan( d2 ) ||\n\t\td1 <= 0.0 ||\n\t\td2 <= 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\td1d2 = d1 * d2;\n\td1by2 = d1 / 2.0;\n\td2by2 = d2 / 2.0;\n\tzeroVal = 0.0;\n\tif ( d1 < 2.0 ) {\n\t\tzeroVal = PINF;\n\t}\n\telse if ( d1 === 2.0 ) {\n\t\tzeroVal = 1.0;\n\t}\n\treturn pdf;\n\n\t/**\n\t* Evaluates the probability density function (PDF) for an F distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {number} evaluated PDF\n\t*\n\t* @example\n\t* var y = pdf( 2.3 );\n\t* // returns <number>\n\t*/\n\tfunction pdf( x ) {\n\t\tvar v1x;\n\t\tvar y;\n\t\tvar z;\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x < 0.0 || x === PINF ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\tif ( x === 0.0 ) {\n\t\t\treturn zeroVal;\n\t\t}\n\t\tv1x = d1 * x;\n\t\tif ( v1x > d2 ) {\n\t\t\ty = d1d2 / ( ( d2 + v1x ) * ( d2 + v1x ) );\n\t\t\treturn y * ibetaDerivative( d2 / ( d2 + v1x ), d2by2, d1by2 );\n\t\t}\n\t\tz = d2 + v1x;\n\t\ty = ((z * d1) - (x * d1 * d1)) / ( z * z );\n\t\treturn y * ibetaDerivative( d1 * x / ( d2 + v1x ), d1by2, d2by2 );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate the quantile function for an F distribution.\n*\n* @module @stdlib/stats-base-dists-f-quantile\n*\n* @example\n* import quantile from '@stdlib/stats-base-dists-f-quantile';\n*\n* var y = quantile( 0.8, 1.0, 1.0 );\n* // returns ~9.472\n*\n* y = quantile( 0.5, 4.0, 2.0 );\n* // returns ~1.207\n*\n* var myquantile = quantile.factory( 10.0, 2.0 );\n*\n* y = myquantile( 0.2 );\n* // returns ~0.527\n*\n* y = myquantile( 0.8 );\n* // returns ~4.382\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport quantile from './quantile.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( quantile, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default quantile;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport kernelBetaincinv from '@stdlib/math-base-special-kernel-betaincinv';\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the quantile function for an F distribution with numerator degrees of freedom `d1` and denominator degrees of freedom `d2`.\n*\n* @param {PositiveNumber} d1 - numerator degrees of freedom\n* @param {PositiveNumber} d2 - denominator degrees of freedom\n* @returns {Function} quantile function\n*\n* @example\n* var quantile = factory( 10.0, 2.0 );\n* var y = quantile( 0.4 );\n* // returns ~0.994\n*\n* y = quantile( 0.8 );\n* // returns ~4.382\n*/\nfunction factory( d1, d2 ) {\n\tif (\n\t\tisnan( d1 ) ||\n\t\tisnan( d2 ) ||\n\t\td1 <= 0.0 ||\n\t\td2 <= 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn quantile;\n\n\t/**\n\t* Evaluates the quantile function for an F distribution.\n\t*\n\t* @private\n\t* @param {Probability} p - input value\n\t* @returns {number} evaluated quantile function\n\t*\n\t* @example\n\t* var y = quantile( 0.3 );\n\t* // returns <number>\n\t*/\n\tfunction quantile( p ) {\n\t\tvar xs;\n\t\tif ( isnan( p ) || p < 0.0 || p > 1.0 ) {\n\t\t\treturn NaN;\n\t\t}\n\t\txs = kernelBetaincinv( d1/2.0, d2/2.0, p, 1.0 - p );\n\t\treturn d2 * xs[ 0 ] / ( d1 * xs[ 1 ] );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace f\n*/\nvar f = {};\n\n/**\n* @name cdf\n* @memberof f\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/f/cdf}\n*/\nimport cdf from '@stdlib/stats-base-dists-f-cdf';\nsetReadOnly( f, 'cdf', cdf );\n\n/**\n* @name F\n* @memberof f\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/f/ctor}\n*/\nimport F from '@stdlib/stats-base-dists-f-ctor';\nsetReadOnly( f, 'F', F );\n\n/**\n* @name entropy\n* @memberof f\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/f/entropy}\n*/\nimport entropy from '@stdlib/stats-base-dists-f-entropy';\nsetReadOnly( f, 'entropy', entropy );\n\n/**\n* @name kurtosis\n* @memberof f\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/f/kurtosis}\n*/\nimport kurtosis from '@stdlib/stats-base-dists-f-kurtosis';\nsetReadOnly( f, 'kurtosis', kurtosis );\n\n/**\n* @name mean\n* @memberof f\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/f/mean}\n*/\nimport mean from '@stdlib/stats-base-dists-f-mean';\nsetReadOnly( f, 'mean', mean );\n\n/**\n* @name mode\n* @memberof f\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/f/mode}\n*/\nimport mode from '@stdlib/stats-base-dists-f-mode';\nsetReadOnly( f, 'mode', mode );\n\n/**\n* @name pdf\n* @memberof f\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/f/pdf}\n*/\nimport pdf from '@stdlib/stats-base-dists-f-pdf';\nsetReadOnly( f, 'pdf', pdf );\n\n/**\n* @name quantile\n* @memberof f\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/f/quantile}\n*/\nimport quantile from '@stdlib/stats-base-dists-f-quantile';\nsetReadOnly( f, 'quantile', quantile );\n\n/**\n* @name skewness\n* @memberof f\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/f/skewness}\n*/\nimport skewness from '@stdlib/stats-base-dists-f-skewness';\nsetReadOnly( f, 'skewness', skewness );\n\n/**\n* @name stdev\n* @memberof f\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/f/stdev}\n*/\nimport stdev from '@stdlib/stats-base-dists-f-stdev';\nsetReadOnly( f, 'stdev', stdev );\n\n/**\n* @name variance\n* @memberof f\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/f/variance}\n*/\nimport variance from '@stdlib/stats-base-dists-f-variance';\nsetReadOnly( f, 'variance', variance );\n\n\n// EXPORTS //\n\nexport default f;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport exp from '@stdlib/math-base-special-exp';\nimport pow from '@stdlib/math-base-special-pow';\n\n\n// MAIN //\n\n/**\n* Evaluates the cumulative distribution function (CDF) for a Fréchet distribution with shape `alpha`, scale `s`, and location `m` at a value `x`.\n*\n* @param {number} x - input value\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} s - scale parameter\n* @param {number} m - location parameter\n* @returns {Probability} evaluated CDF\n*\n* @example\n* var y = cdf( 10.0, 2.0, 3.0, 2.0 );\n* // returns ~0.869\n*\n* @example\n* var y = cdf( -0.2, 1.0, 3.0, -1.0 );\n* // returns ~0.024\n*\n* @example\n* var y = cdf( 1.5, 2.0, 1.0, 1.0 );\n* // returns ~0.018\n*\n* @example\n* var y = cdf( NaN, 2.0, 1.0, -1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, NaN, 1.0, -1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, 2.0, NaN, -1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, 2.0, 1.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, -1.0, 1.0, 0.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, 1.0, -1.0, 0.0 );\n* // returns NaN\n*/\nfunction cdf( x, alpha, s, m ) {\n\tvar z;\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( alpha ) ||\n\t\tisnan( s ) ||\n\t\tisnan( m ) ||\n\t\talpha <= 0.0 ||\n\t\ts <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x <= m ) {\n\t\treturn 0.0;\n\t}\n\tz = ( x - m ) / s;\n\treturn exp( -pow( z, -alpha ) );\n}\n\n\n// EXPORTS //\n\nexport default cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport ln from '@stdlib/math-base-special-ln';\nimport GAMMA from '@stdlib/constants-float64-eulergamma';\n\n\n// MAIN //\n\n/**\n* Returns the differential entropy for a Fréchet distribution with shape `alpha`, scale `s`, and location `m`.\n*\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} s - scale parameter\n* @param {number} m - location parameter\n* @returns {PositiveNumber} entropy\n*\n* @example\n* var y = entropy( 1.0, 1.0, 0.0 );\n* // returns ~2.154\n*\n* @example\n* var y = entropy( 5.0, 2.0, 0.0 );\n* // returns ~0.776\n*\n* @example\n* var y = entropy( NaN, 1.0, 0.0 );\n* // returns NaN\n*\n* @example\n* var y = entropy( 1.0, NaN, 0.0 );\n* // returns NaN\n*\n* @example\n* var y = entropy( 1.0, 1.0, NaN );\n* // returns NaN\n*/\nfunction entropy( alpha, s, m ) {\n\tif (\n\t\tisnan( alpha ) ||\n\t\tisnan( s ) ||\n\t\tisnan( m ) ||\n\t\talpha <= 0.0 ||\n\t\ts <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn 1.0 + ( GAMMA / alpha ) + GAMMA + ln( s / alpha );\n}\n\n\n// EXPORTS //\n\nexport default entropy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport gamma from '@stdlib/math-base-special-gamma';\nimport pow from '@stdlib/math-base-special-pow';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Returns the excess kurtosis for a Fréchet distribution with shape `alpha`, scale `s`, and location `m`.\n*\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} s - scale parameter\n* @param {number} m - location parameter\n* @returns {number} excess kurtosis\n*\n* @example\n* var y = kurtosis( 5.0, 2.0, 0.0 );\n* // returns ~45.092\n*\n* @example\n* var y = kurtosis( 5.0, 2.0, -5.0 );\n* // returns ~45.092\n*\n* @example\n* var y = kurtosis( 3.8, 1.0, 0.0 );\n* // returns Infinity\n*\n* @example\n* var y = kurtosis( NaN, 1.0, 0.0 );\n* // returns NaN\n*\n* @example\n* var y = kurtosis( 1.0, NaN, 0.0 );\n* // returns NaN\n*\n* @example\n* var y = kurtosis( 1.0, 1.0, NaN );\n* // returns NaN\n*/\nfunction kurtosis( alpha, s, m ) {\n\tvar out;\n\tvar g1;\n\tvar g2;\n\tvar g3;\n\tvar g4;\n\tif (\n\t\tisnan( alpha ) ||\n\t\tisnan( s ) ||\n\t\tisnan( m ) ||\n\t\talpha <= 0.0 ||\n\t\ts <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( alpha <= 4.0 ) {\n\t\t// Case: 0 < alpha <= 4\n\t\treturn PINF;\n\t}\n\tg1 = gamma( 1.0 - ( 1.0/alpha ) );\n\tg2 = gamma( 1.0 - ( 2.0/alpha ) );\n\tg3 = gamma( 1.0 - ( 3.0/alpha ) );\n\tg4 = gamma( 1.0 - ( 4.0/alpha ) );\n\tout = ( g4 - ( 4.0*g3*g1 ) + ( 3.0*g2*g2 ) ) / pow( g2 - ( g1*g1 ), 2.0 );\n\tout -= 6.0;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default kurtosis;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport gamma from '@stdlib/math-base-special-gamma';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Returns the expected value for a Fréchet distribution with shape `alpha`, scale `s`, and location `m`.\n*\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} s - scale parameter\n* @param {number} m - location parameter\n* @returns {number} mean\n*\n* @example\n* var y = mean( 5.0, 2.0, 0.0 );\n* // returns ~2.328\n*\n* @example\n* var y = mean( 5.0, 2.0, -4.0 );\n* // returns ~-1.672\n*\n* @example\n* var y = mean( 1.0, 1.0, 0.0 );\n* // returns Infinity\n*\n* @example\n* var y = mean( NaN, 1.0, 0.0 );\n* // returns NaN\n*\n* @example\n* var y = mean( 1.0, NaN, 0.0 );\n* // returns NaN\n*\n* @example\n* var y = mean( 1.0, 1.0, NaN );\n* // returns NaN\n*/\nfunction mean( alpha, s, m ) {\n\tif (\n\t\tisnan( alpha ) ||\n\t\tisnan( s ) ||\n\t\tisnan( m ) ||\n\t\talpha <= 0.0 ||\n\t\ts <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( alpha <= 1.0 ) {\n\t\t// Case: 0 < alpha <= 1\n\t\treturn PINF;\n\t}\n\treturn m + ( s * gamma( 1.0 - (1.0/alpha) ) );\n}\n\n\n// EXPORTS //\n\nexport default mean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport pow from '@stdlib/math-base-special-pow';\nimport LN2 from '@stdlib/constants-float64-ln-two';\n\n\n// MAIN //\n\n/**\n* Returns the median for a Fréchet distribution with shape `alpha`, scale `s`, and location `m`.\n*\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} s - scale parameter\n* @param {number} m - location parameter\n* @returns {number} median\n*\n* @example\n* var y = median( 5.0, 2.0, 0.0 );\n* // returns ~2.152\n*\n* @example\n* var y = median( 5.0, 2.0, -5.0 );\n* // returns ~-2.848\n*\n* @example\n* var y = median( 1.0, 1.0, 0.0 );\n* // returns ~1.443\n*\n* @example\n* var y = median( NaN, 1.0, 0.0 );\n* // returns NaN\n*\n* @example\n* var y = median( 1.0, NaN, 0.0 );\n* // returns NaN\n*\n* @example\n* var y = median( 1.0, 1.0, NaN );\n* // returns NaN\n*/\nfunction median( alpha, s, m ) {\n\tif (\n\t\tisnan( alpha ) ||\n\t\tisnan( s ) ||\n\t\tisnan( m ) ||\n\t\talpha <= 0.0 ||\n\t\ts <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn m + ( s * pow( LN2, -1.0/alpha ) );\n}\n\n\n// EXPORTS //\n\nexport default median;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport pow from '@stdlib/math-base-special-pow';\n\n\n// MAIN //\n\n/**\n* Returns the mode for a Fréchet distribution with shape `alpha`, scale `s`, and location `m`.\n*\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} s - scale parameter\n* @param {number} m - location parameter\n* @returns {number} mode\n*\n* @example\n* var y = mode( 5.0, 2.0, 0.0 );\n* // returns ~1.928\n*\n* @example\n* var y = mode( 5.0, 2.0, -5.0 );\n* // returns ~-3.072\n*\n* @example\n* var y = mode( 1.0, 1.0, 0.0 );\n* // returns ~0.5\n*\n* @example\n* var y = mode( NaN, 1.0, 0.0 );\n* // returns NaN\n*\n* @example\n* var y = mode( 1.0, NaN, 0.0 );\n* // returns NaN\n*\n* @example\n* var y = mode( 1.0, 1.0, NaN );\n* // returns NaN\n*/\nfunction mode( alpha, s, m ) {\n\tvar ainv;\n\tif (\n\t\tisnan( alpha ) ||\n\t\tisnan( s ) ||\n\t\tisnan( m ) ||\n\t\talpha <= 0.0 ||\n\t\ts <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tainv = 1.0 / alpha;\n\treturn m + ( s * pow( 1.0+ainv, -ainv ) );\n}\n\n\n// EXPORTS //\n\nexport default mode;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport gamma from '@stdlib/math-base-special-gamma';\nimport pow from '@stdlib/math-base-special-pow';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Returns the skewness for a Fréchet distribution with shape `alpha`, scale `s`, and location `m`.\n*\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} s - scale parameter\n* @param {number} m - location parameter\n* @returns {PositiveNumber} skewness\n*\n* @example\n* var y = skewness( 5.0, 2.0, 0.0 );\n* // returns ~3.535\n*\n* @example\n* var y = skewness( 5.0, 2.0, -5.0 );\n* // returns ~3.535\n*\n* @example\n* var y = skewness( 1.0, 1.0, 0.0 );\n* // returns Infinity\n*\n* @example\n* var y = skewness( NaN, 1.0, 0.0 );\n* // returns NaN\n*\n* @example\n* var y = skewness( 1.0, NaN, 0.0 );\n* // returns NaN\n*\n* @example\n* var y = skewness( 1.0, 1.0, NaN );\n* // returns NaN\n*/\nfunction skewness( alpha, s, m ) {\n\tvar g1s;\n\tvar g1;\n\tvar g2;\n\tvar g3;\n\tif (\n\t\tisnan( alpha ) ||\n\t\tisnan( s ) ||\n\t\tisnan( m ) ||\n\t\talpha <= 0.0 ||\n\t\ts <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( alpha <= 3.0 ) {\n\t\t// Case: 0 < alpha <= 3\n\t\treturn PINF;\n\t}\n\tg1 = gamma( 1.0 - ( 1.0/alpha ) );\n\tg1s = g1*g1;\n\tg2 = gamma( 1.0 - ( 2.0/alpha ) );\n\tg3 = gamma( 1.0 - ( 3.0/alpha ) );\n\treturn ( g3 - ( 3.0*g2*g1 ) + ( 2.0*g1s*g1 ) ) / pow( g2 - g1s, 1.5 );\n}\n\n\n// EXPORTS //\n\nexport default skewness;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport gamma from '@stdlib/math-base-special-gamma';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Returns the standard deviation for a Fréchet distribution with shape `alpha`, scale `s`, and location `m`.\n*\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} s - scale parameter\n* @param {number} m - location parameter\n* @returns {PositiveNumber} standard deviation\n*\n* @example\n* var y = stdev( 5.0, 2.0, 0.0 );\n* // returns ~0.731\n*\n* @example\n* var y = stdev( 5.0, 2.0, -5.0 );\n* // returns ~0.731\n*\n* @example\n* var y = stdev( 1.0, 1.0, 0.0 );\n* // returns Infinity\n*\n* @example\n* var y = stdev( NaN, 1.0, 0.0 );\n* // returns NaN\n*\n* @example\n* var y = stdev( 1.0, NaN, 0.0 );\n* // returns NaN\n*\n* @example\n* var y = stdev( 1.0, 1.0, NaN );\n* // returns NaN\n*/\nfunction stdev( alpha, s, m ) {\n\tvar g1;\n\tvar g2;\n\tif (\n\t\tisnan( alpha ) ||\n\t\tisnan( s ) ||\n\t\tisnan( m ) ||\n\t\talpha <= 0.0 ||\n\t\ts <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( alpha <= 2.0 ) {\n\t\t// Case: 0 < alpha <= 2\n\t\treturn PINF;\n\t}\n\tg1 = gamma( 1.0 - ( 1.0/alpha ) );\n\tg2 = gamma( 1.0 - ( 2.0/alpha ) );\n\treturn s * sqrt( g2 - ( g1*g1 ) );\n}\n\n\n// EXPORTS //\n\nexport default stdev;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport gamma from '@stdlib/math-base-special-gamma';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Returns the variance for a Fréchet distribution with shape `alpha`, scale `s`, and location `m`.\n*\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} s - scale parameter\n* @param {number} m - location parameter\n* @returns {PositiveNumber} variance\n*\n* @example\n* var y = variance( 5.0, 2.0, 0.0 );\n* // returns ~0.535\n*\n* @example\n* var y = variance( 5.0, 2.0, -5.0 );\n* // returns ~0.535\n*\n* @example\n* var y = variance( 1.0, 1.0, 0.0 );\n* // returns Infinity\n*\n* @example\n* var y = variance( NaN, 1.0, 0.0 );\n* // returns NaN\n*\n* @example\n* var y = variance( 1.0, NaN, 0.0 );\n* // returns NaN\n*\n* @example\n* var y = variance( 1.0, 1.0, NaN );\n* // returns NaN\n*/\nfunction variance( alpha, s, m ) {\n\tvar g1;\n\tvar g2;\n\tif (\n\t\tisnan( alpha ) ||\n\t\tisnan( s ) ||\n\t\tisnan( m ) ||\n\t\talpha <= 0.0 ||\n\t\ts <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( alpha <= 2.0 ) {\n\t\t// Case: 0 < alpha <= 2\n\t\treturn PINF;\n\t}\n\tg1 = gamma( 1.0 - ( 1.0/alpha ) );\n\tg2 = gamma( 1.0 - ( 2.0/alpha ) );\n\treturn ( s*s ) * ( g2 - ( g1*g1 ) );\n}\n\n\n// EXPORTS //\n\nexport default variance;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport pow from '@stdlib/math-base-special-pow';\nimport NINF from '@stdlib/constants-float64-ninf';\n\n\n// MAIN //\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (CDF) for a Fréchet distribution with shape `alpha`, scale `s`, and location `m` at a value `x`.\n*\n* @param {number} x - input value\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} s - scale parameter\n* @param {number} m - location parameter\n* @returns {number} evaluated logCDF\n*\n* @example\n* var y = logcdf( 10.0, 2.0, 3.0, 2.0 );\n* // returns ~-0.141\n*\n* @example\n* var y = logcdf( -2.5, 1.0, 3.0, -3.0 );\n* // returns -6.0\n*\n* @example\n* var y = logcdf( 0.0, 2.0, 1.0, -1.0 );\n* // returns -1.0\n*\n* @example\n* var y = logcdf( NaN, 2.0, 1.0, -1.0 );\n* // returns NaN\n*\n* @example\n* var y = logcdf( 0.0, NaN, 1.0, -1.0 );\n* // returns NaN\n*\n* @example\n* var y = logcdf( 0.0, 2.0, NaN, -1.0 );\n* // returns NaN\n*\n* @example\n* var y = logcdf( 0.0, 2.0, 1.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = logcdf( 0.0, -1.0, 1.0, 0.0 );\n* // returns NaN\n*\n* @example\n* var y = logcdf( 0.0, 1.0, -1.0, 0.0 );\n* // returns NaN\n*/\nfunction logcdf( x, alpha, s, m ) {\n\tvar z;\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( alpha ) ||\n\t\tisnan( s ) ||\n\t\tisnan( m ) ||\n\t\talpha <= 0.0 ||\n\t\ts <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x <= m ) {\n\t\treturn NINF;\n\t}\n\tz = ( x - m ) / s;\n\treturn -pow( z, -alpha );\n}\n\n\n// EXPORTS //\n\nexport default logcdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport pow from '@stdlib/math-base-special-pow';\nimport ln from '@stdlib/math-base-special-ln';\nimport NINF from '@stdlib/constants-float64-ninf';\n\n\n// MAIN //\n\n/**\n* Evaluates the logarithm of the probability density function (PDF) for a Fréchet distribution with shape `alpha`, scale `s`, and location `m` at a value `x`.\n*\n* @param {number} x - input value\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} s - scale parameter\n* @param {number} m - location parameter\n* @returns {number} evaluated logPDF\n*\n* @example\n* var y = logpdf( 10.0, 2.0, 3.0, 2.0 );\n* // returns ~-3.489\n*\n* @example\n* var y = logpdf( -2.0, 1.0, 3.0, -3.0 );\n* // returns ~-1.901\n*\n* @example\n* var y = logpdf( 0.0, 2.0, 1.0, 1.0 );\n* // returns -Infinity\n*\n* @example\n* var y = logpdf( NaN, 2.0, 1.0, -1.0 );\n* // returns NaN\n*\n* @example\n* var y = logpdf( 0.0, NaN, 1.0, -1.0 );\n* // returns NaN\n*\n* @example\n* var y = logpdf( 0.0, 2.0, NaN, -1.0 );\n* // returns NaN\n*\n* @example\n* var y = logpdf( 0.0, 2.0, 1.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = logpdf( 0.0, -1.0, 1.0, 0.0 );\n* // returns NaN\n*\n* @example\n* var y = logpdf( 0.0, 1.0, -1.0, 0.0 );\n* // returns NaN\n*/\nfunction logpdf( x, alpha, s, m ) {\n\tvar z;\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( alpha ) ||\n\t\tisnan( s ) ||\n\t\tisnan( m ) ||\n\t\talpha <= 0.0 ||\n\t\ts <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x <= m ) {\n\t\treturn NINF;\n\t}\n\tz = ( x - m ) / s;\n\treturn ln( alpha/s ) - ( ( 1.0+alpha ) * ln( z ) ) - pow( z, -alpha );\n}\n\n\n// EXPORTS //\n\nexport default logpdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport pow from '@stdlib/math-base-special-pow';\nimport ln from '@stdlib/math-base-special-ln';\nimport NINF from '@stdlib/constants-float64-ninf';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the logarithm of the probability density function (PDF) for a Fréchet distribution with shape `alpha`, scale `s`, and location `m`.\n*\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} s - scale parameter\n* @param {number} m - location parameter\n* @returns {Function} logPDF\n*\n* @example\n* var logpdf = factory( 3.0, 3.0, 5.0 );\n*\n* var y = logpdf( 10.0 );\n* // returns ~-2.259\n*\n* y = logpdf( 7.0 );\n* // returns ~-1.753\n*/\nfunction factory( alpha, s, m ) {\n\tif (\n\t\tisnan( alpha ) ||\n\t\tisnan( s ) ||\n\t\tisnan( m ) ||\n\t\talpha <= 0.0 ||\n\t\ts <= 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn logpdf;\n\n\t/**\n\t* Evaluates the logarithm of the probability density function (PDF) for a Fréchet distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {number} evaluated logPDF\n\t*\n\t* @example\n\t* var y = logpdf( -2.0 );\n\t* // returns <number>\n\t*/\n\tfunction logpdf( x ) {\n\t\tvar z;\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x <= m ) {\n\t\t\treturn NINF;\n\t\t}\n\t\tz = ( x - m ) / s;\n\t\treturn ln( alpha/s ) - ( ( 1.0+alpha ) * ln( z ) ) - pow( z, -alpha );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport logpdf from '@stdlib/stats-base-dists-frechet-logpdf';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport exp from '@stdlib/math-base-special-exp';\n\n\n// MAIN //\n\n/**\n* Evaluates the probability density function (PDF) for a Fréchet distribution with shape `alpha`, scale `s`, and location `m` at a value `x`.\n*\n* @param {number} x - input value\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} s - scale parameter\n* @param {number} m - location parameter\n* @returns {number} evaluated PDF\n*\n* @example\n* var y = pdf( 10.0, 2.0, 3.0, 2.0 );\n* // returns ~0.031\n*\n* @example\n* var y = pdf( -2.0, 1.0, 3.0, -1.0 );\n* // returns 0.0\n*\n* @example\n* var y = pdf( 0.0, 2.0, 1.0, 1.0 );\n* // returns 0.0\n*\n* @example\n* var y = pdf( NaN, 2.0, 1.0, -1.0 );\n* // returns NaN\n*\n* @example\n* var y = pdf( 0.0, NaN, 1.0, -1.0 );\n* // returns NaN\n*\n* @example\n* var y = pdf( 0.0, 2.0, NaN, -1.0 );\n* // returns NaN\n*\n* @example\n* var y = pdf( 0.0, 2.0, 1.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = pdf( 0.0, -1.0, 1.0, 0.0 );\n* // returns NaN\n*\n* @example\n* var y = pdf( 0.0, 1.0, -1.0, 0.0 );\n* // returns NaN\n*/\nfunction pdf( x, alpha, s, m ) {\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( alpha ) ||\n\t\tisnan( s ) ||\n\t\tisnan( m ) ||\n\t\talpha <= 0.0 ||\n\t\ts <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn exp( logpdf( x, alpha, s, m ) );\n}\n\n\n// EXPORTS //\n\nexport default pdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport pow from '@stdlib/math-base-special-pow';\nimport ln from '@stdlib/math-base-special-ln';\n\n\n// MAIN //\n\n/**\n* Evaluates the quantile function for a Fréchet distribution with shape `alpha`, scale `s`, and location `m` at a probability `p`.\n*\n* @param {number} p - input probability\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} s - scale parameter\n* @param {number} m - location parameter\n* @returns {number} evaluated quantile function\n*\n* @example\n* var y = quantile( 0.5, 2.0, 3.0, 2.0 );\n* // returns ~5.603\n*\n* @example\n* var y = quantile( 0.2, 1.0, 3.0, -1.0 );\n* // returns ~0.864\n*\n* @example\n* var y = quantile( 0.3, 2.0, 1.0, 1.0 );\n* // returns ~1.911\n*\n* @example\n* var y = quantile( NaN, 2.0, 1.0, -1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.1, NaN, 1.0, -1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.1, 2.0, NaN, -1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.1, 2.0, 1.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.1, -1.0, 1.0, 0.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.1, 1.0, -1.0, 0.0 );\n* // returns NaN\n*/\nfunction quantile( p, alpha, s, m ) {\n\tif (\n\t\tisnan( p ) ||\n\t\tisnan( alpha ) ||\n\t\tisnan( s ) ||\n\t\tisnan( m ) ||\n\t\tp < 0.0 ||\n\t\tp > 1.0 ||\n\t\talpha <= 0.0 ||\n\t\ts <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn m + ( s * ( pow( -ln( p ), -1.0/alpha ) ) );\n}\n\n\n// EXPORTS //\n\nexport default quantile;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nimport defineProperty from '@stdlib/utils-define-property';\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport setReadOnlyAccessor from '@stdlib/utils-define-nonenumerable-read-only-accessor';\nimport { isPrimitive as isPositive } from '@stdlib/assert-is-positive-number';\nimport { isPrimitive as isNumber } from '@stdlib/assert-is-number';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport entropy from '@stdlib/stats-base-dists-frechet-entropy';\nimport kurtosis from '@stdlib/stats-base-dists-frechet-kurtosis';\nimport mean from '@stdlib/stats-base-dists-frechet-mean';\nimport median from '@stdlib/stats-base-dists-frechet-median';\nimport mode from '@stdlib/stats-base-dists-frechet-mode';\nimport skewness from '@stdlib/stats-base-dists-frechet-skewness';\nimport stdev from '@stdlib/stats-base-dists-frechet-stdev';\nimport variance from '@stdlib/stats-base-dists-frechet-variance';\nimport cdf from '@stdlib/stats-base-dists-frechet-cdf';\nimport logcdf from '@stdlib/stats-base-dists-frechet-logcdf';\nimport logpdf from '@stdlib/stats-base-dists-frechet-logpdf';\nimport pdf from '@stdlib/stats-base-dists-frechet-pdf';\nimport quantile from '@stdlib/stats-base-dists-frechet-quantile';\nimport format from '@stdlib/string-format';\n\n\n// FUNCTIONS //\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {Probability} evaluated CDF\n*/\nfunction frechetCDF( x ) {\n\treturn cdf( x, this.alpha, this.s, this.m );\n}\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logCDF\n*/\nfunction frechetLogCDF( x ) {\n\treturn logcdf( x, this.alpha, this.s, this.m );\n}\n\n/**\n* Evaluates the natural logarithm of the probability density function (PDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n*/\nfunction frechetLogPDF( x ) {\n\treturn logpdf( x, this.alpha, this.s, this.m );\n}\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n*/\nfunction frechetPDF( x ) {\n\treturn pdf( x, this.alpha, this.s, this.m );\n}\n\n/**\n* Evaluates the quantile function.\n*\n* @private\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n*/\nfunction frechetQuantile( p ) {\n\treturn quantile( p, this.alpha, this.s, this.m );\n}\n\n\n// MAIN //\n\n/**\n* Fréchet distribution constructor.\n*\n* @constructor\n* @param {number} [alpha=0.0] - shape parameter\n* @param {number} [s=1.0] - scale parameter\n* @param {number} [m=0.0] - location parameter\n* @throws {TypeError} `alpha` must be a positive number\n* @throws {TypeError} `s` must be a positive number\n* @returns {Frechet} distribution instance\n*\n* @example\n* var frechet = new Frechet( 1.0, 1.0, 0.25 );\n*\n* var y = frechet.cdf( 0.8 );\n* // returns ~0.162\n*\n* var mu = frechet.mean;\n* // returns Infinity\n*/\nfunction Frechet() {\n\tvar alpha;\n\tvar s;\n\tvar m;\n\tif ( !(this instanceof Frechet) ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn new Frechet();\n\t\t}\n\t\treturn new Frechet( arguments[ 0 ], arguments[ 1 ], arguments[ 2 ] );\n\t}\n\tif ( arguments.length ) {\n\t\talpha = arguments[ 0 ];\n\t\ts = arguments[ 1 ];\n\t\tm = arguments[ 2 ];\n\t\tif ( !isPositive( alpha ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Shape parameter must be a positive number. Value: `%s`.', alpha ) );\n\t\t}\n\t\tif ( !isPositive( s ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Scale parameter must be a number. Value: `%s`.', s ) );\n\t\t}\n\t\tif ( !isNumber( m ) || isnan( m ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Location parameter must be a number. Value: `%s`.', m ) );\n\t\t}\n\t} else {\n\t\talpha = 1.0;\n\t\ts = 1.0;\n\t\tm = 0.0;\n\t}\n\tdefineProperty( this, 'alpha', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn alpha;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isPositive( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid assignment. Must be a positive number. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\talpha = value;\n\t\t}\n\t});\n\tdefineProperty( this, 's', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn s;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isPositive( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid assignment. Must be a positive number. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\ts = value;\n\t\t}\n\t});\n\tdefineProperty( this, 'm', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn m;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isNumber( value ) || isnan( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid assignment. Must be a number. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\tm = value;\n\t\t}\n\t});\n\treturn this;\n}\n\n/**\n* Fréchet distribution differential entropy.\n*\n* @name entropy\n* @memberof Frechet.prototype\n* @type {number}\n* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}\n*\n* @example\n* var frechet = new Frechet( 4.0, 12.0, 2.0 );\n*\n* var v = frechet.entropy;\n* // returns ~2.82\n*/\nsetReadOnlyAccessor( Frechet.prototype, 'entropy', function get() {\n\treturn entropy( this.alpha, this.s, this.m );\n});\n\n/**\n* Fréchet distribution excess kurtosis.\n*\n* @name kurtosis\n* @memberof Frechet.prototype\n* @type {number}\n* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}\n*\n* @example\n* var frechet = new Frechet( 4.0, 12.0, 2.0 );\n*\n* var v = frechet.kurtosis;\n* // returns Infinity\n*/\nsetReadOnlyAccessor( Frechet.prototype, 'kurtosis', function get() {\n\treturn kurtosis( this.alpha, this.s, this.m );\n});\n\n/**\n* Fréchet distribution expected value.\n*\n* @name mean\n* @memberof Frechet.prototype\n* @type {number}\n* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}\n*\n* @example\n* var frechet = new Frechet( 4.0, 12.0, 2.0 );\n*\n* var v = frechet.mean;\n* // returns ~16.705\n*/\nsetReadOnlyAccessor( Frechet.prototype, 'mean', function get() {\n\treturn mean( this.alpha, this.s, this.m );\n});\n\n/**\n* Fréchet distribution median.\n*\n* @name median\n* @memberof Frechet.prototype\n* @type {number}\n* @see [median]{@link https://en.wikipedia.org/wiki/Median}\n*\n* @example\n* var frechet = new Frechet( 4.0, 12.0, 2.0 );\n*\n* var v = frechet.median;\n* // returns ~15.151\n*/\nsetReadOnlyAccessor( Frechet.prototype, 'median', function get() {\n\treturn median( this.alpha, this.s, this.m );\n});\n\n/**\n* Fréchet distribution mode.\n*\n* @name mode\n* @memberof Frechet.prototype\n* @type {number}\n* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}\n*\n* @example\n* var frechet = new Frechet( 4.0, 12.0, 2.0 );\n*\n* var v = frechet.mode;\n* // returns ~13.349\n*/\nsetReadOnlyAccessor( Frechet.prototype, 'mode', function get() {\n\treturn mode( this.alpha, this.s, this.m );\n});\n\n/**\n* Fréchet distribution skewness.\n*\n* @name skewness\n* @memberof Frechet.prototype\n* @type {number}\n* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}\n*\n* @example\n* var frechet = new Frechet( 4.0, 12.0, 2.0 );\n*\n* var v = frechet.skewness;\n* // returns ~5.605\n*/\nsetReadOnlyAccessor( Frechet.prototype, 'skewness', function get() {\n\treturn skewness( this.alpha, this.s, this.m );\n});\n\n/**\n* Fréchet distribution standard deviation.\n*\n* @name stdev\n* @memberof Frechet.prototype\n* @type {PositiveNumber}\n* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}\n*\n* @example\n* var frechet = new Frechet( 4.0, 12.0, 2.0 );\n*\n* var v = frechet.stdev;\n* // returns ~6.245\n*/\nsetReadOnlyAccessor( Frechet.prototype, 'stdev', function get() {\n\treturn stdev( this.alpha, this.s, this.m );\n});\n\n/**\n* Fréchet distribution variance.\n*\n* @name variance\n* @memberof Frechet.prototype\n* @type {PositiveNumber}\n* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}\n*\n* @example\n* var frechet = new Frechet( 4.0, 12.0, 2.0 );\n*\n* var v = frechet.variance;\n* // returns ~38.996\n*/\nsetReadOnlyAccessor( Frechet.prototype, 'variance', function get() {\n\treturn variance( this.alpha, this.s, this.m );\n});\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @name cdf\n* @memberof Frechet.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var frechet = new Frechet( 2.0, 4.0, 3.0 );\n*\n* var v = frechet.cdf( 12.0 );\n* // returns ~0.821\n*/\nsetReadOnly( Frechet.prototype, 'cdf', frechetCDF );\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (CDF).\n*\n* @name logcdf\n* @memberof Frechet.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logCDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var frechet = new Frechet( 2.0, 4.0, 3.0 );\n*\n* var v = frechet.logcdf( 12.0 );\n* // returns ~-0.1975\n*/\nsetReadOnly( Frechet.prototype, 'logcdf', frechetLogCDF );\n\n/**\n* Evaluates the natural logarithm of the probability density function (PDF).\n*\n* @name logpdf\n* @memberof Frechet.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var frechet = new Frechet( 2.0, 4.0, 3.0 );\n*\n* var v = frechet.logpdf( 2.0 );\n* // returns -Infinity\n*/\nsetReadOnly( Frechet.prototype, 'logpdf', frechetLogPDF );\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @name pdf\n* @memberof Frechet.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var frechet = new Frechet( 2.0, 4.0, 3.0 );\n*\n* var v = frechet.pdf( 5.5 );\n* // returns ~0.158\n*/\nsetReadOnly( Frechet.prototype, 'pdf', frechetPDF );\n\n/**\n* Evaluates the quantile function.\n*\n* @name quantile\n* @memberof Frechet.prototype\n* @type {Function}\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}\n*\n* @example\n* var frechet = new Frechet( 2.0, 4.0, 3.0 );\n*\n* var v = frechet.quantile( 0.5 );\n* // returns ~7.804\n*/\nsetReadOnly( Frechet.prototype, 'quantile', frechetQuantile );\n\n\n// EXPORTS //\n\nexport default Frechet;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Fréchet distribution cumulative distribution function (CDF).\n*\n* @module @stdlib/stats-base-dists-frechet-cdf\n*\n* @example\n* import cdf from '@stdlib/stats-base-dists-frechet-cdf';\n*\n* var y = cdf( 10.0, 2.0, 3.0, 5.0 );\n* // returns ~0.698\n*\n* y = cdf( 0.0, 2.0, 3.0, 2.0 );\n* // returns 0.0\n*\n* @example\n* import { factory as factory } from '@stdlib/stats-base-dists-frechet-cdf';\n* var cdf = factory( 3.0, 3.0, 5.0 );\n* var y = cdf( 10.0 );\n* // returns ~0.806\n*\n* y = cdf( 7.0 );\n* // returns ~0.034\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport cdf from './cdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( cdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport exp from '@stdlib/math-base-special-exp';\nimport pow from '@stdlib/math-base-special-pow';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the cumulative distribution function (CDF) for a Fréchet distribution with shape `alpha`, scale `s`, and location `m`.\n*\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} s - scale parameter\n* @param {number} m - location parameter\n* @returns {Function} CDF\n*\n* @example\n* var cdf = factory( 3.0, 3.0, 5.0 );\n*\n* var y = cdf( 10.0 );\n* // returns ~0.806\n*\n* y = cdf( 7.0 );\n* // returns ~0.034\n*/\nfunction factory( alpha, s, m ) {\n\tif (\n\t\tisnan( alpha ) ||\n\t\tisnan( s ) ||\n\t\tisnan( m ) ||\n\t\talpha <= 0.0 ||\n\t\ts <= 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn cdf;\n\n\t/**\n\t* Evaluates the cumulative distribution function (CDF) for a Fréchet distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated CDF\n\t*\n\t* @example\n\t* var y = cdf( -2.0 );\n\t* // returns <number>\n\t*/\n\tfunction cdf( x ) {\n\t\tvar z;\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x <= m ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\tz = ( x - m ) / s;\n\t\treturn exp( -pow( z, -alpha ) );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Fréchet distribution logarithm of the cumulative distribution function (CDF).\n*\n* @module @stdlib/stats-base-dists-frechet-logcdf\n*\n* @example\n* import logcdf from '@stdlib/stats-base-dists-frechet-logcdf';\n*\n* var y = logcdf( 10.0, 2.0, 3.0, 5.0 );\n* // returns ~-0.36\n*\n* y = logcdf( 3.8, 2.0, 3.0, 2.0 );\n* // returns ~-2.778\n*\n* @example\n* import { factory as factory } from '@stdlib/stats-base-dists-frechet-logcdf';\n* var logcdf = factory( 3.0, 3.0, 5.0 );\n* var y = logcdf( 10.0 );\n* // returns ~-0.216\n*\n* y = logcdf( 7.0 );\n* // returns ~-3.381\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport logcdf from './logcdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( logcdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default logcdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport pow from '@stdlib/math-base-special-pow';\nimport NINF from '@stdlib/constants-float64-ninf';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the natural logarithm of the cumulative distribution function (CDF) for a Fréchet distribution with shape `alpha`, scale `s`, and location `m`.\n*\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} s - scale parameter\n* @param {number} m - location parameter\n* @returns {Function} logCDF\n*\n* @example\n* var logcdf = factory( 3.0, 3.0, 5.0 );\n*\n* var y = logcdf( 10.0 );\n* // returns ~-0.216\n*\n* y = logcdf( 7.0 );\n* // returns ~-3.375\n*/\nfunction factory( alpha, s, m ) {\n\tif (\n\t\tisnan( alpha ) ||\n\t\tisnan( s ) ||\n\t\tisnan( m ) ||\n\t\talpha <= 0.0 ||\n\t\ts <= 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn logcdf;\n\n\t/**\n\t* Evaluates the natural logarithm of the cumulative distribution function (CDF) for a Fréchet distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {number} evaluated logCDF\n\t*\n\t* @example\n\t* var y = logcdf( -2.0 );\n\t* // returns <number>\n\t*/\n\tfunction logcdf( x ) {\n\t\tvar z;\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x <= m ) {\n\t\t\treturn NINF;\n\t\t}\n\t\tz = ( x - m ) / s;\n\t\treturn -pow( z, -alpha );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Fréchet distribution logarithm of probability density function (logpdf).\n*\n* @module @stdlib/stats-base-dists-frechet-logpdf\n*\n* @example\n* import logpdf from '@stdlib/stats-base-dists-frechet-logpdf';\n*\n* var y = logpdf( 10.0, 2.0, 3.0, 5.0 );\n* // returns ~-2.298\n*\n* y = logpdf( 0.0, 2.0, 3.0, 2.0 );\n* // returns -Infinity\n*\n* @example\n* import { factory as factory } from '@stdlib/stats-base-dists-frechet-logpdf';\n* var logpdf = factory( 3.0, 3.0, 5.0 );\n* var y = logpdf( 10.0 );\n* // returns ~-2.259\n*\n* y = logpdf( 7.0 );\n* // returns ~-1.753\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport logpdf from './logpdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( logpdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default logpdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Fréchet distribution probability density function (PDF).\n*\n* @module @stdlib/stats-base-dists-frechet-pdf\n*\n* @example\n* import pdf from '@stdlib/stats-base-dists-frechet-pdf';\n*\n* var y = pdf( 10.0, 2.0, 3.0, 5.0 );\n* // returns ~0.698\n*\n* y = pdf( 0.0, 2.0, 3.0, 2.0 );\n* // returns 0.0\n*\n* @example\n* import { factory as factory } from '@stdlib/stats-base-dists-frechet-pdf';\n* var pdf = factory( 3.0, 3.0, 5.0 );\n* var y = pdf( 10.0 );\n* // returns ~0.806\n*\n* y = pdf( 7.0 );\n* // returns ~0.034\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport pdf from './pdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( pdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default pdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport { factory as ldfrechet } from '@stdlib/stats-base-dists-frechet-logpdf';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport exp from '@stdlib/math-base-special-exp';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the probability density function (PDF) for a Fréchet distribution with shape `alpha`, scale `s`, and location `m`.\n*\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} s - scale parameter\n* @param {number} m - location parameter\n* @returns {Function} PDF\n*\n* @example\n* var pdf = factory( 3.0, 3.0, 5.0 );\n*\n* var y = pdf( 10.0 );\n* // returns ~0.104\n*\n* y = pdf( 7.0 );\n* // returns ~0.173\n*/\nfunction factory( alpha, s, m ) {\n\tvar logpdf;\n\tif (\n\t\tisnan( alpha ) ||\n\t\tisnan( s ) ||\n\t\tisnan( m ) ||\n\t\talpha <= 0.0 ||\n\t\ts <= 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\tlogpdf = ldfrechet( alpha, s, m );\n\treturn pdf;\n\n\t/**\n\t* Evaluates the probability density function (PDF) for a Fréchet distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {number} evaluated PDF\n\t*\n\t* @example\n\t* var y = pdf( -2.0 );\n\t* // returns <number>\n\t*/\n\tfunction pdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn exp( logpdf( x, alpha, s, m ) );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Fréchet distribution quantile function.\n*\n* @module @stdlib/stats-base-dists-frechet-quantile\n*\n* @example\n* import quantile from '@stdlib/stats-base-dists-frechet-quantile';\n*\n* var y = quantile( 0.3, 2.0, 3.0, 5.0 );\n* // returns ~7.734\n*\n* y = quantile( 0.8, 2.0, 3.0, 2.0 );\n* // returns ~8.351\n*\n* @example\n* import { factory as factory } from '@stdlib/stats-base-dists-frechet-quantile';\n* var quantile = factory( 3.0, 3.0, 5.0 );\n* var y = quantile( 0.1 );\n* // returns ~7.272\n*\n* y = quantile( 0.8 );\n* // returns ~9.946\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport quantile from './quantile.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( quantile, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default quantile;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport pow from '@stdlib/math-base-special-pow';\nimport ln from '@stdlib/math-base-special-ln';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the quantile function for a Fréchet distribution with shape `alpha`, scale `s`, and location `m`.\n*\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} s - scale parameter\n* @param {number} m - location parameter\n* @returns {Function} quantile function\n*\n* @example\n* var quantile = factory( 3.0, 3.0, 5.0 );\n*\n* var y = quantile( 0.8 );\n* // returns ~9.946\n*\n* y = quantile( 0.2 );\n* // returns ~7.56\n*/\nfunction factory( alpha, s, m ) {\n\tif (\n\t\tisnan( alpha ) ||\n\t\tisnan( s ) ||\n\t\tisnan( m ) ||\n\t\talpha <= 0.0 ||\n\t\ts <= 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn quantile;\n\n\t/**\n\t* Evaluates the quantile function for a Fréchet distribution.\n\t*\n\t* @private\n\t* @param {number} p - input probability\n\t* @returns {number} evaluated quantile function\n\t*\n\t* @example\n\t* var y = quantile( -2.0 );\n\t* // returns <number>\n\t*/\n\tfunction quantile( p ) {\n\t\tif ( isnan( p ) || p < 0.0 || p > 1.0 ) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn m + ( s * ( pow( -ln( p ), -1.0/alpha ) ) );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace frechet\n*/\nvar frechet = {};\n\n/**\n* @name cdf\n* @memberof frechet\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/frechet/cdf}\n*/\nimport cdf from '@stdlib/stats-base-dists-frechet-cdf';\nsetReadOnly( frechet, 'cdf', cdf );\n\n/**\n* @name Frechet\n* @memberof frechet\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/frechet/ctor}\n*/\nimport Frechet from '@stdlib/stats-base-dists-frechet-ctor';\nsetReadOnly( frechet, 'Frechet', Frechet );\n\n/**\n* @name entropy\n* @memberof frechet\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/frechet/entropy}\n*/\nimport entropy from '@stdlib/stats-base-dists-frechet-entropy';\nsetReadOnly( frechet, 'entropy', entropy );\n\n/**\n* @name kurtosis\n* @memberof frechet\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/frechet/kurtosis}\n*/\nimport kurtosis from '@stdlib/stats-base-dists-frechet-kurtosis';\nsetReadOnly( frechet, 'kurtosis', kurtosis );\n\n/**\n* @name logcdf\n* @memberof frechet\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/frechet/logcdf}\n*/\nimport logcdf from '@stdlib/stats-base-dists-frechet-logcdf';\nsetReadOnly( frechet, 'logcdf', logcdf );\n\n/**\n* @name logpdf\n* @memberof frechet\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/frechet/logpdf}\n*/\nimport logpdf from '@stdlib/stats-base-dists-frechet-logpdf';\nsetReadOnly( frechet, 'logpdf', logpdf );\n\n/**\n* @name mean\n* @memberof frechet\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/frechet/mean}\n*/\nimport mean from '@stdlib/stats-base-dists-frechet-mean';\nsetReadOnly( frechet, 'mean', mean );\n\n/**\n* @name median\n* @memberof frechet\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/frechet/median}\n*/\nimport median from '@stdlib/stats-base-dists-frechet-median';\nsetReadOnly( frechet, 'median', median );\n\n/**\n* @name mode\n* @memberof frechet\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/frechet/mode}\n*/\nimport mode from '@stdlib/stats-base-dists-frechet-mode';\nsetReadOnly( frechet, 'mode', mode );\n\n/**\n* @name pdf\n* @memberof frechet\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/frechet/pdf}\n*/\nimport pdf from '@stdlib/stats-base-dists-frechet-pdf';\nsetReadOnly( frechet, 'pdf', pdf );\n\n/**\n* @name quantile\n* @memberof frechet\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/frechet/quantile}\n*/\nimport quantile from '@stdlib/stats-base-dists-frechet-quantile';\nsetReadOnly( frechet, 'quantile', quantile );\n\n/**\n* @name skewness\n* @memberof frechet\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/frechet/skewness}\n*/\nimport skewness from '@stdlib/stats-base-dists-frechet-skewness';\nsetReadOnly( frechet, 'skewness', skewness );\n\n/**\n* @name stdev\n* @memberof frechet\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/frechet/stdev}\n*/\nimport stdev from '@stdlib/stats-base-dists-frechet-stdev';\nsetReadOnly( frechet, 'stdev', stdev );\n\n/**\n* @name variance\n* @memberof frechet\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/frechet/variance}\n*/\nimport variance from '@stdlib/stats-base-dists-frechet-variance';\nsetReadOnly( frechet, 'variance', variance );\n\n\n// EXPORTS //\n\nexport default frechet;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport digamma from '@stdlib/math-base-special-digamma';\nimport gammaln from '@stdlib/math-base-special-gammaln';\nimport ln from '@stdlib/math-base-special-ln';\n\n\n// MAIN //\n\n/**\n* Returns the differential entropy of a gamma distribution.\n*\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} beta - rate parameter\n* @returns {number} entropy\n*\n* @example\n* var v = entropy( 1.0, 1.0 );\n* // returns 1.0\n*\n* @example\n* var v = entropy( 4.0, 12.0 );\n* // returns ~-0.462\n*\n* @example\n* var v = entropy( 8.0, 2.0 );\n* // returns ~1.723\n*\n* @example\n* var v = entropy( 1.0, -0.1 );\n* // returns NaN\n*\n* @example\n* var v = entropy( -0.1, 1.0 );\n* // returns NaN\n*\n* @example\n* var v = entropy( 2.0, NaN );\n* // returns NaN\n*\n* @example\n* var v = entropy( NaN, 2.0 );\n* // returns NaN\n*/\nfunction entropy( alpha, beta ) {\n\tvar out;\n\tif ( alpha <= 0.0 || beta <= 0.0 ) {\n\t\treturn NaN;\n\t}\n\tout = alpha - ln( beta );\n\tout += gammaln( alpha );\n\tout += ( 1.0-alpha ) * digamma( alpha );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default entropy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns the excess kurtosis of a gamma distribution.\n*\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} beta - rate parameter\n* @returns {PositiveNumber} kurtosis\n*\n* @example\n* var v = kurtosis( 1.0, 1.0 );\n* // returns 6.0\n*\n* @example\n* var v = kurtosis( 4.0, 12.0 );\n* // returns 1.5\n*\n* @example\n* var v = kurtosis( 8.0, 2.0 );\n* // returns 0.75\n*\n* @example\n* var v = kurtosis( 1.0, -0.1 );\n* // returns NaN\n*\n* @example\n* var v = kurtosis( -0.1, 1.0 );\n* // returns NaN\n*\n* @example\n* var v = kurtosis( 2.0, NaN );\n* // returns NaN\n*\n* @example\n* var v = kurtosis( NaN, 2.0 );\n* // returns NaN\n*/\nfunction kurtosis( alpha, beta ) {\n\tif (\n\t\tisnan( alpha ) ||\n\t\tisnan( beta ) ||\n\t\talpha <= 0.0 ||\n\t\tbeta <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn 6.0 / alpha;\n}\n\n\n// EXPORTS //\n\nexport default kurtosis;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns the expected value of a gamma distribution.\n*\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} beta - rate parameter\n* @returns {PositiveNumber} expected value\n*\n* @example\n* var v = mean( 1.0, 1.0 );\n* // returns 1.0\n*\n* @example\n* var v = mean( 4.0, 12.0 );\n* // returns ~0.333\n*\n* @example\n* var v = mean( 8.0, 2.0 );\n* // returns 4.0\n*\n* @example\n* var v = mean( 1.0, -0.1 );\n* // returns NaN\n*\n* @example\n* var v = mean( -0.1, 1.0 );\n* // returns NaN\n*\n* @example\n* var v = mean( 2.0, NaN );\n* // returns NaN\n*\n* @example\n* var v = mean( NaN, 2.0 );\n* // returns NaN\n*/\nfunction mean( alpha, beta ) {\n\tif ( alpha <= 0.0 || beta <= 0.0 ) {\n\t\treturn NaN;\n\t}\n\treturn alpha / beta;\n}\n\n\n// EXPORTS //\n\nexport default mean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns the mode of a gamma distribution.\n*\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} beta - rate parameter\n* @returns {NonNegativeNumber} mode\n*\n* @example\n* var v = mode( 1.0, 1.0 );\n* // returns 0.0\n*\n* @example\n* var v = mode( 4.0, 12.0 );\n* // returns 0.25\n*\n* @example\n* var v = mode( 8.0, 2.0 );\n* // returns 3.5\n*\n* @example\n* var v = mode( 0.5, 2.0 );\n* // returns NaN\n*\n* @example\n* var v = mode( 1.0, -0.1 );\n* // returns NaN\n*\n* @example\n* var v = mode( -0.1, 1.0 );\n* // returns NaN\n*\n* @example\n* var v = mode( 2.0, NaN );\n* // returns NaN\n*\n* @example\n* var v = mode( NaN, 2.0 );\n* // returns NaN\n*/\nfunction mode( alpha, beta ) {\n\tif ( alpha < 1.0 || beta <= 0.0 ) {\n\t\treturn NaN;\n\t}\n\treturn ( alpha-1.0 ) / beta;\n}\n\n\n// EXPORTS //\n\nexport default mode;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport sqrt from '@stdlib/math-base-special-sqrt';\n\n\n// MAIN //\n\n/**\n* Returns the skewness of a gamma distribution.\n*\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} beta - rate parameter\n* @returns {PositiveNumber} skewness\n*\n* @example\n* var v = skewness( 1.0, 1.0 );\n* // returns 2.0\n*\n* @example\n* var v = skewness( 4.0, 12.0 );\n* // returns 1.0\n*\n* @example\n* var v = skewness( 8.0, 2.0 );\n* // returns ~0.707\n*\n* @example\n* var v = skewness( 1.0, -0.1 );\n* // returns NaN\n*\n* @example\n* var v = skewness( -0.1, 1.0 );\n* // returns NaN\n*\n* @example\n* var v = skewness( 2.0, NaN );\n* // returns NaN\n*\n* @example\n* var v = skewness( NaN, 2.0 );\n* // returns NaN\n*/\nfunction skewness( alpha, beta ) {\n\tif (\n\t\tisnan( alpha ) ||\n\t\tisnan( beta ) ||\n\t\talpha <= 0.0 ||\n\t\tbeta <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn 2.0 / sqrt( alpha );\n}\n\n\n// EXPORTS //\n\nexport default skewness;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport sqrt from '@stdlib/math-base-special-sqrt';\n\n\n// MAIN //\n\n/**\n* Returns the standard deviation of a gamma distribution.\n*\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} beta - rate parameter\n* @returns {PositiveNumber} standard deviation\n*\n* @example\n* var v = stdev( 1.0, 1.0 );\n* // returns 1.0\n*\n* @example\n* var v = stdev( 4.0, 12.0 );\n* // returns ~0.167\n*\n* @example\n* var v = stdev( 8.0, 2.0 );\n* // returns ~1.414\n*\n* @example\n* var v = stdev( 1.0, -0.1 );\n* // returns NaN\n*\n* @example\n* var v = stdev( -0.1, 1.0 );\n* // returns NaN\n*\n* @example\n* var v = stdev( 2.0, NaN );\n* // returns NaN\n*\n* @example\n* var v = stdev( NaN, 2.0 );\n* // returns NaN\n*/\nfunction stdev( alpha, beta ) {\n\tif ( alpha <= 0.0 || beta <= 0.0 ) {\n\t\treturn NaN;\n\t}\n\treturn sqrt( alpha ) / beta;\n}\n\n\n// EXPORTS //\n\nexport default stdev;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns the variance of a gamma distribution.\n*\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} beta - rate parameter\n* @returns {PositiveNumber} variance\n*\n* @example\n* var v = variance( 1.0, 1.0 );\n* // returns 1.0\n*\n* @example\n* var v = variance( 4.0, 12.0 );\n* // returns ~0.028\n*\n* @example\n* var v = variance( 8.0, 2.0 );\n* // returns 2.0\n*\n* @example\n* var v = variance( 1.0, -0.1 );\n* // returns NaN\n*\n* @example\n* var v = variance( -0.1, 1.0 );\n* // returns NaN\n*\n* @example\n* var v = variance( 2.0, NaN );\n* // returns NaN\n*\n* @example\n* var v = variance( NaN, 2.0 );\n* // returns NaN\n*/\nfunction variance( alpha, beta ) {\n\tif ( alpha <= 0.0 || beta <= 0.0 ) {\n\t\treturn NaN;\n\t}\n\treturn alpha / ( beta*beta );\n}\n\n\n// EXPORTS //\n\nexport default variance;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport cdf from '@stdlib/stats-base-dists-gamma-cdf';\nimport ln from '@stdlib/math-base-special-ln';\n\n\n// MAIN //\n\n/**\n* Evaluates the logarithm of the cumulative distribution function (CDF) for a gamma distribution with shape parameter `alpha` and rate parameter `beta` at a value `x`.\n*\n* @param {number} x - input value\n* @param {NonNegativeNumber} alpha - shape parameter\n* @param {PositiveNumber} beta - rate parameter\n* @returns {number} evaluated logCDF\n*\n* @example\n* var y = logcdf( 2.0, 0.5, 1.0 );\n* // returns ~-0.047\n*\n* @example\n* var y = logcdf( 0.1, 1.0, 1.0 );\n* // returns ~-2.352\n*\n* @example\n* var y = logcdf( -1.0, 4.0, 2.0 );\n* // returns -Infinity\n*\n* @example\n* var y = logcdf( NaN, 0.6, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = logcdf( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = logcdf( 0.0, 1.0, NaN );\n* // returns NaN\n*\n* @example\n* // Negative shape parameter:\n* var y = logcdf( 2.0, -1.0, 1.0 );\n* // returns NaN\n*\n* @example\n* // Negative rate parameter:\n* var y = logcdf( 2.0, 1.0, -1.0 );\n* // returns NaN\n*/\nfunction logcdf( x, alpha, beta ) {\n\treturn ln( cdf( x, alpha, beta ) );\n}\n\n\n// EXPORTS //\n\nexport default logcdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport pow from '@stdlib/math-base-special-pow';\n\n\n// MAIN //\n\n/**\n* Evaluates the moment-generating function (MGF) for a gamma distribution.\n*\n* @param {number} t - input value\n* @param {NonNegativeNumber} alpha - shape parameter\n* @param {PositiveNumber} beta - rate parameter\n* @returns {number} evaluated MGF\n*\n* @example\n* var y = mgf( 0.5, 0.5, 1.0 );\n* // returns ~1.414\n*\n* @example\n* var y = mgf( 0.1, 1.0, 1.0 );\n* // returns ~1.111\n*\n* @example\n* var y = mgf( -1.0, 4.0, 2.0 );\n* // returns ~0.198\n*\n* @example\n* var y = mgf( NaN, 1.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = mgf( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = mgf( 0.0, 1.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = mgf( 2.0, 4.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = mgf( 2.0, -0.5, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = mgf( 2.0, 1.0, 0.0 );\n* // returns NaN\n*\n* @example\n* var y = mgf( 2.0, 1.0, -1.0 );\n* // returns NaN\n*/\nfunction mgf( t, alpha, beta ) {\n\tvar base;\n\tif (\n\t\tisnan( t ) ||\n\t\tisnan( alpha ) ||\n\t\tisnan( beta ) ||\n\t\talpha < 0.0 ||\n\t\tbeta <= 0.0 ||\n\t\tt >= beta\n\t) {\n\t\treturn NaN;\n\t}\n\tbase = 1.0 - (t / beta);\n\treturn pow( base, -alpha );\n}\n\n\n// EXPORTS //\n\nexport default mgf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nimport defineProperty from '@stdlib/utils-define-property';\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport setReadOnlyAccessor from '@stdlib/utils-define-nonenumerable-read-only-accessor';\nimport { isPrimitive as isPositive } from '@stdlib/assert-is-positive-number';\nimport entropy from '@stdlib/stats-base-dists-gamma-entropy';\nimport kurtosis from '@stdlib/stats-base-dists-gamma-kurtosis';\nimport mean from '@stdlib/stats-base-dists-gamma-mean';\nimport mode from '@stdlib/stats-base-dists-gamma-mode';\nimport quantile from '@stdlib/stats-base-dists-gamma-quantile';\nimport skewness from '@stdlib/stats-base-dists-gamma-skewness';\nimport stdev from '@stdlib/stats-base-dists-gamma-stdev';\nimport variance from '@stdlib/stats-base-dists-gamma-variance';\nimport cdf from '@stdlib/stats-base-dists-gamma-cdf';\nimport logcdf from '@stdlib/stats-base-dists-gamma-logcdf';\nimport logpdf from '@stdlib/stats-base-dists-gamma-logpdf';\nimport mgf from '@stdlib/stats-base-dists-gamma-mgf';\nimport pdf from '@stdlib/stats-base-dists-gamma-pdf';\nimport format from '@stdlib/string-format';\n\n\n// FUNCTIONS //\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n*/\nfunction gammaCDF( x ) {\n\treturn cdf( x, this.alpha, this.beta );\n}\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (logCDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logCDF\n*/\nfunction gammaLogCDF( x ) {\n\treturn logcdf( x, this.alpha, this.beta );\n}\n\n/**\n* Evaluates the natural logarithm of the probability density function (logPDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n*/\nfunction gammaLogPDF( x ) {\n\treturn logpdf( x, this.alpha, this.beta );\n}\n\n/**\n* Evaluates the moment-generating function (MGF).\n*\n* @private\n* @param {number} t - input value\n* @returns {number} evaluated MGF\n*/\nfunction gammaMGF( t ) {\n\treturn mgf( t, this.alpha, this.beta );\n}\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n*/\nfunction gammaPDF( x ) {\n\treturn pdf( x, this.alpha, this.beta );\n}\n\n/**\n* Evaluates the quantile function.\n*\n* @private\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n*/\nfunction gammaQuantile( p ) {\n\treturn quantile( p, this.alpha, this.beta );\n}\n\n\n// MAIN //\n\n/**\n* Gamma distribution constructor.\n*\n* @constructor\n* @param {PositiveNumber} [alpha=1.0] - shape parameter\n* @param {PositiveNumber} [beta=1.0] - rate parameter\n* @throws {TypeError} `alpha` must be a positive number\n* @throws {TypeError} `beta` must be a positive number\n* @returns {Gamma} distribution instance\n*\n* @example\n* var gamma = new Gamma( 1.0, 1.0 );\n*\n* var y = gamma.cdf( 0.8 );\n* // returns ~0.551\n*\n* var v = gamma.mode;\n* // returns 0.0\n*/\nfunction Gamma() {\n\tvar alpha;\n\tvar beta;\n\tif ( !(this instanceof Gamma) ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn new Gamma();\n\t\t}\n\t\treturn new Gamma( arguments[ 0 ], arguments[ 1 ] );\n\t}\n\tif ( arguments.length ) {\n\t\talpha = arguments[ 0 ];\n\t\tbeta = arguments[ 1 ];\n\t\tif ( !isPositive( alpha ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Shape parameter must be a positive number. Value: `%s`.', alpha ) );\n\t\t}\n\t\tif ( !isPositive( beta ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Rate parameter must be a positive number. Value: `%s`.', beta ) );\n\t\t}\n\t} else {\n\t\talpha = 1.0;\n\t\tbeta = 1.0;\n\t}\n\tdefineProperty( this, 'alpha', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn alpha;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isPositive( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid assignment. Must be a positive number. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\talpha = value;\n\t\t}\n\t});\n\tdefineProperty( this, 'beta', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn beta;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isPositive( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid assignment. Must be a positive number. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\tbeta = value;\n\t\t}\n\t});\n\treturn this;\n}\n\n/**\n* Gamma distribution differential entropy.\n*\n* @name entropy\n* @memberof Gamma.prototype\n* @type {number}\n* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}\n*\n* @example\n* var gamma = new Gamma( 4.0, 12.0 );\n*\n* var v = gamma.entropy;\n* // returns ~-0.462\n*/\nsetReadOnlyAccessor( Gamma.prototype, 'entropy', function get() {\n\treturn entropy( this.alpha, this.beta );\n});\n\n/**\n* Gamma distribution excess kurtosis.\n*\n* @name kurtosis\n* @memberof Gamma.prototype\n* @type {number}\n* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}\n*\n* @example\n* var gamma = new Gamma( 4.0, 12.0 );\n*\n* var v = gamma.kurtosis;\n* // returns 1.5\n*/\nsetReadOnlyAccessor( Gamma.prototype, 'kurtosis', function get() {\n\treturn kurtosis( this.alpha, this.beta );\n});\n\n/**\n* Gamma distribution expected value.\n*\n* @name mean\n* @memberof Gamma.prototype\n* @type {number}\n* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}\n*\n* @example\n* var gamma = new Gamma( 4.0, 12.0 );\n*\n* var v = gamma.mean;\n* // returns ~0.333\n*/\nsetReadOnlyAccessor( Gamma.prototype, 'mean', function get() {\n\treturn mean( this.alpha, this.beta );\n});\n\n/**\n* Gamma distribution mode.\n*\n* @name mode\n* @memberof Gamma.prototype\n* @type {number}\n* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}\n*\n* @example\n* var gamma = new Gamma( 4.0, 12.0 );\n*\n* var v = gamma.mode;\n* // returns 0.25\n*/\nsetReadOnlyAccessor( Gamma.prototype, 'mode', function get() {\n\treturn mode( this.alpha, this.beta );\n});\n\n/**\n* Gamma distribution skewness.\n*\n* @name skewness\n* @memberof Gamma.prototype\n* @type {number}\n* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}\n*\n* @example\n* var gamma = new Gamma( 4.0, 12.0 );\n*\n* var v = gamma.skewness;\n* // returns 1.0\n*/\nsetReadOnlyAccessor( Gamma.prototype, 'skewness', function get() {\n\treturn skewness( this.alpha, this.beta );\n});\n\n/**\n* Gamma distribution standard deviation.\n*\n* @name stdev\n* @memberof Gamma.prototype\n* @type {PositiveNumber}\n* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}\n*\n* @example\n* var gamma = new Gamma( 4.0, 12.0 );\n*\n* var v = gamma.stdev;\n* // returns ~0.167\n*/\nsetReadOnlyAccessor( Gamma.prototype, 'stdev', function get() {\n\treturn stdev( this.alpha, this.beta );\n});\n\n/**\n* Gamma distribution variance.\n*\n* @name variance\n* @memberof Gamma.prototype\n* @type {PositiveNumber}\n* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}\n*\n* @example\n* var gamma = new Gamma( 4.0, 12.0 );\n*\n* var v = gamma.variance;\n* // returns ~0.028\n*/\nsetReadOnlyAccessor( Gamma.prototype, 'variance', function get() {\n\treturn variance( this.alpha, this.beta );\n});\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @name cdf\n* @memberof Gamma.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var gamma = new Gamma( 2.0, 4.0 );\n*\n* var v = gamma.cdf( 0.5 );\n* // returns ~0.594\n*/\nsetReadOnly( Gamma.prototype, 'cdf', gammaCDF );\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (logCDF).\n*\n* @name logcdf\n* @memberof Gamma.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logCDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var gamma = new Gamma( 2.0, 4.0 );\n*\n* var v = gamma.logcdf( 0.8 );\n* // returns ~-0.188\n*/\nsetReadOnly( Gamma.prototype, 'logcdf', gammaLogCDF );\n\n/**\n* Evaluates the natural logarithm of the probability density function (logPDF).\n*\n* @name logpdf\n* @memberof Gamma.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var gamma = new Gamma( 2.0, 4.0 );\n*\n* var v = gamma.logpdf( 0.8 );\n* // returns ~-0.651\n*/\nsetReadOnly( Gamma.prototype, 'logpdf', gammaLogPDF );\n\n/**\n* Evaluates the moment-generating function (MGF).\n*\n* @name mgf\n* @memberof Gamma.prototype\n* @type {Function}\n* @param {number} t - input value\n* @returns {number} evaluated MGF\n* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}\n*\n* @example\n* var gamma = new Gamma( 2.0, 4.0 );\n*\n* var v = gamma.mgf( 0.5 );\n* // returns ~1.306\n*/\nsetReadOnly( Gamma.prototype, 'mgf', gammaMGF );\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @name pdf\n* @memberof Gamma.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var gamma = new Gamma( 2.0, 4.0 );\n*\n* var v = gamma.pdf( 0.8 );\n* // returns ~0.522\n*/\nsetReadOnly( Gamma.prototype, 'pdf', gammaPDF );\n\n/**\n* Evaluates the quantile function.\n*\n* @name quantile\n* @memberof Gamma.prototype\n* @type {Function}\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}\n*\n* @example\n* var gamma = new Gamma( 2.0, 4.0 );\n*\n* var v = gamma.quantile( 0.5 );\n* // returns ~0.42\n*/\nsetReadOnly( Gamma.prototype, 'quantile', gammaQuantile );\n\n\n// EXPORTS //\n\nexport default Gamma;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Gamma distribution logarithm of cumulative distribution function (CDF).\n*\n* @module @stdlib/stats-base-dists-gamma-logcdf\n*\n* @example\n* import logcdf from '@stdlib/stats-base-dists-gamma-logcdf';\n*\n* var y = logcdf( 2.0, 0.5, 1.0 );\n* // returns ~-0.047\n*\n* @example\n* import { factory as factory } from '@stdlib/stats-base-dists-gamma-logcdf';\n*\n* var logcdf = factory( 3.0, 1.5 );\n* var y = logcdf( 1.0 );\n* // returns ~-1.655\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport logcdf from './logcdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( logcdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default logcdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport { factory as degenerate } from '@stdlib/stats-base-dists-degenerate-logcdf';\nimport gammainc from '@stdlib/math-base-special-gammainc';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport ln from '@stdlib/math-base-special-ln';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the logarithm of the cumulative distribution function (CDF) for a gamma distribution with shape parameter `alpha` and rate parameter `beta`.\n*\n* @param {NonNegativeNumber} alpha - shape parameter\n* @param {PositiveNumber} beta - rate parameter\n* @returns {Function} logCDF\n*\n* @example\n* var logcdf = factory( 3.0, 1.5 );\n*\n* var y = logcdf( 1.0 );\n* // returns ~-1.655\n*\n* y = logcdf( 4.0 );\n* // returns ~-0.06\n*/\nfunction factory( alpha, beta ) {\n\tif (\n\t\tisnan( alpha ) ||\n\t\tisnan( beta ) ||\n\t\talpha < 0.0 ||\n\t\tbeta <= 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\tif ( alpha === 0.0 ) {\n\t\treturn degenerate( 0.0 );\n\t}\n\treturn logcdf;\n\n\t/**\n\t* Evaluates the logarithm of the cumulative distribution function (CDF) for a gamma distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {number} evaluated logCDF\n\t*\n\t* @example\n\t* var y = logcdf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction logcdf( x ) {\n\t\tif ( x <= 0.0 ) {\n\t\t\treturn NINF;\n\t\t}\n\t\tif ( x === PINF ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn ln( gammainc( x * beta, alpha ) );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate the moment-generating function (MGF) of a gamma distribution.\n*\n* @module @stdlib/stats-base-dists-gamma-mgf\n*\n* @example\n* import mgf from '@stdlib/stats-base-dists-gamma-mgf';\n*\n* var y = mgf( 0.5, 0.5, 1.0 );\n* // returns ~1.414\n*\n* y = mgf( 0.1, 1.0, 1.0 );\n* // returns ~1.111\n*\n* y = mgf( -1.0, 4.0, 2.0 );\n* // returns ~0.198\n*\n* var mymgf = mgf.factory( 3.0, 1.5 );\n*\n* y = mymgf( 1.0 );\n* // returns ~26.999\n*\n* y = mymgf( 0.5 );\n* // returns ~3.375\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport mgf from './mgf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( mgf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default mgf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport pow from '@stdlib/math-base-special-pow';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the moment-generating function (MGF) of a gamma distribution with shape `alpha` and rate `beta`.\n*\n* @param {NonNegativeNumber} alpha - shape parameter\n* @param {PositiveNumber} beta - rate parameter\n* @returns {Function} MGF\n*\n* @example\n* var mgf = factory( 3.0, 1.5 );\n*\n* var y = mgf( 1.0 );\n* // returns ~27.0\n*\n* y = mgf( 0.5 );\n* // returns ~3.375\n*/\nfunction factory( alpha, beta ) {\n\tif (\n\t\tisnan( alpha ) ||\n\t\tisnan( beta ) ||\n\t\talpha < 0.0 ||\n\t\tbeta <= 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn mgf;\n\n\t/**\n\t* Evaluates the moment-generating function (MGF) of a gamma distribution.\n\t*\n\t* @private\n\t* @param {number} t - input value\n\t* @returns {number} evaluated MGF\n\t*\n\t* @example\n\t* var y = mgf( 0.5 );\n\t* // returns <number>\n\t*/\n\tfunction mgf( t ) {\n\t\tvar base;\n\t\tif ( t >= beta ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tbase = 1.0 - (t / beta);\n\t\treturn pow( base, -alpha );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace gamma\n*/\nvar gamma = {};\n\n/**\n* @name cdf\n* @memberof gamma\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/gamma/cdf}\n*/\nimport cdf from '@stdlib/stats-base-dists-gamma-cdf';\nsetReadOnly( gamma, 'cdf', cdf );\n\n/**\n* @name Gamma\n* @memberof gamma\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/gamma/ctor}\n*/\nimport Gamma from '@stdlib/stats-base-dists-gamma-ctor';\nsetReadOnly( gamma, 'Gamma', Gamma );\n\n/**\n* @name entropy\n* @memberof gamma\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/gamma/entropy}\n*/\nimport entropy from '@stdlib/stats-base-dists-gamma-entropy';\nsetReadOnly( gamma, 'entropy', entropy );\n\n/**\n* @name kurtosis\n* @memberof gamma\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/gamma/kurtosis}\n*/\nimport kurtosis from '@stdlib/stats-base-dists-gamma-kurtosis';\nsetReadOnly( gamma, 'kurtosis', kurtosis );\n\n/**\n* @name logcdf\n* @memberof gamma\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/gamma/logcdf}\n*/\nimport logcdf from '@stdlib/stats-base-dists-gamma-logcdf';\nsetReadOnly( gamma, 'logcdf', logcdf );\n\n/**\n* @name logpdf\n* @memberof gamma\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/gamma/logpdf}\n*/\nimport logpdf from '@stdlib/stats-base-dists-gamma-logpdf';\nsetReadOnly( gamma, 'logpdf', logpdf );\n\n/**\n* @name mean\n* @memberof gamma\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/gamma/mean}\n*/\nimport mean from '@stdlib/stats-base-dists-gamma-mean';\nsetReadOnly( gamma, 'mean', mean );\n\n/**\n* @name mgf\n* @memberof gamma\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/gamma/mgf}\n*/\nimport mgf from '@stdlib/stats-base-dists-gamma-mgf';\nsetReadOnly( gamma, 'mgf', mgf );\n\n/**\n* @name mode\n* @memberof gamma\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/gamma/mode}\n*/\nimport mode from '@stdlib/stats-base-dists-gamma-mode';\nsetReadOnly( gamma, 'mode', mode );\n\n/**\n* @name pdf\n* @memberof gamma\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/gamma/pdf}\n*/\nimport pdf from '@stdlib/stats-base-dists-gamma-pdf';\nsetReadOnly( gamma, 'pdf', pdf );\n\n/**\n* @name quantile\n* @memberof gamma\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/gamma/quantile}\n*/\nimport quantile from '@stdlib/stats-base-dists-gamma-quantile';\nsetReadOnly( gamma, 'quantile', quantile );\n\n/**\n* @name skewness\n* @memberof gamma\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/gamma/skewness}\n*/\nimport skewness from '@stdlib/stats-base-dists-gamma-skewness';\nsetReadOnly( gamma, 'skewness', skewness );\n\n/**\n* @name stdev\n* @memberof gamma\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/gamma/stdev}\n*/\nimport stdev from '@stdlib/stats-base-dists-gamma-stdev';\nsetReadOnly( gamma, 'stdev', stdev );\n\n/**\n* @name variance\n* @memberof gamma\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/gamma/variance}\n*/\nimport variance from '@stdlib/stats-base-dists-gamma-variance';\nsetReadOnly( gamma, 'variance', variance );\n\n\n// EXPORTS //\n\nexport default gamma;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport floor from '@stdlib/math-base-special-floor';\nimport pow from '@stdlib/math-base-special-pow';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Evaluates the cumulative distribution function (CDF) for a geometric distribution with success probability `p` at a value `x`.\n*\n* @param {number} x - input value\n* @param {Probability} p - success probability\n* @returns {Probability} evaluated CDF\n*\n* @example\n* var y = cdf( 2.0, 0.5 );\n* // returns 0.875\n*\n* @example\n* var y = cdf( 2.0, 0.1 );\n* // returns ~0.271\n*\n* @example\n* var y = cdf( -1.0, 0.5 );\n* // returns 0.0\n*\n* @example\n* var y = cdf( NaN, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* // Invalid probability\n* var y = cdf( 2.0, 1.4 );\n* // returns NaN\n*/\nfunction cdf( x, p ) {\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( p ) ||\n\t\tp < 0.0 ||\n\t\tp > 1.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x < 0.0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( x === PINF ) {\n\t\treturn 1.0;\n\t}\n\tx = floor( x );\n\treturn 1.0 - pow( 1.0 - p, x + 1.0 );\n}\n\n\n// EXPORTS //\n\nexport default cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport ln from '@stdlib/math-base-special-ln';\n\n\n// MAIN //\n\n/**\n* Returns the entropy of a geometric distribution.\n*\n* @param {Probability} p - success probability\n* @returns {PositiveNumber} entropy\n*\n* @example\n* var v = entropy( 0.1 );\n* // returns ~3.251\n*\n* @example\n* var v = entropy( 0.5 );\n* // returns ~1.386\n*\n* @example\n* var v = entropy( 0.9 );\n* // returns ~0.361\n*\n* @example\n* var v = entropy( 1.1 );\n* // returns NaN\n*\n* @example\n* var v = entropy( NaN );\n* // returns NaN\n*/\nfunction entropy( p ) {\n\tvar q;\n\tif (\n\t\tisnan( p ) ||\n\t\tp <= 0.0 ||\n\t\tp >= 1.0\n\t) {\n\t\treturn NaN;\n\t}\n\tq = 1.0 - p;\n\treturn ( -( p*ln(p) ) - ( q*ln(q) ) ) / p;\n}\n\n\n// EXPORTS //\n\nexport default entropy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns the excess kurtosis of a geometric distribution.\n*\n* @param {Probability} p - success probability\n* @returns {PositiveNumber} kurtosis\n*\n* @example\n* var v = kurtosis( 0.1 );\n* // returns ~6.011\n*\n* @example\n* var v = kurtosis( 0.5 );\n* // returns 6.5\n*\n* @example\n* var v = kurtosis( 1.1 );\n* // returns NaN\n*\n* @example\n* var v = kurtosis( NaN );\n* // returns NaN\n*/\nfunction kurtosis( p ) {\n\tif (\n\t\tisnan( p ) ||\n\t\tp <= 0.0 ||\n\t\tp >= 1.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn 6.0 + ( ( p*p ) / ( 1.0-p ) );\n}\n\n\n// EXPORTS //\n\nexport default kurtosis;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns the expected value of a geometric distribution.\n*\n* @param {Probability} p - success probability\n* @returns {NonNegativeNumber} expected value\n*\n* @example\n* var v = mean( 0.1 );\n* // returns 9.0\n*\n* @example\n* var v = mean( 0.5 );\n* // returns 1.0\n*\n* @example\n* var v = mean( 1.1 );\n* // returns NaN\n*\n* @example\n* var v = mean( NaN );\n* // returns NaN\n*/\nfunction mean( p ) {\n\tif (\n\t\tisnan( p ) ||\n\t\tp < 0.0 ||\n\t\tp > 1.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn ( 1.0 - p ) / p;\n}\n\n\n// EXPORTS //\n\nexport default mean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Geometric distribution cumulative distribution function (CDF).\n*\n* @module @stdlib/stats-base-dists-geometric-cdf\n*\n* @example\n* import cdf from '@stdlib/stats-base-dists-geometric-cdf';\n*\n* var y = cdf( 2.0, 0.5 );\n* // returns 0.875\n*\n* y = cdf( 2.0, 0.1 );\n* // returns ~0.271\n*\n* var mycdf = cdf.factory( 0.5 );\n* y = mycdf( 3.0 );\n* // returns 0.9375\n*\n* y = mycdf( 1.0 );\n* // returns 0.75\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport cdf from './cdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( cdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport floor from '@stdlib/math-base-special-floor';\nimport pow from '@stdlib/math-base-special-pow';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the cumulative distribution function (CDF) for a geometric distribution with success probability `p`.\n*\n* @param {Probability} p - success probability\n* @returns {Function} CDF\n*\n* @example\n* var cdf = factory( 0.5 );\n* var y = cdf( 3.0 );\n* // returns 0.9375\n*\n* y = cdf( 1.0 );\n* // returns 0.75\n*/\nfunction factory( p ) {\n\tif ( isnan( p ) || p < 0.0 || p > 1.0 ) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn cdf;\n\n\t/**\n\t* Evaluates the cumulative distribution function (CDF) for a geometric distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated CDF\n\t*\n\t* @example\n\t* var y = cdf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction cdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x < 0.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\tif ( x === PINF ) {\n\t\t\treturn 1.0;\n\t\t}\n\t\tx = floor( x );\n\t\treturn 1.0 - pow( 1.0 - p, x + 1.0 );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_log.h}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport getHighWord from '@stdlib/number-float64-base-get-high-word';\nimport polyvalP from './polyval_p.js';\nimport polyvalQ from './polyval_q.js';\n\n\n// VARIABLES //\n\n// 0x000fffff = 1048575 => 0 00000000000 11111111111111111111\nvar HIGH_SIGNIFICAND_MASK = 0x000fffff|0; // asm type annotation\n\n// 1/3\nvar ONE_THIRD = 0.33333333333333333;\n\n\n// MAIN //\n\n/**\n* Return `log(x) - (x-1)` for `x` in `~[sqrt(2)/2, sqrt(2)]`.\n*\n* @private\n* @param {number} x - input value\n* @returns {number} function value\n*/\nfunction klog( x ) {\n\tvar hfsq;\n\tvar t1;\n\tvar t2;\n\tvar hx;\n\tvar f;\n\tvar s;\n\tvar z;\n\tvar R;\n\tvar w;\n\tvar i;\n\tvar j;\n\n\thx = getHighWord( x );\n\tf = x - 1.0;\n\tif ( ( HIGH_SIGNIFICAND_MASK & (2+hx) ) < 3 ) {\n\t\t// Case: -2**-20 <= f < 2**-20\n\t\tif ( f === 0.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn f * f * ( ( ONE_THIRD*f )- 0.5 );\n\t}\n\ts = f / ( 2.0 + f );\n\tz = s * s;\n\thx &= HIGH_SIGNIFICAND_MASK;\n\ti = ( hx - 0x6147a )|0; // asm type annotation\n\tw = z * z;\n\tj = ( 0x6b851 - hx )|0; // asm type annotation\n\tt1 = w * polyvalP( w );\n\tt2 = z * polyvalQ( w );\n\ti |= j;\n\tR = t2 + t1;\n\tif ( i > 0 ) {\n\t\thfsq = 0.5 * f * f;\n\t\treturn ( s * (hfsq+R) ) - hfsq;\n\t}\n\treturn s * (R-f);\n}\n\n\n// EXPORTS //\n\nexport default klog;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/e_log2.c}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport getHighWord from '@stdlib/number-float64-base-get-high-word';\nimport setHighWord from '@stdlib/number-float64-base-set-high-word';\nimport setLowWord from '@stdlib/number-float64-base-set-low-word';\nimport toWords from '@stdlib/number-float64-base-to-words';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport ABS_MASK from '@stdlib/constants-float64-high-word-abs-mask';\nimport HIGH_SIGNIFICAND_MASK from '@stdlib/constants-float64-high-word-significand-mask';\nimport BIAS from '@stdlib/constants-float64-exponent-bias';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport klog from './klog.js';\n\n\n// VARIABLES //\n\nvar TWO54 = 1.80143985094819840000e+16;   // 0x43500000, 0x00000000\nvar IVLN2HI = 1.44269504072144627571e+00; // 0x3ff71547, 0x65200000\nvar IVLN2LO = 1.67517131648865118353e-10; // 0x3de705fc, 0x2eefa200\n\n// 0x7ff00000 = 2146435072 => 0 11111111111 00000000000000000000 => biased exponent: 2047 = 1023+1023 => 2^1023\nvar HIGH_MAX_NORMAL_EXP = 0x7ff00000|0; // asm type annotation\n\n// 0x00100000 = 1048576 => 0 00000000001 00000000000000000000 => biased exponent: 1 = -1022+1023 => 2^-1022\nvar HIGH_MIN_NORMAL_EXP = 0x00100000|0; // asm type annotation\n\n// 0x3ff00000 = 1072693248 => 0 01111111111 00000000000000000000 => biased exponent: 1023 = 0+1023 => 2^0 = 1\nvar HIGH_BIASED_EXP_0 = 0x3ff00000|0; // asm type annotation\n\n// High/low words workspace:\nvar WORDS = [ 0|0, 0|0 ];\n\n\n// MAIN //\n\n/**\n* Evaluates the binary logarithm (base two).\n*\n* @param {NonNegativeNumber} x - input value\n* @returns {number} function value\n*\n* @example\n* var v = log2( 4.0 );\n* // returns 2.0\n*\n* @example\n* var v = log2( 8.0 );\n* // returns 3.0\n*\n* @example\n* var v = log2( 0.0 );\n* // returns -Infinity\n*\n* @example\n* var v = log2( Infinity );\n* // returns Infinity\n*\n* @example\n* var v = log2( NaN );\n* // returns NaN\n*\n* @example\n* var v = log2( -4.0 );\n* // returns NaN\n*/\nfunction log2( x ) {\n\tvar hi;\n\tvar lo;\n\tvar hx;\n\tvar lx;\n\tvar f;\n\tvar i;\n\tvar k;\n\n\tif ( isnan( x ) || x < 0.0 ) {\n\t\treturn NaN;\n\t}\n\ttoWords.assign( x, WORDS, 1, 0 );\n\thx = WORDS[ 0 ];\n\tlx = WORDS[ 1 ];\n\tk = 0|0; // asm type annotation\n\tif ( hx < HIGH_MIN_NORMAL_EXP ) {\n\t\t// Case: x < 2**-1022\n\t\tif ( ( (hx&ABS_MASK) | lx ) === 0 ) {\n\t\t\treturn NINF;\n\t\t}\n\t\tk -= 54|0; // asm type annotation\n\n\t\t// Subnormal number, scale up x:\n\t\tx *= TWO54;\n\t\thx = getHighWord( x );\n\t}\n\tif ( hx >= HIGH_MAX_NORMAL_EXP ) {\n\t\treturn x + x;\n\t}\n\tk += ( (hx>>20) - BIAS )|0; // asm type annotation\n\thx &= HIGH_SIGNIFICAND_MASK;\n\ti = ( ( hx+0x95f64 ) & 0x100000 )|0; // asm type annotation\n\n\t// Normalize x or x/2...\n\tx = setHighWord( x, hx|(i^HIGH_BIASED_EXP_0) );\n\tk += (i>>20)|0; // asm type annotation\n\tf = klog( x );\n\tx -= 1;\n\thi = setLowWord( x, 0 );\n\tlo = x - hi;\n\treturn ( (x+f)*IVLN2LO ) + ( (lo+f)*IVLN2HI ) + ( hi*IVLN2HI ) + k;\n}\n\n\n// EXPORTS //\n\nexport default log2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.3999999999940942;\n\t}\n\treturn 0.3999999999940942 + (x * (0.22222198432149784 + (x * 0.15313837699209373))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.6666666666666735;\n\t}\n\treturn 0.6666666666666735 + (x * (0.2857142874366239 + (x * (0.1818357216161805 + (x * 0.14798198605116586))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport ceil from '@stdlib/math-base-special-ceil';\nimport log2 from '@stdlib/math-base-special-log2';\n\n\n// MAIN //\n\n/**\n* Returns the median of a geometric distribution.\n*\n* @param {Probability} p - success probability\n* @returns {NonNegativeInteger} median\n*\n* @example\n* var v = median( 0.1 );\n* // returns 6\n*\n* @example\n* var v = median( 0.5 );\n* // returns 0\n*\n* @example\n* var v = median( 1.1 );\n* // returns NaN\n*\n* @example\n* var v = median( NaN );\n* // returns NaN\n*/\nfunction median( p ) {\n\tif (\n\t\tisnan( p ) ||\n\t\tp < 0.0 ||\n\t\tp > 1.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn ceil( -1.0 / ( log2( 1.0-p ) ) ) - 1.0;\n}\n\n\n// EXPORTS //\n\nexport default median;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns the mode of a geometric distribution.\n*\n* @param {Probability} p - success probability\n* @returns {NonNegativeInteger} mode\n*\n* @example\n* var v = mode( 0.1 );\n* // returns 0\n*\n* @example\n* var v = mode( 0.5 );\n* // returns 0\n*\n* @example\n* var v = mode( 1.1 );\n* // returns NaN\n*\n* @example\n* var v = mode( NaN );\n* // returns NaN\n*/\nfunction mode( p ) {\n\tif (\n\t\tisnan( p ) ||\n\t\tp < 0.0 ||\n\t\tp > 1.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn 0;\n}\n\n\n// EXPORTS //\n\nexport default mode;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport sqrt from '@stdlib/math-base-special-sqrt';\n\n\n// MAIN //\n\n/**\n* Returns the skewness of a geometric distribution.\n*\n* @param {Probability} p - success probability\n* @returns {PositiveNumber} skewness\n*\n* @example\n* var v = skewness( 0.1 );\n* // returns ~2.003\n*\n* @example\n* var v = skewness( 0.5 );\n* // returns ~2.121\n*\n* @example\n* var v = skewness( 1.1 );\n* // returns NaN\n*\n* @example\n* var v = skewness( NaN );\n* // returns NaN\n*/\nfunction skewness( p ) {\n\tif (\n\t\tisnan( p ) ||\n\t\tp <= 0.0 ||\n\t\tp >= 1.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn ( 2.0-p ) / sqrt( 1.0-p );\n}\n\n\n// EXPORTS //\n\nexport default skewness;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport sqrt from '@stdlib/math-base-special-sqrt';\n\n\n// MAIN //\n\n/**\n* Returns the standard deviation of a geometric distribution.\n*\n* @param {Probability} p - success probability\n* @returns {PositiveNumber} standard deviation\n*\n* @example\n* var v = stdev( 0.1 );\n* // returns ~9.487\n*\n* @example\n* var v = stdev( 0.5 );\n* // returns ~1.414\n*\n* @example\n* var v = stdev( 1.1 );\n* // returns NaN\n*\n* @example\n* var v = stdev( NaN );\n* // returns NaN\n*/\nfunction stdev( p ) {\n\tif (\n\t\tisnan( p ) ||\n\t\tp <= 0.0 ||\n\t\tp >= 1.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn sqrt( 1.0-p ) / p;\n}\n\n\n// EXPORTS //\n\nexport default stdev;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns the variance of a geometric distribution.\n*\n* @param {Probability} p - success probability\n* @returns {PositiveNumber} variance\n*\n* @example\n* var v = variance( 0.1 );\n* // returns ~90.0\n*\n* @example\n* var v = variance( 0.5 );\n* // returns 2.0\n*\n* @example\n* var v = variance( 1.1 );\n* // returns NaN\n*\n* @example\n* var v = variance( NaN );\n* // returns NaN\n*/\nfunction variance( p ) {\n\tif (\n\t\tisnan( p ) ||\n\t\tp <= 0.0 ||\n\t\tp >= 1.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn ( 1.0-p ) / ( p*p );\n}\n\n\n// EXPORTS //\n\nexport default variance;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport floor from '@stdlib/math-base-special-floor';\nimport log1p from '@stdlib/math-base-special-log1p';\nimport pow from '@stdlib/math-base-special-pow';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Evaluates the logarithm of the cumulative distribution function (CDF) for a geometric distribution with success probability `p` at a value `x`.\n*\n* @param {number} x - input value\n* @param {Probability} p - success probability\n* @returns {number} evaluated logCDF\n*\n* @example\n* var y = logcdf( 2.0, 0.5 );\n* // returns ~-0.134\n*\n* @example\n* var y = logcdf( 2.0, 0.1 );\n* // returns ~-1.306\n*\n* @example\n* var y = logcdf( -1.0, 0.5 );\n* // returns -Infinity\n*\n* @example\n* var y = logcdf( NaN, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = logcdf( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* // Invalid probability\n* var y = logcdf( 2.0, 1.4 );\n* // returns NaN\n*/\nfunction logcdf( x, p ) {\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( p ) ||\n\t\tp < 0.0 ||\n\t\tp > 1.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x < 0.0 ) {\n\t\treturn NINF;\n\t}\n\tif ( x === PINF ) {\n\t\treturn 0.0;\n\t}\n\tx = floor( x );\n\treturn log1p( -pow( 1.0 - p, x + 1.0 ) );\n}\n\n\n// EXPORTS //\n\nexport default logcdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNonNegativeInteger from '@stdlib/math-base-assert-is-nonnegative-integer';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport ln from '@stdlib/math-base-special-ln';\nimport NINF from '@stdlib/constants-float64-ninf';\n\n\n// MAIN //\n\n/**\n* Evaluates the logarithm of the probability mass function (PMF) for a geometric distribution with success probability `p` at a value `x`.\n*\n* @param {number} x - input value\n* @param {Probability} p - success probability\n* @returns {NonPositiveNumber} logarithm of PMF\n*\n* @example\n* var y = logpmf( 4.0, 0.3 );\n* // returns ~-2.631\n*\n* @example\n* var y = logpmf( 2.0, 0.7 );\n* // returns ~-2.765\n*\n* @example\n* var y = logpmf( -1.0, 0.5 );\n* // returns -Infinity\n*\n* @example\n* var y = logpmf( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = logpmf( NaN, 0.5 );\n* // returns NaN\n*\n* @example\n* // Invalid success probability:\n* var y = logpmf( 2.0, 1.5 );\n* // returns NaN\n*/\nfunction logpmf( x, p ) {\n\tvar q;\n\tif ( isnan( x ) || isnan( p ) ) {\n\t\treturn NaN;\n\t}\n\tif ( p < 0.0 || p > 1.0 ) {\n\t\treturn NaN;\n\t}\n\tif ( isNonNegativeInteger( x ) ) {\n\t\tq = 1.0 - p;\n\t\treturn ln( p ) + (x * ln( q ));\n\t}\n\treturn NINF;\n}\n\n\n// EXPORTS //\n\nexport default logpmf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isProbability from '@stdlib/math-base-assert-is-probability';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport exp from '@stdlib/math-base-special-exp';\nimport ln from '@stdlib/math-base-special-ln';\n\n\n// MAIN //\n\n/**\n* Evaluates the moment-generating function (MGF) for a geometric distribution with success probability `p` at a value `t`.\n*\n* @param {number} t - input value\n* @param {Probability} p - success probability\n* @returns {number} evaluated MGF\n*\n* @example\n* var y = mgf( 0.2, 0.5 );\n* // returns ~1.569\n*\n* @example\n* var y = mgf( 0.4, 0.5 );\n* // returns ~2.936\n*\n* @example\n* // Case: t >= -ln(1-p)\n* var y = mgf( 0.8, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = mgf( NaN, 0.0 );\n* // returns NaN\n*\n* @example\n* var y = mgf( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = mgf( -2.0, -1.0 );\n* // returns NaN\n*\n* @example\n* var y = mgf( 0.2, 2.0 );\n* // returns NaN\n*/\nfunction mgf( t, p ) {\n\tvar et;\n\tvar q;\n\tif ( isnan( t ) || !isProbability( p ) ) {\n\t\treturn NaN;\n\t}\n\tq = 1.0 - p;\n\tif ( t >= -ln( q ) ) {\n\t\treturn NaN;\n\t}\n\tet = exp( t );\n\treturn ( p * et ) / ( 1.0 - (q * et) );\n}\n\n\n// EXPORTS //\n\nexport default mgf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNonNegativeInteger from '@stdlib/math-base-assert-is-nonnegative-integer';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport pow from '@stdlib/math-base-special-pow';\n\n\n// MAIN //\n\n/**\n* Evaluates the probability mass function (PMF) for a geometric distribution with success probability `p` at a value `x`.\n*\n* @param {number} x - input value\n* @param {Probability} p - success probability\n* @returns {Probability} evaluated PMF\n*\n* @example\n* var y = pmf( 4.0, 0.3 );\n* // returns ~0.072\n*\n* @example\n* var y = pmf( 2.0, 0.7 );\n* // returns ~0.063\n*\n* @example\n* var y = pmf( -1.0, 0.5 );\n* // returns 0.0\n*\n* @example\n* var y = pmf( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = pmf( NaN, 0.5 );\n* // returns NaN\n*\n* @example\n* // Invalid success probability:\n* var y = pmf( 2.0, 1.5 );\n* // returns NaN\n*/\nfunction pmf( x, p ) {\n\tvar q;\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( p ) ||\n\t\tp < 0.0 ||\n\t\tp > 1.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( isNonNegativeInteger( x ) ) {\n\t\tq = 1.0 - p;\n\t\treturn p * pow( q, x );\n\t}\n\treturn 0.0;\n}\n\n\n// EXPORTS //\n\nexport default pmf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport log1p from '@stdlib/math-base-special-log1p';\nimport ceil from '@stdlib/math-base-special-ceil';\nimport max from '@stdlib/math-base-special-max';\nimport ln from '@stdlib/math-base-special-ln';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Evaluates the quantile function for a geometric distribution with success probability `p` at a probability `r`.\n*\n* @param {Probability} r - input value\n* @param {Probability} p - success probability\n* @returns {NonNegativeInteger} evaluated quantile function\n*\n* @example\n* var y = quantile( 0.8, 0.4 );\n* // returns 3\n*\n* @example\n* var y = quantile( 0.5, 0.4 );\n* // returns 1\n*\n* @example\n* var y = quantile( 0.9, 0.1 );\n* // returns 21\n*\n* @example\n* var y = quantile( -0.2, 0.1 );\n* // returns NaN\n*\n* @example\n* var y = quantile( NaN, 0.8 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.4, NaN );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.5, -1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.5, 1.5 );\n* // returns NaN\n*/\nfunction quantile( r, p ) {\n\tif (\n\t\tisnan( p ) ||\n\t\tisnan( r ) ||\n\t\tp < 0.0 ||\n\t\tp > 1.0 ||\n\t\tr < 0.0 ||\n\t\tr > 1.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( r === 1.0 ) {\n\t\treturn PINF;\n\t}\n\treturn max( 0.0, ceil( (ln(1.0-r) / log1p(-p))- ( 1 + 1e-12 ) ) );\n}\n\n\n// EXPORTS //\n\nexport default quantile;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nimport defineProperty from '@stdlib/utils-define-property';\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport setReadOnlyAccessor from '@stdlib/utils-define-nonenumerable-read-only-accessor';\nimport { isPrimitive as isProbability } from '@stdlib/assert-is-probability';\nimport entropy from '@stdlib/stats-base-dists-geometric-entropy';\nimport kurtosis from '@stdlib/stats-base-dists-geometric-kurtosis';\nimport mean from '@stdlib/stats-base-dists-geometric-mean';\nimport median from '@stdlib/stats-base-dists-geometric-median';\nimport mode from '@stdlib/stats-base-dists-geometric-mode';\nimport skewness from '@stdlib/stats-base-dists-geometric-skewness';\nimport stdev from '@stdlib/stats-base-dists-geometric-stdev';\nimport variance from '@stdlib/stats-base-dists-geometric-variance';\nimport cdf from '@stdlib/stats-base-dists-geometric-cdf';\nimport logcdf from '@stdlib/stats-base-dists-geometric-logcdf';\nimport logpmf from '@stdlib/stats-base-dists-geometric-logpmf';\nimport mgf from '@stdlib/stats-base-dists-geometric-mgf';\nimport pmf from '@stdlib/stats-base-dists-geometric-pmf';\nimport quantile from '@stdlib/stats-base-dists-geometric-quantile';\nimport format from '@stdlib/string-format';\n\n\n// FUNCTIONS //\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n*/\nfunction geometricCDF( x ) {\n\treturn cdf( x, this.p );\n}\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logCDF\n*/\nfunction geometricLogCDF( x ) {\n\treturn logcdf( x, this.p );\n}\n\n/**\n* Evaluates the natural logarithm of the probability mass function (PMF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logPMF\n*/\nfunction geometricLogPMF( x ) {\n\treturn logpmf( x, this.p );\n}\n\n/**\n* Evaluates the moment-generating function (MGF).\n*\n* @private\n* @param {number} t - input value\n* @returns {number} evaluated MGF\n*/\nfunction geometricMGF( t ) {\n\treturn mgf( t, this.p );\n}\n\n/**\n* Evaluates the probability mass function (PMF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated PMF\n*/\nfunction geometricPMF( x ) {\n\treturn pmf( x, this.p );\n}\n\n/**\n* Evaluates the quantile function.\n*\n* @private\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n*/\nfunction geometricQuantile( p ) {\n\treturn quantile( p, this.p );\n}\n\n\n// MAIN //\n\n/**\n* Geometric distribution constructor.\n*\n* @constructor\n* @param {Probability} [p=0.5] - success probability\n* @throws {TypeError} `p` must be a probability\n* @returns {Geometric} distribution instance\n*\n* @example\n* var geometric = new Geometric();\n*\n* var y = geometric.cdf( 1.8 );\n* // returns 0.75\n*\n* var v = geometric.mode;\n* // returns 0.0\n*/\nfunction Geometric() {\n\tvar p;\n\tif ( !(this instanceof Geometric) ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn new Geometric();\n\t\t}\n\t\treturn new Geometric( arguments[ 0 ] );\n\t}\n\tif ( arguments.length ) {\n\t\tp = arguments[ 0 ];\n\t\tif ( !isProbability( p ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Mean parameter `%s` must be a probability. Value: `%s`.', 'p', p ) );\n\t\t}\n\t} else {\n\t\tp = 0.5;\n\t}\n\tdefineProperty( this, 'p', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn p;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isProbability( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid assignment. Must be a probability. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\tp = value;\n\t\t}\n\t});\n\treturn this;\n}\n\n/**\n* Geometric distribution differential entropy.\n*\n* @name entropy\n* @memberof Geometric.prototype\n* @type {number}\n* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}\n*\n* @example\n* var geometric = new Geometric( 0.4 );\n*\n* var v = geometric.entropy;\n* // returns ~1.683\n*/\nsetReadOnlyAccessor( Geometric.prototype, 'entropy', function get() {\n\treturn entropy( this.p );\n});\n\n/**\n* Geometric distribution excess kurtosis.\n*\n* @name kurtosis\n* @memberof Geometric.prototype\n* @type {number}\n* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}\n*\n* @example\n* var geometric = new Geometric( 0.4 );\n*\n* var v = geometric.kurtosis;\n* // returns ~6.267\n*/\nsetReadOnlyAccessor( Geometric.prototype, 'kurtosis', function get() {\n\treturn kurtosis( this.p );\n});\n\n/**\n* Geometric distribution expected value.\n*\n* @name mean\n* @memberof Geometric.prototype\n* @type {number}\n* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}\n*\n* @example\n* var geometric = new Geometric( 0.4 );\n*\n* var v = geometric.mean;\n* // returns ~1.5\n*/\nsetReadOnlyAccessor( Geometric.prototype, 'mean', function get() {\n\treturn mean( this.p );\n});\n\n/**\n* Geometric distribution median.\n*\n* @name median\n* @memberof Geometric.prototype\n* @type {number}\n* @see [median]{@link https://en.wikipedia.org/wiki/Median}\n*\n* @example\n* var geometric = new Geometric( 0.4 );\n*\n* var v = geometric.median;\n* // returns 1.0\n*/\nsetReadOnlyAccessor( Geometric.prototype, 'median', function get() {\n\treturn median( this.p );\n});\n\n/**\n* Geometric distribution mode.\n*\n* @name mode\n* @memberof Geometric.prototype\n* @type {number}\n* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}\n*\n* @example\n* var geometric = new Geometric( 0.4 );\n*\n* var v = geometric.mode;\n* // returns 0.0\n*/\nsetReadOnlyAccessor( Geometric.prototype, 'mode', function get() {\n\treturn mode( this.p );\n});\n\n/**\n* Geometric distribution skewness.\n*\n* @name skewness\n* @memberof Geometric.prototype\n* @type {number}\n* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}\n*\n* @example\n* var geometric = new Geometric( 0.4 );\n*\n* var v = geometric.skewness;\n* // returns ~2.066\n*/\nsetReadOnlyAccessor( Geometric.prototype, 'skewness', function get() {\n\treturn skewness( this.p );\n});\n\n/**\n* Geometric distribution standard deviation.\n*\n* @name stdev\n* @memberof Geometric.prototype\n* @type {PositiveNumber}\n* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}\n*\n* @example\n* var geometric = new Geometric( 0.4 );\n*\n* var v = geometric.stdev;\n* // returns ~1.936\n*/\nsetReadOnlyAccessor( Geometric.prototype, 'stdev', function get() {\n\treturn stdev( this.p );\n});\n\n/**\n* Geometric distribution variance.\n*\n* @name variance\n* @memberof Geometric.prototype\n* @type {PositiveNumber}\n* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}\n*\n* @example\n* var geometric = new Geometric( 0.4 );\n*\n* var v = geometric.variance;\n* // returns ~3.75\n*/\nsetReadOnlyAccessor( Geometric.prototype, 'variance', function get() {\n\treturn variance( this.p );\n});\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @name cdf\n* @memberof Geometric.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var geometric = new Geometric( 0.2 );\n*\n* var v = geometric.cdf( 1.5 );\n* // returns ~0.36\n*/\nsetReadOnly( Geometric.prototype, 'cdf', geometricCDF );\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (logCDF).\n*\n* @name logcdf\n* @memberof Geometric.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logCDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var geometric = new Geometric( 0.2 );\n*\n* var v = geometric.logcdf( 1.5 );\n* // returns ~-1.022\n*/\nsetReadOnly( Geometric.prototype, 'logcdf', geometricLogCDF );\n\n/**\n* Evaluates the natural logarithm of the probability mass function (logPMF).\n*\n* @name logpdf\n* @memberof Geometric.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logPMF\n* @see [pmf]{@link https://en.wikipedia.org/wiki/Probability_mass_function}\n*\n* @example\n* var geometric = new Geometric( 0.2 );\n*\n* var v = geometric.logpmf( 2.0 );\n* // returns ~-2.056\n*/\nsetReadOnly( Geometric.prototype, 'logpmf', geometricLogPMF );\n\n/**\n* Evaluates the moment-generating function (MGF).\n*\n* @name mgf\n* @memberof Geometric.prototype\n* @type {Function}\n* @param {number} t - input value\n* @returns {number} evaluated MGF\n* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}\n*\n* @example\n* var geometric = new Geometric( 0.2 );\n*\n* var v = geometric.mgf( 0.1 );\n* // returns ~1.908\n*/\nsetReadOnly( Geometric.prototype, 'mgf', geometricMGF );\n\n/**\n* Evaluates the probability mass function (PMF).\n*\n* @name pmf\n* @memberof Geometric.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated PMF\n* @see [pmf]{@link https://en.wikipedia.org/wiki/Probability_mass_function}\n*\n* @example\n* var geometric = new Geometric( 0.2 );\n*\n* var v = geometric.pmf( 2.0 );\n* // returns ~0.128\n*\n* v = geometric.pmf( 0.8 );\n* // returns 0.0\n*/\nsetReadOnly( Geometric.prototype, 'pmf', geometricPMF );\n\n/**\n* Evaluates the quantile function.\n*\n* @name quantile\n* @memberof Geometric.prototype\n* @type {Function}\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}\n*\n* @example\n* var geometric = new Geometric( 0.2 );\n*\n* var v = geometric.quantile( 0.5 );\n* // returns 3.0\n*/\nsetReadOnly( Geometric.prototype, 'quantile', geometricQuantile );\n\n\n// EXPORTS //\n\nexport default Geometric;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Geometric distribution logarithm of cumulative distribution function (CDF).\n*\n* @module @stdlib/stats-base-dists-geometric-logcdf\n*\n* @example\n* import logcdf from '@stdlib/stats-base-dists-geometric-logcdf';\n*\n* var y = logcdf( 2.0, 0.5 );\n* // returns ~-0.134\n*\n* y = logcdf( 2.0, 0.1 );\n* // returns ~-1.306\n*\n* var mylogcdf = logcdf.factory( 0.5 );\n* y = mylogcdf( 3.0 );\n* // returns ~-0.065\n*\n* y = mylogcdf( 1.0 );\n* // returns ~-0.288\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport logcdf from './logcdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( logcdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default logcdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport floor from '@stdlib/math-base-special-floor';\nimport log1p from '@stdlib/math-base-special-log1p';\nimport pow from '@stdlib/math-base-special-pow';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the logarithm of the cumulative distribution function (CDF) for a geometric distribution with success probability `p`.\n*\n* @param {Probability} p - success probability\n* @returns {Function} logCDF\n*\n* @example\n* var logcdf = factory( 0.5 );\n* var y = logcdf( 3.0 );\n* // returns ~-0.065\n*\n* y = logcdf( 1.0 );\n* // returns ~-0.288\n*/\nfunction factory( p ) {\n\tif ( isnan( p ) || p < 0.0 || p > 1.0 ) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn logcdf;\n\n\t/**\n\t* Evaluates the logarithm of the cumulative distribution function (CDF) for a geometric distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {number} evaluated logCDF\n\t*\n\t* @example\n\t* var y = logcdf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction logcdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x < 0.0 ) {\n\t\t\treturn NINF;\n\t\t}\n\t\tif ( x === PINF ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\tx = floor( x );\n\t\treturn log1p( -pow( 1.0 - p, x + 1.0 ) );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Geometric distribution logarithm of probability mass function (PMF).\n*\n* @module @stdlib/stats-base-dists-geometric-logpmf\n*\n* @example\n* import logpmf from '@stdlib/stats-base-dists-geometric-logpmf';\n*\n* var y = logpmf( 4.0, 0.3 );\n* // returns ~-2.631\n*\n* y = logpmf( 2.0, 0.7 );\n* // returns ~-2.765\n*\n* var mylogpmf = logpmf.factory( 0.5 );\n* y = mylogpmf( 3.0 );\n* // returns ~-2.773\n*\n* y = mylogpmf( 1.0 );\n* // returns ~-1.386\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport logpmf from './logpmf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( logpmf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default logpmf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isNonNegativeInteger from '@stdlib/math-base-assert-is-nonnegative-integer';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport ln from '@stdlib/math-base-special-ln';\nimport NINF from '@stdlib/constants-float64-ninf';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the logarithm of the probability mass function (PMF) for a geometric distribution with success probability `p`.\n*\n* @param {Probability} p - success probability\n* @returns {Function} logPMF\n*\n* @example\n* var logpmf = factory( 0.5 );\n* var y = logpmf( 3.0 );\n* // returns ~-2.773\n*\n* y = logpmf( 1.0 );\n* // returns ~-1.386\n*/\nfunction factory( p ) {\n\tif (\n\t\tisnan( p ) ||\n\t\tp < 0.0 ||\n\t\tp > 1.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn logpmf;\n\n\t/**\n\t* Evaluates the logarithm of the probability mass function (PMF) for a geometric distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {NonPositiveNumber} evaluated logPMF\n\t*\n\t* @example\n\t* var y = logpmf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction logpmf( x ) {\n\t\tvar q;\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( isNonNegativeInteger( x ) ) {\n\t\t\tq = 1.0 - p;\n\t\t\treturn ln( p ) + (x * ln( q ));\n\t\t}\n\t\treturn NINF;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate the moment-generating function (MGF) for a geometric distribution.\n*\n* @module @stdlib/stats-base-dists-geometric-mgf\n*\n* @example\n* import mgf from '@stdlib/stats-base-dists-geometric-mgf';\n*\n* var y = mgf( 0.2, 0.5 );\n* // returns ~1.569\n*\n* y = mgf( 0.4, 0.5 );\n* // returns ~2.936\n*\n* var mymgf = mgf.factory( 0.8 );\n* y = mymgf( -0.2 );\n* // returns ~0.783\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport mgf from './mgf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( mgf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default mgf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isProbability from '@stdlib/math-base-assert-is-probability';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport exp from '@stdlib/math-base-special-exp';\nimport ln from '@stdlib/math-base-special-ln';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the moment-generating function (MGF) of a geometric distribution with success probability `p`.\n*\n* @param {Probability} p - success probability\n* @returns {Function} MGF\n*\n* @example\n* var mgf = factory( 0.8 );\n* var y = mgf( -0.2 );\n* // returns ~0.783\n*/\nfunction factory( p ) {\n\tif ( !isProbability( p ) ) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn mgf;\n\n\t/**\n\t* Evaluates the moment-generating function (MGF) for a geometric distribution.\n\t*\n\t* @private\n\t* @param {number} t - input value\n\t* @returns {number} evaluated MGF\n\t*\n\t* @example\n\t* var y = mgf( 0.5 );\n\t* // returns <number>\n\t*/\n\tfunction mgf( t ) {\n\t\tvar et;\n\t\tvar q;\n\t\tif ( isnan( t ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tq = 1.0 - p;\n\t\tif ( t >= -ln( q ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tet = exp( t );\n\t\treturn ( p * et ) / ( 1.0 - (q * et ));\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Geometric distribution probability mass function (PMF).\n*\n* @module @stdlib/stats-base-dists-geometric-pmf\n*\n* @example\n* import pmf from '@stdlib/stats-base-dists-geometric-pmf';\n*\n* var y = pmf( 4.0, 0.3 );\n* // returns ~0.072\n*\n* y = pmf( 2.0, 0.7 );\n* // returns ~0.063\n*\n* y = pmf( -1.0, 0.5 );\n* // returns 0.0\n*\n* var mypmf = pmf.factory( 0.5 );\n* y = mypmf( 3.0 );\n* // returns 0.0625\n*\n* y = mypmf( 1.0 );\n* // returns 0.25\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport pmf from './pmf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( pmf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default pmf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNonNegativeInteger from '@stdlib/math-base-assert-is-nonnegative-integer';\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport pow from '@stdlib/math-base-special-pow';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the probability mass function (PMF) for a geometric distribution with success probability `p`.\n*\n* @param {Probability} p - success probability\n* @returns {Function} PMF\n*\n* @example\n* var pmf = factory( 0.5 );\n* var y = pmf( 3.0 );\n* // returns 0.0625\n*\n* y = pmf( 1.0 );\n* // returns 0.25\n*/\nfunction factory( p ) {\n\tif (\n\t\tisnan( p ) ||\n\t\tp < 0.0 ||\n\t\tp > 1.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn pmf;\n\n\t/**\n\t* Evaluates the probability mass function (PMF) for a geometric distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated PMF\n\t*\n\t* @example\n\t* var y = pmf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction pmf( x ) {\n\t\tvar q;\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( isNonNegativeInteger( x ) ) {\n\t\t\tq = 1.0 - p;\n\t\t\treturn p * pow( q, x );\n\t\t}\n\t\treturn 0.0;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Geometric distribution quantile function.\n*\n* @module @stdlib/stats-base-dists-geometric-quantile\n*\n* @example\n* import quantile from '@stdlib/stats-base-dists-geometric-quantile';\n*\n* var y = quantile( 0.8, 0.4 );\n* // returns 3\n*\n* y = quantile( 0.5, 0.4 );\n* // returns 1\n*\n* var myquantile = quantile.factory( 0.4 );\n* y = myquantile( 0.4 );\n* // returns 0\n*\n* y = myquantile( 0.8 );\n* // returns 3\n*\n* y = myquantile( 1.0 );\n* // returns Infinity\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport quantile from './quantile.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( quantile, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default quantile;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport log1p from '@stdlib/math-base-special-log1p';\nimport ceil from '@stdlib/math-base-special-ceil';\nimport max from '@stdlib/math-base-special-max';\nimport ln from '@stdlib/math-base-special-ln';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the quantile function for a geometric distribution with success probability `p`.\n*\n* @param {Probability} p - success probability\n* @returns {Function} quantile function\n*\n* @example\n* var quantile = factory( 0.4 );\n* var y = quantile( 0.4 );\n* // returns 0\n*\n* y = quantile( 0.8 );\n* // returns 3\n*\n* y = quantile( 1.0 );\n* // returns Infinity\n*/\nfunction factory( p ) {\n\tif ( isnan( p ) || p < 0.0 || p > 1.0 ) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn quantile;\n\n\t/**\n\t* Evaluates the quantile function for a geometric distribution.\n\t*\n\t* @private\n\t* @param {Probability} r - input value\n\t* @returns {NonNegativeInteger} evaluated quantile function\n\t*\n\t* @example\n\t* var y = quantile( 0.3 );\n\t* // returns <number>\n\t*/\n\tfunction quantile( r ) {\n\t\tif ( isnan( r ) || r < 0.0 || r > 1.0 ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( r === 1.0 ) {\n\t\t\treturn PINF;\n\t\t}\n\t\treturn max( 0.0, ceil( (ln(1.0-r) / log1p(-p)) - (1.0 + 1e-12) ) );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace geometric\n*/\nvar geometric = {};\n\n/**\n* @name cdf\n* @memberof geometric\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/geometric/cdf}\n*/\nimport cdf from '@stdlib/stats-base-dists-geometric-cdf';\nsetReadOnly( geometric, 'cdf', cdf );\n\n/**\n* @name Geometric\n* @memberof geometric\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/geometric/ctor}\n*/\nimport Geometric from '@stdlib/stats-base-dists-geometric-ctor';\nsetReadOnly( geometric, 'Geometric', Geometric );\n\n/**\n* @name entropy\n* @memberof geometric\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/geometric/entropy}\n*/\nimport entropy from '@stdlib/stats-base-dists-geometric-entropy';\nsetReadOnly( geometric, 'entropy', entropy );\n\n/**\n* @name kurtosis\n* @memberof geometric\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/geometric/kurtosis}\n*/\nimport kurtosis from '@stdlib/stats-base-dists-geometric-kurtosis';\nsetReadOnly( geometric, 'kurtosis', kurtosis );\n\n/**\n* @name logcdf\n* @memberof geometric\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/geometric/logcdf}\n*/\nimport logcdf from '@stdlib/stats-base-dists-geometric-logcdf';\nsetReadOnly( geometric, 'logcdf', logcdf );\n\n/**\n* @name logpmf\n* @memberof geometric\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/geometric/logpmf}\n*/\nimport logpmf from '@stdlib/stats-base-dists-geometric-logpmf';\nsetReadOnly( geometric, 'logpmf', logpmf );\n\n/**\n* @name mean\n* @memberof geometric\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/geometric/mean}\n*/\nimport mean from '@stdlib/stats-base-dists-geometric-mean';\nsetReadOnly( geometric, 'mean', mean );\n\n/**\n* @name median\n* @memberof geometric\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/geometric/median}\n*/\nimport median from '@stdlib/stats-base-dists-geometric-median';\nsetReadOnly( geometric, 'median', median );\n\n/**\n* @name mgf\n* @memberof geometric\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/geometric/mgf}\n*/\nimport mgf from '@stdlib/stats-base-dists-geometric-mgf';\nsetReadOnly( geometric, 'mgf', mgf );\n\n/**\n* @name mode\n* @memberof geometric\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/geometric/mode}\n*/\nimport mode from '@stdlib/stats-base-dists-geometric-mode';\nsetReadOnly( geometric, 'mode', mode );\n\n/**\n* @name pmf\n* @memberof geometric\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/geometric/pmf}\n*/\nimport pmf from '@stdlib/stats-base-dists-geometric-pmf';\nsetReadOnly( geometric, 'pmf', pmf );\n\n/**\n* @name quantile\n* @memberof geometric\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/geometric/quantile}\n*/\nimport quantile from '@stdlib/stats-base-dists-geometric-quantile';\nsetReadOnly( geometric, 'quantile', quantile );\n\n/**\n* @name skewness\n* @memberof geometric\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/geometric/skewness}\n*/\nimport skewness from '@stdlib/stats-base-dists-geometric-skewness';\nsetReadOnly( geometric, 'skewness', skewness );\n\n/**\n* @name stdev\n* @memberof geometric\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/geometric/stdev}\n*/\nimport stdev from '@stdlib/stats-base-dists-geometric-stdev';\nsetReadOnly( geometric, 'stdev', stdev );\n\n/**\n* @name variance\n* @memberof geometric\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/geometric/variance}\n*/\nimport variance from '@stdlib/stats-base-dists-geometric-variance';\nsetReadOnly( geometric, 'variance', variance );\n\n\n// EXPORTS //\n\nexport default geometric;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport exp from '@stdlib/math-base-special-exp';\n\n\n// MAIN //\n\n/**\n* Evaluates the cumulative distribution function (CDF) for a Gumbel distribution with location parameter `mu` and scale parameter `beta` at a value `x`.\n*\n* @param {number} x - input value\n* @param {number} mu - location parameter\n* @param {PositiveNumber} beta - scale parameter\n* @returns {Probability} evaluated CDF\n*\n* @example\n* var y = cdf( 10.0, 0.0, 3.0 );\n* // returns ~0.965\n*\n* @example\n* var y = cdf( -2.0, 0.0, 3.0 );\n* // returns ~0.143\n*\n* @example\n* var y = cdf( 0.0, 0.0, 1.0 );\n* // returns ~0.368\n*\n* @example\n* var y = cdf( NaN, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, 0.0, NaN );\n* // returns NaN\n*\n* @example\n* // Negative scale parameter:\n* var y = cdf( 0.0, 0.0, -1.0 );\n* // returns NaN\n*/\nfunction cdf( x, mu, beta ) {\n\tvar z;\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( mu ) ||\n\t\tisnan( beta ) ||\n\t\tbeta <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tz = ( x - mu ) / beta;\n\treturn exp( -exp( -z ) );\n}\n\n\n// EXPORTS //\n\nexport default cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport ln from '@stdlib/math-base-special-ln';\nimport GAMMA from '@stdlib/constants-float64-eulergamma';\n\n\n// MAIN //\n\n/**\n* Returns the differential entropy for a Gumbel distribution with location `mu` and scale `beta`.\n*\n* @param {number} mu - location parameter\n* @param {PositiveNumber} beta - scale parameter\n* @returns {number} entropy\n*\n* @example\n* var y = entropy( 0.0, 1.0 );\n* // returns ~1.577\n*\n* @example\n* var y = entropy( 5.0, 2.0 );\n* // returns ~2.27\n*\n* @example\n* var y = entropy( NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = entropy( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = entropy( 0.0, 0.0 );\n* // returns NaN\n*/\nfunction entropy( mu, beta ) {\n\tif (\n\t\tisnan( mu ) ||\n\t\tisnan( beta ) ||\n\t\tbeta <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn ln( beta ) + GAMMA + 1.0;\n}\n\n\n// EXPORTS //\n\nexport default entropy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns the excess kurtosis for a Gumbel distribution with location `mu` and scale `beta`.\n*\n* @param {number} mu - location parameter\n* @param {PositiveNumber} beta - scale parameter\n* @returns {number} excess kurtosis\n*\n* @example\n* var y = kurtosis( 0.0, 1.0 );\n* // returns 2.4\n*\n* @example\n* var y = kurtosis( 5.0, 2.0 );\n* // returns 2.4\n*\n* @example\n* var y = kurtosis( NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = kurtosis( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = kurtosis( 0.0, 0.0 );\n* // returns NaN\n*/\nfunction kurtosis( mu, beta ) {\n\tif (\n\t\tisnan( mu ) ||\n\t\tisnan( beta ) ||\n\t\tbeta <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn 12.0 / 5.0;\n}\n\n\n// EXPORTS //\n\nexport default kurtosis;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport GAMMA from '@stdlib/constants-float64-eulergamma';\n\n\n// MAIN //\n\n/**\n* Returns the mean for a Gumbel distribution with location `mu` and scale `beta`.\n*\n* @param {number} mu - location parameter\n* @param {PositiveNumber} beta - scale parameter\n* @returns {number} mean\n*\n* @example\n* var y = mean( 0.0, 1.0 );\n* // returns ~0.577\n*\n* @example\n* var y = mean( 5.0, 2.0 );\n* // returns ~6.154\n*\n* @example\n* var y = mean( NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = mean( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = mean( 0.0, 0.0 );\n* // returns NaN\n*/\nfunction mean( mu, beta ) {\n\tif (\n\t\tisnan( mu ) ||\n\t\tisnan( beta ) ||\n\t\tbeta <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn mu + ( beta * GAMMA );\n}\n\n\n// EXPORTS //\n\nexport default mean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Gumbel distribution cumulative distribution function (CDF).\n*\n* @module @stdlib/stats-base-dists-gumbel-cdf\n*\n* @example\n* import cdf from '@stdlib/stats-base-dists-gumbel-cdf';\n*\n* var y = cdf( 10.0, 0.0, 3.0 );\n* // returns ~0.965\n*\n* y = cdf( 0.0, 0.0, 3.0 );\n* // returns ~0.368\n*\n* var myCDF = cdf.factory( 2.0, 3.0 );\n* y = myCDF( 10.0 );\n* // returns ~0.933\n*\n* y = myCDF( 2.0 );\n* // returns ~0.368\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport cdf from './cdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( cdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport exp from '@stdlib/math-base-special-exp';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the cumulative distribution function (CDF) for a Gumbel distribution with location parameter `mu` and scale parameter `beta`.\n*\n* @param {number} mu - location parameter\n* @param {PositiveNumber} beta - scale parameter\n* @returns {Function} CDF\n*\n* @example\n* var cdf = factory( 0.0, 3.0 );\n*\n* var y = cdf( 10.0 );\n* // returns ~0.965\n*\n* y = cdf( -2.0 );\n* // returns ~0.143\n*/\nfunction factory( mu, beta ) {\n\tif (\n\t\tisnan( mu ) ||\n\t\tisnan( beta ) ||\n\t\tbeta <= 0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn cdf;\n\n\t/**\n\t* Evaluates the cumulative distribution function (CDF) for a Gumbel distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated CDF\n\t*\n\t* @example\n\t* var y = cdf( -2.0 );\n\t* // returns <number>\n\t*/\n\tfunction cdf( x ) {\n\t\tvar z;\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tz = ( x - mu ) / beta;\n\t\treturn exp( -exp( -z ) );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport ln from '@stdlib/math-base-special-ln';\nimport LN2 from '@stdlib/constants-float64-ln-two';\n\n\n// VARIABLES //\n\nvar LLN2 = ln( LN2 );\n\n\n// MAIN //\n\n/**\n* Returns the median for a Gumbel distribution with location `mu` and scale `beta`.\n*\n* @param {number} mu - location parameter\n* @param {PositiveNumber} beta - scale parameter\n* @returns {number} median\n*\n* @example\n* var y = median( 0.0, 1.0 );\n* // returns ~0.367\n*\n* @example\n* var y = median( 5.0, 2.0 );\n* // returns ~5.733\n*\n* @example\n* var y = median( NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = median( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = median( 0.0, 0.0 );\n* // returns NaN\n*/\nfunction median( mu, beta ) {\n\tif (\n\t\tisnan( mu ) ||\n\t\tisnan( beta ) ||\n\t\tbeta <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn mu - ( beta * LLN2 );\n}\n\n\n// EXPORTS //\n\nexport default median;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns the mode for a Gumbel distribution with location `mu` and scale `beta`.\n*\n* @param {number} mu - location parameter\n* @param {PositiveNumber} beta - scale parameter\n* @returns {number} mode\n*\n* @example\n* var y = mode( 0.0, 1.0 );\n* // returns 0.0\n*\n* @example\n* var y = mode( 5.0, 2.0 );\n* // returns 5.0\n*\n* @example\n* var y = mode( NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = mode( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = mode( 0.0, 0.0 );\n* // returns NaN\n*/\nfunction mode( mu, beta ) {\n\tif (\n\t\tisnan( mu ) ||\n\t\tisnan( beta ) ||\n\t\tbeta <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn mu;\n}\n\n\n// EXPORTS //\n\nexport default mode;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport zeta from '@stdlib/math-base-special-riemann-zeta';\nimport PI from '@stdlib/constants-float64-pi';\n\n\n// VARIABLES //\n\nvar SKEWNESS = 12.0 * sqrt( 6.0 ) * zeta( 3.0 ) / ( PI*PI*PI );\n\n\n// MAIN //\n\n/**\n* Returns the skewness for a Gumbel distribution with location `mu` and scale `beta`.\n*\n* @param {number} mu - location parameter\n* @param {PositiveNumber} beta - scale parameter\n* @returns {number} skewness\n*\n* @example\n* var y = skewness( 0.0, 1.0 );\n* // returns ~1.14\n*\n* @example\n* var y = skewness( 5.0, 2.0 );\n* // returns ~1.14\n*\n* @example\n* var y = skewness( NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = skewness( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = skewness( 0.0, 0.0 );\n* // returns NaN\n*/\nfunction skewness( mu, beta ) {\n\tif (\n\t\tisnan( mu ) ||\n\t\tisnan( beta ) ||\n\t\tbeta <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn SKEWNESS;\n}\n\n\n// EXPORTS //\n\nexport default skewness;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_60_0/boost/math/special_functions/zeta.hpp}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isInteger from '@stdlib/math-base-assert-is-integer';\nimport abs from '@stdlib/math-base-special-abs';\nimport exp from '@stdlib/math-base-special-exp';\nimport floor from '@stdlib/math-base-special-floor';\nimport gamma from '@stdlib/math-base-special-gamma';\nimport gammaln from '@stdlib/math-base-special-gammaln';\nimport sinpi from '@stdlib/math-base-special-sinpi';\nimport pow from '@stdlib/math-base-special-pow';\nimport ln from '@stdlib/math-base-special-ln';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport TWO_PI from '@stdlib/constants-float64-two-pi';\nimport SQRT_EPSILON from '@stdlib/constants-float64-sqrt-eps';\nimport LN_SQRT_TWO_PI from '@stdlib/constants-float64-ln-sqrt-two-pi';\nimport ODD_POSITIVE_INTEGERS from './odd_positive_integers.json';\nimport EVEN_NONNEGATIVE_INTEGERS from './even_nonnegative_integers.json';\nimport BERNOULLI from './bernoulli.json';\nimport rateval1 from './rational_p1q1.js';\nimport rateval2 from './rational_p2q2.js';\nimport rateval3 from './rational_p3q3.js';\nimport rateval4 from './rational_p4q4.js';\nimport rateval5 from './rational_p5q5.js';\nimport rateval6 from './rational_p6q6.js';\n\n\n// VARIABLES //\n\nvar MAX_BERNOULLI_2N = 129;\nvar MAX_FACTORIAL = 170; // TODO: consider making external constant\nvar MAX_LN = 709; // TODO: consider making external constant\nvar Y1 = 1.2433929443359375;\nvar Y3 = 0.6986598968505859375;\n\n\n// MAIN //\n\n/**\n* Evaluates the Riemann zeta function.\n*\n* ## Method\n*\n* 1.  First, we use the reflection formula\n*\n*     ```tex\n*     \\zeta(1-s) = 2 \\sin\\biggl(\\frac{\\pi(1-s)}{2}\\biggr)(2\\pi^{-s})\\Gamma(s)\\zeta(s)\n*     ```\n*\n*     to make \\\\(s\\\\) positive.\n*\n* 2.  For \\\\(s \\in (0,1)\\\\), we use the approximation\n*\n*     ```tex\n*     \\zeta(s) = \\frac{C + \\operatorname{R}(1-s) - s}{1-s}\n*     ```\n*\n*     with rational approximation \\\\(\\operatorname{R}(1-z)\\\\) and constant \\\\(C\\\\).\n*\n* 3.  For \\\\(s \\in (1,4)\\\\), we use the approximation\n*\n*     ```tex\n*     \\zeta(s) = C + \\operatorname{R}(s-n) + \\frac{1}{s-1}\n*     ```\n*\n*     with rational approximation \\\\(\\operatorname{R}(z-n)\\\\), constant \\\\(C\\\\), and integer \\\\(n\\\\).\n*\n* 4.  For \\\\(s > 4\\\\), we use the approximation\n*\n*     ```tex\n*     \\zeta(s) = 1 + e^{\\operatorname{R}(z-n)}\n*     ```\n*\n*     with rational approximation \\\\(\\operatorname{R}(z-n)\\\\) and integer \\\\(n\\\\).\n*\n* 5.  For negative odd integers, we use the closed form\n*\n*     ```tex\n*     \\zeta(-n) = \\frac{(-1)^n}{n+1} B_{n+1}\n*     ```\n*\n*     where \\\\(B_{n+1}\\\\) is a Bernoulli number.\n*\n* 6.  For negative even integers, we use the closed form\n*\n*     ```tex\n*     \\zeta(-2n) = 0\n*     ```\n*\n* 7.  For nonnegative even integers, we could use the closed form\n*\n*     ```tex\n*     \\zeta(2n) = \\frac{(-1)^{n-1}2^{2n-1}\\pi^{2n}}{(2n)!} B_{2n}\n*     ```\n*\n*     where \\\\(B_{2n}\\\\) is a Bernoulli number. However, to speed computation, we use precomputed values (Wolfram Alpha).\n*\n* 8.  For positive negative integers, we use precomputed values (Wolfram Alpha), as these values are useful for certain infinite series calculations.\n*\n*\n* ## Notes\n*\n* -   \\\\(\\[\\approx 1.5\\mbox{e-}8, 1)\\\\)\n*\n*     -   max deviation: \\\\(2.020\\mbox{e-}18\\\\)\n*     -   expected error: \\\\(-2.020\\mbox{e-}18\\\\)\n*     -   max error found (double): \\\\(3.994987\\mbox{e-}17\\\\)\n*\n* -   \\\\(\\[1,2\\]\\\\)\n*\n*     -   max deviation: \\\\(9.007\\mbox{e-}20\\\\)\n*     -   expected error: \\\\(9.007\\mbox{e-}20\\\\)\n*\n* -   \\\\((2,4\\]\\\\)\n*\n*     -   max deviation: \\\\(5.946\\mbox{e-}22\\\\)\n*     -   expected error: \\\\(-5.946\\mbox{e-}22\\\\)\n*\n* -   \\\\((4,7\\]\\\\)\n*\n*     -   max deviation: \\\\(2.955\\mbox{e-}17\\\\)\n*     -   expected error: \\\\(2.955\\mbox{e-}17\\\\)\n*     -   max error found (double): \\\\(2.009135\\mbox{e-}16\\\\)\n*\n* -   \\\\((7,15)\\\\)\n*\n*     -   max deviation: \\\\(7.117\\mbox{e-}16\\\\)\n*     -   expected error: \\\\(7.117\\mbox{e-}16\\\\)\n*     -   max error found (double): \\\\(9.387771\\mbox{e-}16\\\\)\n*\n* -   \\\\(\\[15,36)\\\\)\n*\n*     -   max error (in interpolated form): \\\\(1.668\\mbox{e-}17\\\\)\n*     -   max error found (long double): \\\\(1.669714\\mbox{e-}17\\\\)\n*\n*\n* @param {number} s - input value\n* @returns {number} function value\n*\n* @example\n* var v = zeta( 1.1 );\n* // returns ~10.584\n*\n* @example\n* var v = zeta( -4.0 );\n* // returns 0.0\n*\n* @example\n* var v = zeta( 70.0 );\n* // returns 1.0\n*\n* @example\n* var v = zeta( 0.5 );\n* // returns ~-1.46\n*\n* @example\n* var v = zeta( 1.0 ); // pole\n* // returns NaN\n*\n* @example\n* var v = zeta( NaN );\n* // returns NaN\n*/\nfunction zeta( s ) {\n\tvar tmp;\n\tvar sc;\n\tvar as;\n\tvar is;\n\tvar r;\n\tvar n;\n\n\t// Check for `NaN`:\n\tif ( isnan( s ) ) {\n\t\treturn NaN;\n\t}\n\t// Check for a pole:\n\tif ( s === 1.0 ) {\n\t\treturn NaN;\n\t}\n\t// Check for large value:\n\tif ( s >= 56.0 ) {\n\t\treturn 1.0;\n\t}\n\t// Check for a closed form (integers):\n\tif ( isInteger( s ) ) {\n\t\t// Cast `s` to a 32-bit signed integer:\n\t\tis = s|0; // asm type annotation\n\n\t\t// Check that `s` does not exceed MAX_INT32:\n\t\tif ( is === s ) {\n\t\t\tif ( is < 0 ) {\n\t\t\t\tas = (-is)|0; // asm type annotation\n\n\t\t\t\t// Check if even negative integer:\n\t\t\t\tif ( (as&1) === 0 ) {\n\t\t\t\t\treturn 0.0;\n\t\t\t\t}\n\t\t\t\tn = ( (as+1) / 2 )|0; // asm type annotation\n\n\t\t\t\t// Check if less than max Bernoulli number:\n\t\t\t\tif ( n <= MAX_BERNOULLI_2N ) {\n\t\t\t\t\treturn -BERNOULLI[ n ] / (as+1.0);\n\t\t\t\t}\n\t\t\t\t// fall through...\n\t\t\t}\n\t\t\t// Check if even nonnegative integer:\n\t\t\telse if ( (is&1) === 0 ) {\n\t\t\t\treturn EVEN_NONNEGATIVE_INTEGERS[ is/2 ];\n\t\t\t}\n\t\t\t// Must be a odd positive integer:\n\t\t\telse {\n\t\t\t\treturn ODD_POSITIVE_INTEGERS[ (is-3)/2 ];\n\t\t\t}\n\t\t}\n\t\t// fall through...\n\t}\n\tif ( abs(s) < SQRT_EPSILON ) {\n\t\treturn -0.5 - (LN_SQRT_TWO_PI * s);\n\t}\n\tsc = 1.0 - s;\n\tif ( s < 0.0 ) {\n\t\t// Check if even negative integer:\n\t\tif ( floor(s/2.0) === s/2.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\t// Swap `s` and `sc`:\n\t\ttmp = s;\n\t\ts = sc;\n\t\tsc = tmp;\n\n\t\t// Determine if computation will overflow:\n\t\tif ( s > MAX_FACTORIAL ) {\n\t\t\ttmp = sinpi( 0.5*sc ) * 2.0 * zeta( s );\n\t\t\tr = gammaln( s );\n\t\t\tr -= s * ln( TWO_PI );\n\t\t\tif ( r > MAX_LN ) {\n\t\t\t\treturn ( tmp < 0.0 ) ? NINF : PINF;\n\t\t\t}\n\t\t\treturn tmp * exp( r );\n\t\t}\n\t\treturn sinpi( 0.5*sc ) * 2.0 * pow( TWO_PI, -s ) * gamma( s ) * zeta( s ); // eslint-disable-line max-len\n\t}\n\tif ( s < 1.0 ) {\n\t\ttmp = rateval1( sc );\n\t\ttmp -= Y1;\n\t\ttmp += sc;\n\t\ttmp /= sc;\n\t\treturn tmp;\n\t}\n\tif ( s <= 2.0 ) {\n\t\tsc = -sc;\n\t\ttmp = 1.0 / sc;\n\t\treturn tmp + rateval2( sc );\n\t}\n\tif ( s <= 4.0 ) {\n\t\ttmp = Y3 + ( 1.0 / (-sc) );\n\t\treturn tmp + rateval3( s-2.0 );\n\t}\n\tif ( s <= 7.0 ) {\n\t\ttmp = rateval4( s-4.0 );\n\t\treturn 1.0 + exp( tmp );\n\t}\n\tif ( s < 15.0 ) {\n\t\ttmp = rateval5( s-7.0 );\n\t\treturn 1.0 + exp( tmp );\n\t}\n\tif ( s < 36.0 ) {\n\t\ttmp = rateval6( s-15.0 );\n\t\treturn 1.0 + exp( tmp );\n\t}\n\t// s < 56\n\treturn 1.0 + pow( 2.0, -s );\n}\n\n\n// EXPORTS //\n\nexport default zeta;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn 0.2433929443359375;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = 0.2433929443359375 + (x * (-0.4909247051635357 + (x * (0.055761621477604675 + (x * (-0.003209124988790859 + (x * (0.0004515345286457964 + (x * -0.000009332412703570615))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (-0.27996033431034445 + (x * (0.04196762233099861 + (x * (-0.00413421406552171 + (x * (0.00024978985622317937 + (x * -0.000010185578841856403))))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = -0.000009332412703570615 + (x * (0.0004515345286457964 + (x * (-0.003209124988790859 + (x * (0.055761621477604675 + (x * (-0.4909247051635357 + (x * 0.2433929443359375))))))))); // eslint-disable-line max-len\n\t\ts2 = -0.000010185578841856403 + (x * (0.00024978985622317937 + (x * (-0.00413421406552171 + (x * (0.04196762233099861 + (x * (-0.27996033431034445 + (x * 1.0))))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn 0.5772156649015329;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = 0.5772156649015329 + (x * (0.24321064694010716 + (x * (0.04173646739882165 + (x * (0.003902520870728433 + (x * (0.0002496063671518772 + (x * 0.00001101084409767329))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (0.29520127712663174 + (x * (0.043460910607305496 + (x * (0.004349305820858264 + (x * (0.0002557842261404885 + (x * 0.000010991819782396113))))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = 0.00001101084409767329 + (x * (0.0002496063671518772 + (x * (0.003902520870728433 + (x * (0.04173646739882165 + (x * (0.24321064694010716 + (x * 0.5772156649015329))))))))); // eslint-disable-line max-len\n\t\ts2 = 0.000010991819782396113 + (x * (0.0002557842261404885 + (x * (0.004349305820858264 + (x * (0.043460910607305496 + (x * (0.29520127712663174 + (x * 1.0))))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn -0.053725830002359504;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = -0.053725830002359504 + (x * (0.04451634732923656 + (x * (0.012867767353451996 + (x * (0.0009754177045739176 + (x * (0.00007698751015736541 + (x * (0.000003280325100003831 + (x * 0.0))))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (0.3338319455303405 + (x * (0.048779843129140764 + (x * (0.0047903970857355845 + (x * (0.00027077670395633634 + (x * (0.000010695186753205734 + (x * 2.3627662397497864e-8))))))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = 0.0 + (x * (0.000003280325100003831 + (x * (0.00007698751015736541 + (x * (0.0009754177045739176 + (x * (0.012867767353451996 + (x * (0.04451634732923656 + (x * -0.053725830002359504))))))))))); // eslint-disable-line max-len\n\t\ts2 = 2.3627662397497864e-8 + (x * (0.000010695186753205734 + (x * (0.00027077670395633634 + (x * (0.0047903970857355845 + (x * (0.048779843129140764 + (x * (0.3338319455303405 + (x * 1.0))))))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn -2.497101906022594;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = -2.497101906022594 + (x * (-2.600133018094757 + (x * (-0.9392604353771099 + (x * (-0.13844861799574154 + (x * (-0.007017212405498024 + (x * (-0.000022925731059489392 + (x * (0.0 + (x * (0.0 + (x * 0.0))))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (0.7060390259377451 + (x * (0.15739599649558628 + (x * (0.010611795097684508 + (x * (-0.000036910273311764616 + (x * (0.0000049340956392759 + (x * (-2.3405548702528722e-7 + (x * (7.188337293654598e-9 + (x * -1.1292001134749475e-10))))))))))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = 0.0 + (x * (0.0 + (x * (0.0 + (x * (-0.000022925731059489392 + (x * (-0.007017212405498024 + (x * (-0.13844861799574154 + (x * (-0.9392604353771099 + (x * (-2.600133018094757 + (x * -2.497101906022594))))))))))))))); // eslint-disable-line max-len\n\t\ts2 = -1.1292001134749475e-10 + (x * (7.188337293654598e-9 + (x * (-2.3405548702528722e-7 + (x * (0.0000049340956392759 + (x * (-0.000036910273311764616 + (x * (0.010611795097684508 + (x * (0.15739599649558628 + (x * (0.7060390259377451 + (x * 1.0))))))))))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn -4.785580284951356;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = -4.785580284951356 + (x * (-1.8919736488197254 + (x * (-0.21140713487441282 + (x * (-0.0001892047582600767 + (x * (0.0011514092388917874 + (x * (0.00006399492042131645 + (x * (0.000001393489324453249 + (x * (0.0 + (x * 0.0))))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (0.24434533737818856 + (x * (0.008733707544922887 + (x * (-0.0011759276533443448 + (x * (-0.00007437436828999331 + (x * (-0.0000021750464515767985 + (x * (4.710012640030765e-9 + (x * (-8.333784406253855e-11 + (x * 6.998415452048457e-13))))))))))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = 0.0 + (x * (0.0 + (x * (0.000001393489324453249 + (x * (0.00006399492042131645 + (x * (0.0011514092388917874 + (x * (-0.0001892047582600767 + (x * (-0.21140713487441282 + (x * (-1.8919736488197254 + (x * -4.785580284951356))))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 6.998415452048457e-13 + (x * (-8.333784406253855e-11 + (x * (4.710012640030765e-9 + (x * (-0.0000021750464515767985 + (x * (-0.00007437436828999331 + (x * (-0.0011759276533443448 + (x * (0.008733707544922887 + (x * (0.24434533737818856 + (x * 1.0))))))))))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn -10.39489505733089;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = -10.39489505733089 + (x * (-2.858272196711067 + (x * (-0.34772826653924577 + (x * (-0.025115606465534634 + (x * (-0.001194591734169687 + (x * (-0.00003825293235079675 + (x * (-7.855236337967234e-7 + (x * -8.214657090954655e-9))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (0.2081963335726719 + (x * (0.019568765731720502 + (x * (0.0011107963810248593 + (x * (0.000040850774626603926 + (x * (9.555611230656935e-7 + (x * (1.185071534740229e-8 + (x * 2.226094836273526e-15))))))))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = -8.214657090954655e-9 + (x * (-7.855236337967234e-7 + (x * (-0.00003825293235079675 + (x * (-0.001194591734169687 + (x * (-0.025115606465534634 + (x * (-0.34772826653924577 + (x * (-2.858272196711067 + (x * -10.39489505733089))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 2.226094836273526e-15 + (x * (1.185071534740229e-8 + (x * (9.555611230656935e-7 + (x * (0.000040850774626603926 + (x * (0.0011107963810248593 + (x * (0.019568765731720502 + (x * (0.2081963335726719 + (x * 1.0))))))))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport PI from '@stdlib/constants-float64-pi';\n\n\n// VARIABLES //\n\nvar SQRT6 = sqrt( 6.0 );\n\n\n// MAIN //\n\n/**\n* Returns the standard deviation for a Gumbel distribution with location `mu` and scale `beta`.\n*\n* @param {number} mu - location parameter\n* @param {PositiveNumber} beta - scale parameter\n* @returns {PositiveNumber} standard deviation\n*\n* @example\n* var y = stdev( 0.0, 1.0 );\n* // returns ~1.283\n*\n* @example\n* var y = stdev( 5.0, 2.0 );\n* // returns ~2.565\n*\n* @example\n* var y = stdev( NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = stdev( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = stdev( 0.0, 0.0 );\n* // returns NaN\n*/\nfunction stdev( mu, beta ) {\n\tif (\n\t\tisnan( mu ) ||\n\t\tisnan( beta ) ||\n\t\tbeta <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn ( PI / SQRT6 ) * beta;\n}\n\n\n// EXPORTS //\n\nexport default stdev;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport PI_SQUARED from '@stdlib/constants-float64-pi-squared';\n\n\n// MAIN //\n\n/**\n* Returns the variance for a Gumbel distribution with location `mu` and scale `beta`.\n*\n* @param {number} mu - location parameter\n* @param {PositiveNumber} beta - scale parameter\n* @returns {PositiveNumber} variance\n*\n* @example\n* var y = variance( 0.0, 1.0 );\n* // returns ~1.645\n*\n* @example\n* var y = variance( 5.0, 2.0 );\n* // returns ~6.58\n*\n* @example\n* var y = variance( NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = variance( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = variance( 0.0, 0.0 );\n* // returns NaN\n*/\nfunction variance( mu, beta ) {\n\tif (\n\t\tisnan( mu ) ||\n\t\tisnan( beta ) ||\n\t\tbeta <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn ( PI_SQUARED / 6.0 ) * beta * beta;\n}\n\n\n// EXPORTS //\n\nexport default variance;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport exp from '@stdlib/math-base-special-exp';\n\n\n// MAIN //\n\n/**\n* Evaluates the logarithm of the cumulative distribution function (CDF) for a Gumbel distribution with location parameter `mu` and scale parameter `beta` at a value `x`.\n*\n* @param {number} x - input value\n* @param {number} mu - location parameter\n* @param {PositiveNumber} beta - scale parameter\n* @returns {number} evaluated logarithm of CDF\n*\n* @example\n* var y = logcdf( 10.0, 0.0, 3.0 );\n* // returns ~-0.036\n*\n* @example\n* var y = logcdf( -2.0, 0.0, 3.0 );\n* // returns ~-1.948\n*\n* @example\n* var y = logcdf( 0.0, 0.0, 1.0 );\n* // returns ~-1.0\n*\n* @example\n* var y = logcdf( NaN, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = logcdf( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = logcdf( 0.0, 0.0, NaN );\n* // returns NaN\n*\n* @example\n* // Negative scale parameter:\n* var y = logcdf( 0.0, 0.0, -1.0 );\n* // returns NaN\n*/\nfunction logcdf( x, mu, beta ) {\n\tvar z;\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( mu ) ||\n\t\tisnan( beta ) ||\n\t\tbeta <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tz = ( x - mu ) / beta;\n\treturn -exp( -z );\n}\n\n\n// EXPORTS //\n\nexport default logcdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport exp from '@stdlib/math-base-special-exp';\nimport ln from '@stdlib/math-base-special-ln';\nimport NINF from '@stdlib/constants-float64-ninf';\n\n\n// MAIN //\n\n/**\n* Evaluates the logarithm of the probability density function (PDF) for a Gumbel distribution with location parameter `mu` and scale parameter `beta` at a value `x`.\n*\n* @param {number} x - input value\n* @param {number} mu - location parameter\n* @param {PositiveNumber} beta - scale parameter\n* @returns {number} evaluated logarithm of PDF\n*\n* @example\n* var y = logpdf( 0.0, 0.0, 2.0 );\n* // returns ~-1.693\n*\n* @example\n* var y = logpdf( 0.0, 0.0, 1.0 );\n* // returns ~-1.0\n*\n* @example\n* var y = logpdf( 1.0, 3.0, 2.0 );\n* // returns ~-2.411\n*\n* @example\n* var y = logpdf( NaN, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = logpdf( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = logpdf( 0.0, 0.0, NaN );\n* // returns NaN\n*\n* @example\n* // Negative scale parameter:\n* var y = logpdf( 2.0, 0.0, -1.0 );\n* // returns NaN\n*/\nfunction logpdf( x, mu, beta ) {\n\tvar z;\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( mu ) ||\n\t\tisnan( beta ) ||\n\t\tbeta <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x === NINF ) {\n\t\treturn 0.0;\n\t}\n\tz = ( x - mu ) / beta;\n\treturn -z - exp( -z ) - ln( beta );\n}\n\n\n// EXPORTS //\n\nexport default logpdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport gamma from '@stdlib/math-base-special-gamma';\nimport exp from '@stdlib/math-base-special-exp';\n\n\n// MAIN //\n\n/**\n* Evaluates the moment-generating function (MGF) for a Gumbel distribution with location parameter `mu` and scale parameter `b` at a value `t`.\n*\n* @param {number} t - input value\n* @param {number} mu - mean\n* @param {PositiveNumber} beta - scale parameter\n* @returns {number} evaluated MGF\n*\n* @example\n* var y = mgf( -1.0, 0.0, 3.0 );\n* // returns 6.0\n*\n* @example\n* var y = mgf( 0.1, 0.0, 3.0 );\n* // returns ~1.298\n*\n* @example\n* var y = mgf( 0.0, 0.0, 1.0 );\n* // returns 1.0\n*\n* @example\n* var y = mgf( NaN, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = mgf( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = mgf( 0.0, 0.0, NaN );\n* // returns NaN\n*\n* @example\n* // Non-positive scale parameter:\n* var y = mgf( 0.0, 0.0, -1.0 );\n* // returns NaN\n*/\nfunction mgf( t, mu, beta ) {\n\tif (\n\t\tisnan( t ) ||\n\t\tisnan( mu ) ||\n\t\tisnan( beta ) ||\n\t\tbeta <= 0.0 ||\n\t\tt >= 1.0/beta\n\t) {\n\t\treturn NaN;\n\t}\n\treturn gamma( 1.0 - (beta * t) ) * exp( mu * t );\n}\n\n\n// EXPORTS //\n\nexport default mgf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport exp from '@stdlib/math-base-special-exp';\nimport NINF from '@stdlib/constants-float64-ninf';\n\n\n// MAIN //\n\n/**\n* Evaluates the probability density function (PDF) for a Gumbel distribution with location parameter `mu` and scale parameter `beta` at a value `x`.\n*\n* @param {number} x - input value\n* @param {number} mu - location parameter\n* @param {PositiveNumber} beta - scale parameter\n* @returns {number} evaluated PDF\n*\n* @example\n* var y = pdf( 0.0, 0.0, 2.0 );\n* // returns ~0.184\n*\n* @example\n* var y = pdf( 0.0, 0.0, 1.0 );\n* // returns ~0.368\n*\n* @example\n* var y = pdf( 1.0, 3.0, 2.0 );\n* // returns ~0.09\n*\n* @example\n* var y = pdf( NaN, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = pdf( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = pdf( 0.0, 0.0, NaN );\n* // returns NaN\n*\n* @example\n* // Negative scale parameter:\n* var y = pdf( 2.0, 0.0, -1.0 );\n* // returns NaN\n*/\nfunction pdf( x, mu, beta ) {\n\tvar z;\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( mu ) ||\n\t\tisnan( beta ) ||\n\t\tbeta <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x === NINF ) {\n\t\treturn 0.0;\n\t}\n\tz = ( x - mu ) / beta;\n\treturn ( 1.0 / beta ) * exp( -z - exp( -z ) );\n}\n\n\n// EXPORTS //\n\nexport default pdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport ln from '@stdlib/math-base-special-ln';\n\n\n// MAIN //\n\n/**\n* Evaluates the quantile function for a Gumbel distribution with location parameter `mu` and scale parameter `beta` at a probability `p`.\n*\n* @param {Probability} p - input value\n* @param {number} mu - location parameter\n* @param {PositiveNumber} beta - scale parameter\n* @returns {number} evaluated quantile function\n*\n* @example\n* var y = quantile( 0.8, 0.0, 1.0 );\n* // returns ~1.5\n*\n* @example\n* var y = quantile( 0.5, 4.0, 2.0 );\n* // returns ~4.733\n*\n* @example\n* var y = quantile( 0.5, 4.0, 4.0 );\n* // returns ~5.466\n*\n* @example\n* var y = quantile( 1.1, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( -0.2, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( NaN, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.0, 0.0, NaN );\n* // returns NaN\n*\n* @example\n* // Negative scale parameter:\n* var y = quantile( 0.5, 0.0, -1.0 );\n* // returns NaN\n*/\nfunction quantile( p, mu, beta ) {\n\tif (\n\t\tisnan( mu ) ||\n\t\tisnan( beta ) ||\n\t\tisnan( p ) ||\n\t\tbeta <= 0.0 ||\n\t\tp < 0.0 ||\n\t\tp > 1.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn mu - ( beta * ln( -ln( p ) ) );\n}\n\n\n// EXPORTS //\n\nexport default quantile;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nimport defineProperty from '@stdlib/utils-define-property';\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport setReadOnlyAccessor from '@stdlib/utils-define-nonenumerable-read-only-accessor';\nimport { isPrimitive as isPositive } from '@stdlib/assert-is-positive-number';\nimport { isPrimitive as isNumber } from '@stdlib/assert-is-number';\nimport isnan from '@stdlib/assert-is-nan';\nimport entropy from '@stdlib/stats-base-dists-gumbel-entropy';\nimport kurtosis from '@stdlib/stats-base-dists-gumbel-kurtosis';\nimport mean from '@stdlib/stats-base-dists-gumbel-mean';\nimport median from '@stdlib/stats-base-dists-gumbel-median';\nimport mode from '@stdlib/stats-base-dists-gumbel-mode';\nimport skewness from '@stdlib/stats-base-dists-gumbel-skewness';\nimport stdev from '@stdlib/stats-base-dists-gumbel-stdev';\nimport variance from '@stdlib/stats-base-dists-gumbel-variance';\nimport cdf from '@stdlib/stats-base-dists-gumbel-cdf';\nimport logcdf from '@stdlib/stats-base-dists-gumbel-logcdf';\nimport logpdf from '@stdlib/stats-base-dists-gumbel-logpdf';\nimport mgf from '@stdlib/stats-base-dists-gumbel-mgf';\nimport pdf from '@stdlib/stats-base-dists-gumbel-pdf';\nimport quantile from '@stdlib/stats-base-dists-gumbel-quantile';\nimport format from '@stdlib/string-format';\n\n\n// FUNCTIONS //\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {Probability} evaluated CDF\n*/\nfunction gumbelCDF( x ) {\n\treturn cdf( x, this.mu, this.beta );\n}\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (logCDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logCDF\n*/\nfunction gumbelLogCDF( x ) {\n\treturn logcdf( x, this.mu, this.beta );\n}\n\n/**\n* Evaluates the natural logarithm of the probability density function (logPDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n*/\nfunction gumbelLogPDF( x ) {\n\treturn logpdf( x, this.mu, this.beta );\n}\n\n/**\n* Evaluates the moment-generating function (MGF).\n*\n* @private\n* @param {number} t - input value\n* @returns {number} evaluated MGF\n*/\nfunction gumbelMGF( t ) {\n\treturn mgf( t, this.mu, this.beta );\n}\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n*/\nfunction gumbelPDF( x ) {\n\treturn pdf( x, this.mu, this.beta );\n}\n\n/**\n* Evaluates the quantile function.\n*\n* @private\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n*/\nfunction gumbelQuantile( p ) {\n\treturn quantile( p, this.mu, this.beta );\n}\n\n\n// MAIN //\n\n/**\n* Gumbel distribution constructor.\n*\n* @constructor\n* @param {number} [mu=0.0] - location parameter\n* @param {PositiveNumber} [beta=1.0] - scale parameter\n* @throws {TypeError} `beta` must be a positive number\n* @returns {Gumbel} distribution instance\n*\n* @example\n* var gumbel = new Gumbel( 1.0, 1.0 );\n*\n* var y = gumbel.cdf( 0.8 );\n* // returns ~0.295\n*\n* var mu = gumbel.mean;\n* // returns ~1.577\n*/\nfunction Gumbel() {\n\tvar beta;\n\tvar mu;\n\tif ( !(this instanceof Gumbel) ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn new Gumbel();\n\t\t}\n\t\treturn new Gumbel( arguments[ 0 ], arguments[ 1 ] );\n\t}\n\tif ( arguments.length ) {\n\t\tmu = arguments[ 0 ];\n\t\tbeta = arguments[ 1 ];\n\t\tif ( !isNumber( mu ) || isnan( mu ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Location parameter must be a number. Value: `%s`.', mu ) );\n\t\t}\n\t\tif ( !isPositive( beta ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Scale parameter must be a positive number. Value: `%s`.', beta ) );\n\t\t}\n\t} else {\n\t\tmu = 0.0;\n\t\tbeta = 1.0;\n\t}\n\tdefineProperty( this, 'mu', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn mu;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isNumber( value ) || isnan( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid assignment. Must be a number. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\tmu = value;\n\t\t}\n\t});\n\tdefineProperty( this, 'beta', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn beta;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isPositive( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid assignment. Must be a positive number. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\tbeta = value;\n\t\t}\n\t});\n\treturn this;\n}\n\n/**\n* Gumbel distribution differential entropy.\n*\n* @name entropy\n* @memberof Gumbel.prototype\n* @type {number}\n* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}\n*\n* @example\n* var gumbel = new Gumbel( 4.0, 12.0 );\n*\n* var v = gumbel.entropy;\n* // returns ~4.062\n*/\nsetReadOnlyAccessor( Gumbel.prototype, 'entropy', function get() {\n\treturn entropy( this.mu, this.beta );\n});\n\n/**\n* Gumbel distribution excess kurtosis.\n*\n* @name kurtosis\n* @memberof Gumbel.prototype\n* @type {number}\n* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}\n*\n* @example\n* var gumbel = new Gumbel( 4.0, 12.0 );\n*\n* var v = gumbel.kurtosis;\n* // returns 2.4\n*/\nsetReadOnlyAccessor( Gumbel.prototype, 'kurtosis', function get() {\n\treturn kurtosis( this.mu, this.beta );\n});\n\n/**\n* Gumbel distribution expected value.\n*\n* @name mean\n* @memberof Gumbel.prototype\n* @type {number}\n* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}\n*\n* @example\n* var gumbel = new Gumbel( 4.0, 12.0 );\n*\n* var v = gumbel.mean;\n* // returns ~10.927\n*/\nsetReadOnlyAccessor( Gumbel.prototype, 'mean', function get() {\n\treturn mean( this.mu, this.beta );\n});\n\n/**\n* Gumbel distribution median.\n*\n* @name median\n* @memberof Gumbel.prototype\n* @type {number}\n* @see [median]{@link https://en.wikipedia.org/wiki/Median}\n*\n* @example\n* var gumbel = new Gumbel( 4.0, 12.0 );\n*\n* var v = gumbel.median;\n* // returns ~8.398\n*/\nsetReadOnlyAccessor( Gumbel.prototype, 'median', function get() {\n\treturn median( this.mu, this.beta );\n});\n\n/**\n* Gumbel distribution mode.\n*\n* @name mode\n* @memberof Gumbel.prototype\n* @type {number}\n* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}\n*\n* @example\n* var gumbel = new Gumbel( 4.0, 12.0 );\n*\n* var v = gumbel.mode;\n* // returns 4.0\n*/\nsetReadOnlyAccessor( Gumbel.prototype, 'mode', function get() {\n\treturn mode( this.mu, this.beta );\n});\n\n/**\n* Gumbel distribution skewness.\n*\n* @name skewness\n* @memberof Gumbel.prototype\n* @type {number}\n* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}\n*\n* @example\n* var gumbel = new Gumbel( 4.0, 12.0 );\n*\n* var v = gumbel.skewness;\n* // returns ~1.14\n*/\nsetReadOnlyAccessor( Gumbel.prototype, 'skewness', function get() {\n\treturn skewness( this.mu, this.beta );\n});\n\n/**\n* Gumbel distribution standard deviation.\n*\n* @name stdev\n* @memberof Gumbel.prototype\n* @type {PositiveNumber}\n* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}\n*\n* @example\n* var gumbel = new Gumbel( 4.0, 12.0 );\n*\n* var v = gumbel.stdev;\n* // returns ~15.39\n*/\nsetReadOnlyAccessor( Gumbel.prototype, 'stdev', function get() {\n\treturn stdev( this.mu, this.beta );\n});\n\n/**\n* Gumbel distribution variance.\n*\n* @name variance\n* @memberof Gumbel.prototype\n* @type {PositiveNumber}\n* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}\n*\n* @example\n* var gumbel = new Gumbel( 4.0, 12.0 );\n*\n* var v = gumbel.variance;\n* // returns ~236.87\n*/\nsetReadOnlyAccessor( Gumbel.prototype, 'variance', function get() {\n\treturn variance( this.mu, this.beta );\n});\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @name cdf\n* @memberof Gumbel.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var gumbel = new Gumbel( 2.0, 4.0 );\n*\n* var v = gumbel.cdf( 0.5 );\n* // returns ~0.233\n*/\nsetReadOnly( Gumbel.prototype, 'cdf', gumbelCDF );\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (logCDF).\n*\n* @name logcdf\n* @memberof Gumbel.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logCDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var gumbel = new Gumbel( 2.0, 4.0 );\n*\n* var v = gumbel.logcdf( 0.8 );\n* // returns ~-1.35\n*/\nsetReadOnly( Gumbel.prototype, 'logcdf', gumbelLogCDF );\n\n/**\n* Evaluates the natural logarithm of the probability density function (logPDF).\n*\n* @name logpdf\n* @memberof Gumbel.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var gumbel = new Gumbel( 2.0, 4.0 );\n*\n* var v = gumbel.logpdf( 0.8 );\n* // returns ~-2.436\n*/\nsetReadOnly( Gumbel.prototype, 'logpdf', gumbelLogPDF );\n\n/**\n* Evaluates the moment-generating function (MGF).\n*\n* @name mgf\n* @memberof Gumbel.prototype\n* @type {Function}\n* @param {number} t - input value\n* @returns {number} evaluated MGF\n* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}\n*\n* @example\n* var gumbel = new Gumbel( 2.0, 4.0 );\n*\n* var v = gumbel.mgf( 0.2 );\n* // returns ~6.849\n*/\nsetReadOnly( Gumbel.prototype, 'mgf', gumbelMGF );\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @name pdf\n* @memberof Gumbel.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var gumbel = new Gumbel( 2.0, 4.0 );\n*\n* var v = gumbel.pdf( 0.8 );\n* // returns ~0.087\n*/\nsetReadOnly( Gumbel.prototype, 'pdf', gumbelPDF );\n\n/**\n* Evaluates the quantile function.\n*\n* @name quantile\n* @memberof Gumbel.prototype\n* @type {Function}\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}\n*\n* @example\n* var gumbel = new Gumbel( 2.0, 4.0 );\n*\n* var v = gumbel.quantile( 0.5 );\n* // returns ~3.466\n*/\nsetReadOnly( Gumbel.prototype, 'quantile', gumbelQuantile );\n\n\n// EXPORTS //\n\nexport default Gumbel;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Gumbel distribution logarithm of the cumulative distribution function (CDF).\n*\n* @module @stdlib/stats-base-dists-gumbel-logcdf\n*\n* @example\n* import logcdf from '@stdlib/stats-base-dists-gumbel-logcdf';\n*\n* var y = logcdf( 10.0, 0.0, 3.0 );\n* // returns ~-0.036\n*\n* y = logcdf( 0.0, 0.0, 3.0 );\n* // returns ~-1\n*\n* var myLCDF = logcdf.factory( 2.0, 3.0 );\n* y = myLCDF( 10.0 );\n* // returns ~-0.069\n*\n* y = myLCDF( 2.0 );\n* // returns ~-1\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport logcdf from './logcdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( logcdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default logcdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport exp from '@stdlib/math-base-special-exp';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the logarithm of the cumulative distribution function (CDF) for a Gumbel distribution with location parameter `mu` and scale parameter `beta`.\n*\n* @param {number} mu - location parameter\n* @param {PositiveNumber} beta - scale parameter\n* @returns {Function} logCDF\n*\n* @example\n* var logcdf = factory( 0.0, 3.0 );\n*\n* var y = logcdf( 10.0 );\n* // returns ~-0.036\n*\n* y = logcdf( -2.0 );\n* // returns ~-1.948\n*/\nfunction factory( mu, beta ) {\n\tif (\n\t\tisnan( mu ) ||\n\t\tisnan( beta ) ||\n\t\tbeta <= 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn logcdf;\n\n\t/**\n\t* Evaluates the logarithm of the cumulative distribution function (CDF) for a Gumbel distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {number} evaluated logarithm of CDF\n\t*\n\t* @example\n\t* var y = logcdf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction logcdf( x ) {\n\t\tvar z;\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tz = ( x - mu ) / beta;\n\t\treturn -exp( -z );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Gumbel distribution logarithm of probability density function (PDF).\n*\n* @module @stdlib/stats-base-dists-gumbel-logpdf\n*\n* @example\n* import logpdf from '@stdlib/stats-base-dists-gumbel-logpdf';\n*\n* var y = logpdf( 2.0, 0.0, 1.0 );\n* // returns ~-2.137\n*\n* var mylogpdf = logpdf.factory( 10.0, 2.0 );\n* y = mylogpdf( 10.0 );\n* // returns ~-1.693\n*\n* y = mylogpdf( 12.0 );\n* // returns ~-2.064\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport logpdf from './logpdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( logpdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default logpdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport exp from '@stdlib/math-base-special-exp';\nimport ln from '@stdlib/math-base-special-ln';\nimport NINF from '@stdlib/constants-float64-ninf';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the logarithm of the probability density function (PDF) for a Gumbel distribution with location parameter `mu` and scale parameter `beta`.\n*\n* @param {number} mu - location parameter\n* @param {PositiveNumber} beta - scale parameter\n* @returns {Function} logPDF\n*\n* @example\n* var logpdf = factory( 0.0, 2.0 );\n* var y = logpdf( 0.0 );\n* // returns ~-1.693\n*/\nfunction factory( mu, beta ) {\n\tvar lbeta;\n\tif (\n\t\tisnan( mu ) ||\n\t\tisnan( beta ) ||\n\t\tbeta <= 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\tlbeta = ln( beta );\n\treturn logpdf;\n\n\t/**\n\t* Evaluates the logarithm of the probability density function (PDF) for a Gumbel distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {number} evaluated logPDF\n\t*\n\t* @example\n\t* var y = logpdf( 2.3 );\n\t* // returns <number>\n\t*/\n\tfunction logpdf( x ) {\n\t\tvar z;\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x === NINF ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\tz = ( x - mu ) / beta;\n\t\treturn -z - exp( -z ) - lbeta;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate the moment-generating function (MGF) for a Gumbel distribution.\n*\n* @module @stdlib/stats-base-dists-gumbel-mgf\n*\n* @example\n* import mgf from '@stdlib/stats-base-dists-gumbel-mgf';\n*\n* var y = mgf( -1.0, 0.0, 3.0 );\n* // returns 6.0\n*\n* y = mgf( 0.1, 0.0, 3.0 );\n* // returns ~1.298\n*\n* y = mgf( 0.0, 0.0, 1.0 );\n* // returns 1.0\n*\n* var myMGF = mgf.factory( 0.0, 3.0 );\n*\n* y = myMGF( -1.5 );\n* // returns ~52.343\n*\n* y = myMGF( -1.0 );\n* // returns 6.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport mgf from './mgf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( mgf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default mgf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport gamma from '@stdlib/math-base-special-gamma';\nimport exp from '@stdlib/math-base-special-exp';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the moment-generating function (MGF) of a Gumbel distribution with location parameter `mu` and scale parameter `b`.\n*\n* @param {number} mu - mean\n* @param {PositiveNumber} beta - scale parameter\n* @returns {Function} MGF\n*\n* @example\n* var mgf = factory( 0.0, 3.0 );\n*\n* var y = mgf( 0.2 );\n* // returns ~2.218\n*\n* y = mgf( -1.0 );\n* // returns 6.0\n*/\nfunction factory( mu, beta ) {\n\tif (\n\t\tisnan( mu ) ||\n\t\tisnan( beta ) ||\n\t\tbeta <= 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn mgf;\n\n\t/**\n\t* Evaluates the moment-generating function (MGF) for a Gumbel distribution.\n\t*\n\t* @private\n\t* @param {number} t - input value\n\t* @returns {number} evaluated MGF\n\t*\n\t* @example\n\t* var y = mgf( 0.5 );\n\t* // returns <number>\n\t*/\n\tfunction mgf( t ) {\n\t\tif ( t >= 1.0/beta ) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn gamma( 1.0 - (beta * t) ) * exp( mu * t );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Gumbel distribution probability density function (PDF).\n*\n* @module @stdlib/stats-base-dists-gumbel-pdf\n*\n* @example\n* import pdf from '@stdlib/stats-base-dists-gumbel-pdf';\n*\n* var y = pdf( 2.0, 0.0, 1.0 );\n* // returns ~0.118\n*\n* var myPDF = pdf.factory( 10.0, 2.0 );\n* y = myPDF( 10.0 );\n* // returns ~0.184\n*\n* y = myPDF( 12.0 );\n* // returns ~0.127\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport pdf from './pdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( pdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default pdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport exp from '@stdlib/math-base-special-exp';\nimport NINF from '@stdlib/constants-float64-ninf';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the probability density function (PDF) for a Gumbel distribution with location parameter `mu` and scale parameter `beta`.\n*\n* @param {number} mu - location parameter\n* @param {PositiveNumber} beta - scale parameter\n* @returns {Function} PDF\n*\n* @example\n* var pdf = factory( 4.0, 2.0 );\n*\n* var y = pdf( 10.0 );\n* // returns ~0.0237\n*\n* y = pdf( 3.0 );\n* // returns ~0.159\n*/\nfunction factory( mu, beta ) {\n\tif ( isnan( mu ) || isnan( beta ) || beta <= 0.0 ) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn pdf;\n\n\t/**\n\t* Evaluates the probability density function (PDF) for a Gumbel distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {number} evaluated PDF\n\t*\n\t* @example\n\t* var y = pdf( 2.3 );\n\t* // returns <number>\n\t*/\n\tfunction pdf( x ) {\n\t\tvar z;\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x === NINF ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\tz = ( x - mu ) / beta;\n\t\treturn ( 1.0 / beta ) * exp( -z - exp( -z ) );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Gumbel distribution quantile function.\n*\n* @module @stdlib/stats-base-dists-gumbel-quantile\n*\n* @example\n* import quantile from '@stdlib/stats-base-dists-gumbel-quantile';\n*\n* var y = quantile( 0.8, 0.0, 1.0 );\n* // returns ~1.4999\n*\n* var myQuantile = quantile.factory( 8.0, 2.0 );\n* y = myQuantile( 0.5 );\n* // returns ~8.733\n*\n* y = myQuantile( 0.7 );\n* // returns ~10.062\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport quantile from './quantile.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( quantile, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default quantile;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport ln from '@stdlib/math-base-special-ln';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the quantile function for a Gumbel distribution with location parameter `mu` and scale parameter `beta`.\n*\n* @param {number} mu - location parameter\n* @param {PositiveNumber} beta - scale parameter\n* @returns {Function} quantile function\n*\n* @example\n* var quantile = factory( 0.0, 1.0 );\n* var y = quantile( 0.2 );\n* // returns ~-0.476\n*/\nfunction factory( mu, beta ) {\n\tif ( isnan( mu ) || isnan( beta ) || beta <= 0.0 ) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn quantile;\n\n\t/**\n\t* Evaluates the quantile function for a Gumbel distribution.\n\t*\n\t* @private\n\t* @param {Probability} p - input value\n\t* @returns {number} evaluated quantile function\n\t*\n\t* @example\n\t* var y = quantile( 0.3 );\n\t* // returns <number>\n\t*/\n\tfunction quantile( p ) {\n\t\tif ( isnan( p ) || p < 0.0 || p > 1.0 ) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn mu - (beta * ln( -ln( p ) ));\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace gumbel\n*/\nvar gumbel = {};\n\n/**\n* @name cdf\n* @memberof gumbel\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/gumbel/cdf}\n*/\nimport cdf from '@stdlib/stats-base-dists-gumbel-cdf';\nsetReadOnly( gumbel, 'cdf', cdf );\n\n/**\n* @name Gumbel\n* @memberof gumbel\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/gumbel/ctor}\n*/\nimport Gumbel from '@stdlib/stats-base-dists-gumbel-ctor';\nsetReadOnly( gumbel, 'Gumbel', Gumbel );\n\n/**\n* @name entropy\n* @memberof gumbel\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/gumbel/entropy}\n*/\nimport entropy from '@stdlib/stats-base-dists-gumbel-entropy';\nsetReadOnly( gumbel, 'entropy', entropy );\n\n/**\n* @name kurtosis\n* @memberof gumbel\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/gumbel/kurtosis}\n*/\nimport kurtosis from '@stdlib/stats-base-dists-gumbel-kurtosis';\nsetReadOnly( gumbel, 'kurtosis', kurtosis );\n\n/**\n* @name logcdf\n* @memberof gumbel\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/gumbel/logcdf}\n*/\nimport logcdf from '@stdlib/stats-base-dists-gumbel-logcdf';\nsetReadOnly( gumbel, 'logcdf', logcdf );\n\n/**\n* @name logpdf\n* @memberof gumbel\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/gumbel/logpdf}\n*/\nimport logpdf from '@stdlib/stats-base-dists-gumbel-logpdf';\nsetReadOnly( gumbel, 'logpdf', logpdf );\n\n/**\n* @name mean\n* @memberof gumbel\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/gumbel/mean}\n*/\nimport mean from '@stdlib/stats-base-dists-gumbel-mean';\nsetReadOnly( gumbel, 'mean', mean );\n\n/**\n* @name median\n* @memberof gumbel\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/gumbel/median}\n*/\nimport median from '@stdlib/stats-base-dists-gumbel-median';\nsetReadOnly( gumbel, 'median', median );\n\n/**\n* @name mgf\n* @memberof gumbel\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/gumbel/mgf}\n*/\nimport mgf from '@stdlib/stats-base-dists-gumbel-mgf';\nsetReadOnly( gumbel, 'mgf', mgf );\n\n/**\n* @name mode\n* @memberof gumbel\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/gumbel/mode}\n*/\nimport mode from '@stdlib/stats-base-dists-gumbel-mode';\nsetReadOnly( gumbel, 'mode', mode );\n\n/**\n* @name pdf\n* @memberof gumbel\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/gumbel/pdf}\n*/\nimport pdf from '@stdlib/stats-base-dists-gumbel-pdf';\nsetReadOnly( gumbel, 'pdf', pdf );\n\n/**\n* @name quantile\n* @memberof gumbel\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/gumbel/quantile}\n*/\nimport quantile from '@stdlib/stats-base-dists-gumbel-quantile';\nsetReadOnly( gumbel, 'quantile', quantile );\n\n/**\n* @name skewness\n* @memberof gumbel\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/gumbel/skewness}\n*/\nimport skewness from '@stdlib/stats-base-dists-gumbel-skewness';\nsetReadOnly( gumbel, 'skewness', skewness );\n\n/**\n* @name stdev\n* @memberof gumbel\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/gumbel/stdev}\n*/\nimport stdev from '@stdlib/stats-base-dists-gumbel-stdev';\nsetReadOnly( gumbel, 'stdev', stdev );\n\n/**\n* @name variance\n* @memberof gumbel\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/gumbel/variance}\n*/\nimport variance from '@stdlib/stats-base-dists-gumbel-variance';\nsetReadOnly( gumbel, 'variance', variance );\n\n\n// EXPORTS //\n\nexport default gumbel;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNegativeInteger from '@stdlib/math-base-assert-is-negative-integer';\nimport gammaln from '@stdlib/math-base-special-gammaln';\n\n\n// MAIN //\n\n/**\n* Evaluates the natural logarithm of the factorial of `x`.\n*\n* @param {number} x - input value\n* @returns {number} natural logarithm of factorial of `x`\n*\n* @example\n* var v = factorialln( 3.0 );\n* // returns ~1.792\n*\n* @example\n* var v = factorialln( 2.4 );\n* // returns ~1.092\n*\n* @example\n* var v = factorialln( -1.0 );\n* // returns NaN\n*\n* @example\n* var v = factorialln( -1.5 );\n* // returns ~1.266\n*\n* @example\n* var v = factorialln( NaN );\n* // returns NaN\n*/\nfunction factorialln( x ) {\n\tif ( isNegativeInteger( x ) ) {\n\t\treturn NaN;\n\t}\n\treturn gammaln( x + 1.0 );\n}\n\n\n// EXPORTS //\n\nexport default factorialln;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math-base-special-floor';\n\n\n// MAIN //\n\n/**\n* Tests if a finite double-precision floating-point number is a negative integer.\n*\n* @param {number} x - value to test\n* @returns {boolean} boolean indicating whether the value is a negative integer\n*\n* @example\n* var bool = isNegativeInteger( -1.0 );\n* // returns true\n*\n* @example\n* var bool = isNegativeInteger( 0.0 );\n* // returns false\n*\n* @example\n* var bool = isNegativeInteger( 10.0 );\n* // returns false\n*/\nfunction isNegativeInteger( x ) {\n\treturn (floor(x) === x && x < 0.0);\n}\n\n\n// EXPORTS //\n\nexport default isNegativeInteger;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNonNegativeInteger from '@stdlib/math-base-assert-is-nonnegative-integer';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport exp from '@stdlib/math-base-special-exp';\nimport fln from '@stdlib/math-base-special-factorialln';\nimport max from '@stdlib/math-base-special-max';\nimport min from '@stdlib/math-base-special-min';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Evaluates the probability mass function (PMF) for a hypergeometric distribution with population size `N`, subpopulation size `K`, and number of draws `n`.\n*\n* @param {number} x - input value\n* @param {NonNegativeInteger} N - population size\n* @param {NonNegativeInteger} K - subpopulation size\n* @param {NonNegativeInteger} n - number of draws\n* @returns {Probability} evaluated PMF\n*\n* @example\n* var y = pmf( 1.0, 8, 4, 2 );\n* // returns ~0.571\n*\n* @example\n* var y = pmf( 2.0, 8, 4, 2 );\n* // returns ~0.214\n*\n* @example\n* var y = pmf( 0.0, 8, 4, 2 );\n* // returns ~0.214\n*\n* @example\n* var y = pmf( 1.5, 8, 4, 2 );\n* // returns 0.0\n*\n* @example\n* var y = pmf( NaN, 10, 5, 2 );\n* // returns NaN\n*\n* @example\n* var y = pmf( 0.0, NaN, 5, 2 );\n* // returns NaN\n*\n* @example\n* var y = pmf( 0.0, 10, NaN, 2 );\n* // returns NaN\n*\n* @example\n* var y = pmf( 0.0, 10, 5, NaN );\n* // returns NaN\n*\n* @example\n* var y = pmf( 2.0, 10.5, 5, 2 );\n* // returns NaN\n*\n* @example\n* var y = pmf( 2.0, 5, 1.5, 2 );\n* // returns NaN\n*\n* @example\n* var y = pmf( 2.0, 10, 5, -2.0 );\n* // returns NaN\n*\n* @example\n* var y = pmf( 2.0, 10, 5, 12 );\n* // returns NaN\n*\n* @example\n* var y = pmf( 2.0, 8, 3, 9 );\n* // returns NaN\n*/\nfunction pmf( x, N, K, n ) {\n\tvar ldenom;\n\tvar lnum;\n\tvar lpmf;\n\tvar maxs;\n\tvar mins;\n\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( N ) ||\n\t\tisnan( K ) ||\n\t\tisnan( n ) ||\n\t\t!isNonNegativeInteger( N ) ||\n\t\t!isNonNegativeInteger( K ) ||\n\t\t!isNonNegativeInteger( n ) ||\n\t\tN === PINF ||\n\t\tK === PINF ||\n\t\tK > N ||\n\t\tn > N\n\t) {\n\t\treturn NaN;\n\t}\n\tmins = max( 0, n + K - N );\n\tmaxs = min( K, n );\n\tif (\n\t\tisNonNegativeInteger( x ) &&\n\t\tmins <= x &&\n\t\tx <= maxs\n\t) {\n\t\tlnum = fln( n ) + fln( K ) + fln( N - n ) + fln( N - K );\n\t\tldenom = fln( N ) + fln( x ) + fln( n - x );\n\t\tldenom += fln( K - x ) + fln( N - K + x - n );\n\t\tlpmf = lnum - ldenom;\n\t\treturn exp( lpmf );\n\t}\n\treturn 0.0;\n}\n\n\n// EXPORTS //\n\nexport default pmf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Computes the sum of elements in an array.\n*\n* @private\n* @param {Array} arr - input array\n* @returns {number} sum\n*/\nfunction sum( arr ) {\n\tvar len;\n\tvar s;\n\tvar i;\n\tlen = arr.length;\n\ts = 0;\n\tfor ( i = 0; i < len; i++ ) {\n\t\ts += arr[ i ];\n\t}\n\treturn s;\n}\n\n\n// EXPORTS //\n\nexport default sum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNonNegativeInteger from '@stdlib/math-base-assert-is-nonnegative-integer';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport trunc from '@stdlib/math-base-special-trunc';\nimport max from '@stdlib/math-base-special-max';\nimport min from '@stdlib/math-base-special-min';\nimport pmf from '@stdlib/stats-base-dists-hypergeometric-pmf';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport Float64Array from '@stdlib/array-float64';\nimport sum from './sum.js';\n\n\n// MAIN //\n\n/**\n* Evaluates the cumulative distribution function (CDF) for a hypergeometric distribution with population size `N`, subpopulation size `K`, and number of draws `n` at a value `x`.\n*\n* @param {number} x - input value\n* @param {NonNegativeInteger} N - population size\n* @param {NonNegativeInteger} K - subpopulation size\n* @param {NonNegativeInteger} n - number of draws\n* @returns {Probability} evaluated CDF\n*\n* @example\n* var y = cdf( 1.0, 8, 4, 2 );\n* // returns ~0.786\n*\n* @example\n* var y = cdf( 1.5, 8, 4, 2 );\n* // returns ~0.786\n*\n* @example\n* var y = cdf( 2.0, 8, 4, 2 );\n* // returns 1.0\n*\n* @example\n* var y = cdf( 0, 8, 4, 2 );\n* // returns ~0.214\n*\n* @example\n* var y = cdf( NaN, 10, 5, 2 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, NaN, 5, 2 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, 10, NaN, 2 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, 10, 5, NaN );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2.0, 10.5, 5, 2 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2.0, 10, 1.5, 2 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2.0, 10, 5, -2.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2.0, 10, 5, 12 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2.0, 8, 3, 9 );\n* // returns NaN\n*/\nfunction cdf( x, N, K, n ) {\n\tvar denom;\n\tvar probs;\n\tvar num;\n\tvar ret;\n\tvar i;\n\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( N ) ||\n\t\tisnan( K ) ||\n\t\tisnan( n ) ||\n\t\t!isNonNegativeInteger( N ) ||\n\t\t!isNonNegativeInteger( K ) ||\n\t\t!isNonNegativeInteger( n ) ||\n\t\tN === PINF ||\n\t\tK === PINF ||\n\t\tK > N ||\n\t\tn > N\n\t) {\n\t\treturn NaN;\n\t}\n\tx = trunc( x );\n\tif ( x < max( 0, n+K-N ) ) {\n\t\treturn 0.0;\n\t}\n\tif ( x >= min( n, K ) ) {\n\t\treturn 1.0;\n\t}\n\n\tprobs = new Float64Array( x+1 );\n\tprobs[ x ] = pmf( x, N, K, n );\n\n\t/*\n\t* Use recurrence relation:\n\t*\n\t*   (x+1)( N - K - (n-x-1))P(X=x+1)=(K-x)(n-x)P(X=x)\n\t*/\n\tfor ( i = x-1; i >= 0; i-- ) {\n\t\tnum = ( i+1 ) * ( N-K-(n-i-1) );\n\t\tdenom = ( K-i ) * ( n-i );\n\t\tprobs[ i ] = ( num/denom ) * probs[ i+1 ];\n\t}\n\tret = sum( probs );\n\treturn min( ret, 1.0 );\n}\n\n\n// EXPORTS //\n\nexport default cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isInteger } from '@stdlib/assert-is-integer';\n\n\n// MAIN //\n\n/**\n* Tests if a value is a number primitive having a nonnegative integer value.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a number primitive having a nonnegative integer value\n*\n* @example\n* var bool = isNonNegativeInteger( 3.0 );\n* // returns true\n*\n* @example\n* var bool = isNonNegativeInteger( new Number( 3.0 ) );\n* // returns false\n*/\nfunction isNonNegativeInteger( value ) {\n\treturn (\n\t\tisInteger( value ) &&\n\t\tvalue >= 0\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isNonNegativeInteger;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isObject as isInteger } from '@stdlib/assert-is-integer';\n\n\n// MAIN //\n\n/**\n* Tests if a value is a number object having a nonnegative integer value.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a number object having a nonnegative integer value\n*\n* @example\n* var bool = isNonNegativeInteger( 3.0 );\n* // returns false\n*\n* @example\n* var bool = isNonNegativeInteger( new Number( 3.0 ) );\n* // returns true\n*/\nfunction isNonNegativeInteger( value ) {\n\treturn (\n\t\tisInteger( value ) &&\n\t\tvalue.valueOf() >= 0\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isNonNegativeInteger;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPrimitive from './primitive.js';\nimport isObject from './object.js';\n\n\n// MAIN //\n\n/**\n* Tests if a value is a nonnegative integer.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is a nonnegative integer\n*\n* @example\n* var bool = isNonNegativeInteger( 5.0 );\n* // returns true\n*\n* @example\n* var bool = isNonNegativeInteger( new Number( 5.0 ) );\n* // returns true\n*\n* @example\n* var bool = isNonNegativeInteger( -5.0 );\n* // returns false\n*\n* @example\n* var bool = isNonNegativeInteger( 3.14 );\n* // returns false\n*\n* @example\n* var bool = isNonNegativeInteger( null );\n* // returns false\n*/\nfunction isNonNegativeInteger( value ) {\n\treturn ( isPrimitive( value ) || isObject( value ) );\n}\n\n\n// EXPORTS //\n\nexport default isNonNegativeInteger;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNonNegativeInteger from '@stdlib/math-base-assert-is-nonnegative-integer';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Returns the excess kurtosis of a hypergeometric distribution.\n*\n* @param {NonNegativeInteger} N - population size\n* @param {NonNegativeInteger} K - subpopulation size\n* @param {NonNegativeInteger} n - number of draws\n* @returns {number} kurtosis\n*\n* @example\n* var v = kurtosis( 16, 11, 4 );\n* // returns ~-0.326\n*\n* @example\n* var v = kurtosis( 4, 2, 2 );\n* // returns 0.0\n*\n* @example\n* var v = kurtosis( 10, 5, 12 );\n* // returns NaN\n*\n* @example\n* var v = kurtosis( 10.3, 10, 4 );\n* // returns NaN\n*\n* @example\n* var v = kurtosis( 10, 5.5, 4 );\n* // returns NaN\n*\n* @example\n* var v = kurtosis( 10, 5, 4.5 );\n* // returns NaN\n*\n* @example\n* var v = kurtosis( NaN, 10, 4 );\n* // returns NaN\n*\n* @example\n* var v = kurtosis( 20, NaN, 4 );\n* // returns NaN\n*\n* @example\n* var v = kurtosis( 20, 10, NaN );\n* // returns NaN\n*/\nfunction kurtosis( N, K, n ) {\n\tvar p;\n\tvar q;\n\tif (\n\t\t!isNonNegativeInteger( N ) ||\n\t\t!isNonNegativeInteger( K ) ||\n\t\t!isNonNegativeInteger( n ) ||\n\t\tN === PINF ||\n\t\tK === PINF ||\n\t\tK > N ||\n\t\tn > N\n\t) {\n\t\treturn NaN;\n\t}\n\tp = ( N-1 ) * ( N*N ) * ( ( N*(N+1) ) - ( 6*K*(N-K) ) - ( 6*n*(N-n) ) );\n\tp += 6 * n * K * ( N-K ) * ( N-n ) * ( (5*N) - 6 );\n\tq = n * K * ( N-K ) * ( N-n ) * ( N-2 ) * ( N-3 );\n\treturn p / q;\n}\n\n\n// EXPORTS //\n\nexport default kurtosis;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNonNegativeInteger from '@stdlib/math-base-assert-is-nonnegative-integer';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Returns the expected value of a hypergeometric distribution.\n*\n* @param {NonNegativeInteger} N - population size\n* @param {NonNegativeInteger} K - subpopulation size\n* @param {NonNegativeInteger} n - number of draws\n* @returns {NonNegativeNumber} expected value\n*\n* @example\n* var v = mean( 16, 11, 4 );\n* // returns 2.75\n*\n* @example\n* var v = mean( 2, 1, 1 );\n* // returns 0.5\n*\n* @example\n* var v = mean( 10, 5, 12 );\n* // returns NaN\n*\n* @example\n* var v = mean( 10.3, 10, 4 );\n* // returns NaN\n*\n* @example\n* var v = mean( 10, 5.5, 4 );\n* // returns NaN\n*\n* @example\n* var v = mean( 10, 5, 4.5 );\n* // returns NaN\n*\n* @example\n* var v = mean( NaN, 10, 4 );\n* // returns NaN\n*\n* @example\n* var v = mean( 20, NaN, 4 );\n* // returns NaN\n*\n* @example\n* var v = mean( 20, 10, NaN );\n* // returns NaN\n*/\nfunction mean( N, K, n ) {\n\tif (\n\t\tisnan( N ) ||\n\t\tisnan( K ) ||\n\t\tisnan( n )\n\t) {\n\t\treturn NaN;\n\t}\n\tif (\n\t\t!isNonNegativeInteger( N ) ||\n\t\t!isNonNegativeInteger( K ) ||\n\t\t!isNonNegativeInteger( n ) ||\n\t\tN === PINF ||\n\t\tK === PINF ||\n\t\tK > N ||\n\t\tn > N\n\t) {\n\t\treturn NaN;\n\t}\n\treturn n * ( K / N );\n}\n\n\n// EXPORTS //\n\nexport default mean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNonNegativeInteger from '@stdlib/math-base-assert-is-nonnegative-integer';\nimport floor from '@stdlib/math-base-special-floor';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Returns the mode of a hypergeometric distribution.\n*\n* @param {NonNegativeInteger} N - population size\n* @param {NonNegativeInteger} K - subpopulation size\n* @param {NonNegativeInteger} n - number of draws\n* @returns {NonNegativeInteger} mode\n*\n* @example\n* var v = mode( 16, 11, 4 );\n* // returns 3\n*\n* @example\n* var v = mode( 2, 1, 1 );\n* // returns 1\n*\n* @example\n* var v = mode( 10, 5, 12 );\n* // returns NaN\n*\n* @example\n* var v = mode( 10.3, 10, 4 );\n* // returns NaN\n*\n* @example\n* var v = mode( 10, 5.5, 4 );\n* // returns NaN\n*\n* @example\n* var v = mode( 10, 5, 4.5 );\n* // returns NaN\n*\n* @example\n* var v = mode( NaN, 10, 4 );\n* // returns NaN\n*\n* @example\n* var v = mode( 20, NaN, 4 );\n* // returns NaN\n*\n* @example\n* var v = mode( 20, 10, NaN );\n* // returns NaN\n*/\nfunction mode( N, K, n ) {\n\tif (\n\t\t!isNonNegativeInteger( N ) ||\n\t\t!isNonNegativeInteger( K ) ||\n\t\t!isNonNegativeInteger( n ) ||\n\t\tN === PINF ||\n\t\tK === PINF ||\n\t\tK > N ||\n\t\tn > N\n\t) {\n\t\treturn NaN;\n\t}\n\treturn floor( ( n+1 ) * ( K+1 ) / ( N+2 ) );\n}\n\n\n// EXPORTS //\n\nexport default mode;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNonNegativeInteger from '@stdlib/math-base-assert-is-nonnegative-integer';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Returns the skewness of a hypergeometric distribution.\n*\n* @param {NonNegativeInteger} N - population size\n* @param {NonNegativeInteger} K - subpopulation size\n* @param {NonNegativeInteger} n - number of draws\n* @returns {number} skewness\n*\n* @example\n* var v = skewness( 16, 11, 4 );\n* // returns ~-0.258\n*\n* @example\n* var v = skewness( 4, 2, 2 );\n* // returns 0.0\n*\n* @example\n* var v = skewness( 10, 5, 12 );\n* // returns NaN\n*\n* @example\n* var v = skewness( 10.3, 10, 4 );\n* // returns NaN\n*\n* @example\n* var v = skewness( 10, 5.5, 4 );\n* // returns NaN\n*\n* @example\n* var v = skewness( 10, 5, 4.5 );\n* // returns NaN\n*\n* @example\n* var v = skewness( NaN, 10, 4 );\n* // returns NaN\n*\n* @example\n* var v = skewness( 20, NaN, 4 );\n* // returns NaN\n*\n* @example\n* var v = skewness( 20, 10, NaN );\n* // returns NaN\n*/\nfunction skewness( N, K, n ) {\n\tvar p;\n\tvar q;\n\tif (\n\t\t!isNonNegativeInteger( N ) ||\n\t\t!isNonNegativeInteger( K ) ||\n\t\t!isNonNegativeInteger( n ) ||\n\t\tN === PINF ||\n\t\tK === PINF ||\n\t\tK > N ||\n\t\tn > N\n\t) {\n\t\treturn NaN;\n\t}\n\tp = ( N - (2*K) ) * sqrt( N - 1 ) * ( N - (2*n) );\n\tq = sqrt( n * K * ( N-K ) * ( N-n ) ) * ( N - 2 );\n\treturn p / q;\n}\n\n\n// EXPORTS //\n\nexport default skewness;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNonNegativeInteger from '@stdlib/math-base-assert-is-nonnegative-integer';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Returns the standard deviation of a hypergeometric distribution.\n*\n* @param {NonNegativeInteger} N - population size\n* @param {NonNegativeInteger} K - subpopulation size\n* @param {NonNegativeInteger} n - number of draws\n* @returns {NonNegativeNumber} standard deviation\n*\n* @example\n* var v = stdev( 16, 11, 4 );\n* // returns ~0.829\n*\n* @example\n* var v = stdev( 2, 1, 1 );\n* // returns 0.5\n*\n* @example\n* var v = stdev( 10, 5, 12 );\n* // returns NaN\n*\n* @example\n* var v = stdev( 10.3, 10, 4 );\n* // returns NaN\n*\n* @example\n* var v = stdev( 10, 5.5, 4 );\n* // returns NaN\n*\n* @example\n* var v = stdev( 10, 5, 4.5 );\n* // returns NaN\n*\n* @example\n* var v = stdev( NaN, 10, 4 );\n* // returns NaN\n*\n* @example\n* var v = stdev( 20, NaN, 4 );\n* // returns NaN\n*\n* @example\n* var v = stdev( 20, 10, NaN );\n* // returns NaN\n*/\nfunction stdev( N, K, n ) {\n\tif (\n\t\t!isNonNegativeInteger( N ) ||\n\t\t!isNonNegativeInteger( K ) ||\n\t\t!isNonNegativeInteger( n ) ||\n\t\tN === PINF ||\n\t\tK === PINF ||\n\t\tK > N ||\n\t\tn > N\n\t) {\n\t\treturn NaN;\n\t}\n\treturn sqrt( n * ( K/N ) * ( (N-K)/N ) * ( (N-n)/(N-1) ) );\n}\n\n\n// EXPORTS //\n\nexport default stdev;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNonNegativeInteger from '@stdlib/math-base-assert-is-nonnegative-integer';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Returns the variance of a hypergeometric distribution.\n*\n* @param {NonNegativeInteger} N - population size\n* @param {NonNegativeInteger} K - subpopulation size\n* @param {NonNegativeInteger} n - number of draws\n* @returns {NonNegativeNumber} variance\n*\n* @example\n* var v = variance( 16, 11, 4 );\n* // returns ~0.688\n*\n* @example\n* var v = variance( 2, 1, 1 );\n* // returns 0.25\n*\n* @example\n* var v = variance( 10, 5, 12 );\n* // returns NaN\n*\n* @example\n* var v = variance( 10.3, 10, 4 );\n* // returns NaN\n*\n* @example\n* var v = variance( 10, 5.5, 4 );\n* // returns NaN\n*\n* @example\n* var v = variance( 10, 5, 4.5 );\n* // returns NaN\n*\n* @example\n* var v = variance( NaN, 10, 4 );\n* // returns NaN\n*\n* @example\n* var v = variance( 20, NaN, 4 );\n* // returns NaN\n*\n* @example\n* var v = variance( 20, 10, NaN );\n* // returns NaN\n*/\nfunction variance( N, K, n ) {\n\tif (\n\t\t!isNonNegativeInteger( N ) ||\n\t\t!isNonNegativeInteger( K ) ||\n\t\t!isNonNegativeInteger( n ) ||\n\t\tN === PINF ||\n\t\tK === PINF ||\n\t\tK > N ||\n\t\tn > N\n\t) {\n\t\treturn NaN;\n\t}\n\treturn n * ( K/N ) * ( (N-K)/N ) * ( (N-n)/(N-1) );\n}\n\n\n// EXPORTS //\n\nexport default variance;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNonNegativeInteger from '@stdlib/math-base-assert-is-nonnegative-integer';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport fln from '@stdlib/math-base-special-factorialln';\nimport max from '@stdlib/math-base-special-max';\nimport min from '@stdlib/math-base-special-min';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Evaluates the natural logarithm of the probability mass function (PMF) for a hypergeometric distribution with population size `N`, subpopulation size `K` and number of draws `n`.\n*\n* @param {number} x - input value\n* @param {NonNegativeInteger} N - population size\n* @param {NonNegativeInteger} K - subpopulation size\n* @param {NonNegativeInteger} n - number of draws\n* @returns {number} evaluated logPMF\n*\n* @example\n* var y = logpmf( 1.0, 8, 4, 2 );\n* // returns ~-0.56\n*\n* @example\n* var y = logpmf( 2.0, 8, 4, 2 );\n* // returns ~-1.54\n*\n* @example\n* var y = logpmf( 0.0, 8, 4, 2 );\n* // returns ~-1.54\n*\n* @example\n* var y = logpmf( 1.5, 8, 4, 2 );\n* // returns -Infinity\n*\n* @example\n* var y = logpmf( NaN, 10, 5, 2 );\n* // returns NaN\n*\n* @example\n* var y = logpmf( 0.0, NaN, 5, 2 );\n* // returns NaN\n*\n* @example\n* var y = logpmf( 0.0, 10, NaN, 2 );\n* // returns NaN\n*\n* @example\n* var y = logpmf( 0.0, 10, 5, NaN );\n* // returns NaN\n*\n* @example\n* var y = logpmf( 2.0, 10.5, 5, 2 );\n* // returns NaN\n*\n* @example\n* var y = logpmf( 2.0, 5, 1.5, 2 );\n* // returns NaN\n*\n* @example\n* var y = logpmf( 2.0, 10, 5, -2.0 );\n* // returns NaN\n*\n* @example\n* var y = logpmf( 2.0, 10, 5, 12 );\n* // returns NaN\n*\n* @example\n* var y = logpmf( 2.0, 8, 3, 9 );\n* // returns NaN\n*/\nfunction logpmf( x, N, K, n ) {\n\tvar ldenom;\n\tvar lnum;\n\tvar maxs;\n\tvar mins;\n\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( N ) ||\n\t\tisnan( K ) ||\n\t\tisnan( n ) ||\n\t\t!isNonNegativeInteger( N ) ||\n\t\t!isNonNegativeInteger( K ) ||\n\t\t!isNonNegativeInteger( n ) ||\n\t\tN === PINF ||\n\t\tK === PINF ||\n\t\tK > N ||\n\t\tn > N\n\t) {\n\t\treturn NaN;\n\t}\n\tmins = max( 0, n + K - N );\n\tmaxs = min( K, n );\n\tif (\n\t\tisNonNegativeInteger( x ) &&\n\t\tmins <= x &&\n\t\tx <= maxs\n\t) {\n\t\tlnum = fln( n ) + fln( K ) + fln( N - n ) + fln( N - K );\n\t\tldenom = fln( N ) + fln( x ) + fln( n - x );\n\t\tldenom += fln( K - x ) + fln( N - K + x - n );\n\t\treturn lnum - ldenom;\n\t}\n\treturn NINF;\n}\n\n\n// EXPORTS //\n\nexport default logpmf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNonNegativeInteger from '@stdlib/math-base-assert-is-nonnegative-integer';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport max from '@stdlib/math-base-special-max';\nimport min from '@stdlib/math-base-special-min';\nimport cdf from '@stdlib/stats-base-dists-hypergeometric-cdf';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Evaluates the quantile function for a hypergeometric distribution with population size `N`, subpopulation size `K`, and number of draws `n` at a probability `p`.\n*\n* @param {Probability} p - input value\n* @param {NonNegativeInteger} N - population size\n* @param {NonNegativeInteger} K - subpopulation size\n* @param {NonNegativeInteger} n - number of draws\n* @returns {NonNegativeInteger} evaluated quantile function\n*\n* @example\n* var y = quantile( 0.4, 40, 20, 10 );\n* // returns 5\n*\n* @example\n* var y = quantile( 0.8, 60, 40, 20 );\n* // returns 15\n*\n* @example\n* var y = quantile( 0.5, 100, 10, 10 );\n* // returns 1\n*\n* @example\n* var y = quantile( 0.0, 100, 40, 20 );\n* // returns 0\n*\n* @example\n* var y = quantile( 1.0, 100, 40, 20 );\n* // returns 20\n*\n* @example\n* var y = quantile( NaN, 40, 20, 10 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.2, NaN, 20, 10 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.2, 40, NaN, 10 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.2, 40, 20, NaN );\n* // returns NaN\n*/\nfunction quantile( p, N, K, n ) {\n\tvar prob;\n\tvar x;\n\n\tif (\n\t\tisnan( p ) ||\n\t\tisnan( N ) ||\n\t\tisnan( K ) ||\n\t\tisnan( n ) ||\n\t\t!isNonNegativeInteger( N ) ||\n\t\t!isNonNegativeInteger( K ) ||\n\t\t!isNonNegativeInteger( n ) ||\n\t\tN === PINF ||\n\t\tK === PINF ||\n\t\tK > N ||\n\t\tn > N ||\n\t\tp < 0.0 ||\n\t\tp > 1.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( p === 0.0 ) {\n\t\treturn max( 0, n + K - N );\n\t}\n\tif ( p === 1.0 ) {\n\t\treturn min( n, K );\n\t}\n\tx = max( 0, n + K - N );\n\twhile ( true ) {\n\t\tprob = cdf( x, N, K, n );\n\t\tif ( prob > p ) {\n\t\t\tbreak;\n\t\t}\n\t\tx += 1;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default quantile;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isNonNegativeInteger } from '@stdlib/assert-is-nonnegative-integer';\nimport defineProperty from '@stdlib/utils-define-property';\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport setReadOnlyAccessor from '@stdlib/utils-define-nonenumerable-read-only-accessor';\nimport kurtosis from '@stdlib/stats-base-dists-hypergeometric-kurtosis';\nimport mean from '@stdlib/stats-base-dists-hypergeometric-mean';\nimport mode from '@stdlib/stats-base-dists-hypergeometric-mode';\nimport skewness from '@stdlib/stats-base-dists-hypergeometric-skewness';\nimport stdev from '@stdlib/stats-base-dists-hypergeometric-stdev';\nimport variance from '@stdlib/stats-base-dists-hypergeometric-variance';\nimport cdf from '@stdlib/stats-base-dists-hypergeometric-cdf';\nimport logpmf from '@stdlib/stats-base-dists-hypergeometric-logpmf';\nimport pmf from '@stdlib/stats-base-dists-hypergeometric-pmf';\nimport quantile from '@stdlib/stats-base-dists-hypergeometric-quantile';\nimport format from '@stdlib/string-format';\n\n\n// FUNCTIONS //\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {Probability} evaluated CDF\n*/\nfunction hypergeometricCDF( x ) {\n\treturn cdf( x, this.N, this.K, this.n );\n}\n\n/**\n* Evaluates the natural logarithm of the probability mass function (PMF).\n*\n* @private\n* @param {number} x - input value\n* @returns {Probability} evaluated PMF\n*/\nfunction hypergeometricLogPMF( x ) {\n\treturn logpmf( x, this.N, this.K, this.n );\n}\n\n/**\n* Evaluates the probability mass function (PMF).\n*\n* @private\n* @param {number} x - input value\n* @returns {Probability} evaluated PMF\n*/\nfunction hypergeometricPMF( x ) {\n\treturn pmf( x, this.N, this.K, this.n );\n}\n\n/**\n* Evaluates the quantile function.\n*\n* @private\n* @param {Probability} p - input probability\n* @returns {NonNegativeInteger} evaluated quantile function\n*/\nfunction hypergeometricQuantile( p ) {\n\treturn quantile( p, this.N, this.K, this.n );\n}\n\n\n// MAIN //\n\n/**\n* Hypergeometric distribution constructor.\n*\n* @constructor\n* @param {NonNegativeInteger} N - population size\n* @param {NonNegativeInteger} K - subpopulation size\n* @param {NonNegativeInteger} n - number of draws\n* @throws {TypeError} `N` must be a nonnegative integer\n* @throws {TypeError} `K` must be a nonnegative integer\n* @throws {TypeError} `n` must be a nonnegative integer\n* @throws {RangeError} `K` must not exceed `N`\n* @throws {RangeError} `n` must not exceed `N`\n* @returns {Hypergeometric} distribution instance\n*\n* @example\n* var hypergeometric = new Hypergeometric( 10, 5, 7 );\n*\n* var y = hypergeometric.cdf( 0.8 );\n* // returns 0.0\n*\n* var v = hypergeometric.mode;\n* // returns 4.0\n*/\nfunction Hypergeometric( N, K, n ) {\n\tif ( !(this instanceof Hypergeometric) ) {\n\t\treturn new Hypergeometric( N, K, n );\n\t}\n\tif ( !isNonNegativeInteger( N ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Population size must be a nonnegative integer. Value: `%s`.', N ) );\n\t}\n\tif ( !isNonNegativeInteger( K ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Subpopulation size must be a nonnegative integer. Value: `%s`.', K ) );\n\t}\n\tif ( !isNonNegativeInteger( n ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Number of draws must be a nonnegative integer. Value: `%s`.', n ) );\n\t}\n\tif ( K > N ) {\n\t\tthrow new RangeError( 'invalid arguments. Subpopulation size must be less than or equal to the population size.' );\n\t}\n\tif ( n > N ) {\n\t\tthrow new RangeError( 'invalid arguments. Number of draws must be less than or equal to the population size.' );\n\t}\n\tdefineProperty( this, 'N', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn N;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isNonNegativeInteger( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid assignment. Must be a nonnegative integer. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\tif ( K > value ) {\n\t\t\t\tthrow new RangeError( format( 'invalid assignment. Must be larger than or equal to %u. Value: `%u`.', K, value ) );\n\t\t\t}\n\t\t\tif ( n > value ) {\n\t\t\t\tthrow new RangeError( format( 'invalid assignment. Must be larger than or equal to %u. Value: `%u`.', n, value ) );\n\t\t\t}\n\t\t\tN = value;\n\t\t}\n\t});\n\tdefineProperty( this, 'K', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn K;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isNonNegativeInteger( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid assignment. Must be a nonnegative integer. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\tif ( value > N ) {\n\t\t\t\tthrow new RangeError( format( 'invalid assignment. Must be less than or equal to %u. Value: `%u`.', N, value ) );\n\t\t\t}\n\t\t\tK = value;\n\t\t}\n\t});\n\tdefineProperty( this, 'n', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn n;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isNonNegativeInteger( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid assignment. Must be a nonnegative integer. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\tif ( value > N ) {\n\t\t\t\tthrow new RangeError( format( 'invalid assignment. Must be less than or equal to %u. Value: `%u`.', N, value ) );\n\t\t\t}\n\t\t\tn = value;\n\t\t}\n\t});\n\treturn this;\n}\n\n/**\n* Hypergeometric distribution excess kurtosis.\n*\n* @name kurtosis\n* @memberof Hypergeometric.prototype\n* @type {number}\n* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}\n*\n* @example\n* var hypergeometric = new Hypergeometric( 20, 15, 5 );\n*\n* var v = hypergeometric.kurtosis;\n* // returns ~-0.276\n*/\nsetReadOnlyAccessor( Hypergeometric.prototype, 'kurtosis', function get() {\n\treturn kurtosis( this.N, this.K, this.n );\n});\n\n/**\n* Hypergeometric distribution expected value.\n*\n* @name mean\n* @memberof Hypergeometric.prototype\n* @type {number}\n* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}\n*\n* @example\n* var hypergeometric = new Hypergeometric( 20, 15, 5 );\n*\n* var v = hypergeometric.mean;\n* // returns 3.75\n*/\nsetReadOnlyAccessor( Hypergeometric.prototype, 'mean', function get() {\n\treturn mean( this.N, this.K, this.n );\n});\n\n/**\n* Hypergeometric distribution mode.\n*\n* @name mode\n* @memberof Hypergeometric.prototype\n* @type {NonNegativeInteger}\n* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}\n*\n* @example\n* var hypergeometric = new Hypergeometric( 20, 15, 5 );\n*\n* var v = hypergeometric.mode;\n* // returns 4.0\n*/\nsetReadOnlyAccessor( Hypergeometric.prototype, 'mode', function get() {\n\treturn mode( this.N, this.K, this.n );\n});\n\n/**\n* Hypergeometric distribution skewness.\n*\n* @name skewness\n* @memberof Hypergeometric.prototype\n* @type {number}\n* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}\n*\n* @example\n* var hypergeometric = new Hypergeometric( 20, 15, 5 );\n*\n* var v = hypergeometric.skewness;\n* // returns ~-0.323\n*/\nsetReadOnlyAccessor( Hypergeometric.prototype, 'skewness', function get() {\n\treturn skewness( this.N, this.K, this.n );\n});\n\n/**\n* Hypergeometric distribution standard deviation.\n*\n* @name stdev\n* @memberof Hypergeometric.prototype\n* @type {NonNegativeNumber}\n* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}\n*\n* @example\n* var hypergeometric = new Hypergeometric( 20, 15, 5 );\n*\n* var v = hypergeometric.stdev;\n* // returns ~0.86\n*/\nsetReadOnlyAccessor( Hypergeometric.prototype, 'stdev', function get() {\n\treturn stdev( this.N, this.K, this.n );\n});\n\n/**\n* Hypergeometric distribution variance.\n*\n* @name variance\n* @memberof Hypergeometric.prototype\n* @type {NonNegativeNumber}\n* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}\n*\n* @example\n* var hypergeometric = new Hypergeometric( 20, 15, 5 );\n*\n* var v = hypergeometric.variance;\n* // returns ~0.74\n*/\nsetReadOnlyAccessor( Hypergeometric.prototype, 'variance', function get() {\n\treturn variance( this.N, this.K, this.n );\n});\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @name cdf\n* @memberof Hypergeometric.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {Probability} evaluated CDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var hypergeometric = new Hypergeometric( 8, 2, 4 );\n*\n* var v = hypergeometric.cdf( 0.5 );\n* // returns ~0.214\n*/\nsetReadOnly( Hypergeometric.prototype, 'cdf', hypergeometricCDF );\n\n/**\n* Evaluates the natural logarithm of the probability density function (PMF).\n*\n* @name logpmf\n* @memberof Hypergeometric.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logPMF\n* @see [pmf]{@link https://en.wikipedia.org/wiki/Probability_mass_function}\n*\n* @example\n* var hypergeometric = new Hypergeometric( 8, 2, 4 );\n*\n* var v = hypergeometric.logpmf( 2.0 );\n* // returns ~-1.54\n*/\nsetReadOnly( Hypergeometric.prototype, 'logpmf', hypergeometricLogPMF );\n\n/**\n* Evaluates the probability density function (PMF).\n*\n* @name pmf\n* @memberof Hypergeometric.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated PMF\n* @see [pmf]{@link https://en.wikipedia.org/wiki/Probability_mass_function}\n*\n* @example\n* var hypergeometric = new Hypergeometric( 8, 2, 4 );\n*\n* var v = hypergeometric.pmf( 2.0 );\n* // returns ~0.214\n*/\nsetReadOnly( Hypergeometric.prototype, 'pmf', hypergeometricPMF );\n\n/**\n* Evaluates the quantile function.\n*\n* @name quantile\n* @memberof Hypergeometric.prototype\n* @type {Function}\n* @param {Probability} p - input probability\n* @returns {NonNegativeInteger} evaluated quantile function\n* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}\n*\n* @example\n* var hypergeometric = new Hypergeometric( 8, 2, 4 );\n*\n* var v = hypergeometric.quantile( 0.8 );\n* // returns 2\n*/\nsetReadOnly( Hypergeometric.prototype, 'quantile', hypergeometricQuantile );\n\n\n// EXPORTS //\n\nexport default Hypergeometric;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Hypergeometric distribution probability mass function (PMF).\n*\n* @module @stdlib/stats-base-dists-hypergeometric-pmf\n*\n* @example\n* import pmf from '@stdlib/stats-base-dists-hypergeometric-pmf';\n*\n* var y = pmf( 1.0, 8, 4, 2 );\n* // returns ~0.571\n*\n* y = pmf( 2.0, 8, 4, 2 );\n* // returns ~0.214\n*\n* y = pmf( 0.0, 8, 4, 2 );\n* // returns ~0.214\n*\n* y = pmf( 1.5, 8, 4, 2 );\n* // returns 0.0\n*\n* var mypmf = pmf.factory( 30, 20, 5 );\n* y = mypmf( 4.0 );\n* // returns ~0.34\n*\n* y = mypmf( 1.0 );\n* // returns ~0.029\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport pmf from './pmf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( pmf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default pmf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNonNegativeInteger from '@stdlib/math-base-assert-is-nonnegative-integer';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport constantFunction from '@stdlib/utils-constant-function';\nimport exp from '@stdlib/math-base-special-exp';\nimport fln from '@stdlib/math-base-special-factorialln';\nimport max from '@stdlib/math-base-special-max';\nimport min from '@stdlib/math-base-special-min';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the probability mass function (PMF) for a hypergeometric distribution with population size `N`, subpopulation size `K`, and number of draws `n`.\n*\n* @param {NonNegativeInteger} N - population size\n* @param {NonNegativeInteger} K - subpopulation size\n* @param {NonNegativeInteger} n - number of draws\n* @returns {Function} PMF\n*\n* @example\n* var mypmf = factory( 30, 20, 5 );\n* var y = mypmf( 4.0 );\n* // returns ~0.34\n*\n* y = mypmf( 1.0 );\n* // returns ~0.029\n*/\nfunction factory( N, K, n ) {\n\tvar maxs;\n\tvar mins;\n\tif (\n\t\tisnan( N ) ||\n\t\tisnan( K ) ||\n\t\tisnan( n ) ||\n\t\t!isNonNegativeInteger( N ) ||\n\t\t!isNonNegativeInteger( K ) ||\n\t\t!isNonNegativeInteger( n ) ||\n\t\tN === PINF ||\n\t\tK === PINF ||\n\t\tK > N ||\n\t\tn > N\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\n\tmins = max( 0, n + K - N );\n\tmaxs = min( K, n );\n\treturn pmf;\n\n\t/**\n\t* Evaluates the probability mass function (PMF) for a hypergeometric distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated PMF\n\t*/\n\tfunction pmf( x ) {\n\t\tvar ldenom;\n\t\tvar lnum;\n\t\tvar lpmf;\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif (\n\t\t\tisNonNegativeInteger( x ) &&\n\t\t\tmins <= x &&\n\t\t\tx <= maxs\n\t\t) {\n\t\t\tlnum = fln( n ) + fln( K ) + fln( N - n ) + fln( N - K );\n\t\t\tldenom = fln( N ) + fln( x ) + fln( n - x );\n\t\t\tldenom += fln( K - x ) + fln( N - K + x - n );\n\t\t\tlpmf = lnum - ldenom;\n\t\t\treturn exp( lpmf );\n\t\t}\n\t\treturn 0.0;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Hypergeometric distribution cumulative distribution function (CDF).\n*\n* @module @stdlib/stats-base-dists-hypergeometric-cdf\n*\n* @example\n* import cdf from '@stdlib/stats-base-dists-hypergeometric-cdf';\n*\n* var y = cdf( 1.0, 8, 4, 2 );\n* // returns ~0.786\n*\n* y = cdf( 1.5, 8, 4, 2 );\n* // returns ~0.786\n*\n* y = cdf( 2.0, 8, 4, 2 );\n* // returns 1.0\n*\n* y = cdf( 0.0, 8, 4, 2 );\n* // returns ~0.214\n*\n* var mycdf = cdf.factory( 30, 20, 5 );\n* y = mycdf( 4.0 );\n* // returns ~0.891\n*\n* y = mycdf( 1.0 );\n* // returns ~0.031\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport cdf from './cdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( cdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNonNegativeInteger from '@stdlib/math-base-assert-is-nonnegative-integer';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport constantFunction from '@stdlib/utils-constant-function';\nimport trunc from '@stdlib/math-base-special-trunc';\nimport max from '@stdlib/math-base-special-max';\nimport min from '@stdlib/math-base-special-min';\nimport pmf from '@stdlib/stats-base-dists-hypergeometric-pmf';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport Float64Array from '@stdlib/array-float64';\nimport sum from './sum.js';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the cumulative distribution function (CDF) for a hypergeometric distribution with population size `N`, subpopulation size `K`, and number of draws `n`.\n*\n* @param {NonNegativeInteger} N - population size\n* @param {NonNegativeInteger} K - subpopulation size\n* @param {NonNegativeInteger} n - number of draws\n* @returns {Function} CDF\n*\n* @example\n* var mycdf = factory( 30, 20, 5 );\n* var y = mycdf( 4.0 );\n* // returns ~0.891\n*\n* y = mycdf( 1.0 );\n* // returns ~0.031\n*/\nfunction factory( N, K, n ) {\n\tif (\n\t\tisnan( N ) ||\n\t\tisnan( K ) ||\n\t\tisnan( n ) ||\n\t\t!isNonNegativeInteger( N ) ||\n\t\t!isNonNegativeInteger( K ) ||\n\t\t!isNonNegativeInteger( n ) ||\n\t\tN === PINF ||\n\t\tK === PINF ||\n\t\tK > N ||\n\t\tn > N\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn cdf;\n\n\t/**\n\t* Evaluates the cumulative distribution function (CDF) for a hypergeometric distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated CDF\n\t*\n\t* @example\n\t* var y = cdf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction cdf( x ) {\n\t\tvar denom;\n\t\tvar probs;\n\t\tvar num;\n\t\tvar ret;\n\t\tvar i;\n\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tx = trunc( x );\n\t\tif ( x < max( 0, n + K - N ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\tif ( x >= min( n, K ) ) {\n\t\t\treturn 1.0;\n\t\t}\n\n\t\tprobs = new Float64Array( x+1 );\n\t\tprobs[ x ] = pmf( x, N, K, n );\n\n\t\t/*\n\t\t* Use recurrence relation:\n\t\t*\n\t\t*   (x+1)( N - K - (n-x-1) )P(X=x+1)=(K-x)(n-x)P(X=x)\n\t\t*/\n\t\tfor ( i = x-1; i >= 0; i-- ) {\n\t\t\tnum = ( i+1 ) * ( N-K-(n-i-1) );\n\t\t\tdenom = ( K-i ) * ( n-i );\n\t\t\tprobs[ i ] = ( num/denom ) * probs[ i+1 ];\n\t\t}\n\t\tret = sum( probs );\n\t\treturn min( ret, 1.0 );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if a value is a nonnegative integer.\n*\n* @module @stdlib/assert-is-nonnegative-integer\n*\n* @example\n* import isNonNegativeInteger from '@stdlib/assert-is-nonnegative-integer';\n*\n* var bool = isNonNegativeInteger( 5.0 );\n* // returns true\n*\n* bool = isNonNegativeInteger( new Number( 5.0 ) );\n* // returns true\n*\n* bool = isNonNegativeInteger( -5.0 );\n* // returns false\n*\n* bool = isNonNegativeInteger( 3.14 );\n* // returns false\n*\n* bool = isNonNegativeInteger( null );\n* // returns false\n*\n* @example\n* import { isPrimitive as isNonNegativeInteger } from '@stdlib/assert-is-nonnegative-integer';\n*\n* var bool = isNonNegativeInteger( 3.0 );\n* // returns true\n*\n* bool = isNonNegativeInteger( new Number( 3.0 ) );\n* // returns false\n*\n* @example\n* import { isObject as isNonNegativeInteger } from '@stdlib/assert-is-nonnegative-integer';\n*\n* var bool = isNonNegativeInteger( 3.0 );\n* // returns false\n*\n* bool = isNonNegativeInteger( new Number( 3.0 ) );\n* // returns true\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport isNonNegativeInteger from './main.js';\nimport isPrimitive from './primitive.js';\nimport isObject from './object.js';\n\n\n// MAIN //\n\nsetReadOnly( isNonNegativeInteger, 'isPrimitive', isPrimitive );\nsetReadOnly( isNonNegativeInteger, 'isObject', isObject );\n\n\n// EXPORTS //\n\nexport default isNonNegativeInteger;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Natural logarithm of the probability mass function (PMF) for a hypergeometric distribution.\n*\n* @module @stdlib/stats-base-dists-hypergeometric-logpmf\n*\n* @example\n* import logpmf from '@stdlib/stats-base-dists-hypergeometric-logpmf';\n*\n* var y = logpmf( 1.0, 8, 4, 2 );\n* // returns ~-0.56\n*\n* y = logpmf( 2.0, 8, 4, 2 );\n* // returns ~-1.54\n*\n* y = logpmf( 0.0, 8, 4, 2 );\n* // returns ~-1.54\n*\n* y = logpmf( 1.5, 8, 4, 2 );\n* // returns -Infinity\n*\n* var mylogpmf = logpmf.factory( 30, 20, 5 );\n* y = mylogpmf( 4.0 );\n* // returns ~-1.079\n*\n* y = mylogpmf( 1.0 );\n* // returns ~-3.54\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport logpmf from './logpmf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( logpmf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default logpmf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNonNegativeInteger from '@stdlib/math-base-assert-is-nonnegative-integer';\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport fln from '@stdlib/math-base-special-factorialln';\nimport max from '@stdlib/math-base-special-max';\nimport min from '@stdlib/math-base-special-min';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the natural logarithm of the probability mass function (PMF) for a hypergeometric distribution with population size `N`, subpopulation size `K` and number of draws `n`.\n*\n* @param {NonNegativeInteger} N - population size\n* @param {NonNegativeInteger} K - subpopulation size\n* @param {NonNegativeInteger} n - number of draws\n* @returns {Function} logPMF\n*\n* @example\n* var mylogpmf = factory( 30, 20, 5 );\n* var y = mylogpmf( 4.0 );\n* // returns ~-1.079\n*\n* y = mylogpmf( 1.0 );\n* // returns ~-3.524\n*/\nfunction factory( N, K, n ) {\n\tvar maxs;\n\tvar mins;\n\tif (\n\t\tisnan( N ) ||\n\t\tisnan( K ) ||\n\t\tisnan( n ) ||\n\t\t!isNonNegativeInteger( N ) ||\n\t\t!isNonNegativeInteger( K ) ||\n\t\t!isNonNegativeInteger( n ) ||\n\t\tN === PINF ||\n\t\tK === PINF ||\n\t\tK > N ||\n\t\tn > N\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\n\tmins = max( 0, n + K - N );\n\tmaxs = min( K, n );\n\treturn logpmf;\n\n\t/**\n\t* Evaluates the natural logarithm of the probability mass function (PMF) for a hypergeometric distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {number} evaluated logPMF\n\t*/\n\tfunction logpmf( x ) {\n\t\tvar ldenom;\n\t\tvar lnum;\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif (\n\t\t\tisNonNegativeInteger( x ) &&\n\t\t\tmins <= x &&\n\t\t\tx <= maxs\n\t\t) {\n\t\t\tlnum = fln( n ) + fln( K ) + fln( N - n ) + fln( N - K );\n\t\t\tldenom = fln( N ) + fln( x ) + fln( n - x );\n\t\t\tldenom += fln( K - x ) + fln( N - K + x - n );\n\t\t\treturn lnum - ldenom;\n\t\t}\n\t\treturn NINF;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Hypergeometric distribution quantile function.\n*\n* @module @stdlib/stats-base-dists-hypergeometric-quantile\n*\n* @example\n* import quantile from '@stdlib/stats-base-dists-hypergeometric-quantile';\n*\n* var y = quantile( 0.4, 40, 20, 10 );\n* // returns 5\n*\n* y = quantile( 0.8, 60, 40, 20 );\n* // returns 15\n*\n* y = quantile( 0.5, 100, 10, 10 );\n* // returns 1\n*\n* y = quantile( 0.0, 100, 40, 20 );\n* // returns 0\n*\n* y = quantile( 1.0, 100, 40, 20 );\n* // returns 20\n*\n* var myquantile = quantile.factory( 100, 20, 10 );\n* y = myquantile( 0.2 );\n* // returns 1\n*\n* y = myquantile( 0.9 );\n* // returns 4\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport quantile from './quantile.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( quantile, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default quantile;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNonNegativeInteger from '@stdlib/math-base-assert-is-nonnegative-integer';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport constantFunction from '@stdlib/utils-constant-function';\nimport max from '@stdlib/math-base-special-max';\nimport min from '@stdlib/math-base-special-min';\nimport cdf from '@stdlib/stats-base-dists-hypergeometric-cdf';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the quantile function for a hypergeometric distribution with population size `N`, subpopulation size `K`, and number of draws `n`.\n*\n* @param {NonNegativeInteger} N - population size\n* @param {NonNegativeInteger} K - subpopulation size\n* @param {NonNegativeInteger} n - number of draws\n* @returns {Function} quantile function\n*\n* @example\n* var quantile = factory( 100, 20, 10 );\n* var y = quantile( 0.2 );\n* // returns 1\n*\n* y = quantile( 0.9 );\n* // returns 4\n*/\nfunction factory( N, K, n ) {\n\tif (\n\t\tisnan( N ) ||\n\t\tisnan( K ) ||\n\t\tisnan( n ) ||\n\t\t!isNonNegativeInteger( N ) ||\n\t\t!isNonNegativeInteger( K ) ||\n\t\t!isNonNegativeInteger( n ) ||\n\t\tN === PINF ||\n\t\tK === PINF ||\n\t\tK > N ||\n\t\tn > N\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn quantile;\n\n\t/**\n\t* Evaluates the quantile function for a hypergeometric distribution.\n\t*\n\t* @private\n\t* @param {Probability} p - input value\n\t* @returns {NonNegativeInteger} evaluated quantile function\n\t*/\n\tfunction quantile( p ) {\n\t\tvar prob;\n\t\tvar x;\n\n\t\tif ( isnan( p ) || p < 0.0 || p > 1.0 ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( p === 0.0 ) {\n\t\t\treturn max( 0, n + K - N );\n\t\t}\n\t\tif ( p === 1.0 ) {\n\t\t\treturn min( n, K );\n\t\t}\n\t\tx = max( 0, n + K - N );\n\t\twhile ( true ) {\n\t\t\tprob = cdf( x, N, K, n );\n\t\t\tif ( prob > p ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tx += 1;\n\t\t}\n\t\treturn x;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace hypergeometric\n*/\nvar hypergeometric = {};\n\n/**\n* @name cdf\n* @memberof hypergeometric\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/hypergeometric/cdf}\n*/\nimport cdf from '@stdlib/stats-base-dists-hypergeometric-cdf';\nsetReadOnly( hypergeometric, 'cdf', cdf );\n\n/**\n* @name Hypergeometric\n* @memberof hypergeometric\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/hypergeometric/ctor}\n*/\nimport Hypergeometric from '@stdlib/stats-base-dists-hypergeometric-ctor';\nsetReadOnly( hypergeometric, 'Hypergeometric', Hypergeometric );\n\n/**\n* @name kurtosis\n* @memberof hypergeometric\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/hypergeometric/kurtosis}\n*/\nimport kurtosis from '@stdlib/stats-base-dists-hypergeometric-kurtosis';\nsetReadOnly( hypergeometric, 'kurtosis', kurtosis );\n\n/**\n* @name logpmf\n* @memberof hypergeometric\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/hypergeometric/logpmf}\n*/\nimport logpmf from '@stdlib/stats-base-dists-hypergeometric-logpmf';\nsetReadOnly( hypergeometric, 'logpmf', logpmf );\n\n/**\n* @name mean\n* @memberof hypergeometric\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/hypergeometric/mean}\n*/\nimport mean from '@stdlib/stats-base-dists-hypergeometric-mean';\nsetReadOnly( hypergeometric, 'mean', mean );\n\n/**\n* @name mode\n* @memberof hypergeometric\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/hypergeometric/mode}\n*/\nimport mode from '@stdlib/stats-base-dists-hypergeometric-mode';\nsetReadOnly( hypergeometric, 'mode', mode );\n\n/**\n* @name pmf\n* @memberof hypergeometric\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/hypergeometric/pmf}\n*/\nimport pmf from '@stdlib/stats-base-dists-hypergeometric-pmf';\nsetReadOnly( hypergeometric, 'pmf', pmf );\n\n/**\n* @name quantile\n* @memberof hypergeometric\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/hypergeometric/quantile}\n*/\nimport quantile from '@stdlib/stats-base-dists-hypergeometric-quantile';\nsetReadOnly( hypergeometric, 'quantile', quantile );\n\n/**\n* @name skewness\n* @memberof hypergeometric\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/hypergeometric/skewness}\n*/\nimport skewness from '@stdlib/stats-base-dists-hypergeometric-skewness';\nsetReadOnly( hypergeometric, 'skewness', skewness );\n\n/**\n* @name stdev\n* @memberof hypergeometric\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/hypergeometric/stdev}\n*/\nimport stdev from '@stdlib/stats-base-dists-hypergeometric-stdev';\nsetReadOnly( hypergeometric, 'stdev', stdev );\n\n/**\n* @name variance\n* @memberof hypergeometric\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/hypergeometric/variance}\n*/\nimport variance from '@stdlib/stats-base-dists-hypergeometric-variance';\nsetReadOnly( hypergeometric, 'variance', variance );\n\n\n// EXPORTS //\n\nexport default hypergeometric;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport gammainc from '@stdlib/math-base-special-gammainc';\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Evaluates the cumulative distribution function (CDF) for an inverse gamma distribution with shape parameter `alpha` and scale parameter `beta` at a value `x`.\n*\n* @param {number} x - input value\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} beta - scale parameter\n* @returns {Probability} evaluated CDF\n*\n* @example\n* var y = cdf( 2.0, 1.0, 1.0 );\n* // returns ~0.607\n*\n* @example\n* var y = cdf( 2.0, 3.0, 1.0 );\n* // returns ~0.986\n*\n* @example\n* var y = cdf( -1.0, 2.0, 2.0 );\n* // returns 0.0\n*\n* @example\n* var y = cdf( +Infinity, 4.0, 2.0 );\n* // returns 1.0\n*\n* @example\n* var y = cdf( -Infinity, 4.0, 2.0 );\n* // returns 0.0\n*\n* @example\n* var y = cdf( NaN, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2.0, -1.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2.0, 1.0, -1.0 );\n* // returns NaN\n*/\nfunction cdf( x, alpha, beta ) {\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( alpha ) ||\n\t\tisnan( beta ) ||\n\t\talpha <= 0.0 ||\n\t\tbeta <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x <= 0.0 ) {\n\t\treturn 0.0;\n\t}\n\treturn gammainc( beta / x, alpha, true, true );\n}\n\n\n// EXPORTS //\n\nexport default cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport digamma from '@stdlib/math-base-special-digamma';\nimport gamma from '@stdlib/math-base-special-gamma';\nimport ln from '@stdlib/math-base-special-ln';\n\n\n// MAIN //\n\n/**\n* Returns the differential entropy of an inverse gamma distribution.\n*\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} beta - rate parameter\n* @returns {number} entropy\n*\n* @example\n* var v = entropy( 1.0, 1.0 );\n* // returns ~2.154\n*\n* @example\n* var v = entropy( 4.0, 12.0 );\n* // returns ~1.996\n*\n* @example\n* var v = entropy( 8.0, 2.0 );\n* // returns ~-0.922\n*\n* @example\n* var v = entropy( 1.0, -0.1 );\n* // returns NaN\n*\n* @example\n* var v = entropy( -0.1, 1.0 );\n* // returns NaN\n*\n* @example\n* var v = entropy( 2.0, NaN );\n* // returns NaN\n*\n* @example\n* var v = entropy( NaN, 2.0 );\n* // returns NaN\n*/\nfunction entropy( alpha, beta ) {\n\tvar out;\n\tif ( alpha <= 0.0 || beta <= 0.0 ) {\n\t\treturn NaN;\n\t}\n\tout = alpha + ln( beta*gamma( alpha ) );\n\tout -= ( 1.0+alpha ) * digamma( alpha );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default entropy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns the excess kurtosis of an inverse gamma distribution.\n*\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} beta - rate parameter\n* @returns {PositiveNumber} kurtosis\n*\n* @example\n* var v = kurtosis( 6.0, 1.0 );\n* // returns 19.0\n*\n* @example\n* var v = kurtosis( 5.0, 12.0 );\n* // returns 42.0\n*\n* @example\n* var v = kurtosis( 8.0, 2.0 );\n* // returns ~8.7\n*\n* @example\n* var v = kurtosis( 5.0, -0.1 );\n* // returns NaN\n*\n* @example\n* var v = kurtosis( 6.0, -0.1 );\n* // returns NaN\n*\n* @example\n* var v = kurtosis( -0.1, 1.0 );\n* // returns NaN\n*\n* @example\n* var v = kurtosis( 2.0, NaN );\n* // returns NaN\n*\n* @example\n* var v = kurtosis( NaN, 2.0 );\n* // returns NaN\n*/\nfunction kurtosis( alpha, beta ) {\n\tif (\n\t\tisnan( alpha ) ||\n\t\tisnan( beta ) ||\n\t\talpha <= 4.0 ||\n\t\tbeta <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn ( ( 30.0*alpha ) - 66.0 ) / ( ( alpha-3.0 ) * ( alpha-4.0 ) );\n}\n\n\n// EXPORTS //\n\nexport default kurtosis;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns the expected value of an inverse gamma distribution.\n*\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} beta - rate parameter\n* @returns {PositiveNumber} expected value\n*\n* @example\n* var v = mean( 4.0, 12.0 );\n* // returns 4.0\n*\n* @example\n* var v = mean( 8.0, 2.0 );\n* // returns ~0.286\n*\n* @example\n* var v = mean( 1.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var v = mean( 1.0, -0.1 );\n* // returns NaN\n*\n* @example\n* var v = mean( -0.1, 1.0 );\n* // returns NaN\n*\n* @example\n* var v = mean( 2.0, NaN );\n* // returns NaN\n*\n* @example\n* var v = mean( NaN, 2.0 );\n* // returns NaN\n*/\nfunction mean( alpha, beta ) {\n\tif ( alpha <= 1.0 || beta <= 0.0 ) {\n\t\treturn NaN;\n\t}\n\treturn beta / ( alpha - 1.0 );\n}\n\n\n// EXPORTS //\n\nexport default mean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns the mode of an inverse gamma distribution.\n*\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} beta - rate parameter\n* @returns {PositiveNumber} mode\n*\n* @example\n* var v = mode( 1.0, 1.0 );\n* // returns 0.5\n*\n* @example\n* var v = mode( 4.0, 12.0 );\n* // returns 2.4\n*\n* @example\n* var v = mode( 8.0, 2.0 );\n* // returns ~0.222\n*\n* @example\n* var v = mode( 1.0, -0.1 );\n* // returns NaN\n*\n* @example\n* var v = mode( -0.1, 1.0 );\n* // returns NaN\n*\n* @example\n* var v = mode( 2.0, NaN );\n* // returns NaN\n*\n* @example\n* var v = mode( NaN, 2.0 );\n* // returns NaN\n*/\nfunction mode( alpha, beta ) {\n\tif ( alpha <= 0.0 || beta <= 0.0 ) {\n\t\treturn NaN;\n\t}\n\treturn beta / ( alpha + 1.0 );\n}\n\n\n// EXPORTS //\n\nexport default mode;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport gammaincinv from '@stdlib/math-base-special-gammaincinv';\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Evaluates the quantile function for an inverse gamma distribution with shape parameter `alpha` and scale parameter `beta` at a probability `p`.\n*\n* @param {Probability} p - input value\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} beta - scale parameter\n* @returns {number} evaluated quantile function\n*\n* @example\n* var y = quantile( 0.8, 2.0, 1.0 );\n* // returns ~1.213\n*\n* @example\n* var y = quantile( 0.5, 4.0, 2.0 );\n* // returns ~0.545\n*\n* @example\n* var y = quantile( 1.1, 1.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( -0.2, 1.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( NaN, 1.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.0, 1.0, NaN );\n* // returns NaN\n*\n* @example\n* // Non-positive shape parameter:\n* var y = quantile( 0.5, -1.0, 1.0 );\n*\n* @example\n* // Non-positive rate parameter:\n* var y = quantile( 0.5, 1.0, -1.0 );\n* // returns NaN\n*/\nfunction quantile( p, alpha, beta ) {\n\tif (\n\t\tisnan( alpha ) ||\n\t\tisnan( beta ) ||\n\t\tisnan( p ) ||\n\t\talpha <= 0.0 ||\n\t\tbeta <= 0.0 ||\n\t\tp < 0.0 ||\n\t\tp > 1.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn beta / gammaincinv( p, alpha, true );\n}\n\n\n// EXPORTS //\n\nexport default quantile;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport gammaln from '@stdlib/math-base-special-gammaln';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport ln from '@stdlib/math-base-special-ln';\nimport NINF from '@stdlib/constants-float64-ninf';\n\n\n// MAIN //\n\n/**\n* Evaluates the natural logarithm of the probability density function (PDF) for an inverse gamma distribution with shape parameter `alpha` and scale parameter `beta` at a value `x`.\n*\n* @param {number} x - input value\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} beta - scale parameter\n* @returns {number} evaluated logPDF\n*\n* @example\n* var y = logpdf( 2.0, 0.5, 1.0 );\n* // returns ~-2.112\n*\n* @example\n* var y = logpdf( 0.2, 1.0, 1.0 );\n* // returns ~-1.781\n*\n* @example\n* var y = logpdf( -1.0, 4.0, 2.0 );\n* // returns -Infinity\n*\n* @example\n* var y = logpdf( NaN, 1.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = logpdf( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = logpdf( 0.0, 1.0, NaN );\n* // returns NaN\n*\n* @example\n* // Negative shape parameter:\n* var y = logpdf( 2.0, -1.0, 1.0 );\n* // returns NaN\n*\n* @example\n* // Negative scale parameter:\n* var y = logpdf( 2.0, 1.0, -1.0 );\n* // returns NaN\n*/\nfunction logpdf( x, alpha, beta ) {\n\tvar out;\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( alpha ) ||\n\t\tisnan( beta ) ||\n\t\talpha <= 0.0 ||\n\t\tbeta <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x <= 0.0 ) {\n\t\treturn NINF;\n\t}\n\tout = (alpha * ln( beta )) - gammaln( alpha );\n\tout -= (alpha + 1.0) * ln( x );\n\tout -= beta / x;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default logpdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport sqrt from '@stdlib/math-base-special-sqrt';\n\n\n// MAIN //\n\n/**\n* Returns the skewness of an inverse gamma distribution.\n*\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} beta - rate parameter\n* @returns {PositiveNumber} skewness\n*\n* @example\n* var v = skewness( 4.0, 12.0 );\n* // returns ~5.657\n*\n* @example\n* var v = skewness( 8.0, 2.0 );\n* // returns ~1.96\n*\n* @example\n* var v = skewness( 2.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var v = skewness( 4.0, -0.1 );\n* // returns NaN\n*\n* @example\n* var v = skewness( -0.1, 1.0 );\n* // returns NaN\n*\n* @example\n* var v = skewness( 4.0, NaN );\n* // returns NaN\n*\n* @example\n* var v = skewness( NaN, 2.0 );\n* // returns NaN\n*/\nfunction skewness( alpha, beta ) {\n\tif (\n\t\tisnan( alpha ) ||\n\t\tisnan( beta ) ||\n\t\talpha <= 3.0 ||\n\t\tbeta <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn 4.0 * sqrt( alpha - 2.0 ) / ( alpha - 3.0 );\n}\n\n\n// EXPORTS //\n\nexport default skewness;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport sqrt from '@stdlib/math-base-special-sqrt';\n\n\n// MAIN //\n\n/**\n* Returns the standard deviation of an inverse gamma distribution.\n*\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} beta - rate parameter\n* @returns {PositiveNumber} standard deviation\n*\n* @example\n* var v = stdev( 3.0, 5.0 );\n* // returns ~2.5\n*\n* @example\n* var v = stdev( 4.0, 12.0 );\n* // returns ~2.828\n*\n* @example\n* var v = stdev( 8.0, 2.0 );\n* // returns ~0.117\n*\n* @example\n* var v = stdev( 3.0, -0.1 );\n* // returns NaN\n*\n* @example\n* var v = stdev( 1.5, 1.0 );\n* // returns NaN\n*\n* @example\n* var v = stdev( 3.0, NaN );\n* // returns NaN\n*\n* @example\n* var v = stdev( NaN, 2.0 );\n* // returns NaN\n*/\nfunction stdev( alpha, beta ) {\n\tif ( alpha <= 2.0 || beta <= 0.0 ) {\n\t\treturn NaN;\n\t}\n\treturn beta / ( ( alpha-1.0 ) * sqrt( alpha-2.0 ) );\n}\n\n\n// EXPORTS //\n\nexport default stdev;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport pow from '@stdlib/math-base-special-pow';\n\n\n// MAIN //\n\n/**\n* Returns the variance of an inverse gamma distribution.\n*\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} beta - rate parameter\n* @returns {PositiveNumber} variance\n*\n* @example\n* var v = variance( 3.0, 5.0 );\n* // returns ~6.25\n*\n* @example\n* var v = variance( 4.0, 12.0 );\n* // returns 8.0\n*\n* @example\n* var v = variance( 8.0, 2.0 );\n* // returns ~0.014\n*\n* @example\n* var v = variance( 3.0, -0.1 );\n* // returns NaN\n*\n* @example\n* var v = variance( 1.5, 1.0 );\n* // returns NaN\n*\n* @example\n* var v = variance( 3.0, NaN );\n* // returns NaN\n*\n* @example\n* var v = variance( NaN, 2.0 );\n* // returns NaN\n*/\nfunction variance( alpha, beta ) {\n\tif ( alpha <= 2.0 || beta <= 0.0 ) {\n\t\treturn NaN;\n\t}\n\treturn ( beta*beta ) / ( pow( alpha-1.0, 2.0 ) * ( alpha-2.0 ) );\n}\n\n\n// EXPORTS //\n\nexport default variance;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport gammaln from '@stdlib/math-base-special-gammaln';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport exp from '@stdlib/math-base-special-exp';\nimport ln from '@stdlib/math-base-special-ln';\n\n\n// MAIN //\n\n/**\n* Evaluates the probability density function (PDF) for an inverse gamma distribution with shape parameter `alpha` and scale parameter `beta` at a value `x`.\n*\n* @param {number} x - input value\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} beta - scale parameter\n* @returns {number} evaluated PDF\n*\n* @example\n* var y = pdf( 2.0, 0.5, 1.0 );\n* // returns ~0.121\n*\n* @example\n* var y = pdf( 0.2, 1.0, 1.0 );\n* // returns ~0.168\n*\n* @example\n* var y = pdf( -1.0, 4.0, 2.0 );\n* // returns 0.0\n*\n* @example\n* var y = pdf( NaN, 1.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = pdf( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = pdf( 0.0, 1.0, NaN );\n* // returns NaN\n*\n* @example\n* // Negative shape parameter:\n* var y = pdf( 2.0, -1.0, 1.0 );\n* // returns NaN\n*\n* @example\n* // Negative scale parameter:\n* var y = pdf( 2.0, 1.0, -1.0 );\n* // returns NaN\n*/\nfunction pdf( x, alpha, beta ) {\n\tvar lnl;\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( alpha ) ||\n\t\tisnan( beta ) ||\n\t\talpha <= 0.0 ||\n\t\tbeta <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x <= 0.0 ) {\n\t\treturn 0.0;\n\t}\n\tlnl = (alpha * ln( beta )) - gammaln( alpha );\n\tlnl -= (alpha + 1.0) * ln( x );\n\tlnl -= beta / x;\n\treturn exp( lnl );\n}\n\n\n// EXPORTS //\n\nexport default pdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nimport defineProperty from '@stdlib/utils-define-property';\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport setReadOnlyAccessor from '@stdlib/utils-define-nonenumerable-read-only-accessor';\nimport { isPrimitive as isPositive } from '@stdlib/assert-is-positive-number';\nimport entropy from '@stdlib/stats-base-dists-invgamma-entropy';\nimport kurtosis from '@stdlib/stats-base-dists-invgamma-kurtosis';\nimport mean from '@stdlib/stats-base-dists-invgamma-mean';\nimport mode from '@stdlib/stats-base-dists-invgamma-mode';\nimport quantile from '@stdlib/stats-base-dists-invgamma-quantile';\nimport logpdf from '@stdlib/stats-base-dists-invgamma-logpdf';\nimport skewness from '@stdlib/stats-base-dists-invgamma-skewness';\nimport stdev from '@stdlib/stats-base-dists-invgamma-stdev';\nimport variance from '@stdlib/stats-base-dists-invgamma-variance';\nimport cdf from '@stdlib/stats-base-dists-invgamma-cdf';\nimport pdf from '@stdlib/stats-base-dists-invgamma-pdf';\nimport format from '@stdlib/string-format';\n\n\n// FUNCTIONS //\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n*/\nfunction invgammaCDF( x ) {\n\treturn cdf( x, this.alpha, this.beta );\n}\n\n/**\n* Evaluates the natural logarithm of the probability density function (PDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n*/\nfunction invgammaLogPDF( x ) {\n\treturn logpdf( x, this.alpha, this.beta );\n}\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n*/\nfunction invgammaPDF( x ) {\n\treturn pdf( x, this.alpha, this.beta );\n}\n\n/**\n* Evaluates the quantile function.\n*\n* @private\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n*/\nfunction invgammaQuantile( p ) {\n\treturn quantile( p, this.alpha, this.beta );\n}\n\n\n// MAIN //\n\n/**\n* Inverse gamma distribution constructor.\n*\n* @constructor\n* @param {PositiveNumber} [alpha=1.0] - shape parameter\n* @param {PositiveNumber} [beta=1.0] - scale parameter\n* @throws {TypeError} `alpha` must be a positive number\n* @throws {TypeError} `beta` must be a positive number\n* @returns {InvGamma} distribution instance\n*\n* @example\n* var invgamma = new InvGamma( 1.0, 1.0 );\n*\n* var y = invgamma.cdf( 0.8 );\n* // returns ~0.287\n*\n* var v = invgamma.mode;\n* // returns 0.5\n*/\nfunction InvGamma() {\n\tvar alpha;\n\tvar beta;\n\tif ( !(this instanceof InvGamma) ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn new InvGamma();\n\t\t}\n\t\treturn new InvGamma( arguments[ 0 ], arguments[ 1 ] );\n\t}\n\tif ( arguments.length ) {\n\t\talpha = arguments[ 0 ];\n\t\tbeta = arguments[ 1 ];\n\t\tif ( !isPositive( alpha ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First shape parameter must be a positive number. Value: `%s`.', alpha ) );\n\t\t}\n\t\tif ( !isPositive( beta ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second shape parameter must be a positive number. Value: `%s`.', beta ) );\n\t\t}\n\t} else {\n\t\talpha = 1.0;\n\t\tbeta = 1.0;\n\t}\n\tdefineProperty( this, 'alpha', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn alpha;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isPositive( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid assignment. Must be a positive number. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\talpha = value;\n\t\t}\n\t});\n\tdefineProperty( this, 'beta', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn beta;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isPositive( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid assignment. Must be a positive number. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\tbeta = value;\n\t\t}\n\t});\n\treturn this;\n}\n\n/**\n* Inverse gamma distribution differential entropy.\n*\n* @name entropy\n* @memberof InvGamma.prototype\n* @type {number}\n* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}\n*\n* @example\n* var invgamma = new InvGamma( 4.0, 12.0 );\n*\n* var v = invgamma.entropy;\n* // returns ~1.996\n*/\nsetReadOnlyAccessor( InvGamma.prototype, 'entropy', function get() {\n\treturn entropy( this.alpha, this.beta );\n});\n\n/**\n* Inverse gamma distribution excess kurtosis.\n*\n* @name kurtosis\n* @memberof InvGamma.prototype\n* @type {number}\n* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}\n*\n* @example\n* var invgamma = new InvGamma( 6.0, 12.0 );\n*\n* var v = invgamma.kurtosis;\n* // returns 19.0\n*/\nsetReadOnlyAccessor( InvGamma.prototype, 'kurtosis', function get() {\n\treturn kurtosis( this.alpha, this.beta );\n});\n\n/**\n* Inverse gamma distribution expected value.\n*\n* @name mean\n* @memberof InvGamma.prototype\n* @type {number}\n* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}\n*\n* @example\n* var invgamma = new InvGamma( 4.0, 12.0 );\n*\n* var v = invgamma.mean;\n* // returns 4.0\n*/\nsetReadOnlyAccessor( InvGamma.prototype, 'mean', function get() {\n\treturn mean( this.alpha, this.beta );\n});\n\n/**\n* Inverse gamma distribution mode.\n*\n* @name mode\n* @memberof InvGamma.prototype\n* @type {number}\n* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}\n*\n* @example\n* var invgamma = new InvGamma( 4.0, 12.0 );\n*\n* var v = invgamma.mode;\n* // returns 2.4\n*/\nsetReadOnlyAccessor( InvGamma.prototype, 'mode', function get() {\n\treturn mode( this.alpha, this.beta );\n});\n\n/**\n* Inverse gamma distribution skewness.\n*\n* @name skewness\n* @memberof InvGamma.prototype\n* @type {number}\n* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}\n*\n* @example\n* var invgamma = new InvGamma( 4.0, 12.0 );\n*\n* var v = invgamma.skewness;\n* // returns ~5.657\n*/\nsetReadOnlyAccessor( InvGamma.prototype, 'skewness', function get() {\n\treturn skewness( this.alpha, this.beta );\n});\n\n/**\n* Inverse gamma distribution standard deviation.\n*\n* @name stdev\n* @memberof InvGamma.prototype\n* @type {PositiveNumber}\n* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}\n*\n* @example\n* var invgamma = new InvGamma( 4.0, 12.0 );\n*\n* var v = invgamma.stdev;\n* // returns ~2.828\n*/\nsetReadOnlyAccessor( InvGamma.prototype, 'stdev', function get() {\n\treturn stdev( this.alpha, this.beta );\n});\n\n/**\n* Inverse gamma distribution variance.\n*\n* @name variance\n* @memberof InvGamma.prototype\n* @type {PositiveNumber}\n* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}\n*\n* @example\n* var invgamma = new InvGamma( 4.0, 12.0 );\n*\n* var v = invgamma.variance;\n* // returns 8.0\n*/\nsetReadOnlyAccessor( InvGamma.prototype, 'variance', function get() {\n\treturn variance( this.alpha, this.beta );\n});\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @name cdf\n* @memberof InvGamma.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var invgamma = new InvGamma( 2.0, 4.0 );\n*\n* var v = invgamma.cdf( 0.5 );\n* // returns ~0.003\n*/\nsetReadOnly( InvGamma.prototype, 'cdf', invgammaCDF );\n\n/**\n* Evaluates the natural logarithm of the probability density function (PDF).\n*\n* @name logpdf\n* @memberof InvGamma.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var invgamma = new InvGamma( 2.0, 4.0 );\n*\n* var v = invgamma.logpdf( 0.8 );\n* // returns ~-1.558\n*/\nsetReadOnly( InvGamma.prototype, 'logpdf', invgammaLogPDF );\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @name pdf\n* @memberof InvGamma.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var invgamma = new InvGamma( 2.0, 4.0 );\n*\n* var v = invgamma.pdf( 0.8 );\n* // returns ~0.211\n*/\nsetReadOnly( InvGamma.prototype, 'pdf', invgammaPDF );\n\n/**\n* Evaluates the quantile function.\n*\n* @name quantile\n* @memberof InvGamma.prototype\n* @type {Function}\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}\n*\n* @example\n* var invgamma = new InvGamma( 2.0, 4.0 );\n*\n* var v = invgamma.quantile( 0.5 );\n* // returns ~2.383\n*/\nsetReadOnly( InvGamma.prototype, 'quantile', invgammaQuantile );\n\n\n// EXPORTS //\n\nexport default InvGamma;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Inverse gamma distribution cumulative distribution function (CDF).\n*\n* @module @stdlib/stats-base-dists-invgamma-cdf\n*\n* @example\n* import cdf from '@stdlib/stats-base-dists-invgamma-cdf';\n*\n* var y = cdf( 1.0, 8.0, 3.0 );\n* // returns ~0.988\n*\n* y = cdf( 0.0, 1.0, 1.0 );\n* // returns 0.0\n*\n* var mycdf = cdf.factory( 2.0, 0.5 );\n* y = mycdf( 0.5 );\n* // returns ~0.736\n*\n* y = mycdf( 2.0 );\n* // returns ~0.973\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport cdf from './cdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( cdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport gammainc from '@stdlib/math-base-special-gammainc';\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the cumulative distribution function (CDF) for an inverse gamma distribution with shape parameter `alpha` and scale parameter `beta`.\n*\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} beta - scale parameter\n* @returns {Function} CDF\n*\n* @example\n* var cdf = factory( 3.0, 1.5 );\n*\n* var y = cdf( 1.0 );\n* // returns ~0.809\n*\n* y = cdf( 2.0 );\n* // returns ~0.96\n*/\nfunction factory( alpha, beta ) {\n\tif (\n\t\tisnan( alpha ) ||\n\t\tisnan( beta ) ||\n\t\talpha <= 0.0 ||\n\t\tbeta <= 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn cdf;\n\n\t/**\n\t* Evaluates the cumulative distribution function (CDF) for an inverse gamma distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated CDF\n\t*\n\t* @example\n\t* var y = cdf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction cdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x <= 0 ) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn gammainc( beta / x, alpha, true, true );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Inverse gamma distribution quantile function.\n*\n* @module @stdlib/stats-base-dists-invgamma-quantile\n*\n* @example\n* import quantile from '@stdlib/stats-base-dists-invgamma-quantile';\n*\n* var y = quantile( 0.8, 1.0, 1.0 );\n* // returns ~4.481\n*\n* var myquantile = quantile.factory( 2.0, 2.0 );\n* y = myquantile( 0.8 );\n* // returns ~2.426\n*\n* y = myquantile( 0.4 );\n* // returns ~0.989\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport quantile from './quantile.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( quantile, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default quantile;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport gammaincinv from '@stdlib/math-base-special-gammaincinv';\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the quantile function for an inverse gamma distribution with shape parameter `alpha` and scale parameter `beta`.\n*\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} beta - scale parameter\n* @returns {Function} quantile function\n*\n* @example\n* var quantile = factory( 2.5, 0.5 );\n* var y = quantile( 0.5 );\n* // returns ~0.2298\n*\n* y = quantile( 0.8 );\n* // returns ~0.427\n*/\nfunction factory( alpha, beta ) {\n\tif (\n\t\tisnan( alpha ) ||\n\t\tisnan( beta ) ||\n\t\talpha <= 0.0 ||\n\t\tbeta <= 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn quantile;\n\n\t/**\n\t* Evaluates the quantile function for an inverse gamma distribution.\n\t*\n\t* @private\n\t* @param {Probability} p - input value\n\t* @returns {number} evaluated quantile function\n\t*\n\t* @example\n\t* var y = quantile( 0.3 );\n\t* // returns <number>\n\t*/\n\tfunction quantile( p ) {\n\t\tif ( isnan( p ) || p < 0.0 || p > 1.0 ) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn beta / gammaincinv( p, alpha, true );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Natural logarithm of the probability density function (PDF) for an inverse gamma distribution.\n*\n* @module @stdlib/stats-base-dists-invgamma-logpdf\n*\n* @example\n* import logpdf from '@stdlib/stats-base-dists-invgamma-logpdf';\n*\n* var y = logpdf( 2.0, 0.5, 1.0 );\n* // returns ~-2.112\n*\n* var mylogPDF = logpdf.factory( 6.0, 7.0 );\n* y = mylogPDF( 2.0 );\n* // returns ~-1.464\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport logpdf from './logpdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( logpdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default logpdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport gammaln from '@stdlib/math-base-special-gammaln';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport ln from '@stdlib/math-base-special-ln';\nimport NINF from '@stdlib/constants-float64-ninf';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the natural logarithm of the probability density function (PDF) for an inverse gamma distribution with shape parameter `alpha` and scale parameter `beta`.\n*\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} beta - scale parameter\n* @returns {Function} logPDF\n*\n* @example\n* var logpdf = factory( 3.0, 1.5 );\n*\n* var y = logpdf( 1.0 );\n* // returns ~-0.977\n*\n* y = logpdf( 2.0 );\n* // returns ~-3.0\n*/\nfunction factory( alpha, beta ) {\n\tvar firstTerm;\n\tif (\n\t\tisnan( alpha ) ||\n\t\tisnan( beta ) ||\n\t\talpha <= 0.0 ||\n\t\tbeta <= 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\tfirstTerm = ( alpha * ln( beta ) ) - gammaln( alpha );\n\treturn logpdf;\n\n\t/**\n\t* Evaluates the natural logarithm of the probability density function (PDF) for an inverse gamma distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {number} evaluated logPDF\n\t*\n\t* @example\n\t* var y = logpdf( -1.2 );\n\t* // returns <number>\n\t*/\n\tfunction logpdf( x ) {\n\t\tvar out;\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x <= 0.0 ) {\n\t\t\treturn NINF;\n\t\t}\n\t\tout = firstTerm - ( ( alpha + 1.0 ) * ln( x ) ) - ( beta / x );\n\t\treturn out;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Inverse gamma distribution probability density function (PDF).\n*\n* @module @stdlib/stats-base-dists-invgamma-pdf\n*\n* @example\n* import pdf from '@stdlib/stats-base-dists-invgamma-pdf';\n*\n* var y = pdf( 2.0, 0.5, 1.0 );\n* // returns ~0.121\n*\n* var myPDF = pdf.factory( 6.0, 7.0 );\n* y = myPDF( 2.0 );\n* // returns ~0.231\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport pdf from './pdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( pdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default pdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport gammaln from '@stdlib/math-base-special-gammaln';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport exp from '@stdlib/math-base-special-exp';\nimport ln from '@stdlib/math-base-special-ln';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the probability density function (PDF) for an inverse gamma distribution with shape parameter `alpha` and scale parameter `beta`.\n*\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} beta - scale parameter\n* @returns {Function} PDF\n*\n* @example\n* var pdf = factory( 3.0, 1.5 );\n*\n* var y = pdf( 1.0 );\n* // returns ~0.377\n*\n* y = pdf( 2.0 );\n* // returns ~0.05\n*/\nfunction factory( alpha, beta ) {\n\tvar firstTerm;\n\tif (\n\t\tisnan( alpha ) ||\n\t\tisnan( beta ) ||\n\t\talpha <= 0.0 ||\n\t\tbeta <= 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\tfirstTerm = ( alpha * ln( beta ) ) - gammaln( alpha );\n\treturn pdf;\n\n\t/**\n\t* Evaluates the probability density function (PDF) for an inverse gamma distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {number} evaluated PDF\n\t*\n\t* @example\n\t* var y = pdf( -1.2 );\n\t* // returns <number>\n\t*/\n\tfunction pdf( x ) {\n\t\tvar lnl;\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x <= 0.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\tlnl = firstTerm - (( alpha + 1.0 ) * ln( x )) - (beta / x);\n\t\treturn exp( lnl );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace invgamma\n*/\nvar invgamma = {};\n\n/**\n* @name cdf\n* @memberof invgamma\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/invgamma/cdf}\n*/\nimport cdf from '@stdlib/stats-base-dists-invgamma-cdf';\nsetReadOnly( invgamma, 'cdf', cdf );\n\n/**\n* @name InvGamma\n* @memberof invgamma\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/invgamma/ctor}\n*/\nimport InvGamma from '@stdlib/stats-base-dists-invgamma-ctor';\nsetReadOnly( invgamma, 'InvGamma', InvGamma );\n\n/**\n* @name entropy\n* @memberof invgamma\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/invgamma/entropy}\n*/\nimport entropy from '@stdlib/stats-base-dists-invgamma-entropy';\nsetReadOnly( invgamma, 'entropy', entropy );\n\n/**\n* @name kurtosis\n* @memberof invgamma\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/invgamma/kurtosis}\n*/\nimport kurtosis from '@stdlib/stats-base-dists-invgamma-kurtosis';\nsetReadOnly( invgamma, 'kurtosis', kurtosis );\n\n/**\n* @name logpdf\n* @memberof invgamma\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/invgamma/logpdf}\n*/\nimport logpdf from '@stdlib/stats-base-dists-invgamma-logpdf';\nsetReadOnly( invgamma, 'logpdf', logpdf );\n\n/**\n* @name mean\n* @memberof invgamma\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/invgamma/mean}\n*/\nimport mean from '@stdlib/stats-base-dists-invgamma-mean';\nsetReadOnly( invgamma, 'mean', mean );\n\n/**\n* @name mode\n* @memberof invgamma\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/invgamma/mode}\n*/\nimport mode from '@stdlib/stats-base-dists-invgamma-mode';\nsetReadOnly( invgamma, 'mode', mode );\n\n/**\n* @name pdf\n* @memberof invgamma\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/invgamma/pdf}\n*/\nimport pdf from '@stdlib/stats-base-dists-invgamma-pdf';\nsetReadOnly( invgamma, 'pdf', pdf );\n\n/**\n* @name quantile\n* @memberof invgamma\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/invgamma/quantile}\n*/\nimport quantile from '@stdlib/stats-base-dists-invgamma-quantile';\nsetReadOnly( invgamma, 'quantile', quantile );\n\n/**\n* @name skewness\n* @memberof invgamma\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/invgamma/skewness}\n*/\nimport skewness from '@stdlib/stats-base-dists-invgamma-skewness';\nsetReadOnly( invgamma, 'skewness', skewness );\n\n/**\n* @name stdev\n* @memberof invgamma\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/invgamma/stdev}\n*/\nimport stdev from '@stdlib/stats-base-dists-invgamma-stdev';\nsetReadOnly( invgamma, 'stdev', stdev );\n\n/**\n* @name variance\n* @memberof invgamma\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/invgamma/variance}\n*/\nimport variance from '@stdlib/stats-base-dists-invgamma-variance';\nsetReadOnly( invgamma, 'variance', variance );\n\n\n// EXPORTS //\n\nexport default invgamma;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport pow from '@stdlib/math-base-special-pow';\n\n\n// MAIN //\n\n/**\n* Evaluates the cumulative distribution function (CDF) for a Kumaraswamy's double bounded distribution with first shape parameter `a` and second shape parameter `b` at a value `x`.\n*\n* @param {number} x - input value\n* @param {PositiveNumber} a - first shape parameter\n* @param {PositiveNumber} b - second shape parameter\n* @returns {Probability} evaluated CDF\n*\n* @example\n* var y = cdf( 0.5, 1.0, 1.0 );\n* // returns ~0.5\n*\n* @example\n* var y = cdf( 0.5, 2.0, 4.0 );\n* // returns ~0.684\n*\n* @example\n* var y = cdf( 0.2, 2.0, 2.0 );\n* // returns ~0.078\n*\n* @example\n* var y = cdf( 0.8, 4.0, 4.0 );\n* // returns ~0.878\n*\n* @example\n* var y = cdf( -0.5, 4.0, 2.0 );\n* // returns 0.0\n*\n* @example\n* var y = cdf( 1.5, 4.0, 2.0 );\n* // returns 1.0\n*\n* @example\n* var y = cdf( 2.0, -1.0, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2.0, 0.5, -1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( NaN, 1.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, 1.0, NaN );\n* // returns NaN\n*/\nfunction cdf( x, a, b ) {\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\ta <= 0.0 ||\n\t\tb <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x <= 0.0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( x >= 1.0 ) {\n\t\treturn 1.0;\n\t}\n\treturn 1.0 - pow( 1.0 - pow( x, a ), b );\n}\n\n\n// EXPORTS //\n\nexport default cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport beta from '@stdlib/math-base-special-beta';\n\n\n// MAIN //\n\n/**\n* Returns the excess kurtosis of a Kumaraswamy's double bounded distribution.\n*\n* @param {PositiveNumber} a - first shape parameter\n* @param {PositiveNumber} b - second shape parameter\n* @returns {number} excess kurtosis\n*\n* @example\n* var v = kurtosis( 0.5, 1.0 );\n* // returns ~2.143\n*\n* @example\n* var v = kurtosis( 4.0, 12.0 );\n* // returns ~2.704\n*\n* @example\n* var v = kurtosis( 12.0, 2.0 );\n* // returns ~4.817\n*\n* @example\n* var v = kurtosis( 1.0, -0.1 );\n* // returns NaN\n*\n* @example\n* var v = kurtosis( -0.1, 1.0 );\n* // returns NaN\n*\n* @example\n* var v = kurtosis( 2.0, NaN );\n* // returns NaN\n*\n* @example\n* var v = kurtosis( NaN, 2.0 );\n* // returns NaN\n*/\nfunction kurtosis( a, b ) {\n\tvar sigma2;\n\tvar out;\n\tvar mu2;\n\tvar m1;\n\tvar m2;\n\tvar m3;\n\tvar m4;\n\tif (\n\t\tisnan( a ) ||\n\t\ta <= 0.0 ||\n\t\tisnan( b ) ||\n\t\tb <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tm1 = b * beta( 1.0 + ( 1.0/a ), b );\n\tm2 = b * beta( 1.0 + ( 2.0/a ), b );\n\tm3 = b * beta( 1.0 + ( 3.0/a ), b );\n\tm4 = b * beta( 1.0 + ( 4.0/a ), b );\n\tsigma2 = m2 - ( m1*m1 );\n\tmu2 = m1 * m1;\n\tout = ( m4 - ( 4.0*m3*m1 ) + ( 6.0*m2*mu2 ) - ( 3.0*mu2*mu2 ) );\n\tout /= sigma2*sigma2;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default kurtosis;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport beta from '@stdlib/math-base-special-beta';\n\n\n// MAIN //\n\n/**\n* Returns the expected value of a Kumaraswamy's double bounded distribution.\n*\n* @param {PositiveNumber} a - first shape parameter\n* @param {PositiveNumber} b - second shape parameter\n* @returns {PositiveNumber} expected value\n*\n* @example\n* var v = mean( 1.5, 1.5 );\n* // returns ~0.512\n*\n* @example\n* var v = mean( 4.0, 12.0 );\n* // returns ~0.481\n*\n* @example\n* var v = mean( 12.0, 2.0 );\n* // returns ~0.886\n*\n* @example\n* var v = mean( 1.5, -0.1 );\n* // returns NaN\n*\n* @example\n* var v = mean( -0.1, 1.5 );\n* // returns NaN\n*\n* @example\n* var v = mean( 2.0, NaN );\n* // returns NaN\n*\n* @example\n* var v = mean( NaN, 2.0 );\n* // returns NaN\n*/\nfunction mean( a, b ) {\n\tif (\n\t\tisnan( a ) ||\n\t\ta <= 0.0 ||\n\t\tisnan( b ) ||\n\t\tb <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn b * beta( 1.0 + ( 1.0/a ), b );\n}\n\n\n// EXPORTS //\n\nexport default mean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport pow from '@stdlib/math-base-special-pow';\n\n\n// MAIN //\n\n/**\n* Returns the mode of a Kumaraswamy's double bounded distribution.\n*\n* @param {PositiveNumber} a - first shape parameter\n* @param {PositiveNumber} b - second shape parameter\n* @returns {PositiveNumber} mode\n*\n* @example\n* var v = mode( 1.5, 1.5 );\n* // returns ~0.543\n*\n* @example\n* var v = mode( 4.0, 12.0 );\n* // returns ~0.503\n*\n* @example\n* var v = mode( 12.0, 2.0 );\n* // returns ~0.94\n*\n* @example\n* var v = mode( 1.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var v = mode( 1.5, -0.1 );\n* // returns NaN\n*\n* @example\n* var v = mode( -0.1, 1.5 );\n* // returns NaN\n*\n* @example\n* var v = mode( 2.0, NaN );\n* // returns NaN\n*\n* @example\n* var v = mode( NaN, 2.0 );\n* // returns NaN\n*/\nfunction mode( a, b ) {\n\tif (\n\t\tisnan( a ) ||\n\t\ta < 1.0 ||\n\t\tisnan( b ) ||\n\t\tb < 1.0 ||\n\t\t( a === 1.0 && b === 1.0 )\n\t) {\n\t\treturn NaN;\n\t}\n\treturn pow( ( a-1.0 ) / ( (a*b) - 1.0 ), 1.0/a );\n}\n\n\n// EXPORTS //\n\nexport default mode;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport beta from '@stdlib/math-base-special-beta';\nimport pow from '@stdlib/math-base-special-pow';\n\n\n// MAIN //\n\n/**\n* Returns the skewness of a Kumaraswamy's double bounded distribution.\n*\n* @param {PositiveNumber} a - first shape parameter\n* @param {PositiveNumber} b - second shape parameter\n* @returns {number} skewness\n*\n* @example\n* var v = skewness( 0.5, 1.0 );\n* // returns ~0.639\n*\n* @example\n* var v = skewness( 4.0, 12.0 );\n* // returns ~-0.201\n*\n* @example\n* var v = skewness( 12.0, 2.0 );\n* // returns ~-1.2\n*\n* @example\n* var v = skewness( 1.0, -0.1 );\n* // returns NaN\n*\n* @example\n* var v = skewness( -0.1, 1.0 );\n* // returns NaN\n*\n* @example\n* var v = skewness( 2.0, NaN );\n* // returns NaN\n*\n* @example\n* var v = skewness( NaN, 2.0 );\n* // returns NaN\n*/\nfunction skewness( a, b ) {\n\tvar sigma2;\n\tvar m1;\n\tvar m2;\n\tvar m3;\n\tif (\n\t\tisnan( a ) ||\n\t\ta <= 0.0 ||\n\t\tisnan( b ) ||\n\t\tb <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tm1 = b * beta( 1.0 + ( 1.0/a ), b );\n\tm2 = b * beta( 1.0 + ( 2.0/a ), b );\n\tm3 = b * beta( 1.0 + ( 3.0/a ), b );\n\tsigma2 = m2 - ( m1*m1 );\n\treturn ( m3 - ( 3.0*m1*sigma2 ) - ( m1*m1*m1 ) ) / pow( sigma2, 1.5 );\n}\n\n\n// EXPORTS //\n\nexport default skewness;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport beta from '@stdlib/math-base-special-beta';\nimport sqrt from '@stdlib/math-base-special-sqrt';\n\n\n// MAIN //\n\n/**\n* Returns the standard deviation of a Kumaraswamy's double bounded distribution.\n*\n* @param {PositiveNumber} a - first shape parameter\n* @param {PositiveNumber} b - second shape parameter\n* @returns {PositiveNumber} standard deviation\n*\n* @example\n* var v = stdev( 0.5, 1.0 );\n* // returns ~0.298\n*\n* @example\n* var v = stdev( 4.0, 12.0 );\n* // returns ~0.13\n*\n* @example\n* var v = stdev( 12.0, 2.0 );\n* // returns ~0.077\n*\n* @example\n* var v = stdev( 1.0, -0.1 );\n* // returns NaN\n*\n* @example\n* var v = stdev( -0.1, 1.0 );\n* // returns NaN\n*\n* @example\n* var v = stdev( 2.0, NaN );\n* // returns NaN\n*\n* @example\n* var v = stdev( NaN, 2.0 );\n* // returns NaN\n*/\nfunction stdev( a, b ) {\n\tvar m1;\n\tvar m2;\n\tif (\n\t\tisnan( a ) ||\n\t\ta <= 0.0 ||\n\t\tisnan( b ) ||\n\t\tb <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tm1 = b * beta( 1.0 + ( 1.0/a ), b );\n\tm2 = b * beta( 1.0 + ( 2.0/a ), b );\n\treturn sqrt( m2 - ( m1*m1 ) );\n}\n\n\n// EXPORTS //\n\nexport default stdev;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport beta from '@stdlib/math-base-special-beta';\n\n\n// MAIN //\n\n/**\n* Returns the variance of a Kumaraswamy's double bounded distribution.\n*\n* @param {PositiveNumber} a - first shape parameter\n* @param {PositiveNumber} b - second shape parameter\n* @returns {PositiveNumber} variance\n*\n* @example\n* var v = variance( 0.5, 1.0 );\n* // returns ~0.089\n*\n* @example\n* var v = variance( 4.0, 12.0 );\n* // returns ~0.017\n*\n* @example\n* var v = variance( 12.0, 2.0 );\n* // returns ~0.006\n*\n* @example\n* var v = variance( 1.0, -0.1 );\n* // returns NaN\n*\n* @example\n* var v = variance( -0.1, 1.0 );\n* // returns NaN\n*\n* @example\n* var v = variance( 2.0, NaN );\n* // returns NaN\n*\n* @example\n* var v = variance( NaN, 2.0 );\n* // returns NaN\n*/\nfunction variance( a, b ) {\n\tvar m1;\n\tvar m2;\n\tif (\n\t\tisnan( a ) ||\n\t\ta <= 0.0 ||\n\t\tisnan( b ) ||\n\t\tb <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tm1 = b * beta( 1.0 + ( 1.0/a ), b );\n\tm2 = b * beta( 1.0 + ( 2.0/a ), b );\n\treturn m2 - ( m1*m1 );\n}\n\n\n// EXPORTS //\n\nexport default variance;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport pow from '@stdlib/math-base-special-pow';\nimport ln from '@stdlib/math-base-special-ln';\nimport NINF from '@stdlib/constants-float64-ninf';\n\n\n// MAIN //\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (CDF) for a Kumaraswamy's double bounded distribution with first shape parameter `a` and second shape parameter `b` at a value `x`.\n*\n* @param {number} x - input value\n* @param {PositiveNumber} a - first shape parameter\n* @param {PositiveNumber} b - second shape parameter\n* @returns {number} evaluated logCDF\n*\n* @example\n* var y = logcdf( 0.5, 1.0, 1.0 );\n* // returns ~-0.693\n*\n* @example\n* var y = logcdf( 0.5, 2.0, 4.0 );\n* // returns ~-0.38\n*\n* @example\n* var y = logcdf( 0.2, 2.0, 2.0 );\n* // returns ~-2.546\n*\n* @example\n* var y = logcdf( 0.8, 4.0, 4.0 );\n* // returns ~-0.13\n*\n* @example\n* var y = logcdf( -0.5, 4.0, 2.0 );\n* // returns -Infinity\n*\n* @example\n* var y = logcdf( 1.5, 4.0, 2.0 );\n* // returns 0.0\n*\n* @example\n* var y = logcdf( 2.0, -1.0, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = logcdf( 2.0, 0.5, -1.0 );\n* // returns NaN\n*\n* @example\n* var y = logcdf( NaN, 1.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = logcdf( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = logcdf( 0.0, 1.0, NaN );\n* // returns NaN\n*/\nfunction logcdf( x, a, b ) {\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\ta <= 0.0 ||\n\t\tb <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x <= 0.0 ) {\n\t\treturn NINF;\n\t}\n\tif ( x >= 1.0 ) {\n\t\treturn 0.0;\n\t}\n\treturn ln( 1.0 - pow( 1.0 - pow( x, a ), b ) );\n}\n\n\n// EXPORTS //\n\nexport default logcdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport pow from '@stdlib/math-base-special-pow';\nimport ln from '@stdlib/math-base-special-ln';\nimport NINF from '@stdlib/constants-float64-ninf';\n\n\n// MAIN //\n\n/**\n* Evaluates the natural logarithm of the probability density function (PDF) for a Kumaraswamy's double bounded distribution with first shape parameter `a` and second shape parameter `b` at a value `x`.\n*\n* @param {number} x - input value\n* @param {PositiveNumber} a - first shape parameter\n* @param {PositiveNumber} b - second shape parameter\n* @returns {number} evaluated logPDF\n*\n* @example\n* var y = logpdf( 0.5, 1.0, 1.0 );\n* // returns 0.0\n*\n* @example\n* var y = logpdf( 0.5, 2.0, 4.0 );\n* // returns ~0.523\n*\n* @example\n* var y = logpdf( 0.2, 2.0, 2.0 );\n* // returns ~-0.264\n*\n* @example\n* var y = logpdf( 0.8, 4.0, 4.0 );\n* // returns ~0.522\n*\n* @example\n* var y = logpdf( -0.5, 4.0, 2.0 );\n* // returns -Infinity\n*\n* @example\n* var y = logpdf( 1.5, 4.0, 2.0 );\n* // returns -Infinity\n*\n* @example\n* var y = logpdf( 2.0, -1.0, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = logpdf( 2.0, 0.5, -1.0 );\n* // returns NaN\n*\n* @example\n* var y = logpdf( NaN, 1.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = logpdf( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = logpdf( 0.0, 1.0, NaN );\n* // returns NaN\n*/\nfunction logpdf( x, a, b ) {\n\tvar out;\n\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\ta <= 0.0 ||\n\t\tb <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x <= 0.0 || x >= 1.0 ) {\n\t\treturn NINF;\n\t}\n\tout = ln( a*b );\n\tout += ( a - 1.0 ) * ln( x );\n\tout += ( b - 1.0 ) * ln( 1.0 - pow( x, a ) );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default logpdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport pow from '@stdlib/math-base-special-pow';\n\n\n// MAIN //\n\n/**\n* Evaluates the probability density function (PDF) for a Kumaraswamy's double bounded distribution with first shape parameter `a` and second shape parameter `b` at a value `x`.\n*\n* @param {number} x - input value\n* @param {PositiveNumber} a - first shape parameter\n* @param {PositiveNumber} b - second shape parameter\n* @returns {number} evaluated PDF\n*\n* @example\n* var y = pdf( 0.5, 1.0, 1.0 );\n* // returns 1.0\n*\n* @example\n* var y = pdf( 0.5, 2.0, 4.0 );\n* // returns ~1.688\n*\n* @example\n* var y = pdf( 0.2, 2.0, 2.0 );\n* // returns ~0.768\n*\n* @example\n* var y = pdf( 0.8, 4.0, 4.0 );\n* // returns ~1.686\n*\n* @example\n* var y = pdf( -0.5, 4.0, 2.0 );\n* // returns 0.0\n*\n* @example\n* var y = pdf( 1.5, 4.0, 2.0 );\n* // returns 0.0\n*\n* @example\n* var y = pdf( 2.0, -1.0, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = pdf( 2.0, 0.5, -1.0 );\n* // returns NaN\n*\n* @example\n* var y = pdf( NaN, 1.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = pdf( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = pdf( 0.0, 1.0, NaN );\n* // returns NaN\n*/\nfunction pdf( x, a, b ) {\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\ta <= 0.0 ||\n\t\tb <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x <= 0.0 || x >= 1.0 ) {\n\t\treturn 0.0;\n\t}\n\treturn ( a*b ) * pow( x, a - 1.0 ) * pow( 1.0 - pow( x, a ), b - 1.0 );\n}\n\n\n// EXPORTS //\n\nexport default pdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport pow from '@stdlib/math-base-special-pow';\n\n\n// MAIN //\n\n/**\n* Evaluates the quantile function for a Kumaraswamy's double bounded distribution with first shape parameter `a` and second shape parameter `b` at a probability `p`.\n*\n* @param {Probability} p - input probability\n* @param {PositiveNumber} a - first shape parameter\n* @param {PositiveNumber} b - second shape parameter\n* @returns {number} evaluated quantile function\n*\n* @example\n* var y = quantile( 0.5, 1.0, 1.0 );\n* // returns 0.5\n*\n* @example\n* var y = quantile( 0.5, 2.0, 4.0 );\n* // returns ~0.399\n*\n* @example\n* var y = quantile( 0.2, 2.0, 2.0 );\n* // returns ~0.325\n*\n* @example\n* var y = quantile( 0.8, 4.0, 4.0 );\n* // returns ~0.759\n*\n* @example\n* var y = quantile( -0.5, 4.0, 2.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.8, -1.0, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.8, 0.5, -1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( NaN, 1.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.1, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.1, 1.0, NaN );\n* // returns NaN\n*/\nfunction quantile( p, a, b ) {\n\tif (\n\t\tisnan( p ) ||\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\ta <= 0.0 ||\n\t\tb <= 0.0 ||\n\t\tp < 0.0 ||\n\t\tp > 1.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn pow( 1.0 - pow( 1.0-p, 1.0/b ), 1.0/a );\n}\n\n\n// EXPORTS //\n\nexport default quantile;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nimport defineProperty from '@stdlib/utils-define-property';\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport setReadOnlyAccessor from '@stdlib/utils-define-nonenumerable-read-only-accessor';\nimport { isPrimitive as isPositive } from '@stdlib/assert-is-positive-number';\nimport kurtosis from '@stdlib/stats-base-dists-kumaraswamy-kurtosis';\nimport mean from '@stdlib/stats-base-dists-kumaraswamy-mean';\nimport mode from '@stdlib/stats-base-dists-kumaraswamy-mode';\nimport skewness from '@stdlib/stats-base-dists-kumaraswamy-skewness';\nimport stdev from '@stdlib/stats-base-dists-kumaraswamy-stdev';\nimport variance from '@stdlib/stats-base-dists-kumaraswamy-variance';\nimport cdf from '@stdlib/stats-base-dists-kumaraswamy-cdf';\nimport logcdf from '@stdlib/stats-base-dists-kumaraswamy-logcdf';\nimport logpdf from '@stdlib/stats-base-dists-kumaraswamy-logpdf';\nimport pdf from '@stdlib/stats-base-dists-kumaraswamy-pdf';\nimport quantile from '@stdlib/stats-base-dists-kumaraswamy-quantile';\nimport format from '@stdlib/string-format';\n\n\n// FUNCTIONS //\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n*/\nfunction kumaraswamyCDF( x ) {\n\treturn cdf( x, this.a, this.b );\n}\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logCDF\n*/\nfunction kumaraswamyLogCDF( x ) {\n\treturn logcdf( x, this.a, this.b );\n}\n\n/**\n* Evaluates the natural logarithm of the probability density function (PDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n*/\nfunction kumaraswamyLogPDF( x ) {\n\treturn logpdf( x, this.a, this.b );\n}\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n*/\nfunction kumaraswamyPDF( x ) {\n\treturn pdf( x, this.a, this.b );\n}\n\n/**\n* Evaluates the quantile function.\n*\n* @private\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n*/\nfunction kumaraswamyQuantile( p ) {\n\treturn quantile( p, this.a, this.b );\n}\n\n\n// MAIN //\n\n/**\n* Kumaraswamy's double bounded distribution constructor.\n*\n* @constructor\n* @param {PositiveNumber} [a=1.0] - first shape parameter\n* @param {PositiveNumber} [b=1.0] - second shape parameter\n* @throws {TypeError} `a` must be a positive number\n* @throws {TypeError} `b` must be a positive number\n* @returns {Kumaraswamy} distribution instance\n*\n* @example\n* var kumaraswamy = new Kumaraswamy( 1.0, 1.0 );\n*\n* var y = kumaraswamy.cdf( 0.8 );\n* // returns 0.8\n*\n* var v = kumaraswamy.mode;\n* // returns NaN\n*/\nfunction Kumaraswamy() {\n\tvar a;\n\tvar b;\n\tif ( !(this instanceof Kumaraswamy) ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn new Kumaraswamy();\n\t\t}\n\t\treturn new Kumaraswamy( arguments[ 0 ], arguments[ 1 ] );\n\t}\n\tif ( arguments.length ) {\n\t\ta = arguments[ 0 ];\n\t\tb = arguments[ 1 ];\n\t\tif ( !isPositive( a ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First shape parameter must be a positive number. Value: `%s`.', a ) );\n\t\t}\n\t\tif ( !isPositive( b ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second shape parameter must be a positive number. Value: `%s`.', b ) );\n\t\t}\n\t} else {\n\t\ta = 1.0;\n\t\tb = 1.0;\n\t}\n\tdefineProperty( this, 'a', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn a;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isPositive( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid assignment. Must be a positive number. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\ta = value;\n\t\t}\n\t});\n\tdefineProperty( this, 'b', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn b;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isPositive( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid assignment. Must be a positive number. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\tb = value;\n\t\t}\n\t});\n\treturn this;\n}\n\n/**\n* Kumaraswamy's double bounded distribution excess kurtosis.\n*\n* @name kurtosis\n* @memberof Kumaraswamy.prototype\n* @type {number}\n* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}\n*\n* @example\n* var kumaraswamy = new Kumaraswamy( 4.0, 12.0 );\n*\n* var v = kumaraswamy.kurtosis;\n* // returns ~2.704\n*/\nsetReadOnlyAccessor( Kumaraswamy.prototype, 'kurtosis', function get() {\n\treturn kurtosis( this.a, this.b );\n});\n\n/**\n* Kumaraswamy's double bounded distribution expected value.\n*\n* @name mean\n* @memberof Kumaraswamy.prototype\n* @type {number}\n* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}\n*\n* @example\n* var kumaraswamy = new Kumaraswamy( 4.0, 12.0 );\n*\n* var v = kumaraswamy.mean;\n* // returns ~0.481\n*/\nsetReadOnlyAccessor( Kumaraswamy.prototype, 'mean', function get() {\n\treturn mean( this.a, this.b );\n});\n\n/**\n* Kumaraswamy's double bounded distribution mode.\n*\n* @name mode\n* @memberof Kumaraswamy.prototype\n* @type {number}\n* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}\n*\n* @example\n* var kumaraswamy = new Kumaraswamy( 4.0, 12.0 );\n*\n* var v = kumaraswamy.mode;\n* // returns ~0.503\n*/\nsetReadOnlyAccessor( Kumaraswamy.prototype, 'mode', function get() {\n\treturn mode( this.a, this.b );\n});\n\n/**\n* Kumaraswamy's double bounded distribution skewness.\n*\n* @name skewness\n* @memberof Kumaraswamy.prototype\n* @type {number}\n* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}\n*\n* @example\n* var kumaraswamy = new Kumaraswamy( 4.0, 12.0 );\n*\n* var v = kumaraswamy.skewness;\n* // returns ~-0.201\n*/\nsetReadOnlyAccessor( Kumaraswamy.prototype, 'skewness', function get() {\n\treturn skewness( this.a, this.b );\n});\n\n/**\n* Kumaraswamy's double bounded distribution standard deviation.\n*\n* @name stdev\n* @memberof Kumaraswamy.prototype\n* @type {PositiveNumber}\n* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}\n*\n* @example\n* var kumaraswamy = new Kumaraswamy( 4.0, 12.0 );\n*\n* var v = kumaraswamy.stdev;\n* // returns ~0.13\n*/\nsetReadOnlyAccessor( Kumaraswamy.prototype, 'stdev', function get() {\n\treturn stdev( this.a, this.b );\n});\n\n/**\n* Kumaraswamy's double bounded distribution variance.\n*\n* @name variance\n* @memberof Kumaraswamy.prototype\n* @type {PositiveNumber}\n* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}\n*\n* @example\n* var kumaraswamy = new Kumaraswamy( 4.0, 12.0 );\n*\n* var v = kumaraswamy.variance;\n* // returns ~0.017\n*/\nsetReadOnlyAccessor( Kumaraswamy.prototype, 'variance', function get() {\n\treturn variance( this.a, this.b );\n});\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @name cdf\n* @memberof Kumaraswamy.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var kumaraswamy = new Kumaraswamy( 2.0, 4.0 );\n*\n* var v = kumaraswamy.cdf( 0.5 );\n* // returns ~0.684\n*/\nsetReadOnly( Kumaraswamy.prototype, 'cdf', kumaraswamyCDF );\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (CDF).\n*\n* @name logcdf\n* @memberof Kumaraswamy.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logCDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var kumaraswamy = new Kumaraswamy( 2.0, 4.0 );\n*\n* var v = kumaraswamy.logcdf( 0.5 );\n* // returns ~-0.38\n*/\nsetReadOnly( Kumaraswamy.prototype, 'logcdf', kumaraswamyLogCDF );\n\n/**\n* Evaluates the natural logarithm of the probability density function (PDF).\n*\n* @name logpdf\n* @memberof Kumaraswamy.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var kumaraswamy = new Kumaraswamy( 2.0, 4.0 );\n*\n* var v = kumaraswamy.logpdf( 0.9 );\n* // returns ~-3.008\n*/\nsetReadOnly( Kumaraswamy.prototype, 'logpdf', kumaraswamyLogPDF );\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @name pdf\n* @memberof Kumaraswamy.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var kumaraswamy = new Kumaraswamy( 2.0, 4.0 );\n*\n* var v = kumaraswamy.pdf( 0.9 );\n* // returns ~0.049\n*/\nsetReadOnly( Kumaraswamy.prototype, 'pdf', kumaraswamyPDF );\n\n/**\n* Evaluates the quantile function.\n*\n* @name quantile\n* @memberof Kumaraswamy.prototype\n* @type {Function}\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}\n*\n* @example\n* var kumaraswamy = new Kumaraswamy( 2.0, 4.0 );\n*\n* var v = kumaraswamy.quantile( 0.5 );\n* // returns ~0.399\n*/\nsetReadOnly( Kumaraswamy.prototype, 'quantile', kumaraswamyQuantile );\n\n\n// EXPORTS //\n\nexport default Kumaraswamy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate the cumulative distribution function (CDF) for a Kumaraswamy's double bounded distribution.\n*\n* @module @stdlib/stats-base-dists-kumaraswamy-cdf\n*\n* @example\n* import cdf from '@stdlib/stats-base-dists-kumaraswamy-cdf';\n*\n* var y = cdf( 0.5, 1.0, 1.0 );\n* // returns 0.5\n*\n* y = cdf( 0.5, 2.0, 4.0 );\n* // returns ~0.684\n*\n* @example\n* import { factory as factory } from '@stdlib/stats-base-dists-kumaraswamy-cdf';\n*\n* var cdf = factory( 0.5, 0.5 );\n*\n* var y = cdf( 0.8 );\n* // returns ~0.675\n*\n* y = cdf( 0.3 );\n* // returns ~0.327\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport cdf from './cdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( cdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport pow from '@stdlib/math-base-special-pow';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the cumulative distribution function (CDF) for a Kumaraswamy's double bounded distribution with first shape parameter `a` and second shape parameter `b`.\n*\n* @param {PositiveNumber} a - first shape parameter\n* @param {PositiveNumber} b - second shape parameter\n* @returns {Function} CDF\n*\n* @example\n* var cdf = factory( 0.5, 0.5 );\n*\n* var y = cdf( 0.8 );\n* // returns ~0.675\n*\n* y = cdf( 0.3 );\n* // returns ~0.327\n*/\nfunction factory( a, b ) {\n\tif (\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\ta <= 0.0 ||\n\t\tb <= 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn cdf;\n\n\t/**\n\t* Evaluates the cumulative distribution function (CDF) for a Kumaraswamy's double bounded distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated CDF\n\t*\n\t* @example\n\t* var y = cdf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction cdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x <= 0.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\tif ( x >= 1.0 ) {\n\t\t\treturn 1.0;\n\t\t}\n\t\treturn 1.0 - pow( 1.0 - pow( x, a ), b );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate the natural logarithm of the cumulative distribution function (CDF) for a Kumaraswamy's double bounded distribution.\n*\n* @module @stdlib/stats-base-dists-kumaraswamy-logcdf\n*\n* @example\n* import logcdf from '@stdlib/stats-base-dists-kumaraswamy-logcdf';\n*\n* var y = logcdf( 0.5, 1.0, 1.0 );\n* // returns ~-0.693\n*\n* y = logcdf( 0.5, 2.0, 4.0 );\n* // returns ~-0.38\n*\n* @example\n* import { factory as factory } from '@stdlib/stats-base-dists-kumaraswamy-logcdf';\n*\n* var logcdf = factory( 0.5, 0.5 );\n*\n* var y = logcdf( 0.8 );\n* // returns ~-0.393\n*\n* y = logcdf( 0.3 );\n* // returns ~-1.118\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport logcdf from './logcdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( logcdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default logcdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport pow from '@stdlib/math-base-special-pow';\nimport ln from '@stdlib/math-base-special-ln';\nimport NINF from '@stdlib/constants-float64-ninf';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the cumulative distribution function (CDF) for a Kumaraswamy's double bounded distribution with first shape parameter `a` and second shape parameter `b`.\n*\n* @param {PositiveNumber} a - first shape parameter\n* @param {PositiveNumber} b - second shape parameter\n* @returns {Function} CDF\n*\n* @example\n* var logcdf = factory( 0.5, 0.5 );\n*\n* var y = logcdf( 0.8 );\n* // returns ~-0.393\n*\n* y = logcdf( 0.3 );\n* // returns ~-1.116\n*/\nfunction factory( a, b ) {\n\tif (\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\ta <= 0.0 ||\n\t\tb <= 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn logcdf;\n\n\t/**\n\t* Evaluates the natural logarithm of the cumulative distribution function (CDF) for a Kumaraswamy's double bounded distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {number} evaluated logCDF\n\t*\n\t* @example\n\t* var y = logcdf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction logcdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x <= 0.0 ) {\n\t\t\treturn NINF;\n\t\t}\n\t\tif ( x >= 1.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn ln( 1.0 - pow( 1.0 - pow( x, a ), b ) );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate the natural logarithm of the probability density function (PDF) for a Kumaraswamy's double bounded distribution.\n*\n* @module @stdlib/stats-base-dists-kumaraswamy-logpdf\n*\n* @example\n* import logpdf from '@stdlib/stats-base-dists-kumaraswamy-logpdf';\n*\n* var y = logpdf( 0.5, 1.0, 1.0 );\n* // returns 0.0\n*\n* y = logpdf( 0.5, 2.0, 4.0 );\n* // returns ~0.523\n*\n* @example\n* import { factory as factory } from '@stdlib/stats-base-dists-kumaraswamy-logpdf';\n*\n* var logpdf = factory( 0.5, 0.5 );\n*\n* var y = logpdf( 0.8 );\n* // returns ~-0.151\n*\n* y = logpdf( 0.3 );\n* // returns ~-0.387\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport logpdf from './logpdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( logpdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default logpdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport pow from '@stdlib/math-base-special-pow';\nimport ln from '@stdlib/math-base-special-ln';\nimport NINF from '@stdlib/constants-float64-ninf';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the natural logarithm of the probability density function (PDF) for a Kumaraswamy's double bounded distribution with first shape parameter `a` and second shape parameter `b`.\n*\n* @param {PositiveNumber} a - first shape parameter\n* @param {PositiveNumber} b - second shape parameter\n* @returns {Function} logPDF\n*\n* @example\n* var logpdf = factory( 0.5, 0.5 );\n*\n* var y = logpdf( 0.8 );\n* // returns ~-0.151\n*\n* y = logpdf( 0.3 );\n* // returns ~-0.388\n*/\nfunction factory( a, b ) {\n\tif (\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\ta <= 0.0 ||\n\t\tb <= 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn logpdf;\n\n\t/**\n\t* Evaluates the natural logarithm of the probability density function (PDF) for a Kumaraswamy's double bounded distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {number} evaluated logPDF\n\t*\n\t* @example\n\t* var y = logpdf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction logpdf( x ) {\n\t\tvar out;\n\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x <= 0.0 || x >= 1.0 ) {\n\t\t\treturn NINF;\n\t\t}\n\t\tout = ln( a*b );\n\t\tout += ( a - 1.0 ) * ln( x );\n\t\tout += ( b - 1.0 ) * ln( 1.0 - pow( x, a ) );\n\t\treturn out;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate the probability density function (PDF) for a Kumaraswamy's double bounded distribution.\n*\n* @module @stdlib/stats-base-dists-kumaraswamy-pdf\n*\n* @example\n* import pdf from '@stdlib/stats-base-dists-kumaraswamy-pdf';\n*\n* var y = pdf( 0.5, 1.0, 1.0 );\n* // returns 1.0\n*\n* y = pdf( 0.5, 2.0, 4.0 );\n* // returns ~1.688\n*\n* @example\n* import { factory as factory } from '@stdlib/stats-base-dists-kumaraswamy-pdf';\n*\n* var pdf = factory( 0.5, 0.5 );\n*\n* var y = pdf( 0.8 );\n* // returns ~0.86\n*\n* y = pdf( 0.3 );\n* // returns ~0.679\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport pdf from './pdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( pdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default pdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport pow from '@stdlib/math-base-special-pow';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the probability density function (PDF) for a Kumaraswamy's double bounded distribution with first shape parameter `a` and second shape parameter `b`.\n*\n* @param {PositiveNumber} a - first shape parameter\n* @param {PositiveNumber} b - second shape parameter\n* @returns {Function} PDF\n*\n* @example\n* var pdf = factory( 0.5, 0.5 );\n*\n* var y = pdf( 0.8 );\n* // returns ~0.86\n*\n* y = pdf( 0.3 );\n* // returns ~0.679\n*/\nfunction factory( a, b ) {\n\tif (\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\ta <= 0.0 ||\n\t\tb <= 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn pdf;\n\n\t/**\n\t* Evaluates the probability density function (PDF) for a Kumaraswamy's double bounded distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {number} evaluated PDF\n\t*\n\t* @example\n\t* var y = pdf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction pdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x <= 0.0 || x >= 1.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn ( a*b ) * pow( x, a - 1.0 ) * pow( 1.0 - pow( x, a ), b - 1.0 );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate the quantile function for a Kumaraswamy's double bounded distribution.\n*\n* @module @stdlib/stats-base-dists-kumaraswamy-quantile\n*\n* @example\n* import quantile from '@stdlib/stats-base-dists-kumaraswamy-quantile';\n*\n* var y = quantile( 0.5, 1.0, 1.0 );\n* // returns 0.5\n*\n* y = quantile( 0.5, 2.0, 4.0 );\n* // returns ~0.399\n*\n* @example\n* import { factory as factory } from '@stdlib/stats-base-dists-kumaraswamy-quantile';\n*\n* var quantile = factory( 0.5, 0.5 );\n*\n* var y = quantile( 0.8 );\n* // returns ~0.922\n*\n* y = quantile( 0.3 );\n* // returns ~0.26\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport quantile from './quantile.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( quantile, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default quantile;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport pow from '@stdlib/math-base-special-pow';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the quantile function for a Kumaraswamy's double bounded distribution with first shape parameter `a` and second shape parameter `b`.\n*\n* @param {PositiveNumber} a - first shape parameter\n* @param {PositiveNumber} b - second shape parameter\n* @returns {Function} quantile function\n*\n* @example\n* var quantile = factory( 0.5, 0.5 );\n*\n* var y = quantile( 0.8 );\n* // returns ~0.922\n*\n* y = quantile( 0.3 );\n* // returns ~0.26\n*/\nfunction factory( a, b ) {\n\tif (\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\ta <= 0.0 ||\n\t\tb <= 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn quantile;\n\n\t/**\n\t* Evaluates the quantile function for a Kumaraswamy's double bounded distribution.\n\t*\n\t* @private\n\t* @param {Probability} p - input probability\n\t* @returns {number} evaluated quantile function\n\t*\n\t* @example\n\t* var y = quantile( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction quantile( p ) {\n\t\tif ( isnan( p ) || p < 0.0 || p > 1.0 ) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn pow( 1.0 - pow( 1.0-p, 1.0/b ), 1.0/a );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace kumaraswamy\n*/\nvar kumaraswamy = {};\n\n/**\n* @name cdf\n* @memberof kumaraswamy\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/kumaraswamy/cdf}\n*/\nimport cdf from '@stdlib/stats-base-dists-kumaraswamy-cdf';\nsetReadOnly( kumaraswamy, 'cdf', cdf );\n\n/**\n* @name Kumaraswamy\n* @memberof kumaraswamy\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/kumaraswamy/ctor}\n*/\nimport Kumaraswamy from '@stdlib/stats-base-dists-kumaraswamy-ctor';\nsetReadOnly( kumaraswamy, 'Kumaraswamy', Kumaraswamy );\n\n/**\n* @name kurtosis\n* @memberof kumaraswamy\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/kumaraswamy/kurtosis}\n*/\nimport kurtosis from '@stdlib/stats-base-dists-kumaraswamy-kurtosis';\nsetReadOnly( kumaraswamy, 'kurtosis', kurtosis );\n\n/**\n* @name logcdf\n* @memberof kumaraswamy\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/kumaraswamy/logcdf}\n*/\nimport logcdf from '@stdlib/stats-base-dists-kumaraswamy-logcdf';\nsetReadOnly( kumaraswamy, 'logcdf', logcdf );\n\n/**\n* @name logpdf\n* @memberof kumaraswamy\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/kumaraswamy/logpdf}\n*/\nimport logpdf from '@stdlib/stats-base-dists-kumaraswamy-logpdf';\nsetReadOnly( kumaraswamy, 'logpdf', logpdf );\n\n/**\n* @name mean\n* @memberof kumaraswamy\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/kumaraswamy/mean}\n*/\nimport mean from '@stdlib/stats-base-dists-kumaraswamy-mean';\nsetReadOnly( kumaraswamy, 'mean', mean );\n\n/**\n* @name median\n* @memberof kumaraswamy\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/kumaraswamy/median}\n*/\nimport median from '@stdlib/stats-base-dists-kumaraswamy-median';\nsetReadOnly( kumaraswamy, 'median', median );\n\n/**\n* @name mode\n* @memberof kumaraswamy\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/kumaraswamy/mode}\n*/\nimport mode from '@stdlib/stats-base-dists-kumaraswamy-mode';\nsetReadOnly( kumaraswamy, 'mode', mode );\n\n/**\n* @name pdf\n* @memberof kumaraswamy\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/kumaraswamy/pdf}\n*/\nimport pdf from '@stdlib/stats-base-dists-kumaraswamy-pdf';\nsetReadOnly( kumaraswamy, 'pdf', pdf );\n\n/**\n* @name quantile\n* @memberof kumaraswamy\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/kumaraswamy/quantile}\n*/\nimport quantile from '@stdlib/stats-base-dists-kumaraswamy-quantile';\nsetReadOnly( kumaraswamy, 'quantile', quantile );\n\n/**\n* @name skewness\n* @memberof kumaraswamy\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/kumaraswamy/skewness}\n*/\nimport skewness from '@stdlib/stats-base-dists-kumaraswamy-skewness';\nsetReadOnly( kumaraswamy, 'skewness', skewness );\n\n/**\n* @name stdev\n* @memberof kumaraswamy\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/kumaraswamy/stdev}\n*/\nimport stdev from '@stdlib/stats-base-dists-kumaraswamy-stdev';\nsetReadOnly( kumaraswamy, 'stdev', stdev );\n\n/**\n* @name variance\n* @memberof kumaraswamy\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/kumaraswamy/variance}\n*/\nimport variance from '@stdlib/stats-base-dists-kumaraswamy-variance';\nsetReadOnly( kumaraswamy, 'variance', variance );\n\n\n// EXPORTS //\n\nexport default kumaraswamy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport exp from '@stdlib/math-base-special-exp';\n\n\n// MAIN //\n\n/**\n* Evaluates the cumulative distribution function (CDF) for a Laplace distribution with location parameter `mu` and scale parameter `b` at value `x`.\n*\n* @param {number} x - input value\n* @param {number} mu - location parameter\n* @param {PositiveNumber} b - scale parameter\n* @returns {Probability} evaluated CDF\n*\n* @example\n* var y = cdf( 2.0, 0.0, 1.0 );\n* // returns ~0.932\n*\n* @example\n* var y = cdf( 5.0, 10.0, 3.0 );\n* // returns ~0.094\n*\n* @example\n* var y = cdf( NaN, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2.0, 0.0, NaN );\n* // returns NaN\n*\n* @example\n* // Negative scale parameter:\n* var y = cdf( 2.0, 0.0, -1.0 );\n* // returns NaN\n*/\nfunction cdf( x, mu, b ) {\n\tvar z;\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( mu ) ||\n\t\tisnan( b ) ||\n\t\tb <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tz = ( x - mu ) / b;\n\tif ( x < mu ) {\n\t\treturn 0.5 * exp( z );\n\t}\n\treturn 1.0 - ( 0.5 * exp( -z ) );\n}\n\n\n// EXPORTS //\n\nexport default cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport ln from '@stdlib/math-base-special-ln';\nimport E from '@stdlib/constants-float64-e';\n\n\n// MAIN //\n\n/**\n* Returns the differential entropy for a Laplace distribution with location `mu` and scale `b`.\n*\n* @param {number} mu - location parameter\n* @param {PositiveNumber} b - scale parameter\n* @returns {number} entropy\n*\n* @example\n* var y = entropy( 0.0, 1.0 );\n* // returns ~1.693\n*\n* @example\n* var y = entropy( 5.0, 2.0 );\n* // returns ~2.386\n*\n* @example\n* var y = entropy( NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = entropy( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = entropy( 0.0, 0.0 );\n* // returns NaN\n*/\nfunction entropy( mu, b ) {\n\tif (\n\t\tisnan( mu ) ||\n\t\tisnan( b ) ||\n\t\tb <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn ln( 2.0 * b * E );\n}\n\n\n// EXPORTS //\n\nexport default entropy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns the excess kurtosis for a Laplace distribution with location `mu` and scale `b`.\n*\n* @param {number} mu - location parameter\n* @param {PositiveNumber} b - scale parameter\n* @returns {number} kurtosis\n*\n* @example\n* var y = kurtosis( 0.0, 1.0 );\n* // returns 3.0\n*\n* @example\n* var y = kurtosis( 5.0, 2.0 );\n* // returns 3.0\n*\n* @example\n* var y = kurtosis( NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = kurtosis( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = kurtosis( 0.0, 0.0 );\n* // returns NaN\n*/\nfunction kurtosis( mu, b ) {\n\tif (\n\t\tisnan( mu ) ||\n\t\tisnan( b ) ||\n\t\tb <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn 3.0;\n}\n\n\n// EXPORTS //\n\nexport default kurtosis;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns the expected value for a Laplace distribution with location `mu` and scale `b`.\n*\n* @param {number} mu - location parameter\n* @param {PositiveNumber} b - scale parameter\n* @returns {number} expected value\n*\n* @example\n* var y = mean( 0.0, 1.0 );\n* // returns 0.0\n*\n* @example\n* var y = mean( 5.0, 2.0 );\n* // returns 5.0\n*\n* @example\n* var y = mean( NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = mean( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = mean( 0.0, 0.0 );\n* // returns NaN\n*/\nfunction mean( mu, b ) {\n\tif (\n\t\tisnan( mu ) ||\n\t\tisnan( b ) ||\n\t\tb <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn mu;\n}\n\n\n// EXPORTS //\n\nexport default mean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns the median for a Laplace distribution with location `mu` and scale `b`.\n*\n* @param {number} mu - location parameter\n* @param {PositiveNumber} b - scale parameter\n* @returns {number} median\n*\n* @example\n* var y = median( 0.0, 1.0 );\n* // returns 0.0\n*\n* @example\n* var y = median( 5.0, 2.0 );\n* // returns 5.0\n*\n* @example\n* var y = median( NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = median( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = median( 0.0, 0.0 );\n* // returns NaN\n*/\nfunction median( mu, b ) {\n\tif (\n\t\tisnan( mu ) ||\n\t\tisnan( b ) ||\n\t\tb <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn mu;\n}\n\n\n// EXPORTS //\n\nexport default median;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns the mode for a Laplace distribution with location `mu` and scale `b`.\n*\n* @param {number} mu - location parameter\n* @param {PositiveNumber} b - scale parameter\n* @returns {number} mode\n*\n* @example\n* var y = mode( 0.0, 1.0 );\n* // returns 0.0\n*\n* @example\n* var y = mode( 5.0, 2.0 );\n* // returns 5.0\n*\n* @example\n* var y = mode( NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = mode( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = mode( 0.0, 0.0 );\n* // returns NaN\n*/\nfunction mode( mu, b ) {\n\tif (\n\t\tisnan( mu ) ||\n\t\tisnan( b ) ||\n\t\tb <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn mu;\n}\n\n\n// EXPORTS //\n\nexport default mode;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns the skewness for a Laplace distribution with location `mu` and scale `b`.\n*\n* @param {number} mu - location parameter\n* @param {PositiveNumber} b - scale parameter\n* @returns {number} skewness\n*\n* @example\n* var y = skewness( 0.0, 1.0 );\n* // returns 0.0\n*\n* @example\n* var y = skewness( 5.0, 2.0 );\n* // returns 0.0\n*\n* @example\n* var y = skewness( NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = skewness( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = skewness( 0.0, 0.0 );\n* // returns NaN\n*/\nfunction skewness( mu, b ) {\n\tif (\n\t\tisnan( mu ) ||\n\t\tisnan( b ) ||\n\t\tb <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn 0.0;\n}\n\n\n// EXPORTS //\n\nexport default skewness;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport SQRT2 from '@stdlib/constants-float64-sqrt-two';\n\n\n// MAIN //\n\n/**\n* Returns the standard deviation for a Laplace distribution with location `mu` and scale `b`.\n*\n* @param {number} mu - location parameter\n* @param {PositiveNumber} b - scale parameter\n* @returns {PositiveNumber} standard deviation\n*\n* @example\n* var y = stdev( 0.0, 1.0 );\n* // returns ~1.414\n*\n* @example\n* var y = stdev( 5.0, 2.0 );\n* // returns ~2.828\n*\n* @example\n* var y = stdev( NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = stdev( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = stdev( 0.0, 0.0 );\n* // returns NaN\n*/\nfunction stdev( mu, b ) {\n\tif (\n\t\tisnan( mu ) ||\n\t\tisnan( b ) ||\n\t\tb <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn SQRT2 * b;\n}\n\n\n// EXPORTS //\n\nexport default stdev;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns the variance for a Laplace distribution with location `mu` and scale `b`.\n*\n* @param {number} mu - location parameter\n* @param {PositiveNumber} b - scale parameter\n* @returns {PositiveNumber} variance\n*\n* @example\n* var y = variance( 0.0, 1.0 );\n* // returns 2.0\n*\n* @example\n* var y = variance( 5.0, 2.0 );\n* // returns 8.0\n*\n* @example\n* var y = variance( NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = variance( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = variance( 0.0, 0.0 );\n* // returns NaN\n*/\nfunction variance( mu, b ) {\n\tif (\n\t\tisnan( mu ) ||\n\t\tisnan( b ) ||\n\t\tb <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn 2.0 * b * b;\n}\n\n\n// EXPORTS //\n\nexport default variance;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport pow from '@stdlib/math-base-special-pow';\n\n\n// MAIN //\n\n/**\n* Returns the median of a Kumaraswamy's double bounded distribution.\n*\n* @param {PositiveNumber} a - first shape parameter\n* @param {PositiveNumber} b - second shape parameter\n* @returns {PositiveNumber} median\n*\n* @example\n* var v = median( 0.5, 1.0 );\n* // returns 0.25\n*\n* @example\n* var v = median( 4.0, 12.0 );\n* // returns ~0.487\n*\n* @example\n* var v = median( 12.0, 2.0 );\n* // returns ~0.903\n*\n* @example\n* var v = median( 1.0, -0.1 );\n* // returns NaN\n*\n* @example\n* var v = median( -0.1, 1.0 );\n* // returns NaN\n*\n* @example\n* var v = median( 2.0, NaN );\n* // returns NaN\n*\n* @example\n* var v = median( NaN, 2.0 );\n* // returns NaN\n*/\nfunction median( a, b ) {\n\tif (\n\t\tisnan( a ) ||\n\t\ta <= 0.0 ||\n\t\tisnan( b ) ||\n\t\tb <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn pow( 1.0 - pow( 2.0, -1.0/b ), 1.0/a );\n}\n\n\n// EXPORTS //\n\nexport default median;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Laplace distribution cumulative distribution function (CDF).\n*\n* @module @stdlib/stats-base-dists-laplace-cdf\n*\n* @example\n* import cdf from '@stdlib/stats-base-dists-laplace-cdf';\n*\n* var y = cdf( 10.0, 0.0, 3.0 );\n* // returns ~0.982\n*\n* y = cdf( 0.0, 0.0, 3.0 );\n* // returns 0.5\n*\n* var myCDF = cdf.factory( 2.0, 3.0 );\n* y = myCDF( 10.0 );\n* // returns ~0.965\n*\n* y = myCDF( 2.0 );\n* // returns 0.5\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport cdf from './cdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( cdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport exp from '@stdlib/math-base-special-exp';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the cumulative distribution function (CDF) for a Laplace distribution with location parameter `mu` and scale parameter `b`.\n*\n* @param {number} mu - location parameter\n* @param {PositiveNumber} b - scale parameter\n* @returns {Function} CDF\n*\n* @example\n* var cdf = factory( 3.0, 1.5 );\n*\n* var y = cdf( 1.0 );\n* // returns ~0.132\n*\n* y = cdf( 4.0 );\n* // returns ~0.743\n*/\nfunction factory( mu, b ) {\n\tif (\n\t\tisnan( mu ) ||\n\t\tisnan( b ) ||\n\t\tb <= 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn cdf;\n\n\t/**\n\t* Evaluates the cumulative distribution function (CDF) for a Laplace distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated CDF\n\t*\n\t* @example\n\t* var y = cdf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction cdf( x ) {\n\t\tvar z;\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tz = ( x - mu ) / b;\n\t\tif ( x < mu ) {\n\t\t\treturn 0.5 * exp( z );\n\t\t}\n\t\treturn 1.0 - (0.5 * exp( -z ));\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Natural logarithm of `1/2`.\n*\n* @module @stdlib/constants-float64-ln-half\n* @type {number}\n*\n* @example\n* import LN_HALF from '@stdlib/constants-float64-ln-half';\n* // returns -0.6931471805599453\n*/\n\n\n// MAIN //\n\n/**\n* Natural logarithm of `1/2`.\n*\n* ```tex\n* \\ln (1/2)\n* ```\n*\n* @constant\n* @type {number}\n* @default -0.6931471805599453\n*/\nvar LN_HALF = -0.69314718055994530941723212145817656807550013436025525412;\n\n\n// EXPORTS //\n\nexport default LN_HALF;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport expm1 from '@stdlib/math-base-special-expm1';\nimport log1p from '@stdlib/math-base-special-log1p';\nimport LNHALF from '@stdlib/constants-float64-ln-half';\n\n\n// MAIN //\n\n/**\n* Evaluates the logarithm of the cumulative distribution function (CDF) for a Laplace distribution with location parameter `mu` and scale parameter `b` at value `x`.\n*\n* @param {number} x - input value\n* @param {number} mu - location parameter\n* @param {PositiveNumber} b - scale parameter\n* @returns {number} evaluated logarithm of CDF\n*\n* @example\n* var y = logcdf( 2.0, 0.0, 1.0 );\n* // returns ~-0.07\n*\n* @example\n* var y = logcdf( 5.0, 10.0, 3.0 );\n* // returns ~-2.36\n*\n* @example\n* var y = logcdf( NaN, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = logcdf( 2, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = logcdf( 2.0, 0.0, NaN );\n* // returns NaN\n*\n* @example\n* // Negative scale parameter:\n* var y = logcdf( 2.0, 0.0, -1.0 );\n* // returns NaN\n*/\nfunction logcdf( x, mu, b ) {\n\tvar z;\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( mu ) ||\n\t\tisnan( b ) ||\n\t\tb <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tz = ( x - mu ) / b;\n\tif ( x < mu ) {\n\t\treturn LNHALF + z;\n\t}\n\treturn LNHALF + log1p( -expm1( -z ) );\n}\n\n\n// EXPORTS //\n\nexport default logcdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport abs from '@stdlib/math-base-special-abs';\nimport ln from '@stdlib/math-base-special-ln';\n\n\n// MAIN //\n\n/**\n* Evaluates the logarithm of the probability density function (PDF) for a Laplace distribution with location parameter `mu` and scale parameter `b` at a value `x`.\n*\n* @param {number} x - input value\n* @param {number} mu - location parameter\n* @param {PositiveNumber} b - scale parameter\n* @returns {number} evaluated logPDF\n*\n* @example\n* var y = logpdf( 2.0, 0.0, 1.0 );\n* // returns ~-2.693\n*\n* @example\n* var y = logpdf( -1.0, 2.0, 3.0 );\n* // returns ~-2.792\n*\n* @example\n* var y = logpdf( 2.5, 2.0, 3.0 );\n* // returns ~-1.958\n*\n* @example\n* var y = logpdf( NaN, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = logpdf( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = logpdf( 0.0, 0.0, NaN );\n* // returns NaN\n*\n* @example\n* // Negative scale parameter:\n* var y = logpdf( 2.0, 0.0, -1.0 );\n* // returns NaN\n*/\nfunction logpdf( x, mu, b ) {\n\tvar z;\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( mu ) ||\n\t\tisnan( b ) ||\n\t\tb <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tz = ( x - mu ) / b;\n\treturn -( abs( z ) + ln( 2.0 * b ) );\n}\n\n\n// EXPORTS //\n\nexport default logpdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport abs from '@stdlib/math-base-special-abs';\nimport exp from '@stdlib/math-base-special-exp';\nimport pow from '@stdlib/math-base-special-pow';\n\n\n// MAIN //\n\n/**\n* Evaluates the moment-generating function (MGF) for a Laplace (double exponential) distribution with location parameter `mu` and scale parameter `b` at a value `t`.\n*\n* @param {number} t - input value\n* @param {number} mu - mean\n* @param {NonNegativeNumber} b - scale parameter\n* @returns {number} evaluated MGF\n*\n* @example\n* var y = mgf( 0.5, 0.0, 1.0 );\n* // returns ~1.333\n*\n* @example\n* var y = mgf( 0.0, 0.0, 1.0 );\n* // returns 1.0\n*\n* @example\n* var y = mgf( -1.0, 4.0, 0.2 );\n* // returns ~0.019\n*\n* @example\n* var y = mgf( NaN, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = mgf( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = mgf( 0.0, 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = mgf( 1.0, 0.0, 2.0 );\n* // returns NaN\n*\n* @example\n* var y = mgf( -0.5, 0.0, 4.0 );\n* // returns NaN\n*\n* @example\n* var y = mgf( 2.0, 0.0, 0.0 );\n* // returns NaN\n*\n* @example\n* var y = mgf( 2.0, 0.0, -1.0 );\n* // returns NaN\n*/\nfunction mgf( t, mu, b ) {\n\tvar bt;\n\tif (\n\t\tisnan( t ) ||\n\t\tisnan( mu ) ||\n\t\tisnan( b ) ||\n\t\tb <= 0.0 ||\n\t\tabs( t ) >= 1.0/b\n\t) {\n\t\treturn NaN;\n\t}\n\tbt = b * t;\n\treturn exp( mu * t ) / ( 1.0 - pow( bt, 2.0 ) );\n}\n\n\n// EXPORTS //\n\nexport default mgf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport abs from '@stdlib/math-base-special-abs';\nimport exp from '@stdlib/math-base-special-exp';\n\n\n// MAIN //\n\n/**\n* Evaluates the probability density function (PDF) for a Laplace distribution with location parameter `mu` and scale parameter `b` at a value `x`.\n*\n* @param {number} x - input value\n* @param {number} mu - location parameter\n* @param {PositiveNumber} b - scale parameter\n* @returns {number} evaluated PDF\n*\n* @example\n* var y = pdf( 2.0, 0.0, 1.0 );\n* // returns ~0.068\n*\n* @example\n* var y = pdf( -1.0, 2.0, 3.0 );\n* // returns ~0.061\n*\n* @example\n* var y = pdf( 2.5, 2.0, 3.0 );\n* // returns ~0.141\n*\n* @example\n* var y = pdf( NaN, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = pdf( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = pdf( 0.0, 0.0, NaN );\n* // returns NaN\n*\n* @example\n* // Negative scale parameter:\n* var y = pdf( 2.0, 0.0, -1.0 );\n* // returns NaN\n*/\nfunction pdf( x, mu, b ) {\n\tvar z;\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( mu ) ||\n\t\tisnan( b ) ||\n\t\tb <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tz = ( x - mu ) / b;\n\treturn 0.5 * exp( -abs( z ) ) / b;\n}\n\n\n// EXPORTS //\n\nexport default pdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport signum from '@stdlib/math-base-special-signum';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport abs from '@stdlib/math-base-special-abs';\nimport ln from '@stdlib/math-base-special-ln';\n\n\n// MAIN //\n\n/**\n* Evaluates the quantile function for a Laplace distribution with location parameter `mu` and scale parameter `b` at a probability `p`.\n*\n* @param {Probability} p - input value\n* @param {number} mu - location parameter\n* @param {PositiveNumber} b - scale parameter\n* @returns {number} evaluated quantile function\n*\n* @example\n* var y = quantile( 0.8, 0.0, 1.0 );\n* // returns ~0.916\n*\n* @example\n* var y = quantile( 0.5, 4.0, 2.0 );\n* // returns 4.0\n*\n* @example\n* var y = quantile( 1.1, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( -0.2, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( NaN, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.0, 0.0, NaN );\n* // returns NaN\n*\n* @example\n* // Negative scale parameter:\n* var y = quantile( 0.5, 0.0, -1.0 );\n* // returns NaN\n*/\nfunction quantile( p, mu, b ) {\n\tif (\n\t\tisnan( mu ) ||\n\t\tisnan( b ) ||\n\t\tisnan( p ) ||\n\t\tb <= 0.0 ||\n\t\tp < 0.0 ||\n\t\tp > 1.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn mu - ( b * signum( p-0.5 ) * ln( 1.0 - ( 2.0 * abs( p-0.5 ) ) ) );\n}\n\n\n// EXPORTS //\n\nexport default quantile;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nimport defineProperty from '@stdlib/utils-define-property';\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport setReadOnlyAccessor from '@stdlib/utils-define-nonenumerable-read-only-accessor';\nimport { isPrimitive as isPositive } from '@stdlib/assert-is-positive-number';\nimport { isPrimitive as isNumber } from '@stdlib/assert-is-number';\nimport isnan from '@stdlib/assert-is-nan';\nimport entropy from '@stdlib/stats-base-dists-laplace-entropy';\nimport kurtosis from '@stdlib/stats-base-dists-laplace-kurtosis';\nimport mean from '@stdlib/stats-base-dists-laplace-mean';\nimport median from '@stdlib/stats-base-dists-laplace-median';\nimport mode from '@stdlib/stats-base-dists-laplace-mode';\nimport skewness from '@stdlib/stats-base-dists-laplace-skewness';\nimport stdev from '@stdlib/stats-base-dists-laplace-stdev';\nimport variance from '@stdlib/stats-base-dists-laplace-variance';\nimport cdf from '@stdlib/stats-base-dists-laplace-cdf';\nimport logcdf from '@stdlib/stats-base-dists-laplace-logcdf';\nimport logpdf from '@stdlib/stats-base-dists-laplace-logpdf';\nimport mgf from '@stdlib/stats-base-dists-laplace-mgf';\nimport pdf from '@stdlib/stats-base-dists-laplace-pdf';\nimport quantile from '@stdlib/stats-base-dists-laplace-quantile';\nimport format from '@stdlib/string-format';\n\n\n// FUNCTIONS //\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {Probability} evaluated CDF\n*/\nfunction laplaceCDF( x ) {\n\treturn cdf( x, this.mu, this.b );\n}\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (logCDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logCDF\n*/\nfunction laplaceLogCDF( x ) {\n\treturn logcdf( x, this.mu, this.b );\n}\n\n/**\n* Evaluates the natural logarithm of the probability density function (logPDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n*/\nfunction laplaceLogPDF( x ) {\n\treturn logpdf( x, this.mu, this.b );\n}\n\n/**\n* Evaluates the moment-generating function (MGF).\n*\n* @private\n* @param {number} t - input value\n* @returns {number} evaluated MGF\n*/\nfunction laplaceMGF( t ) {\n\treturn mgf( t, this.mu, this.b );\n}\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n*/\nfunction laplacePDF( x ) {\n\treturn pdf( x, this.mu, this.b );\n}\n\n/**\n* Evaluates the quantile function.\n*\n* @private\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n*/\nfunction laplaceQuantile( p ) {\n\treturn quantile( p, this.mu, this.b );\n}\n\n\n// MAIN //\n\n/**\n* Laplace distribution constructor.\n*\n* @constructor\n* @param {number} [mu=0.0] - location parameter\n* @param {PositiveNumber} [b=1.0] - scale parameter\n* @throws {TypeError} `b` must be a positive number\n* @returns {Laplace} distribution instance\n*\n* @example\n* var laplace = new Laplace( 1.0, 1.0 );\n*\n* var y = laplace.cdf( 1.5 );\n* // returns ~0.697\n*\n* var mu = laplace.mean;\n* // returns 1.0\n*/\nfunction Laplace() {\n\tvar mu;\n\tvar b;\n\tif ( !(this instanceof Laplace) ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn new Laplace();\n\t\t}\n\t\treturn new Laplace( arguments[ 0 ], arguments[ 1 ] );\n\t}\n\tif ( arguments.length ) {\n\t\tmu = arguments[ 0 ];\n\t\tb = arguments[ 1 ];\n\t\tif ( !isNumber( mu ) || isnan( mu ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Location parameter must be a number. Value: `%s`.', mu ) );\n\t\t}\n\t\tif ( !isPositive( b ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Scale parameter must be a positive number. Value: `%s`.', b ) );\n\t\t}\n\t} else {\n\t\tmu = 0.0;\n\t\tb = 1.0;\n\t}\n\tdefineProperty( this, 'mu', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn mu;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isNumber( value ) || isnan( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid assignment. Must be a number. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\tmu = value;\n\t\t}\n\t});\n\tdefineProperty( this, 'b', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn b;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isPositive( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid assignment. Must be a positive number. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\tb = value;\n\t\t}\n\t});\n\treturn this;\n}\n\n/**\n* Laplace distribution differential entropy.\n*\n* @name entropy\n* @memberof Laplace.prototype\n* @type {number}\n* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}\n*\n* @example\n* var laplace = new Laplace( 4.0, 12.0 );\n*\n* var v = laplace.entropy;\n* // returns ~4.178\n*/\nsetReadOnlyAccessor( Laplace.prototype, 'entropy', function get() {\n\treturn entropy( this.mu, this.b );\n});\n\n/**\n* Laplace distribution excess kurtosis.\n*\n* @name kurtosis\n* @memberof Laplace.prototype\n* @type {number}\n* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}\n*\n* @example\n* var laplace = new Laplace( 4.0, 12.0 );\n*\n* var v = laplace.kurtosis;\n* // returns 3.0\n*/\nsetReadOnlyAccessor( Laplace.prototype, 'kurtosis', function get() {\n\treturn kurtosis( this.mu, this.b );\n});\n\n/**\n* Laplace distribution expected value.\n*\n* @name mean\n* @memberof Laplace.prototype\n* @type {number}\n* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}\n*\n* @example\n* var laplace = new Laplace( 4.0, 12.0 );\n*\n* var v = laplace.mean;\n* // returns 4.0\n*/\nsetReadOnlyAccessor( Laplace.prototype, 'mean', function get() {\n\treturn mean( this.mu, this.b );\n});\n\n/**\n* Laplace distribution median.\n*\n* @name median\n* @memberof Laplace.prototype\n* @type {number}\n* @see [median]{@link https://en.wikipedia.org/wiki/Median}\n*\n* @example\n* var laplace = new Laplace( 4.0, 12.0 );\n*\n* var v = laplace.median;\n* // returns 4.0\n*/\nsetReadOnlyAccessor( Laplace.prototype, 'median', function get() {\n\treturn median( this.mu, this.b );\n});\n\n/**\n* Laplace distribution mode.\n*\n* @name mode\n* @memberof Laplace.prototype\n* @type {number}\n* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}\n*\n* @example\n* var laplace = new Laplace( 4.0, 12.0 );\n*\n* var v = laplace.mode;\n* // returns 4.0\n*/\nsetReadOnlyAccessor( Laplace.prototype, 'mode', function get() {\n\treturn mode( this.mu, this.b );\n});\n\n/**\n* Laplace distribution skewness.\n*\n* @name skewness\n* @memberof Laplace.prototype\n* @type {number}\n* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}\n*\n* @example\n* var laplace = new Laplace( 4.0, 12.0 );\n*\n* var v = laplace.skewness;\n* // returns 0.0\n*/\nsetReadOnlyAccessor( Laplace.prototype, 'skewness', function get() {\n\treturn skewness( this.mu, this.b );\n});\n\n/**\n* Laplace distribution standard deviation.\n*\n* @name stdev\n* @memberof Laplace.prototype\n* @type {PositiveNumber}\n* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}\n*\n* @example\n* var laplace = new Laplace( 4.0, 12.0 );\n*\n* var v = laplace.stdev;\n* // returns ~16.971\n*/\nsetReadOnlyAccessor( Laplace.prototype, 'stdev', function get() {\n\treturn stdev( this.mu, this.b );\n});\n\n/**\n* Laplace distribution variance.\n*\n* @name variance\n* @memberof Laplace.prototype\n* @type {PositiveNumber}\n* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}\n*\n* @example\n* var laplace = new Laplace( 4.0, 12.0 );\n*\n* var v = laplace.variance;\n* // returns 288.0\n*/\nsetReadOnlyAccessor( Laplace.prototype, 'variance', function get() {\n\treturn variance( this.mu, this.b );\n});\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @name cdf\n* @memberof Laplace.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var laplace = new Laplace( 2.0, 4.0 );\n*\n* var v = laplace.cdf( 0.5 );\n* // returns ~0.344\n*/\nsetReadOnly( Laplace.prototype, 'cdf', laplaceCDF );\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (logCDF).\n*\n* @name logcdf\n* @memberof Laplace.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logCDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var laplace = new Laplace( 2.0, 4.0 );\n*\n* var v = laplace.logcdf( 0.9 );\n* // returns ~-0.968\n*/\nsetReadOnly( Laplace.prototype, 'logcdf', laplaceLogCDF );\n\n/**\n* Evaluates the natural logarithm of the probability density function (logPDF).\n*\n* @name logpdf\n* @memberof Laplace.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var laplace = new Laplace( 2.0, 4.0 );\n*\n* var v = laplace.logpdf( 0.8 );\n* // returns ~-2.379\n*/\nsetReadOnly( Laplace.prototype, 'logpdf', laplaceLogPDF );\n\n/**\n* Evaluates the moment-generating function (MGF).\n*\n* @name mgf\n* @memberof Laplace.prototype\n* @type {Function}\n* @param {number} t - input value\n* @returns {number} evaluated MGF\n* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}\n*\n* @example\n* var laplace = new Laplace( 2.0, 4.0 );\n*\n* var v = laplace.mgf( 0.01 );\n* // returns ~1.022\n*/\nsetReadOnly( Laplace.prototype, 'mgf', laplaceMGF );\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @name pdf\n* @memberof Laplace.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var laplace = new Laplace( 2.0, 4.0 );\n*\n* var v = laplace.pdf( 0.8 );\n* // returns ~0.093\n*/\nsetReadOnly( Laplace.prototype, 'pdf', laplacePDF );\n\n/**\n* Evaluates the quantile function.\n*\n* @name quantile\n* @memberof Laplace.prototype\n* @type {Function}\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}\n*\n* @example\n* var laplace = new Laplace( 2.0, 4.0 );\n*\n* var v = laplace.quantile( 0.5 );\n* // returns 2.0\n*/\nsetReadOnly( Laplace.prototype, 'quantile', laplaceQuantile );\n\n\n// EXPORTS //\n\nexport default Laplace;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Laplace distribution logarithm of cumulative distribution function (CDF).\n*\n* @module @stdlib/stats-base-dists-laplace-logcdf\n*\n* @example\n* import logcdf from '@stdlib/stats-base-dists-laplace-logcdf';\n*\n* var y = logcdf( 10.0, 0.0, 3.0 );\n* // returns ~-0.018\n*\n* y = logcdf( 0.0, 0.0, 3.0 );\n* // returns ~-0.693\n*\n* var mylogcdf = logcdf.factory( 2.0, 3.0 );\n* y = mylogcdf( 10.0 );\n* // returns ~-0.036\n*\n* y = mylogcdf( 2.0 );\n* // returns ~-0.693\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport logcdf from './logcdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( logcdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default logcdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport expm1 from '@stdlib/math-base-special-expm1';\nimport log1p from '@stdlib/math-base-special-log1p';\nimport LNHALF from '@stdlib/constants-float64-ln-half';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the logarithm of the cumulative distribution function (CDF) for a Laplace distribution with location parameter `mu` and scale parameter `b`.\n*\n* @param {number} mu - location parameter\n* @param {PositiveNumber} b - scale parameter\n* @returns {Function} logCDF\n*\n* @example\n* var logcdf = factory( 3.0, 1.5 );\n*\n* var y = logcdf( 1.0 );\n* // returns ~-2.026\n*\n* y = logcdf( 4.0 );\n* // returns ~-0.297\n*/\nfunction factory( mu, b ) {\n\tif ( isnan( mu ) || isnan( b ) || b <= 0.0 ) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn logcdf;\n\n\t/**\n\t* Evaluates the logarithm of the cumulative distribution function (CDF) for a Laplace distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {number} evaluated logCDF\n\t*\n\t* @example\n\t* var y = logcdf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction logcdf( x ) {\n\t\tvar z;\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tz = ( x - mu ) / b;\n\t\tif ( x < mu ) {\n\t\t\treturn LNHALF + z;\n\t\t}\n\t\treturn LNHALF + log1p( -expm1( -z ) );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Laplace distribution logarithm of probability density function (PDF).\n*\n* @module @stdlib/stats-base-dists-laplace-logpdf\n*\n* @example\n* import logpdf from '@stdlib/stats-base-dists-laplace-logpdf';\n*\n* var y = logpdf( 2.0, 0.0, 1.0 );\n* // returns ~-2.688\n*\n* var mylogPDF = logpdf.factory( 10.0, 2.0 );\n* y = mylogPDF( 10.0 );\n* // returns -1.386\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport logpdf from './logpdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( logpdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default logpdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport abs from '@stdlib/math-base-special-abs';\nimport ln from '@stdlib/math-base-special-ln';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the logarithm of the probability density function (PDF) for a Laplace distribution with location parameter `mu` and scale parameter `b`.\n*\n* @param {number} mu - location parameter\n* @param {PositiveNumber} b - scale parameter\n* @returns {Function} logPDF\n*\n* @example\n* var logpdf = factory( 10.0, 2.0 );\n*\n* var y = logpdf( 10.0 );\n* // returns ~-1.386\n*\n* y = logpdf( 5.0 );\n* // returns ~-3.886\n*\n* y = logpdf( 12.0 );\n* // returns ~-2.386\n*/\nfunction factory( mu, b ) {\n\tif (\n\t\tisnan( mu ) ||\n\t\tisnan( b ) ||\n\t\tb <= 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn logpdf;\n\n\t/**\n\t* Evaluates the logarithm of the probability density function (PDF) for a Laplace distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {number} evaluated logarithm of PDF\n\t*\n\t* @example\n\t* var y = logpdf( -3.14 );\n\t* // returns <number>\n\t*/\n\tfunction logpdf( x ) {\n\t\tvar z;\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tz = ( x - mu ) / b;\n\t\treturn -( abs( z ) + ln( 2.0 * b ) );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate the moment-generating function (MGF) for a Laplace (double exponential) distribution.\n*\n* @module @stdlib/stats-base-dists-laplace-mgf\n*\n* @example\n* import mgf from '@stdlib/stats-base-dists-laplace-mgf';\n*\n* var y = mgf( 0.5, 0.0, 1.0 );\n* // returns ~1.333\n*\n* y = mgf( 0.0, 0.0, 1.0 );\n* // returns 1.0\n*\n* y = mgf( -1.0, 4.0, 0.2 );\n* // returns ~0.019\n*\n* var mymgf = mgf.factory( 4.0, 2.0 );\n*\n* y = mymgf( 0.2 );\n* // returns ~2.649\n*\n* y = mymgf( 0.4 );\n* // returns ~13.758\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport mgf from './mgf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( mgf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default mgf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport abs from '@stdlib/math-base-special-abs';\nimport exp from '@stdlib/math-base-special-exp';\nimport pow from '@stdlib/math-base-special-pow';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the moment-generating function (MGF) of a Laplace (double exponential) distribution with location parameter `mu` and scale parameter `b`.\n*\n* @param {number} mu - mean\n* @param {NonNegativeNumber} b - scale parameter\n* @returns {Function} MGF\n*\n* @example\n* var mgf = factory( 4.0, 2.0 );\n*\n* var y = mgf( 0.2 );\n* // returns ~2.649\n*\n* y = mgf( 0.4 );\n* // returns ~13.758\n*/\nfunction factory( mu, b ) {\n\tif ( isnan( mu ) || isnan( b ) || b <= 0.0 ) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn mgf;\n\n\t/**\n\t* Evaluates the moment-generating function (MGF) for a Laplace (double exponential) distribution.\n\t*\n\t* @private\n\t* @param {number} t - input value\n\t* @returns {number} evaluated MGF\n\t*\n\t* @example\n\t* var y = mgf( 0.5 );\n\t* // returns <number>\n\t*/\n\tfunction mgf( t ) {\n\t\tvar bt;\n\t\tif ( abs( t ) >= 1.0/b ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tbt = b * t;\n\t\treturn exp( mu * t ) / ( 1.0 - pow( bt, 2.0 ) );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Laplace distribution probability density function (PDF).\n*\n* @module @stdlib/stats-base-dists-laplace-pdf\n*\n* @example\n* import pdf from '@stdlib/stats-base-dists-laplace-pdf';\n*\n* var y = pdf( 2.0, 0.0, 1.0 );\n* // returns ~0.068\n*\n* var myPDF = pdf.factory( 10.0, 2.0 );\n* y = myPDF( 10.0 );\n* // returns 0.25\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport pdf from './pdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( pdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default pdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport abs from '@stdlib/math-base-special-abs';\nimport exp from '@stdlib/math-base-special-exp';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the probability density function (PDF) for a Laplace distribution with location parameter `mu` and scale parameter `b`.\n*\n* @param {number} mu - location parameter\n* @param {PositiveNumber} b - scale parameter\n* @returns {Function} PDF\n*\n* @example\n* var pdf = factory( 10.0, 2.0 );\n*\n* var y = pdf( 10.0 );\n* // returns 0.25\n*\n* y = pdf( 5.0 );\n* // returns ~0.021\n*\n* y = pdf( 12.0 );\n* // returns ~0.092\n*/\nfunction factory( mu, b ) {\n\tif (\n\t\tisnan( mu ) ||\n\t\tisnan( b ) ||\n\t\tb <= 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn pdf;\n\n\t/**\n\t* Evaluates the probability density function (PDF) for a Laplace distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {number} evaluated PDF\n\t*\n\t* var y = pdf( -3.14 );\n\t* // returns <number>\n\t*/\n\tfunction pdf( x ) {\n\t\tvar z;\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tz = ( x - mu ) / b;\n\t\treturn 0.5 * exp( -abs( z ) ) / b;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Laplace distribution quantile function.\n*\n* @module @stdlib/stats-base-dists-laplace-quantile\n*\n* @example\n* import quantile from '@stdlib/stats-base-dists-laplace-quantile';\n*\n* var y = quantile( 0.8, 0.0, 1.0 );\n* // returns ~0.916\n*\n* var myQuantile = quantile.factory( 10.0, 2.0 );\n* y = myQuantile( 0.5 );\n* // returns 10.0\n*\n* y = myQuantile( 0.8 );\n* // returns ~11.833\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport quantile from './quantile.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( quantile, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default quantile;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport signum from '@stdlib/math-base-special-signum';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport abs from '@stdlib/math-base-special-abs';\nimport ln from '@stdlib/math-base-special-ln';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the quantile function for a Laplace distribution with location parameter `mu` and scale parameter `b`.\n*\n* @param {number} mu - location parameter\n* @param {PositiveNumber} b - scale parameter\n* @returns {Function} quantile function\n*\n* @example\n* var quantile = factory( 10.0, 2.0 );\n* var y = quantile( 0.5 );\n* // returns 10.0\n*\n* y = quantile( 0.8 );\n* // returns ~11.833\n*/\nfunction factory( mu, b ) {\n\tif (\n\t\tisnan( mu ) ||\n\t\tisnan( b ) ||\n\t\tb <= 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn quantile;\n\n\t/**\n\t* Evaluates the quantile function for a Laplace distribution.\n\t*\n\t* @private\n\t* @param {Probability} p - input value\n\t* @returns {number} evaluated quantile function\n\t*\n\t* @example\n\t* var y = quantile( 0.3 );\n\t* // returns <number>\n\t*/\n\tfunction quantile( p ) {\n\t\tif ( isnan( p ) || p < 0.0 || p > 1.0 ) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn mu - ( b * signum( p-0.5 ) * ln( 1.0 - (2.0 * abs( p-0.5 )) ) );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace laplace\n*/\nvar laplace = {};\n\n/**\n* @name cdf\n* @memberof laplace\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/laplace/cdf}\n*/\nimport cdf from '@stdlib/stats-base-dists-laplace-cdf';\nsetReadOnly( laplace, 'cdf', cdf );\n\n/**\n* @name Laplace\n* @memberof laplace\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/laplace/ctor}\n*/\nimport Laplace from '@stdlib/stats-base-dists-laplace-ctor';\nsetReadOnly( laplace, 'Laplace', Laplace );\n\n/**\n* @name entropy\n* @memberof laplace\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/laplace/entropy}\n*/\nimport entropy from '@stdlib/stats-base-dists-laplace-entropy';\nsetReadOnly( laplace, 'entropy', entropy );\n\n/**\n* @name kurtosis\n* @memberof laplace\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/laplace/kurtosis}\n*/\nimport kurtosis from '@stdlib/stats-base-dists-laplace-kurtosis';\nsetReadOnly( laplace, 'kurtosis', kurtosis );\n\n/**\n* @name logcdf\n* @memberof laplace\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/laplace/logcdf}\n*/\nimport logcdf from '@stdlib/stats-base-dists-laplace-logcdf';\nsetReadOnly( laplace, 'logcdf', logcdf );\n\n/**\n* @name logpdf\n* @memberof laplace\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/laplace/logpdf}\n*/\nimport logpdf from '@stdlib/stats-base-dists-laplace-logpdf';\nsetReadOnly( laplace, 'logpdf', logpdf );\n\n/**\n* @name mean\n* @memberof laplace\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/laplace/mean}\n*/\nimport mean from '@stdlib/stats-base-dists-laplace-mean';\nsetReadOnly( laplace, 'mean', mean );\n\n/**\n* @name median\n* @memberof laplace\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/laplace/median}\n*/\nimport median from '@stdlib/stats-base-dists-laplace-median';\nsetReadOnly( laplace, 'median', median );\n\n/**\n* @name mgf\n* @memberof laplace\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/laplace/mgf}\n*/\nimport mgf from '@stdlib/stats-base-dists-laplace-mgf';\nsetReadOnly( laplace, 'mgf', mgf );\n\n/**\n* @name mode\n* @memberof laplace\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/laplace/mode}\n*/\nimport mode from '@stdlib/stats-base-dists-laplace-mode';\nsetReadOnly( laplace, 'mode', mode );\n\n/**\n* @name pdf\n* @memberof laplace\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/laplace/pdf}\n*/\nimport pdf from '@stdlib/stats-base-dists-laplace-pdf';\nsetReadOnly( laplace, 'pdf', pdf );\n\n/**\n* @name quantile\n* @memberof laplace\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/laplace/quantile}\n*/\nimport quantile from '@stdlib/stats-base-dists-laplace-quantile';\nsetReadOnly( laplace, 'quantile', quantile );\n\n/**\n* @name skewness\n* @memberof laplace\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/laplace/skewness}\n*/\nimport skewness from '@stdlib/stats-base-dists-laplace-skewness';\nsetReadOnly( laplace, 'skewness', skewness );\n\n/**\n* @name stdev\n* @memberof laplace\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/laplace/stdev}\n*/\nimport stdev from '@stdlib/stats-base-dists-laplace-stdev';\nsetReadOnly( laplace, 'stdev', stdev );\n\n/**\n* @name variance\n* @memberof laplace\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/laplace/variance}\n*/\nimport variance from '@stdlib/stats-base-dists-laplace-variance';\nsetReadOnly( laplace, 'variance', variance );\n\n\n// EXPORTS //\n\nexport default laplace;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport erfc from '@stdlib/math-base-special-erfc';\nimport sqrt from '@stdlib/math-base-special-sqrt';\n\n\n// MAIN //\n\n/**\n* Evaluates the cumulative distribution function (CDF) for a Lévy distribution with location parameter `mu` and scale parameter `c` at value `x`.\n*\n* @param {number} x - input value\n* @param {number} mu - location parameter\n* @param {PositiveNumber} c - scale parameter\n* @returns {Probability} evaluated CDF\n*\n* @example\n* var y = cdf( 2.0, 0.0, 1.0 );\n* // returns ~0.48\n*\n* @example\n* var y = cdf( 12.0, 10.0, 3.0 );\n* // returns ~0.221\n*\n* @example\n* var y = cdf( 9.0, 10.0, 3.0 );\n* // returns 0.0\n*\n* @example\n* var y = cdf( NaN, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2.0, 0.0, NaN );\n* // returns NaN\n*\n* @example\n* // Negative scale parameter:\n* var y = cdf( 2.0, 0.0, -1.0 );\n* // returns NaN\n*/\nfunction cdf( x, mu, c ) {\n\tvar z;\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( mu ) ||\n\t\tisnan( c ) ||\n\t\tc <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x < mu ) {\n\t\treturn 0.0;\n\t}\n\tz = sqrt( c / ( 2.0 * ( x-mu ) ) );\n\treturn erfc( z );\n}\n\n\n// EXPORTS //\n\nexport default cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Lévy distribution cumulative distribution function (CDF).\n*\n* @module @stdlib/stats-base-dists-levy-cdf\n*\n* @example\n* import cdf from '@stdlib/stats-base-dists-levy-cdf';\n*\n* var y = cdf( 10.0, 0.0, 3.0 );\n* // returns ~0.584\n*\n* y = cdf( 0.3, 0.0, 3.0 );\n* // returns ~0.002\n*\n* @example\n* import { factory as factory } from '@stdlib/stats-base-dists-levy-cdf';\n*\n* var myCDF = factory( 2.0, 3.0 );\n* var y = myCDF( 100.0 );\n* // returns ~0.861\n*\n* y = myCDF( 10.0 );\n* // returns ~0.54\n*\n* y = myCDF( 2.0 );\n* // returns 0.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport cdf from './cdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( cdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport erfc from '@stdlib/math-base-special-erfc';\nimport sqrt from '@stdlib/math-base-special-sqrt';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the cumulative distribution function (CDF) for a Lévy distribution with location parameter `mu` and scale parameter `c`.\n*\n* @param {number} mu - location parameter\n* @param {PositiveNumber} c - scale parameter\n* @returns {Function} CDF\n*\n* @example\n* var cdf = factory( 3.0, 1.5 );\n*\n* var y = cdf( 4.0 );\n* // returns ~0.22\n*\n* y = cdf( 2.0 );\n* // returns 0.0\n*/\nfunction factory( mu, c ) {\n\tif (\n\t\tisnan( mu ) ||\n\t\tisnan( c ) ||\n\t\tc <= 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn cdf;\n\n\t/**\n\t* Evaluates the cumulative distribution function (CDF) for a Lévy distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated CDF\n\t*\n\t* @example\n\t* var y = cdf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction cdf( x ) {\n\t\tvar z;\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x < mu ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\tz = sqrt( c / ( 2.0 * ( x-mu ) ) );\n\t\treturn erfc( z );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport ln from '@stdlib/math-base-special-ln';\nimport GAMMA from '@stdlib/constants-float64-eulergamma';\nimport PI from '@stdlib/constants-float64-pi';\n\n\n// VARIABLES //\n\nvar THREE_GAMMA = 3.0 * GAMMA;\n\n\n// MAIN //\n\n/**\n* Returns the differential entropy for a Lévy distribution with location `mu` and scale `s`.\n*\n* @param {number} mu - location parameter\n* @param {PositiveNumber} c - scale parameter\n* @returns {number} entropy\n*\n* @example\n* var y = entropy( 0.0, 1.0 );\n* // returns ~3.324\n*\n* @example\n* var y = entropy( 5.0, 2.0 );\n* // returns ~4.018\n*\n* @example\n* var y = entropy( NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = entropy( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = entropy( 0.0, 0.0 );\n* // returns NaN\n*/\nfunction entropy( mu, c ) {\n\tif (\n\t\tisnan( mu ) ||\n\t\tisnan( c ) ||\n\t\tc <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn ( 1.0 + THREE_GAMMA + ln( 16.0*c*c*PI ) ) / 2.0;\n}\n\n\n// EXPORTS //\n\nexport default entropy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Returns the expected value for a Lévy distribution with location `mu` and scale `c`.\n*\n* @param {number} mu - location parameter\n* @param {PositiveNumber} c - scale parameter\n* @returns {number} expected value\n*\n* @example\n* var y = mean( 0.0, 1.0 );\n* // returns Infinity\n*\n* @example\n* var y = mean( 5.0, 2.0 );\n* // returns Infinity\n*\n* @example\n* var y = mean( NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = mean( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = mean( 0.0, 0.0 );\n* // returns NaN\n*/\nfunction mean( mu, c ) {\n\tif (\n\t\tisnan( mu ) ||\n\t\tisnan( c ) ||\n\t\tc <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn PINF;\n}\n\n\n// EXPORTS //\n\nexport default mean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport erfcinv from '@stdlib/math-base-special-erfcinv';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport pow from '@stdlib/math-base-special-pow';\n\n\n// VARIABLES //\n\nvar DENOM = 2.0 * pow( erfcinv( 0.5 ), 2.0 );\n\n\n// MAIN //\n\n/**\n* Returns the median for a Lévy distribution with location `mu` and scale `c`.\n*\n* @param {number} mu - location parameter\n* @param {PositiveNumber} c - scale parameter\n* @returns {number} median\n*\n* @example\n* var y = median( 0.0, 1.0 );\n* // returns ~2.198\n*\n* @example\n* var y = median( 5.0, 2.0 );\n* // returns ~9.396\n*\n* @example\n* var y = median( NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = median( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = median( 0.0, 0.0 );\n* // returns NaN\n*/\nfunction median( mu, c ) {\n\tif (\n\t\tisnan( mu ) ||\n\t\tisnan( c ) ||\n\t\tc <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn mu + ( c / DENOM );\n}\n\n\n// EXPORTS //\n\nexport default median;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns the mode for a Lévy distribution with location `mu` and scale `c`.\n*\n* @param {number} mu - location parameter\n* @param {PositiveNumber} c - scale parameter\n* @returns {number} mode\n*\n* @example\n* var y = mode( 0.0, 1.0 );\n* // returns ~0.333\n*\n* @example\n* var y = mode( 5.0, 2.0 );\n* // returns ~5.667\n*\n* @example\n* var y = mode( NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = mode( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = mode( 0.0, 0.0 );\n* // returns NaN\n*/\nfunction mode( mu, c ) {\n\tif (\n\t\tisnan( mu ) ||\n\t\tisnan( c ) ||\n\t\tc <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn mu + ( c / 3.0 );\n}\n\n\n// EXPORTS //\n\nexport default mode;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Returns the standard deviation for a Lévy distribution with location `mu` and scale `c`.\n*\n* @param {number} mu - location parameter\n* @param {PositiveNumber} c - scale parameter\n* @returns {PositiveNumber} standard deviation\n*\n* @example\n* var y = stdev( 0.0, 1.0 );\n* // returns Infinity\n*\n* @example\n* var y = stdev( 5.0, 2.0 );\n* // returns Infinity\n*\n* @example\n* var y = stdev( NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = stdev( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = stdev( 0.0, 0.0 );\n* // returns NaN\n*/\nfunction stdev( mu, c ) {\n\tif (\n\t\tisnan( mu ) ||\n\t\tisnan( c ) ||\n\t\tc <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn PINF;\n}\n\n\n// EXPORTS //\n\nexport default stdev;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Returns the variance for a Lévy distribution with location `mu` and scale `c`.\n*\n* @param {number} mu - location parameter\n* @param {PositiveNumber} c - scale parameter\n* @returns {PositiveNumber} variance\n*\n* @example\n* var y = variance( 0.0, 1.0 );\n* // returns Infinity\n*\n* @example\n* var y = variance( 5.0, 2.0 );\n* // returns Infinity\n*\n* @example\n* var y = variance( NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = variance( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = variance( 0.0, 0.0 );\n* // returns NaN\n*/\nfunction variance( mu, c ) {\n\tif (\n\t\tisnan( mu ) ||\n\t\tisnan( c ) ||\n\t\tc <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn PINF;\n}\n\n\n// EXPORTS //\n\nexport default variance;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport erfc from '@stdlib/math-base-special-erfc';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport ln from '@stdlib/math-base-special-ln';\n\n\n// MAIN //\n\n/**\n* Evaluates the logarithm of the cumulative distribution function (CDF) for a Lévy distribution with location parameter `mu` and scale parameter `c` at value `x`.\n*\n* @param {number} x - input value\n* @param {number} mu - location parameter\n* @param {PositiveNumber} c - scale parameter\n* @returns {number} evaluated logCDF\n*\n* @example\n* var y = logcdf( 2.0, 0.0, 1.0 );\n* // returns ~-0.735\n*\n* @example\n* var y = logcdf( 12.0, 10.0, 3.0 );\n* // returns ~-1.51\n*\n* @example\n* var y = logcdf( 9.0, 10.0, 3.0 );\n* // returns -Infinity\n*\n* @example\n* var y = logcdf( NaN, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = logcdf( 2, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = logcdf( 2.0, 0.0, NaN );\n* // returns NaN\n*\n* @example\n* // Negative scale parameter:\n* var y = logcdf( 2.0, 0.0, -1.0 );\n* // returns NaN\n*/\nfunction logcdf( x, mu, c ) {\n\tvar z;\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( mu ) ||\n\t\tisnan( c ) ||\n\t\tc <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x < mu ) {\n\t\treturn NINF;\n\t}\n\tz = sqrt( c / ( 2.0 * ( x-mu ) ) );\n\treturn ln( erfc( z ) );\n}\n\n\n// EXPORTS //\n\nexport default logcdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Lévy distribution logarithm of cumulative distribution function (CDF).\n*\n* @module @stdlib/stats-base-dists-levy-logcdf\n*\n* @example\n* import logcdf from '@stdlib/stats-base-dists-levy-logcdf';\n*\n* var y = logcdf( 10.0, 0.0, 3.0 );\n* // returns ~-0.538\n*\n* y = logcdf( 0.3, 0.0, 3.0 );\n* // returns ~-6.215\n*\n* @example\n* import { factory as factory } from '@stdlib/stats-base-dists-levy-logcdf';\n*\n* var mylogcdf = factory( 2.0, 3.0 );\n* var y = mylogcdf( 100.0 );\n* // returns ~-0.15\n*\n* y = mylogcdf( 10.0 );\n* // returns ~-0.616\n*\n* y = mylogcdf( 2.0 );\n* // returns -Infinity\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport logcdf from './logcdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( logcdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default logcdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport erfc from '@stdlib/math-base-special-erfc';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport ln from '@stdlib/math-base-special-ln';\nimport NINF from '@stdlib/constants-float64-ninf';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the logarithm of the cumulative distribution function (CDF) for a Lévy distribution with location parameter `mu` and scale parameter `c`.\n*\n* @param {number} mu - location parameter\n* @param {PositiveNumber} c - scale parameter\n* @returns {Function} logCDF\n*\n* @example\n* var logcdf = factory( 3.0, 1.5 );\n*\n* var y = logcdf( 4.0 );\n* // returns ~-1.511\n*\n* y = logcdf( 2.0 );\n* // returns -Infinity\n*/\nfunction factory( mu, c ) {\n\tif (\n\t\tisnan( mu ) ||\n\t\tisnan( c ) ||\n\t\tc <= 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn logcdf;\n\n\t/**\n\t* Evaluates the logarithm of the cumulative distribution function (CDF) for a Lévy distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {number} evaluated logCDF\n\t*\n\t* @example\n\t* var y = logcdf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction logcdf( x ) {\n\t\tvar z;\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x < mu ) {\n\t\t\treturn NINF;\n\t\t}\n\t\tz = sqrt( c / ( 2.0 * ( x-mu ) ) );\n\t\treturn ln( erfc( z ) );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Natural logarithm of `2π`.\n*\n* @module @stdlib/constants-float64-ln-two-pi\n* @type {number}\n*\n* @example\n* import LN_TWO_PI from '@stdlib/constants-float64-ln-two-pi';\n* // returns 1.8378770664093456\n*/\n\n\n// MAIN //\n\n/**\n* Natural logarithm of `2π`.\n*\n* ```tex\n* \\ln 2\\pi\n* ```\n*\n* @constant\n* @type {number}\n* @default 1.8378770664093456\n*/\nvar LN_TWO_PI = 1.837877066409345483560659472811235279722794947275566825634;\n\n\n// EXPORTS //\n\nexport default LN_TWO_PI;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport ln from '@stdlib/math-base-special-ln';\nimport LN_TWO_PI from '@stdlib/constants-float64-ln-two-pi';\nimport NINF from '@stdlib/constants-float64-ninf';\n\n\n// MAIN //\n\n/**\n* Evaluates the natural logarithm of the probability density function (PDF) for a Lévy distribution with location parameter `mu` and scale parameter `c` at a value `x`.\n*\n* @param {number} x - input value\n* @param {number} mu - location parameter\n* @param {PositiveNumber} c - scale parameter\n* @returns {number} evaluated logPDF\n*\n* @example\n* var y = logpdf( 2.0, 0.0, 1.0 );\n* // returns ~-2.209\n*\n* @example\n* var y = logpdf( -1.0, 4.0, 2.0 );\n* // returns -Infinity\n*\n* @example\n* var y = logpdf( NaN, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = logpdf( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = logpdf( 0.0, 0.0, NaN );\n* // returns NaN\n*\n* @example\n* // Negative scale parameter:\n* var y = logpdf( 2.0, 0.0, -1.0 );\n* // returns NaN\n*/\nfunction logpdf( x, mu, c ) {\n\tvar z;\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( mu ) ||\n\t\tisnan( c ) ||\n\t\tc <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x <= mu ) {\n\t\treturn NINF;\n\t}\n\tz = x - mu;\n\treturn 0.5 * ( ln( c ) - LN_TWO_PI - ( c/z ) - ( 3.0*ln( z ) ) );\n}\n\n\n// EXPORTS //\n\nexport default logpdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport exp from '@stdlib/math-base-special-exp';\nimport pow from '@stdlib/math-base-special-pow';\nimport TWO_PI from '@stdlib/constants-float64-two-pi';\n\n\n// MAIN //\n\n/**\n* Evaluates the probability density function (PDF) for a Lévy distribution with location parameter `mu` and scale parameter `c` at a value `x`.\n*\n* @param {number} x - input value\n* @param {number} mu - location parameter\n* @param {PositiveNumber} c - scale parameter\n* @returns {number} evaluated PDF\n*\n* @example\n* var y = pdf( 2.0, 0.0, 1.0 );\n* // returns ~0.11\n*\n* @example\n* var y = pdf( -1.0, 4.0, 2.0 );\n* // returns 0.0\n*\n* @example\n* var y = pdf( NaN, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = pdf( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = pdf( 0.0, 0.0, NaN );\n* // returns NaN\n*\n* @example\n* // Negative scale parameter:\n* var y = pdf( 2.0, 0.0, -1.0 );\n* // returns NaN\n*/\nfunction pdf( x, mu, c ) {\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( mu ) ||\n\t\tisnan( c ) ||\n\t\tc <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x <= mu ) {\n\t\treturn 0.0;\n\t}\n\treturn sqrt( c/TWO_PI ) * exp( -c / ( 2.0*(x-mu) ) ) / pow( x-mu, 1.5 );\n}\n\n\n// EXPORTS //\n\nexport default pdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport erfcinv from '@stdlib/math-base-special-erfcinv';\n\n\n// MAIN //\n\n/**\n* Evaluates the quantile function for a Lévy distribution with location parameter `mu` and scale parameter `c` at a probability `p`.\n*\n* @param {Probability} p - input value\n* @param {number} mu - location parameter\n* @param {NonNegativeNumber} c - scale parameter\n* @returns {number} evaluated quantile function\n*\n* @example\n* var y = quantile( 0.8, 0.0, 1.0 );\n* // returns ~15.58\n*\n* @example\n* var y = quantile( 0.5, 4.0, 2.0 );\n* // returns ~8.396\n*\n* @example\n* var y = quantile( 1.1, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( -0.2, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( NaN, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.0, 0.0, NaN );\n* // returns NaN\n*\n* @example\n* // Negative scale parameter:\n* var y = quantile( 0.5, 0.0, -1.0 );\n* // returns NaN\n*/\nfunction quantile( p, mu, c ) {\n\tvar fval;\n\tif (\n\t\tisnan( mu ) ||\n\t\tisnan( c ) ||\n\t\tisnan( p ) ||\n\t\tc <= 0.0 ||\n\t\tp < 0.0 ||\n\t\tp > 1.0\n\t) {\n\t\treturn NaN;\n\t}\n\tfval = erfcinv( p );\n\treturn mu + ( c / ( 2.0*fval*fval ) );\n}\n\n\n// EXPORTS //\n\nexport default quantile;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nimport defineProperty from '@stdlib/utils-define-property';\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport setReadOnlyAccessor from '@stdlib/utils-define-nonenumerable-read-only-accessor';\nimport { isPrimitive as isPositive } from '@stdlib/assert-is-positive-number';\nimport { isPrimitive as isNumber } from '@stdlib/assert-is-number';\nimport isnan from '@stdlib/assert-is-nan';\nimport entropy from '@stdlib/stats-base-dists-levy-entropy';\nimport mean from '@stdlib/stats-base-dists-levy-mean';\nimport median from '@stdlib/stats-base-dists-levy-median';\nimport mode from '@stdlib/stats-base-dists-levy-mode';\nimport stdev from '@stdlib/stats-base-dists-levy-stdev';\nimport variance from '@stdlib/stats-base-dists-levy-variance';\nimport cdf from '@stdlib/stats-base-dists-levy-cdf';\nimport logcdf from '@stdlib/stats-base-dists-levy-logcdf';\nimport logpdf from '@stdlib/stats-base-dists-levy-logpdf';\nimport pdf from '@stdlib/stats-base-dists-levy-pdf';\nimport quantile from '@stdlib/stats-base-dists-levy-quantile';\nimport format from '@stdlib/string-format';\n\n\n// FUNCTIONS //\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {Probability} evaluated CDF\n*/\nfunction levyCDF( x ) {\n\treturn cdf( x, this.mu, this.c );\n}\n\n/**\n* Evaluates the logarithm of the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logCDF\n*/\nfunction levyLogCDF( x ) {\n\treturn logcdf( x, this.mu, this.c );\n}\n\n/**\n* Evaluates the natural logarithm of the probability density function (logPDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n*/\nfunction levyLogPDF( x ) {\n\treturn logpdf( x, this.mu, this.c );\n}\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n*/\nfunction levyPDF( x ) {\n\treturn pdf( x, this.mu, this.c );\n}\n\n/**\n* Evaluates the quantile function.\n*\n* @private\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n*/\nfunction levyQuantile( p ) {\n\treturn quantile( p, this.mu, this.c );\n}\n\n\n// MAIN //\n\n/**\n* Lévy distribution constructor.\n*\n* @constructor\n* @param {number} [mu=0.0] - location parameter\n* @param {PositiveNumber} [c=1.0] - scale parameter\n* @throws {TypeError} `c` must be a positive number\n* @returns {Levy} distribution instance\n*\n* @example\n* var levy = new Levy( 1.0, 1.0 );\n*\n* var y = levy.cdf( 3.0 );\n* // returns ~0.48\n*\n* var v = levy.mode;\n* // returns ~1.333\n*/\nfunction Levy() {\n\tvar mu;\n\tvar c;\n\tif ( !(this instanceof Levy) ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn new Levy();\n\t\t}\n\t\treturn new Levy( arguments[ 0 ], arguments[ 1 ] );\n\t}\n\tif ( arguments.length ) {\n\t\tmu = arguments[ 0 ];\n\t\tc = arguments[ 1 ];\n\t\tif ( !isNumber( mu ) || isnan( mu ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Location parameter must be a number. Value: `%s`.', mu ) );\n\t\t}\n\t\tif ( !isPositive( c ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Scale parameter must be a positive number. Value: `%s`.', c ) );\n\t\t}\n\t} else {\n\t\tmu = 0.0;\n\t\tc = 1.0;\n\t}\n\tdefineProperty( this, 'mu', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn mu;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isNumber( value ) || isnan( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid assignment. Must be a number. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\tmu = value;\n\t\t}\n\t});\n\tdefineProperty( this, 'c', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn c;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isPositive( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid assignment. Must be a positive number. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\tc = value;\n\t\t}\n\t});\n\treturn this;\n}\n\n/**\n* Lévy distribution differential entropy.\n*\n* @name entropy\n* @memberof Levy.prototype\n* @type {number}\n* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}\n*\n* @example\n* var levy = new Levy( 4.0, 12.0 );\n*\n* var v = levy.entropy;\n* // returns ~5.809\n*/\nsetReadOnlyAccessor( Levy.prototype, 'entropy', function get() {\n\treturn entropy( this.mu, this.c );\n});\n\n/**\n* Lévy distribution expected value.\n*\n* @name mean\n* @memberof Levy.prototype\n* @type {number}\n* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}\n*\n* @example\n* var levy = new Levy( 4.0, 12.0 );\n*\n* var v = levy.mean;\n* // returns Infinity\n*/\nsetReadOnlyAccessor( Levy.prototype, 'mean', function get() {\n\treturn mean( this.mu, this.c );\n});\n\n/**\n* Lévy distribution median.\n*\n* @name median\n* @memberof Levy.prototype\n* @type {number}\n* @see [median]{@link https://en.wikipedia.org/wiki/Median}\n*\n* @example\n* var levy = new Levy( 4.0, 12.0 );\n*\n* var v = levy.median;\n* // returns ~30.377\n*/\nsetReadOnlyAccessor( Levy.prototype, 'median', function get() {\n\treturn median( this.mu, this.c );\n});\n\n/**\n* Lévy distribution mode.\n*\n* @name mode\n* @memberof Levy.prototype\n* @type {number}\n* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}\n*\n* @example\n* var levy = new Levy( 4.0, 12.0 );\n*\n* var v = levy.mode;\n* // returns 8.0\n*/\nsetReadOnlyAccessor( Levy.prototype, 'mode', function get() {\n\treturn mode( this.mu, this.c );\n});\n\n/**\n* Lévy distribution standard deviation.\n*\n* @name stdev\n* @memberof Levy.prototype\n* @type {PositiveNumber}\n* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}\n*\n* @example\n* var levy = new Levy( 4.0, 12.0 );\n*\n* var v = levy.stdev;\n* // returns Infinity\n*/\nsetReadOnlyAccessor( Levy.prototype, 'stdev', function get() {\n\treturn stdev( this.mu, this.c );\n});\n\n/**\n* Lévy distribution variance.\n*\n* @name variance\n* @memberof Levy.prototype\n* @type {PositiveNumber}\n* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}\n*\n* @example\n* var levy = new Levy( 4.0, 12.0 );\n*\n* var v = levy.variance;\n* // returns Infinity\n*/\nsetReadOnlyAccessor( Levy.prototype, 'variance', function get() {\n\treturn variance( this.mu, this.c );\n});\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @name cdf\n* @memberof Levy.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var levy = new Levy( 2.0, 4.0 );\n*\n* var v = levy.cdf( 2.5 );\n* // returns ~0.005\n*/\nsetReadOnly( Levy.prototype, 'cdf', levyCDF );\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (CDF).\n*\n* @name cdf\n* @memberof Levy.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logCDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var levy = new Levy( 2.0, 4.0 );\n*\n* var v = levy.logcdf( 2.5 );\n* // returns ~-5.365\n*/\nsetReadOnly( Levy.prototype, 'logcdf', levyLogCDF );\n\n/**\n* Evaluates the natural logarithm of the probability density function (logPDF).\n*\n* @name logpdf\n* @memberof Levy.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var levy = new Levy( 2.0, 4.0 );\n*\n* var v = levy.logpdf( 2.5 );\n* // returns ~-3.186\n*/\nsetReadOnly( Levy.prototype, 'logpdf', levyLogPDF );\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @name pdf\n* @memberof Levy.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var levy = new Levy( 2.0, 4.0 );\n*\n* var v = levy.pdf( 2.5 );\n* // returns ~0.041\n*/\nsetReadOnly( Levy.prototype, 'pdf', levyPDF );\n\n/**\n* Evaluates the quantile function.\n*\n* @name quantile\n* @memberof Levy.prototype\n* @type {Function}\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}\n*\n* @example\n* var levy = new Levy( 2.0, 4.0 );\n*\n* var v = levy.quantile( 0.5 );\n* // returns ~10.792\n*/\nsetReadOnly( Levy.prototype, 'quantile', levyQuantile );\n\n\n// EXPORTS //\n\nexport default Levy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Lévy distribution logarithm of probability density function (PDF).\n*\n* @module @stdlib/stats-base-dists-levy-logpdf\n*\n* @example\n* import logpdf from '@stdlib/stats-base-dists-levy-logpdf';\n*\n* var y = logpdf( 2.0, 0.0, 1.0 );\n* // returns ~-2.209\n*\n* @example\n* import { factory as factory } from '@stdlib/stats-base-dists-levy-logpdf';\n*\n* var logpdf = factory( 10.0, 2.0 );\n* var y = logpdf( 11.0 );\n* // returns ~-1.572\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport logpdf from './logpdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( logpdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default logpdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport ln from '@stdlib/math-base-special-ln';\nimport LN_TWO_PI from '@stdlib/constants-float64-ln-two-pi';\nimport NINF from '@stdlib/constants-float64-ninf';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the natural logarithm of the probability density function (PDF) for a Lévy distribution.\n*\n* @param {number} mu - location parameter\n* @param {PositiveNumber} c - scale parameter\n* @returns {Function} logPDF\n*\n* @example\n* var logpdf = factory( 10.0, 2.0 );\n* var y = logpdf( 11.0 );\n* // returns ~-1.572\n*\n* y = logpdf( 10.0 );\n* // returns -Infinity\n*/\nfunction factory( mu, c ) {\n\tif (\n\t\tisnan( mu ) ||\n\t\tisnan( c ) ||\n\t\tc <= 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn logpdf;\n\n\t/**\n\t* Evaluates the natural logarithm of the probability density function (PDF) for a Lévy distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {number} evaluated logPDF\n\t*\n\t* @example\n\t* var y = logpdf( -1.2 );\n\t* // returns <number>\n\t*/\n\tfunction logpdf( x ) {\n\t\tvar z;\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x <= mu ) {\n\t\t\treturn NINF;\n\t\t}\n\t\tz = x - mu;\n\t\treturn 0.5 * ( ln( c ) - LN_TWO_PI - ( c/z ) - ( 3.0*ln( z ) ) );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Lévy distribution probability density function (PDF).\n*\n* @module @stdlib/stats-base-dists-levy-pdf\n*\n* @example\n* import pdf from '@stdlib/stats-base-dists-levy-pdf';\n*\n* var y = pdf( 2.0, 0.0, 1.0 );\n* // returns ~0.11\n*\n* @example\n* import { factory as factory } from '@stdlib/stats-base-dists-levy-pdf';\n*\n* var pdf = factory( 10.0, 2.0 );\n* y = pdf( 11.0 );\n* // returns ~0.208\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport pdf from './pdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( pdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default pdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport exp from '@stdlib/math-base-special-exp';\nimport pow from '@stdlib/math-base-special-pow';\nimport TWO_PI from '@stdlib/constants-float64-two-pi';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the probability density function (PDF) for a Lévy distribution.\n*\n* @param {number} mu - location parameter\n* @param {PositiveNumber} c - scale parameter\n* @returns {Function} PDF\n*\n* @example\n* var pdf = factory( 10.0, 2.0 );\n* var y = pdf( 11.0 );\n* // returns ~0.208\n*\n* y = pdf( 10.0 );\n* // returns 0.0\n*/\nfunction factory( mu, c ) {\n\tif ( isnan( mu ) || isnan( c ) || c <= 0.0 ) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn pdf;\n\n\t/**\n\t* Evaluates the probability density function (PDF) for a Lévy distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {number} evaluated PDF\n\t*\n\t* @example\n\t* var y = pdf( -1.2 );\n\t* // returns <number>\n\t*/\n\tfunction pdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x <= mu ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn sqrt( c/TWO_PI ) * exp( -c / ( 2.0*(x-mu) ) ) / pow( x-mu, 1.5 );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Lévy distribution quantile function.\n*\n* @module @stdlib/stats-base-dists-levy-quantile\n*\n* @example\n* import quantile from '@stdlib/stats-base-dists-levy-quantile';\n*\n* var y = quantile( 0.8, 0.0, 1.0 );\n* // returns ~1.386\n*\n* @example\n* import { factory as factory } from '@stdlib/stats-base-dists-levy-quantile';\n* var quantile = factory( 10.0, 2.0 );\n*\n* var y = quantile( 0.5 );\n* // returns ~14.396\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport quantile from './quantile.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( quantile, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default quantile;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport erfcinv from '@stdlib/math-base-special-erfcinv';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the quantile function for a Lévy distribution.\n*\n* @param {number} mu - location parameter\n* @param {NonNegativeNumber} c - scale parameter\n* @returns {Function} quantile function\n*\n* @example\n* var quantile = factory( 10.0, 2.0 );\n* var y = quantile( 0.5 );\n* // returns ~14.396\n*\n* y = quantile( 0.8 );\n* // returns ~41.16\n*/\nfunction factory( mu, c ) {\n\tif ( isnan( mu ) || isnan( c ) || c <= 0.0 ) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn quantile;\n\n\t/**\n\t* Evaluates the quantile function for a Lévy distribution.\n\t*\n\t* @private\n\t* @param {Probability} p - input value\n\t* @returns {number} evaluated quantile function\n\t*\n\t* @example\n\t* var y = quantile( 0.3 );\n\t* // returns <number>\n\t*/\n\tfunction quantile( p ) {\n\t\tvar fval;\n\t\tif ( isnan( p ) || p < 0.0 || p > 1.0 ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tfval = erfcinv( p );\n\t\treturn mu + ( c / ( 2.0*fval*fval ) );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace levy\n*/\nvar levy = {};\n\n/**\n* @name cdf\n* @memberof levy\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/levy/cdf}\n*/\nimport cdf from '@stdlib/stats-base-dists-levy-cdf';\nsetReadOnly( levy, 'cdf', cdf );\n\n/**\n* @name Levy\n* @memberof levy\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/levy/ctor}\n*/\nimport Levy from '@stdlib/stats-base-dists-levy-ctor';\nsetReadOnly( levy, 'Levy', Levy );\n\n/**\n* @name entropy\n* @memberof levy\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/levy/entropy}\n*/\nimport entropy from '@stdlib/stats-base-dists-levy-entropy';\nsetReadOnly( levy, 'entropy', entropy );\n\n/**\n* @name logcdf\n* @memberof levy\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/levy/logcdf}\n*/\nimport logcdf from '@stdlib/stats-base-dists-levy-logcdf';\nsetReadOnly( levy, 'logcdf', logcdf );\n\n/**\n* @name logpdf\n* @memberof levy\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/levy/logpdf}\n*/\nimport logpdf from '@stdlib/stats-base-dists-levy-logpdf';\nsetReadOnly( levy, 'logpdf', logpdf );\n\n/**\n* @name mean\n* @memberof levy\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/levy/mean}\n*/\nimport mean from '@stdlib/stats-base-dists-levy-mean';\nsetReadOnly( levy, 'mean', mean );\n\n/**\n* @name median\n* @memberof levy\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/levy/median}\n*/\nimport median from '@stdlib/stats-base-dists-levy-median';\nsetReadOnly( levy, 'median', median );\n\n/**\n* @name mode\n* @memberof levy\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/levy/mode}\n*/\nimport mode from '@stdlib/stats-base-dists-levy-mode';\nsetReadOnly( levy, 'mode', mode );\n\n/**\n* @name pdf\n* @memberof levy\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/levy/pdf}\n*/\nimport pdf from '@stdlib/stats-base-dists-levy-pdf';\nsetReadOnly( levy, 'pdf', pdf );\n\n/**\n* @name quantile\n* @memberof levy\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/levy/quantile}\n*/\nimport quantile from '@stdlib/stats-base-dists-levy-quantile';\nsetReadOnly( levy, 'quantile', quantile );\n\n/**\n* @name stdev\n* @memberof levy\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/levy/stdev}\n*/\nimport stdev from '@stdlib/stats-base-dists-levy-stdev';\nsetReadOnly( levy, 'stdev', stdev );\n\n/**\n* @name variance\n* @memberof levy\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/levy/variance}\n*/\nimport variance from '@stdlib/stats-base-dists-levy-variance';\nsetReadOnly( levy, 'variance', variance );\n\n\n// EXPORTS //\n\nexport default levy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport exp from '@stdlib/math-base-special-exp';\n\n\n// MAIN //\n\n/**\n* Evaluates the cumulative distribution function (CDF) for a logistic distribution with location parameter `mu` and scale parameter `s` at a value `x`.\n*\n* @param {number} x - input value\n* @param {number} mu - location parameter\n* @param {NonNegativeNumber} s - scale parameter\n* @returns {Probability} evaluated CDF\n*\n* @example\n* var y = cdf( 2.0, 0.0, 1.0 );\n* // returns ~0.881\n*\n* @example\n* var y = cdf( 5.0, 10.0, 3.0 );\n* // returns ~0.159\n*\n* @example\n* var y = cdf( 2.0, 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( NaN, 0.0, 1.0 );\n* // returns NaN\n*/\nfunction cdf( x, mu, s ) {\n\tvar z;\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( mu ) ||\n\t\tisnan( s ) ||\n\t\ts < 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( s === 0.0 ) {\n\t\treturn ( x < mu ) ? 0.0 : 1.0;\n\t}\n\tz = ( x - mu ) / s;\n\treturn 1.0 / ( 1.0 + exp( -z ) );\n}\n\n\n// EXPORTS //\n\nexport default cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport ln from '@stdlib/math-base-special-ln';\n\n\n// MAIN //\n\n/**\n* Returns the differential entropy for a logistic distribution with location `mu` and scale `s`.\n*\n* @param {number} mu - location parameter\n* @param {PositiveNumber} s - scale parameter\n* @returns {number} entropy\n*\n* @example\n* var y = entropy( 0.0, 1.0 );\n* // returns 2.0\n*\n* @example\n* var y = entropy( 5.0, 2.0 );\n* // returns ~2.693\n*\n* @example\n* var y = entropy( NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = entropy( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = entropy( 0.0, 0.0 );\n* // returns NaN\n*/\nfunction entropy( mu, s ) {\n\tif (\n\t\tisnan( mu ) ||\n\t\tisnan( s ) ||\n\t\ts <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn ln( s ) + 2.0;\n}\n\n\n// EXPORTS //\n\nexport default entropy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns the excess kurtosis for a logistic distribution with location `mu` and scale `s`.\n*\n* @param {number} mu - location parameter\n* @param {PositiveNumber} s - scale parameter\n* @returns {number} excess kurtosis\n*\n* @example\n* var y = kurtosis( 0.0, 1.0 );\n* // returns 1.2\n*\n* @example\n* var y = kurtosis( 5.0, 2.0 );\n* // returns 1.2\n*\n* @example\n* var y = kurtosis( NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = kurtosis( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = kurtosis( 0.0, 0.0 );\n* // returns NaN\n*/\nfunction kurtosis( mu, s ) {\n\tif (\n\t\tisnan( mu ) ||\n\t\tisnan( s ) ||\n\t\ts <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn 1.2;\n}\n\n\n// EXPORTS //\n\nexport default kurtosis;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns the expected value for a logistic distribution with location `mu` and scale `s`.\n*\n* @param {number} mu - location parameter\n* @param {PositiveNumber} s - scale parameter\n* @returns {number} expected value\n*\n* @example\n* var y = mean( 0.0, 1.0 );\n* // returns 0.0\n*\n* @example\n* var y = mean( 5.0, 2.0 );\n* // returns 5.0\n*\n* @example\n* var y = mean( NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = mean( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = mean( 0.0, 0.0 );\n* // returns NaN\n*/\nfunction mean( mu, s ) {\n\tif (\n\t\tisnan( mu ) ||\n\t\tisnan( s ) ||\n\t\ts <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn mu;\n}\n\n\n// EXPORTS //\n\nexport default mean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns the median for a logistic distribution with location `mu` and scale `s`.\n*\n* @param {number} mu - location parameter\n* @param {PositiveNumber} s - scale parameter\n* @returns {number} median\n*\n* @example\n* var y = median( 0.0, 1.0 );\n* // returns 0.0\n*\n* @example\n* var y = median( 5.0, 2.0 );\n* // returns 5.0\n*\n* @example\n* var y = median( NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = median( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = median( 0.0, 0.0 );\n* // returns NaN\n*/\nfunction median( mu, s ) {\n\tif (\n\t\tisnan( mu ) ||\n\t\tisnan( s ) ||\n\t\ts <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn mu;\n}\n\n\n// EXPORTS //\n\nexport default median;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns the mode for a logistic distribution with location `mu` and scale `s`.\n*\n* @param {number} mu - location parameter\n* @param {PositiveNumber} s - scale parameter\n* @returns {number} mode\n*\n* @example\n* var y = mode( 0.0, 1.0 );\n* // returns 0.0\n*\n* @example\n* var y = mode( 5.0, 2.0 );\n* // returns 5.0\n*\n* @example\n* var y = mode( NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = mode( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = mode( 0.0, 0.0 );\n* // returns NaN\n*/\nfunction mode( mu, s ) {\n\tif (\n\t\tisnan( mu ) ||\n\t\tisnan( s ) ||\n\t\ts <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn mu;\n}\n\n\n// EXPORTS //\n\nexport default mode;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns the skewness for a logistic distribution with location `mu` and scale `s`.\n*\n* @param {number} mu - location parameter\n* @param {PositiveNumber} s - scale parameter\n* @returns {number} skewness\n*\n* @example\n* var y = skewness( 0.0, 1.0 );\n* // returns 0.0\n*\n* @example\n* var y = skewness( 5.0, 2.0 );\n* // returns 0.0\n*\n* @example\n* var y = skewness( NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = skewness( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = skewness( 0.0, 0.0 );\n* // returns NaN\n*/\nfunction skewness( mu, s ) {\n\tif (\n\t\tisnan( mu ) ||\n\t\tisnan( s ) ||\n\t\ts <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn 0.0;\n}\n\n\n// EXPORTS //\n\nexport default skewness;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Logistic distribution cumulative distribution function (CDF).\n*\n* @module @stdlib/stats-base-dists-logistic-cdf\n*\n* @example\n* import cdf from '@stdlib/stats-base-dists-logistic-cdf';\n*\n* var y = cdf( 2.0, 0.0, 1.0 );\n* // returns ~0.881\n*\n* var mycdf = cdf.factory( 3.0, 1.5 );\n*\n* y = mycdf( 1.0 );\n* // returns ~0.209\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport cdf from './cdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( cdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport { factory as degenerate } from '@stdlib/stats-base-dists-degenerate-cdf';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport exp from '@stdlib/math-base-special-exp';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the cumulative distribution function (CDF) for a logistic distribution with location parameter `mu` and scale parameter `s`.\n*\n* @param {number} mu - location parameter\n* @param {NonNegativeNumber} s - scale parameter\n* @returns {Function} CDF\n*\n* @example\n* var cdf = factory( 3.0, 1.5 );\n*\n* var y = cdf( 1.0 );\n* // returns ~0.209\n*\n* y = cdf( 4.0 );\n* // returns ~0.661\n*/\nfunction factory( mu, s ) {\n\tif ( isnan( mu ) || isnan( s ) || s < 0.0 ) {\n\t\treturn constantFunction( NaN );\n\t}\n\tif ( s === 0.0 ) {\n\t\treturn degenerate( mu );\n\t}\n\treturn cdf;\n\n\t/**\n\t* Evaluates the cumulative distribution function (CDF) for a logistic distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated CDF\n\t*\n\t* @example\n\t* var y = cdf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction cdf( x ) {\n\t\tvar z;\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tz = ( x - mu ) / s;\n\t\treturn 1.0 / ( 1.0 + exp( -z ) );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport SQRT3 from '@stdlib/constants-float64-sqrt-three';\nimport PI from '@stdlib/constants-float64-pi';\n\n\n// MAIN //\n\n/**\n* Returns the standard deviation for a logistic distribution with location `mu` and scale `s`.\n*\n* @param {number} mu - location parameter\n* @param {PositiveNumber} s - scale parameter\n* @returns {PositiveNumber} standard deviation\n*\n* @example\n* var y = stdev( 0.0, 1.0 );\n* // returns ~1.814\n*\n* @example\n* var y = stdev( 5.0, 2.0 );\n* // returns ~3.628\n*\n* @example\n* var y = stdev( NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = stdev( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = stdev( 0.0, 0.0 );\n* // returns NaN\n*/\nfunction stdev( mu, s ) {\n\tif (\n\t\tisnan( mu ) ||\n\t\tisnan( s ) ||\n\t\ts <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn s * PI / SQRT3;\n}\n\n\n// EXPORTS //\n\nexport default stdev;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Square root of `3`.\n*\n* @module @stdlib/constants-float64-sqrt-three\n* @type {number}\n*\n* @example\n* import SQRT3 from '@stdlib/constants-float64-sqrt-three';\n* // returns 1.7320508075688772\n*/\n\n\n// MAIN //\n\n/**\n* Square root of `3`.\n*\n* ```tex\n* \\sqrt{3}\n* ```\n*\n* @constant\n* @type {number}\n* @default 1.7320508075688772\n*/\nvar SQRT3 = 1.732050807568877293527446341505872366942805253810380628055e+00;\n\n\n// EXPORTS //\n\nexport default SQRT3;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport PI_SQUARED from '@stdlib/constants-float64-pi-squared';\n\n\n// MAIN //\n\n/**\n* Returns the variance for a logistic distribution with location `mu` and scale `s`.\n*\n* @param {number} mu - location parameter\n* @param {PositiveNumber} s - scale parameter\n* @returns {PositiveNumber} variance\n*\n* @example\n* var y = variance( 0.0, 1.0 );\n* // returns ~3.29\n*\n* @example\n* var y = variance( 5.0, 2.0 );\n* // returns ~13.159\n*\n* @example\n* var y = variance( NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = variance( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = variance( 0.0, 0.0 );\n* // returns NaN\n*/\nfunction variance( mu, s ) {\n\tif (\n\t\tisnan( mu ) ||\n\t\tisnan( s ) ||\n\t\ts <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn ( s*s ) * PI_SQUARED / 3.0;\n}\n\n\n// EXPORTS //\n\nexport default variance;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright and license were part of the original implementation available as part of the [StatsFuns.jl]{@link https://github.com/JuliaStats/StatsFuns.jl/blob/master/src/basicfuns.jl} Julia package. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (c) 2015: Dahua Lin.\n*\n* Permission is hereby granted, free of charge, to any person obtaining\n* a copy of this software and associated documentation files (the\n* \"Software\"), to deal in the Software without restriction, including\n* without limitation the rights to use, copy, modify, merge, publish,\n* distribute, sublicense, and/or sell copies of the Software, and to\n* permit persons to whom the Software is furnished to do so, subject to\n* the following conditions:\n*\n* The above copyright notice and this permission notice shall be\n* included in all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n* IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n* CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n* TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n* SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport log1p from '@stdlib/math-base-special-log1p';\nimport exp from '@stdlib/math-base-special-exp';\n\n\n// MAIN //\n\n/**\n* Compute ln( 1 + exp(x) ) without overflow.\n*\n* @private\n* @param {number} x - input value\n* @returns {number} function value\n*/\nfunction log1pexp( x ) {\n\tif ( x <= 18.0 ) {\n\t\treturn log1p( exp(x) );\n\t}\n\tif ( x > 33.3 ) {\n\t\treturn x;\n\t}\n\t// Case: 18.0 < x <= 33.3\n\treturn x + exp( -x );\n}\n\n\n// EXPORTS //\n\nexport default log1pexp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport log1pexp from './log1pexp.js';\n\n\n// MAIN //\n\n/**\n* Evaluates the logarithm of the cumulative distribution function (CDF) for a logistic distribution with location parameter `mu` and scale parameter `s` at a value `x`.\n*\n* @param {number} x - input value\n* @param {number} mu - location parameter\n* @param {NonNegativeNumber} s - scale parameter\n* @returns {number} evaluated logCDF\n*\n* @example\n* var y = logcdf( 2.0, 0.0, 1.0 );\n* // returns ~-0.127\n*\n* @example\n* var y = logcdf( 5.0, 10.0, 3.0 );\n* // returns ~-1.84\n*\n* @example\n* var y = logcdf( 2.0, 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = logcdf( 2, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = logcdf( NaN, 0.0, 1.0 );\n* // returns NaN\n*/\nfunction logcdf( x, mu, s ) {\n\tvar z;\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( mu ) ||\n\t\tisnan( s ) ||\n\t\ts < 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( s === 0.0 ) {\n\t\treturn ( x < mu ) ? NINF : 0.0;\n\t}\n\tz = ( x - mu ) / s;\n\treturn -log1pexp( -z );\n}\n\n\n// EXPORTS //\n\nexport default logcdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport log1p from '@stdlib/math-base-special-log1p';\nimport abs from '@stdlib/math-base-special-abs';\nimport exp from '@stdlib/math-base-special-exp';\nimport ln from '@stdlib/math-base-special-ln';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Evaluates the logarithm of the probability density function (PDF) for a logistic distribution with location parameter `mu` and scale parameter `s` at a value `x`.\n*\n* @param {number} x - input value\n* @param {number} mu - location parameter\n* @param {NonNegativeNumber} s - scale parameter\n* @returns {number} evaluated logPDF\n*\n* @example\n* var y = logpdf( 2.0, 0.0, 1.0 );\n* // returns ~-2.254\n*\n* @example\n* var y = logpdf( -1.0, 4.0, 2.0 );\n* // returns ~-3.351\n*\n* @example\n* var y = logpdf( NaN, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = logpdf( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = logpdf( 0.0, 0.0, NaN );\n* // returns NaN\n*\n* @example\n* // Negative scale parameter:\n* var y = logpdf( 2.0, 0.0, -1.0 );\n* // returns NaN\n*\n* @example\n* var y = logpdf( 2.0, 8.0, 0.0 );\n* // returns -Infinity\n*\n* @example\n* var y = logpdf( 8.0, 8.0, 0.0 );\n* // returns Infinity\n*/\nfunction logpdf( x, mu, s ) {\n\tvar az;\n\tvar z;\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( mu ) ||\n\t\tisnan( s ) ||\n\t\ts < 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x === NINF ) {\n\t\treturn NINF;\n\t}\n\tif ( s === 0.0 ) {\n\t\treturn ( x === mu ) ? PINF : NINF;\n\t}\n\tz = ( x - mu ) / s;\n\taz = -abs( z );\n\treturn az - (2.0 * log1p( exp( az ) )) - ln( s );\n}\n\n\n// EXPORTS //\n\nexport default logpdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport sinpi from '@stdlib/math-base-special-sinpi';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isInfinite from '@stdlib/math-base-assert-is-infinite';\nimport PI from '@stdlib/constants-float64-pi';\n\n\n// MAIN //\n\n/**\n* Computes the normalized cardinal sine of a number.\n*\n* ## Method\n*\n* For \\\\( x \\neq 0 \\\\), the normalized cardinal sine is calculated as\n*\n* ```tex\n* \\operatorname{sinc}(x) = \\frac{\\operatorname{sin}(\\pi x)}{\\pi x}.\n* ```\n*\n*\n* ## Special Cases\n*\n* ```tex\n* \\begin{align*}\n* \\operatorname{sinc}(0) &= 1 & \\\\\n* \\operatorname{sinc}(\\infty) &= 0 & \\\\\n* \\operatorname{sinc}(-\\infty) &= 0 & \\\\\n* \\operatorname{sinc}(\\mathrm{NaN}) &= \\mathrm{NaN}\n* \\end{align*}\n* ```\n*\n*\n* @param {number} x - input value\n* @returns {number} cardinal sine\n*\n* @example\n* var v = sinc( 0.5 );\n* // returns ~0.637\n*\n* @example\n* var v = sinc( -1.2 );\n* // returns ~-0.156\n*\n* @example\n* var v = sinc( 0.0 );\n* // returns 1.0\n*\n* @example\n* var v = sinc( NaN );\n* // returns NaN\n*/\nfunction sinc( x ) {\n\tif ( isnan( x ) ) {\n\t\treturn NaN;\n\t}\n\tif ( isInfinite( x ) ) {\n\t\treturn 0.0;\n\t}\n\tif ( x === 0.0 ) {\n\t\treturn 1.0;\n\t}\n\treturn sinpi( x ) / ( PI*x );\n}\n\n\n// EXPORTS //\n\nexport default sinc;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport sinc from '@stdlib/math-base-special-sinc';\nimport exp from '@stdlib/math-base-special-exp';\nimport abs from '@stdlib/math-base-special-abs';\n\n\n// MAIN //\n\n/**\n* Evaluates the moment-generating function (MGF) for a logistic distribution with mean `mu` and scale parameter `s` at a value `t`.\n*\n* @param {number} t - input value\n* @param {number} mu - mean\n* @param {NonNegativeNumber} s - scale parameter\n* @returns {number} evaluated MGF\n*\n* @example\n* var y = mgf( 0.9, 0.0, 1.0 );\n* // returns ~9.15\n*\n* @example\n* var y = mgf( 0.1, 4.0, 4.0 );\n* // returns ~1.971\n*\n* @example\n* var y = mgf( -0.2, 4.0, 4.0 );\n* // returns ~1.921\n*\n* @example\n* var y = mgf( 0.5, 0.0, -1.0 );\n* // returns NaN\n*\n* @example\n* var y = mgf( 0.5, 0.0, 4.0 );\n* // returns NaN\n*\n* @example\n* var y = mgf( NaN, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = mgf( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = mgf( 0.0, 0.0, NaN );\n* // returns NaN\n*/\nfunction mgf( t, mu, s ) {\n\tvar st;\n\tst = s * t;\n\tif (\n\t\tisnan( st ) ||\n\t\tisnan( mu ) ||\n\t\ts < 0.0 ||\n\t\tabs( st ) > 1.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn exp( mu * t ) / sinc( st );\n}\n\n\n// EXPORTS //\n\nexport default mgf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport abs from '@stdlib/math-base-special-abs';\nimport exp from '@stdlib/math-base-special-exp';\nimport pow from '@stdlib/math-base-special-pow';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Evaluates the probability density function (PDF) for a logistic distribution with location parameter `mu` and scale parameter `s` at a value `x`.\n*\n* @param {number} x - input value\n* @param {number} mu - location parameter\n* @param {NonNegativeNumber} s - scale parameter\n* @returns {number} evaluated PDF\n*\n* @example\n* var y = pdf( 2.0, 0.0, 1.0 );\n* // returns ~0.105\n*\n* @example\n* var y = pdf( -1.0, 4.0, 2.0 );\n* // returns ~0.035\n*\n* @example\n* var y = pdf( NaN, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = pdf( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = pdf( 0.0, 0.0, NaN );\n* // returns NaN\n*\n* @example\n* // Negative scale parameter:\n* var y = pdf( 2.0, 0.0, -1.0 );\n* // returns NaN\n*\n* @example\n* var y = pdf( 2.0, 8.0, 0.0 );\n* // returns 0.0\n*\n* @example\n* var y = pdf( 8.0, 8.0, 0.0 );\n* // returns Infinity\n*/\nfunction pdf( x, mu, s ) {\n\tvar ez;\n\tvar z;\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( mu ) ||\n\t\tisnan( s ) ||\n\t\ts < 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x === NINF ) {\n\t\treturn 0.0;\n\t}\n\tif ( s === 0.0 ) {\n\t\treturn ( x === mu ) ? PINF : 0.0;\n\t}\n\tz = abs( ( x - mu ) / s );\n\tez = exp( -z );\n\treturn ez / ( s * pow( 1.0 + ez, 2.0 ) );\n}\n\n\n// EXPORTS //\n\nexport default pdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport ln from '@stdlib/math-base-special-ln';\n\n\n// MAIN //\n\n/**\n* Evaluates the quantile function for a logistic distribution with location parameter `mu` and scale parameter `s` at a probability `p`.\n*\n* @param {Probability} p - input value\n* @param {number} mu - location parameter\n* @param {NonNegativeNumber} s - scale parameter\n* @returns {number} evaluated quantile function\n*\n* @example\n* var y = quantile( 0.8, 0.0, 1.0 );\n* // returns ~1.386\n*\n* @example\n* var y = quantile( 0.5, 4.0, 2.0 );\n* // returns 4.0\n*\n* @example\n* var y = quantile( 1.1, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( -0.2, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( NaN, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.0, 0.0, NaN );\n* // returns NaN\n*\n* @example\n* // Negative scale parameter:\n* var y = quantile( 0.5, 0.0, -1.0 );\n* // returns NaN\n*/\nfunction quantile( p, mu, s ) {\n\tif (\n\t\tisnan( mu ) ||\n\t\tisnan( s ) ||\n\t\tisnan( p ) ||\n\t\ts < 0.0 ||\n\t\tp < 0.0 ||\n\t\tp > 1.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( s === 0.0 ) {\n\t\treturn mu;\n\t}\n\treturn mu + ( s * ln( p / ( 1.0-p ) ) );\n}\n\n\n// EXPORTS //\n\nexport default quantile;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nimport defineProperty from '@stdlib/utils-define-property';\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport setReadOnlyAccessor from '@stdlib/utils-define-nonenumerable-read-only-accessor';\nimport { isPrimitive as isPositive } from '@stdlib/assert-is-positive-number';\nimport { isPrimitive as isNumber } from '@stdlib/assert-is-number';\nimport isnan from '@stdlib/assert-is-nan';\nimport entropy from '@stdlib/stats-base-dists-logistic-entropy';\nimport kurtosis from '@stdlib/stats-base-dists-logistic-kurtosis';\nimport mean from '@stdlib/stats-base-dists-logistic-mean';\nimport median from '@stdlib/stats-base-dists-logistic-median';\nimport mode from '@stdlib/stats-base-dists-logistic-mode';\nimport skewness from '@stdlib/stats-base-dists-logistic-skewness';\nimport stdev from '@stdlib/stats-base-dists-logistic-stdev';\nimport variance from '@stdlib/stats-base-dists-logistic-variance';\nimport cdf from '@stdlib/stats-base-dists-logistic-cdf';\nimport logcdf from '@stdlib/stats-base-dists-logistic-logcdf';\nimport logpdf from '@stdlib/stats-base-dists-logistic-logpdf';\nimport mgf from '@stdlib/stats-base-dists-logistic-mgf';\nimport pdf from '@stdlib/stats-base-dists-logistic-pdf';\nimport quantile from '@stdlib/stats-base-dists-logistic-quantile';\nimport format from '@stdlib/string-format';\n\n\n// FUNCTIONS //\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {Probability} evaluated CDF\n*/\nfunction logisticCDF( x ) {\n\treturn cdf( x, this.mu, this.s );\n}\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (logCDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logCDF\n*/\nfunction logisticLogCDF( x ) {\n\treturn logcdf( x, this.mu, this.s );\n}\n\n/**\n* Evaluates the natural logarithm of the probability density function (logPDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n*/\nfunction logisticLogPDF( x ) {\n\treturn logpdf( x, this.mu, this.s );\n}\n\n/**\n* Evaluates the moment-generating function (MGF).\n*\n* @private\n* @param {number} t - input value\n* @returns {number} evaluated MGF\n*/\nfunction logisticMGF( t ) {\n\treturn mgf( t, this.mu, this.s );\n}\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n*/\nfunction logisticPDF( x ) {\n\treturn pdf( x, this.mu, this.s );\n}\n\n/**\n* Evaluates the quantile function.\n*\n* @private\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n*/\nfunction logisticQuantile( p ) {\n\treturn quantile( p, this.mu, this.s );\n}\n\n\n// MAIN //\n\n/**\n* Logistic distribution constructor.\n*\n* @constructor\n* @param {number} [mu=0.0] - location parameter\n* @param {PositiveNumber} [s=1.0] - scale parameter\n* @throws {TypeError} `s` must be a positive number\n* @returns {Logistic} distribution instance\n*\n* @example\n* var logistic = new Logistic( 1.0, 1.0 );\n*\n* var y = logistic.cdf( 1.5 );\n* // returns ~0.622\n*\n* var mu = logistic.mean;\n* // returns 1.0\n*/\nfunction Logistic() {\n\tvar mu;\n\tvar s;\n\tif ( !(this instanceof Logistic) ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn new Logistic();\n\t\t}\n\t\treturn new Logistic( arguments[ 0 ], arguments[ 1 ] );\n\t}\n\tif ( arguments.length ) {\n\t\tmu = arguments[ 0 ];\n\t\ts = arguments[ 1 ];\n\t\tif ( !isNumber( mu ) || isnan( mu ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Location parameter must be a number. Value: `%s`.', mu ) );\n\t\t}\n\t\tif ( !isPositive( s ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Scale parameter must be a positive number. Value: `%s`.', s ) );\n\t\t}\n\t} else {\n\t\tmu = 0.0;\n\t\ts = 1.0;\n\t}\n\tdefineProperty( this, 'mu', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn mu;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isNumber( value ) || isnan( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid assignment. Must be a number. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\tmu = value;\n\t\t}\n\t});\n\tdefineProperty( this, 's', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn s;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isPositive( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid assignment. Must be a positive number. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\ts = value;\n\t\t}\n\t});\n\treturn this;\n}\n\n/**\n* Logistic distribution differential entropy.\n*\n* @name entropy\n* @memberof Logistic.prototype\n* @type {number}\n* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}\n*\n* @example\n* var logistic = new Logistic( 4.0, 12.0 );\n*\n* var v = logistic.entropy;\n* // returns ~4.485\n*/\nsetReadOnlyAccessor( Logistic.prototype, 'entropy', function get() {\n\treturn entropy( this.mu, this.s );\n});\n\n/**\n* Logistic distribution excess kurtosis.\n*\n* @name kurtosis\n* @memberof Logistic.prototype\n* @type {number}\n* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}\n*\n* @example\n* var logistic = new Logistic( 4.0, 12.0 );\n*\n* var v = logistic.kurtosis;\n* // returns 1.2\n*/\nsetReadOnlyAccessor( Logistic.prototype, 'kurtosis', function get() {\n\treturn kurtosis( this.mu, this.s );\n});\n\n/**\n* Logistic distribution expected value.\n*\n* @name mean\n* @memberof Logistic.prototype\n* @type {number}\n* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}\n*\n* @example\n* var logistic = new Logistic( 4.0, 12.0 );\n*\n* var v = logistic.mean;\n* // returns 4.0\n*/\nsetReadOnlyAccessor( Logistic.prototype, 'mean', function get() {\n\treturn mean( this.mu, this.s );\n});\n\n/**\n* Logistic distribution median.\n*\n* @name median\n* @memberof Logistic.prototype\n* @type {number}\n* @see [median]{@link https://en.wikipedia.org/wiki/Median}\n*\n* @example\n* var logistic = new Logistic( 4.0, 12.0 );\n*\n* var v = logistic.median;\n* // returns 4.0\n*/\nsetReadOnlyAccessor( Logistic.prototype, 'median', function get() {\n\treturn median( this.mu, this.s );\n});\n\n/**\n* Logistic distribution mode.\n*\n* @name mode\n* @memberof Logistic.prototype\n* @type {number}\n* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}\n*\n* @example\n* var logistic = new Logistic( 4.0, 12.0 );\n*\n* var v = logistic.mode;\n* // returns 4.0\n*/\nsetReadOnlyAccessor( Logistic.prototype, 'mode', function get() {\n\treturn mode( this.mu, this.s );\n});\n\n/**\n* Logistic distribution skewness.\n*\n* @name skewness\n* @memberof Logistic.prototype\n* @type {number}\n* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}\n*\n* @example\n* var logistic = new Logistic( 4.0, 12.0 );\n*\n* var v = logistic.skewness;\n* // returns 0.0\n*/\nsetReadOnlyAccessor( Logistic.prototype, 'skewness', function get() {\n\treturn skewness( this.mu, this.s );\n});\n\n/**\n* Logistic distribution standard deviation.\n*\n* @name stdev\n* @memberof Logistic.prototype\n* @type {PositiveNumber}\n* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}\n*\n* @example\n* var logistic = new Logistic( 4.0, 12.0 );\n*\n* var v = logistic.stdev;\n* // returns ~21.766\n*/\nsetReadOnlyAccessor( Logistic.prototype, 'stdev', function get() {\n\treturn stdev( this.mu, this.s );\n});\n\n/**\n* Logistic distribution variance.\n*\n* @name variance\n* @memberof Logistic.prototype\n* @type {PositiveNumber}\n* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}\n*\n* @example\n* var logistic = new Logistic( 4.0, 12.0 );\n*\n* var v = logistic.variance;\n* // returns ~473.741\n*/\nsetReadOnlyAccessor( Logistic.prototype, 'variance', function get() {\n\treturn variance( this.mu, this.s );\n});\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @name cdf\n* @memberof Logistic.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var logistic = new Logistic( 2.0, 4.0 );\n*\n* var v = logistic.cdf( 0.5 );\n* // returns ~0.407\n*/\nsetReadOnly( Logistic.prototype, 'cdf', logisticCDF );\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (logCDF).\n*\n* @name logcdf\n* @memberof Logistic.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logCDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var logistic = new Logistic( 2.0, 4.0 );\n*\n* var v = logistic.logcdf( 0.5 );\n* // returns ~-0.898\n*/\nsetReadOnly( Logistic.prototype, 'logcdf', logisticLogCDF );\n\n/**\n* Evaluates the natural logarithm of the probability density function (logPDF).\n*\n* @name logpdf\n* @memberof Logistic.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var logistic = new Logistic( 2.0, 4.0 );\n*\n* var v = logistic.logpdf( 0.8 );\n* // returns ~-2.795\n*/\nsetReadOnly( Logistic.prototype, 'logpdf', logisticLogPDF );\n\n/**\n* Evaluates the moment-generating function (MGF).\n*\n* @name mgf\n* @memberof Logistic.prototype\n* @type {Function}\n* @param {number} t - input value\n* @returns {number} evaluated MGF\n* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}\n*\n* @example\n* var logistic = new Logistic( 2.0, 4.0 );\n*\n* var v = logistic.mgf( 0.2 );\n* // returns ~6.379\n*/\nsetReadOnly( Logistic.prototype, 'mgf', logisticMGF );\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @name pdf\n* @memberof Logistic.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var logistic = new Logistic( 2.0, 4.0 );\n*\n* var v = logistic.pdf( 0.8 );\n* // returns ~0.061\n*/\nsetReadOnly( Logistic.prototype, 'pdf', logisticPDF );\n\n/**\n* Evaluates the quantile function.\n*\n* @name quantile\n* @memberof Logistic.prototype\n* @type {Function}\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}\n*\n* @example\n* var logistic = new Logistic( 2.0, 4.0 );\n*\n* var v = logistic.quantile( 0.5 );\n* // returns 2.0\n*/\nsetReadOnly( Logistic.prototype, 'quantile', logisticQuantile );\n\n\n// EXPORTS //\n\nexport default Logistic;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Logistic distribution logarithm of cumulative distribution function (CDF).\n*\n* @module @stdlib/stats-base-dists-logistic-logcdf\n*\n* @example\n* import logcdf from '@stdlib/stats-base-dists-logistic-logcdf';\n*\n* var y = logcdf( 2.0, 0.0, 1.0 );\n* // returns ~-0.127\n*\n* var mylogcdf = logcdf.factory( 3.0, 1.5 );\n*\n* var y = mylogcdf( 1.0 );\n* // returns ~-1.565\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport logcdf from './logcdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( logcdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default logcdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport { factory as degenerate } from '@stdlib/stats-base-dists-degenerate-logcdf';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport log1pexp from './log1pexp.js';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the logarithm of the cumulative distribution function (CDF) for a logistic distribution with location parameter `mu` and scale parameter `s`.\n*\n* @param {number} mu - location parameter\n* @param {NonNegativeNumber} s - scale parameter\n* @returns {Function} logCDF\n*\n* @example\n* var logcdf = factory( 3.0, 1.5 );\n*\n* var y = logcdf( 1.0 );\n* // returns ~-1.567\n*\n* y = logcdf( 4.0 );\n* // returns ~-0.414\n*/\nfunction factory( mu, s ) {\n\tif ( isnan( mu ) || isnan( s ) || s < 0.0 ) {\n\t\treturn constantFunction( NaN );\n\t}\n\tif ( s === 0.0 ) {\n\t\treturn degenerate( mu );\n\t}\n\treturn logcdf;\n\n\t/**\n\t* Evaluates the logarithm of the cumulative distribution function (CDF) for a logistic distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {number} evaluated logCDF\n\t*\n\t* @example\n\t* var y = logcdf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction logcdf( x ) {\n\t\tvar z;\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tz = ( x - mu ) / s;\n\t\treturn -log1pexp( -z );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Logistic distribution logarithm of probability density function (PDF).\n*\n* @module @stdlib/stats-base-dists-logistic-logpdf\n*\n* @example\n* import logpdf from '@stdlib/stats-base-dists-logistic-logpdf';\n*\n* var y = logpdf( 2.0, 0.0, 1.0 );\n* // returns ~-2.254\n*\n* var mylogpdf = logpdf.factory( 10.0, 2.0 );\n* y = mylogpdf( 10.0 );\n* // returns -2.079\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport logpdf from './logpdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( logpdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default logpdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport { factory as degenerate } from '@stdlib/stats-base-dists-degenerate-logpdf';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport log1p from '@stdlib/math-base-special-log1p';\nimport abs from '@stdlib/math-base-special-abs';\nimport exp from '@stdlib/math-base-special-exp';\nimport ln from '@stdlib/math-base-special-ln';\nimport NINF from '@stdlib/constants-float64-ninf';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the logarithm of the probability density function (PDF) for a logistic distribution.\n*\n* @param {number} mu - location parameter\n* @param {NonNegativeNumber} s - scale parameter\n* @returns {Function} logPDF\n*\n* @example\n* var logpdf = factory( 10.0, 2.0 );\n* var y = logpdf( 10.0 );\n* // returns ~-2.079\n*\n* y = logpdf( 5.0 );\n* // returns ~-3.351\n*/\nfunction factory( mu, s ) {\n\tvar ls;\n\tif ( isnan( mu ) || isnan( s ) || s < 0.0 ) {\n\t\treturn constantFunction( NaN );\n\t}\n\tif ( s === 0.0 ) {\n\t\treturn degenerate( mu );\n\t}\n\tls = ln( s );\n\treturn logpdf;\n\n\t/**\n\t* Evaluates the logarithm of the probability density function (PDF) for a logistic distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {number} evaluated logPDF\n\t*\n\t* @example\n\t* var y = logpdf( -1.2 );\n\t* // returns <number>\n\t*/\n\tfunction logpdf( x ) {\n\t\tvar az;\n\t\tvar z;\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x === NINF ) {\n\t\t\treturn NINF;\n\t\t}\n\t\tz = ( x - mu ) / s;\n\t\taz = -abs( z );\n\t\treturn az - (2.0 * log1p( exp( az ) )) - ls;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate the moment-generating function (MGF) for a logistic distribution.\n*\n* @module @stdlib/stats-base-dists-logistic-mgf\n*\n* @example\n* import mgf from '@stdlib/stats-base-dists-logistic-mgf';\n*\n* var y = mgf( 0.9, 0.0, 1.0 );\n* // returns ~9.15\n*\n* y = mgf( 0.1, 4.0, 4.0 );\n* // returns ~1.971\n*\n* y = mgf( -0.2, 4.0, 4.0 );\n* // returns ~1.921\n*\n* var mymgf = mgf.factory( 10.0, 0.5 );\n*\n* y = mymgf( 0.5 );\n* // returns ~164.846\n*\n* y = mymgf( 2.0 );\n* // returns Infinity\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport mgf from './mgf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( mgf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default mgf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport { factory as degenerate } from '@stdlib/stats-base-dists-degenerate-mgf';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport sinc from '@stdlib/math-base-special-sinc';\nimport exp from '@stdlib/math-base-special-exp';\nimport abs from '@stdlib/math-base-special-abs';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the moment-generating function (MGF) of a logistic distribution with mean `mu` and scale parameter `s`.\n*\n* @param {number} mu - mean\n* @param {NonNegativeNumber} s - scale parameter\n* @returns {Function} MGF\n*\n* @example\n* var mgf = factory( 10.0, 0.5 );\n*\n* var y = mgf( 0.5 );\n* // returns ~164.846\n*\n* y = mgf( 2.0 );\n* // returns Infinity\n*/\nfunction factory( mu, s ) {\n\tif ( isnan( mu ) || isnan( s ) || s < 0.0 ) {\n\t\treturn constantFunction( NaN );\n\t}\n\tif ( s === 0.0 ) {\n\t\treturn degenerate( mu );\n\t}\n\treturn mgf;\n\n\t/**\n\t* Evaluates the moment-generating function (MGF) for a logistic distribution.\n\t*\n\t* @private\n\t* @param {number} t - input value\n\t* @returns {number} evaluated MGF\n\t*\n\t* @example\n\t* var y = mgf( 0.5 );\n\t* // returns <number>\n\t*/\n\tfunction mgf( t ) {\n\t\tvar st = s * t;\n\t\tif ( abs( st ) > 1.0 ) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn exp( mu * t ) / sinc( st );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Logistic distribution probability density function (PDF).\n*\n* @module @stdlib/stats-base-dists-logistic-pdf\n*\n* @example\n* import pdf from '@stdlib/stats-base-dists-logistic-pdf';\n*\n* var y = pdf( 2.0, 0.0, 1.0 );\n* // returns ~0.105\n*\n* var myPDF = pdf.factory( 10.0, 2.0 );\n* y = myPDF( 10.0 );\n* // returns 0.125\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport pdf from './pdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( pdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default pdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport { factory as degenerate } from '@stdlib/stats-base-dists-degenerate-pdf';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport abs from '@stdlib/math-base-special-abs';\nimport exp from '@stdlib/math-base-special-exp';\nimport pow from '@stdlib/math-base-special-pow';\nimport NINF from '@stdlib/constants-float64-ninf';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the probability density function (PDF) for a logistic distribution.\n*\n* @param {number} mu - location parameter\n* @param {NonNegativeNumber} s - scale parameter\n* @returns {Function} PDF\n*\n* @example\n* var pdf = factory( 10.0, 2.0 );\n* var y = pdf( 10.0 );\n* // returns 0.125\n*\n* y = pdf( 5.0 );\n* // returns ~0.035\n*/\nfunction factory( mu, s ) {\n\tif ( isnan( mu ) || isnan( s ) || s < 0.0 ) {\n\t\treturn constantFunction( NaN );\n\t}\n\tif ( s === 0.0 ) {\n\t\treturn degenerate( mu );\n\t}\n\treturn pdf;\n\n\t/**\n\t* Evaluates the probability density function (PDF) for a logistic distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {number} evaluated PDF\n\t*\n\t* @example\n\t* var y = pdf( -1.2 );\n\t* // returns <number>\n\t*/\n\tfunction pdf( x ) {\n\t\tvar ez;\n\t\tvar z;\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x === NINF ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\tz = abs( ( x - mu ) / s );\n\t\tez = exp( -z );\n\t\treturn ez / ( s * pow( 1.0 + ez, 2.0 ) );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Logistic distribution quantile function.\n*\n* @module @stdlib/stats-base-dists-logistic-quantile\n*\n* @example\n* import quantile from '@stdlib/stats-base-dists-logistic-quantile';\n*\n* var y = quantile( 0.8, 0.0, 1.0 );\n* // returns ~1.386\n*\n* var myQuantile = quantile.factory( 10.0, 2.0 );\n* y = myQuantile( 0.5 );\n* // returns 10.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport quantile from './quantile.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( quantile, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default quantile;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport { factory as degenerate } from '@stdlib/stats-base-dists-degenerate-quantile';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport ln from '@stdlib/math-base-special-ln';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the quantile function for a logistic distribution.\n*\n* @param {number} mu - location parameter\n* @param {NonNegativeNumber} s - scale parameter\n* @returns {Function} quantile function\n*\n* @example\n* var quantile = factory( 10.0, 2.0 );\n* var y = quantile( 0.5 );\n* // returns 10.0\n*\n* y = quantile( 0.8 );\n* // returns ~12.773\n*/\nfunction factory( mu, s ) {\n\tif ( isnan( mu ) || isnan( s ) || s < 0.0 ) {\n\t\treturn constantFunction( NaN );\n\t}\n\tif ( s === 0.0 ) {\n\t\treturn degenerate( mu );\n\t}\n\treturn quantile;\n\n\t/**\n\t* Evaluates the quantile function for a logistic distribution.\n\t*\n\t* @private\n\t* @param {Probability} p - input value\n\t* @returns {number} evaluated quantile function\n\t*\n\t* @example\n\t* var y = quantile( 0.3 );\n\t* // returns <number>\n\t*/\n\tfunction quantile( p ) {\n\t\tif ( isnan( p ) || p < 0.0 || p > 1.0 ) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn mu + (s * ln( p / ( 1.0 - p ) ));\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace logistic\n*/\nvar logistic = {};\n\n/**\n* @name cdf\n* @memberof logistic\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/logistic/cdf}\n*/\nimport cdf from '@stdlib/stats-base-dists-logistic-cdf';\nsetReadOnly( logistic, 'cdf', cdf );\n\n/**\n* @name Logistic\n* @memberof logistic\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/logistic/ctor}\n*/\nimport Logistic from '@stdlib/stats-base-dists-logistic-ctor';\nsetReadOnly( logistic, 'Logistic', Logistic );\n\n/**\n* @name entropy\n* @memberof logistic\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/logistic/entropy}\n*/\nimport entropy from '@stdlib/stats-base-dists-logistic-entropy';\nsetReadOnly( logistic, 'entropy', entropy );\n\n/**\n* @name kurtosis\n* @memberof logistic\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/logistic/kurtosis}\n*/\nimport kurtosis from '@stdlib/stats-base-dists-logistic-kurtosis';\nsetReadOnly( logistic, 'kurtosis', kurtosis );\n\n/**\n* @name logcdf\n* @memberof logistic\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/logistic/logcdf}\n*/\nimport logcdf from '@stdlib/stats-base-dists-logistic-logcdf';\nsetReadOnly( logistic, 'logcdf', logcdf );\n\n/**\n* @name logpdf\n* @memberof logistic\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/logistic/logpdf}\n*/\nimport logpdf from '@stdlib/stats-base-dists-logistic-logpdf';\nsetReadOnly( logistic, 'logpdf', logpdf );\n\n/**\n* @name mean\n* @memberof logistic\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/logistic/mean}\n*/\nimport mean from '@stdlib/stats-base-dists-logistic-mean';\nsetReadOnly( logistic, 'mean', mean );\n\n/**\n* @name median\n* @memberof logistic\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/logistic/median}\n*/\nimport median from '@stdlib/stats-base-dists-logistic-median';\nsetReadOnly( logistic, 'median', median );\n\n/**\n* @name mgf\n* @memberof logistic\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/logistic/mgf}\n*/\nimport mgf from '@stdlib/stats-base-dists-logistic-mgf';\nsetReadOnly( logistic, 'mgf', mgf );\n\n/**\n* @name mode\n* @memberof logistic\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/logistic/mode}\n*/\nimport mode from '@stdlib/stats-base-dists-logistic-mode';\nsetReadOnly( logistic, 'mode', mode );\n\n/**\n* @name pdf\n* @memberof logistic\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/logistic/pdf}\n*/\nimport pdf from '@stdlib/stats-base-dists-logistic-pdf';\nsetReadOnly( logistic, 'pdf', pdf );\n\n/**\n* @name quantile\n* @memberof logistic\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/logistic/quantile}\n*/\nimport quantile from '@stdlib/stats-base-dists-logistic-quantile';\nsetReadOnly( logistic, 'quantile', quantile );\n\n/**\n* @name skewness\n* @memberof logistic\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/logistic/skewness}\n*/\nimport skewness from '@stdlib/stats-base-dists-logistic-skewness';\nsetReadOnly( logistic, 'skewness', skewness );\n\n/**\n* @name stdev\n* @memberof logistic\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/logistic/stdev}\n*/\nimport stdev from '@stdlib/stats-base-dists-logistic-stdev';\nsetReadOnly( logistic, 'stdev', stdev );\n\n/**\n* @name variance\n* @memberof logistic\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/logistic/variance}\n*/\nimport variance from '@stdlib/stats-base-dists-logistic-variance';\nsetReadOnly( logistic, 'variance', variance );\n\n\n// EXPORTS //\n\nexport default logistic;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport erfc from '@stdlib/math-base-special-erfc';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Evaluates the cumulative distribution function (CDF) for a Normal distribution with mean `mu` and standard deviation `sigma` at a value `x`.\n*\n* @param {number} x - input value\n* @param {number} mu - mean\n* @param {NonNegativeNumber} sigma - standard deviation\n* @returns {Probability} evaluated cumulative distribution function\n*\n* @example\n* var y = cdf( 2.0, 0.0, 1.0 );\n* // returns ~0.977\n*\n* @example\n* var y = cdf( -1.0, -1.0, 2.0 );\n* // returns 0.5\n*\n* @example\n* var y = cdf( -1.0, 4.0, 2.0 );\n* // returns ~0.006\n*\n* @example\n* var y = cdf( NaN, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, 0.0, NaN );\n* // returns NaN\n*\n* @example\n* // Negative standard deviation:\n* var y = cdf( 2.0, 0.0, -1.0 );\n* // returns NaN\n*/\nfunction cdf( x, mu, sigma ) {\n\tvar denom;\n\tvar xc;\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( mu ) ||\n\t\tisnan( sigma ) ||\n\t\tsigma < 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( sigma === 0.0 ) {\n\t\treturn (x < mu) ? 0.0 : 1.0;\n\t}\n\tdenom = sigma * sqrt( 2.0 );\n\txc = x - mu;\n\treturn 0.5 * erfc( -xc/denom );\n}\n\n\n// EXPORTS //\n\nexport default cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport { factory as degenerate } from '@stdlib/stats-base-dists-degenerate-cdf';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport erfc from '@stdlib/math-base-special-erfc';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the cumulative distribution function (CDF) for a Normal distribution.\n*\n* @param {number} mu - mean\n* @param {NonNegativeNumber} sigma - standard deviation\n* @returns {Function} function to evaluate the cumulative distribution function\n*\n* @example\n* var cdf = factory( 10.0, 2.0 );\n* var y = cdf( 10.0 );\n* // returns 0.5\n*\n* y = cdf( 12.0 );\n* // returns ~0.841\n*/\nfunction factory( mu, sigma ) {\n\tvar denom;\n\tif (\n\t\tisnan( mu ) ||\n\t\tisnan( sigma ) ||\n\t\tsigma < 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\tif ( sigma === 0.0 ) {\n\t\treturn degenerate( mu );\n\t}\n\tdenom = sigma * sqrt( 2.0 );\n\treturn cdf;\n\n\t/**\n\t* Evaluates the cumulative distribution function (CDF) for a Normal distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated CDF\n\t*\n\t* @example\n\t* var y = cdf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction cdf( x ) {\n\t\tvar xc;\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\txc = x - mu;\n\t\treturn 0.5 * erfc( -xc / denom );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport normalCDF from '@stdlib/stats-base-dists-normal-cdf';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport ln from '@stdlib/math-base-special-ln';\n\n\n// MAIN //\n\n/**\n* Evaluates the cumulative distribution function (CDF) for a lognormal distribution with location parameter `mu` and scale parameter `sigma` at a value `x`.\n*\n* @param {number} x - input value\n* @param {number} mu - location parameter\n* @param {PositiveNumber} sigma - scale parameter\n* @returns {Probability} evaluated CDF\n*\n* @example\n* var y = cdf( 2.0, 0.0, 1.0 );\n* // returns ~0.756\n*\n* @example\n* var y = cdf( 5.0, 10.0, 3.0 );\n* // returns ~0.003\n*\n* @example\n* var y = cdf( 2.0, 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( NaN, 0.0, 1.0 );\n* // returns NaN\n*/\nfunction cdf( x, mu, sigma ) {\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( mu ) ||\n\t\tisnan( sigma ) ||\n\t\tsigma <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x <= 0.0 ) {\n\t\treturn 0.0;\n\t}\n\treturn normalCDF( ln(x), mu, sigma );\n}\n\n\n// EXPORTS //\n\nexport default cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport exp from '@stdlib/math-base-special-exp';\nimport ln from '@stdlib/math-base-special-ln';\nimport SQRT_TWO_PI from '@stdlib/constants-float64-sqrt-two-pi';\n\n\n// MAIN //\n\n/**\n* Returns the differential entropy for a lognormal distribution with location `mu` and scale `sigma`.\n*\n* @param {number} mu - location parameter\n* @param {PositiveNumber} sigma - scale parameter\n* @returns {number} entropy\n*\n* @example\n* var y = entropy( 0.0, 1.0 );\n* // returns ~1.419\n*\n* @example\n* var y = entropy( 5.0, 2.0 );\n* // returns ~7.112\n*\n* @example\n* var y = entropy( NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = entropy( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = entropy( 0.0, 0.0 );\n* // returns NaN\n*/\nfunction entropy( mu, sigma ) {\n\tif (\n\t\tisnan( mu ) ||\n\t\tisnan( sigma ) ||\n\t\tsigma <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn ln( sigma * exp( mu + 0.5 ) * SQRT_TWO_PI );\n}\n\n\n// EXPORTS //\n\nexport default entropy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport exp from '@stdlib/math-base-special-exp';\n\n\n// MAIN //\n\n/**\n* Returns the excess kurtosis for a lognormal distribution with location `mu` and scale `sigma`.\n*\n* @param {number} mu - location parameter\n* @param {PositiveNumber} sigma - scale parameter\n* @returns {number} excess kurtosis\n*\n* @example\n* var y = kurtosis( 0.0, 1.0 );\n* // returns ~110.936\n*\n* @example\n* var y = kurtosis( 5.0, 2.0 );\n* // returns ~9220556.977\n*\n* @example\n* var y = kurtosis( NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = kurtosis( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = kurtosis( 0.0, 0.0 );\n* // returns NaN\n*/\nfunction kurtosis( mu, sigma ) {\n\tvar out;\n\tvar s2;\n\tif (\n\t\tisnan( mu ) ||\n\t\tisnan( sigma ) ||\n\t\tsigma <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\ts2 = sigma * sigma;\n\tout = exp( 4.0*s2 );\n\tout += 2.0 * exp( 3.0*s2 );\n\tout += 3.0 * exp( 2.0*s2 );\n\tout -= 6.0;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default kurtosis;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport exp from '@stdlib/math-base-special-exp';\n\n\n// MAIN //\n\n/**\n* Returns the expected value for a lognormal distribution with location `mu` and scale `sigma`.\n*\n* @param {number} mu - location parameter\n* @param {PositiveNumber} sigma - scale parameter\n* @returns {NonNegativeNumber} expected value\n*\n* @example\n* var y = mean( 0.0, 1.0 );\n* // returns ~1.649\n*\n* @example\n* var y = mean( 5.0, 2.0 );\n* // returns ~1096.633\n*\n* @example\n* var y = mean( NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = mean( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = mean( 0.0, 0.0 );\n* // returns NaN\n*/\nfunction mean( mu, sigma ) {\n\tif (\n\t\tisnan( mu ) ||\n\t\tisnan( sigma ) ||\n\t\tsigma <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn exp( mu + ( ( sigma*sigma ) / 2.0 ) );\n}\n\n\n// EXPORTS //\n\nexport default mean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport exp from '@stdlib/math-base-special-exp';\n\n\n// MAIN //\n\n/**\n* Returns the median for a lognormal distribution with location `mu` and scale `sigma`.\n*\n* @param {number} mu - location parameter\n* @param {PositiveNumber} sigma - scale parameter\n* @returns {NonNegativeNumber} median\n*\n* @example\n* var y = median( 0.0, 1.0 );\n* // returns 1.0\n*\n* @example\n* var y = median( 5.0, 2.0 );\n* // returns ~148.413\n*\n* @example\n* var y = median( NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = median( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = median( 0.0, 0.0 );\n* // returns NaN\n*/\nfunction median( mu, sigma ) {\n\tif (\n\t\tisnan( mu ) ||\n\t\tisnan( sigma ) ||\n\t\tsigma <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn exp( mu );\n}\n\n\n// EXPORTS //\n\nexport default median;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport exp from '@stdlib/math-base-special-exp';\n\n\n// MAIN //\n\n/**\n* Returns the mode for a lognormal distribution with location `mu` and scale `sigma`.\n*\n* @param {number} mu - location parameter\n* @param {PositiveNumber} sigma - scale parameter\n* @returns {NonNegativeNumber} mode\n*\n* @example\n* var y = mode( 0.0, 1.0 );\n* // returns ~0.368\n*\n* @example\n* var y = mode( 5.0, 2.0 );\n* // returns ~2.718\n*\n* @example\n* var y = mode( NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = mode( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = mode( 0.0, 0.0 );\n* // returns NaN\n*/\nfunction mode( mu, sigma ) {\n\tif (\n\t\tisnan( mu ) ||\n\t\tisnan( sigma ) ||\n\t\tsigma <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn exp( mu - ( sigma*sigma ) );\n}\n\n\n// EXPORTS //\n\nexport default mode;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport exp from '@stdlib/math-base-special-exp';\n\n\n// MAIN //\n\n/**\n* Returns the skewness for a lognormal distribution with location `mu` and scale `sigma`.\n*\n* @param {number} mu - location parameter\n* @param {PositiveNumber} sigma - scale parameter\n* @returns {NonNegativeNumber} skewness\n*\n* @example\n* var y = skewness( 0.0, 1.0 );\n* // returns ~6.185\n*\n* @example\n* var y = skewness( 5.0, 2.0 );\n* // returns ~414.359\n*\n* @example\n* var y = skewness( NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = skewness( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = skewness( 0.0, 0.0 );\n* // returns NaN\n*/\nfunction skewness( mu, sigma ) {\n\tvar es2;\n\tif (\n\t\tisnan( mu ) ||\n\t\tisnan( sigma ) ||\n\t\tsigma <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tes2 = exp( sigma*sigma );\n\treturn ( es2 + 2.0 ) * sqrt( es2 - 1.0 );\n}\n\n\n// EXPORTS //\n\nexport default skewness;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport exp from '@stdlib/math-base-special-exp';\n\n\n// MAIN //\n\n/**\n* Returns the standard deviation for a lognormal distribution with location `mu` and scale `sigma`.\n*\n* @param {number} mu - location parameter\n* @param {PositiveNumber} sigma - scale parameter\n* @returns {NonNegativeNumber} standard deviation\n*\n* @example\n* var y = stdev( 0.0, 1.0 );\n* // returns ~2.161\n*\n* @example\n* var y = stdev( 5.0, 2.0 );\n* // returns ~8028.534\n*\n* @example\n* var y = stdev( NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = stdev( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = stdev( 0.0, 0.0 );\n* // returns NaN\n*/\nfunction stdev( mu, sigma ) {\n\tvar s2;\n\tif (\n\t\tisnan( mu ) ||\n\t\tisnan( sigma ) ||\n\t\tsigma <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\ts2 = sigma*sigma;\n\treturn sqrt( ( exp( s2 ) - 1.0 ) * exp( ( 2.0*mu ) + s2 ) );\n}\n\n\n// EXPORTS //\n\nexport default stdev;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport exp from '@stdlib/math-base-special-exp';\n\n\n// MAIN //\n\n/**\n* Returns the variance for a lognormal distribution with location `mu` and scale `sigma`.\n*\n* @param {number} mu - location parameter\n* @param {PositiveNumber} sigma - scale parameter\n* @returns {NonNegativeNumber} variance\n*\n* @example\n* var y = variance( 0.0, 1.0 );\n* // returns ~4.671\n*\n* @example\n* var y = variance( 5.0, 2.0 );\n* // returns ~64457364.853\n*\n* @example\n* var y = variance( NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = variance( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = variance( 0.0, 0.0 );\n* // returns NaN\n*/\nfunction variance( mu, sigma ) {\n\tvar s2;\n\tif (\n\t\tisnan( mu ) ||\n\t\tisnan( sigma ) ||\n\t\tsigma <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\ts2 = sigma*sigma;\n\treturn ( exp( s2 ) - 1.0 ) * exp( ( 2.0*mu ) + s2 );\n}\n\n\n// EXPORTS //\n\nexport default variance;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport pow from '@stdlib/math-base-special-pow';\nimport ln from '@stdlib/math-base-special-ln';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport PI from '@stdlib/constants-float64-pi';\n\n\n// MAIN //\n\n/**\n* Evaluates the natural logarithm of the probability density function (PDF) for a lognormal distribution with location parameter `mu` and scale parameter `sigma` at a value `x`.\n*\n* @param {number} x - input value\n* @param {number} mu - location parameter\n* @param {PositiveNumber} sigma - scale parameter\n* @returns {number} evaluated logPDF\n*\n* @example\n* var y = logpdf( 2.0, 0.0, 1.0 );\n* // returns ~-1.852\n*\n* @example\n* var y = logpdf( 1.0, 0.0, 1.0 );\n* // returns ~-0.919\n*\n* @example\n* var y = logpdf( 1.0, 3.0, 1.0 );\n* // returns ~-5.419\n*\n* @example\n* var y = logpdf( -1.0, 4.0, 2.0 );\n* // returns -Infinity\n*\n* @example\n* var y = logpdf( NaN, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = logpdf( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = logpdf( 0.0, 0.0, NaN );\n* // returns NaN\n*\n* @example\n* // Negative scale parameter:\n* var y = logpdf( 2.0, 0.0, -1.0 );\n* // returns NaN\n*/\nfunction logpdf( x, mu, sigma ) {\n\tvar s2;\n\tvar A;\n\tvar B;\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( mu ) ||\n\t\tisnan( sigma ) ||\n\t\tsigma <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x <= 0.0 ) {\n\t\treturn NINF;\n\t}\n\ts2 = pow( sigma, 2.0 );\n\tA = -0.5 * ln( 2.0 * s2 * PI );\n\tB = -1.0 / ( 2.0 * s2 );\n\treturn A - ln( x ) + ( B * pow( ln(x) - mu, 2.0 ) );\n}\n\n\n// EXPORTS //\n\nexport default logpdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport exp from '@stdlib/math-base-special-exp';\nimport pow from '@stdlib/math-base-special-pow';\nimport ln from '@stdlib/math-base-special-ln';\nimport PI from '@stdlib/constants-float64-pi';\n\n\n// MAIN //\n\n/**\n* Evaluates the probability density function (PDF) for a lognormal distribution with location parameter `mu` and scale parameter `sigma` at a value `x`.\n*\n* @param {number} x - input value\n* @param {number} mu - location parameter\n* @param {PositiveNumber} sigma - scale parameter\n* @returns {number} evaluated PDF\n*\n* @example\n* var y = pdf( 2.0, 0.0, 1.0 );\n* // returns ~0.157\n*\n* @example\n* var y = pdf( 1.0, 0.0, 1.0 );\n* // returns ~0.399\n*\n* @example\n* var y = pdf( 1.0, 3.0, 1.0 );\n* // returns ~0.004\n*\n* @example\n* var y = pdf( -1.0, 4.0, 2.0 );\n* // returns 0.0\n*\n* @example\n* var y = pdf( NaN, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = pdf( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = pdf( 0.0, 0.0, NaN );\n* // returns NaN\n*\n* @example\n* // Negative scale parameter:\n* var y = pdf( 2.0, 0.0, -1.0 );\n* // returns NaN\n*/\nfunction pdf( x, mu, sigma ) {\n\tvar s2;\n\tvar A;\n\tvar B;\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( mu ) ||\n\t\tisnan( sigma ) ||\n\t\tsigma <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x <= 0.0 ) {\n\t\treturn 0.0;\n\t}\n\ts2 = pow( sigma, 2.0 );\n\tA = 1.0 / ( sqrt( 2.0 * s2 * PI ) );\n\tB = -1.0 / ( 2.0 * s2 );\n\treturn (1.0/x) * A * exp( B * pow( ln(x) - mu, 2.0 ) );\n}\n\n\n// EXPORTS //\n\nexport default pdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Normal distribution cumulative distribution function (CDF).\n*\n* @module @stdlib/stats-base-dists-normal-cdf\n*\n* @example\n* import cdf from '@stdlib/stats-base-dists-normal-cdf';\n*\n* var y = cdf( 2.0, 0.0, 1.0 );\n* // returns ~0.977\n*\n* var myCDF = cdf.factory( 10.0, 2.0 );\n* y = myCDF( 10.0 );\n* // returns 0.5\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport cdf from './cdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( cdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate the lognormal distribution cumulative distribution function (CDF).\n*\n* @module @stdlib/stats-base-dists-lognormal-cdf\n*\n* @example\n* import cdf from '@stdlib/stats-base-dists-lognormal-cdf';\n*\n* var y = cdf( 2.0, 0.0, 1.0 );\n* // returns ~0.756\n*\n* y = cdf( 5.0, 10.0, 3.0 );\n* // returns ~0.003\n*\n* var mycdf = cdf.factory( 3.0, 1.5 );\n*\n* y = mycdf( 1.0 );\n* // returns ~0.023\n*\n* y = mycdf( 4.0 );\n* // returns ~0.141\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport cdf from './cdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( cdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport normalCDF from '@stdlib/stats-base-dists-normal-cdf';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport ln from '@stdlib/math-base-special-ln';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the cumulative distribution function (CDF) for a lognormal distribution with location parameter `mu` and scale parameter `sigma`.\n*\n* @param {number} mu - location parameter\n* @param {PositiveNumber} sigma - scale parameter\n* @returns {Function} CDF\n*\n* @example\n* var cdf = factory( 3.0, 1.5 );\n*\n* var y = cdf( 1.0 );\n* // returns ~0.023\n*\n* y = cdf( 4.0 );\n* // returns ~0.141\n*/\nfunction factory( mu, sigma ) {\n\tif ( isnan( mu ) || isnan( sigma ) || sigma <= 0.0 ) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn cdf;\n\n\t/**\n\t* Evaluates the cumulative distribution function (CDF) for a lognormal distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated CDF\n\t*\n\t* @example\n\t* var y = cdf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction cdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x <= 0.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn normalCDF( ln(x), mu, sigma );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate the natural logarithm of the probability density function (PDF) for a lognormal distribution.\n*\n* @module @stdlib/stats-base-dists-lognormal-logpdf\n*\n* @example\n* import logpdf from '@stdlib/stats-base-dists-lognormal-logpdf';\n*\n* var y = logpdf( 2.0, 0.0, 1.0 );\n* // returns ~-1.852\n*\n* y = logpdf( 1.0, 0.0, 1.0 );\n* // returns ~-0.919\n*\n* y = logpdf( 1.0, 3.0, 1.0 );\n* // returns ~-5.419\n*\n* var mylogpdf = logpdf.factory( 4.0, 2.0 );\n* y = mylogpdf( 10.0 );\n* // returns ~-4.269\n*\n* y = mylogpdf( 2.0 );\n* // returns ~-3.689\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport logpdf from './logpdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( logpdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default logpdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport pow from '@stdlib/math-base-special-pow';\nimport ln from '@stdlib/math-base-special-ln';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport PI from '@stdlib/constants-float64-pi';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the natural logarithm of the probability density function (PDF) for a lognormal distribution with location parameter `mu` and scale parameter `sigma`.\n*\n* @param {number} mu - location parameter\n* @param {PositiveNumber} sigma - scale parameter\n* @returns {Function} logPDF\n*\n* @example\n* var logpdf = factory( 4.0, 2.0 );\n* var y = logpdf( 10.0 );\n* // returns ~-4.275\n*\n* y = logpdf( 2.0 );\n* // returns ~-3.672\n*/\nfunction factory( mu, sigma ) {\n\tvar s2;\n\tvar A;\n\tvar B;\n\tif (\n\t\tisnan( mu ) ||\n\t\tisnan( sigma ) ||\n\t\tsigma <= 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\ts2 = pow( sigma, 2.0 );\n\tA = -0.5 * ln( 2.0 * s2 * PI );\n\tB = -1.0 / ( 2.0 * s2 );\n\treturn logpdf;\n\n\t/**\n\t* Evaluates the natural logarithm of the probability density function (PDF) for a lognormal distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {number} evaluated logPDF\n\t*\n\t* @example\n\t* var y = logpdf( 2.5 );\n\t* // returns <number>\n\t*/\n\tfunction logpdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x <= 0.0 ) {\n\t\t\treturn NINF;\n\t\t}\n\t\treturn A - ln( x ) + ( B * pow( ln(x) - mu, 2.0 ) );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate the probability density function (PDF) for a lognormal distribution.\n*\n* @module @stdlib/stats-base-dists-lognormal-pdf\n*\n* @example\n* import pdf from '@stdlib/stats-base-dists-lognormal-pdf';\n*\n* var y = pdf( 2.0, 0.0, 1.0 );\n* // returns ~0.157\n*\n* y = pdf( 1.0, 0.0, 1.0 );\n* // returns ~0.399\n*\n* y = pdf( 1.0, 3.0, 1.0 );\n* // returns ~0.004\n*\n* var mypdf = pdf.factory( 4.0, 2.0 );\n* y = mypdf( 10.0 );\n* // returns ~0.014\n*\n* y = mypdf( 2.0 );\n* // returns ~0.025\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport pdf from './pdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( pdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default pdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport exp from '@stdlib/math-base-special-exp';\nimport pow from '@stdlib/math-base-special-pow';\nimport ln from '@stdlib/math-base-special-ln';\nimport PI from '@stdlib/constants-float64-pi';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the probability density function (PDF) for a lognormal distribution with location parameter `mu` and scale parameter `sigma`.\n*\n* @param {number} mu - location parameter\n* @param {PositiveNumber} sigma - scale parameter\n* @returns {Function} PDF\n*\n* @example\n* var pdf = factory( 4.0, 2.0 );\n* var y = pdf( 10.0 );\n* // returns ~0.014\n*\n* y = pdf( 2.0 );\n* // returns ~0.025\n*/\nfunction factory( mu, sigma ) {\n\tvar s2;\n\tvar A;\n\tvar B;\n\tif (\n\t\tisnan( mu ) ||\n\t\tisnan( sigma ) ||\n\t\tsigma <= 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\ts2 = pow( sigma, 2.0 );\n\tA = 1.0 / ( sqrt( 2.0 * s2 * PI ) );\n\tB = -1.0 / ( 2.0 * s2 );\n\treturn pdf;\n\n\t/**\n\t* Evaluates the probability density function (PDF) for a lognormal distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {number} evaluated PDF\n\t*\n\t* @example\n\t* var y = pdf( 2.5 );\n\t* // returns <number>\n\t*/\n\tfunction pdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x <= 0.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn (1.0/x) * A * exp( B * pow( ln(x) - mu, 2.0 ) );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_48_0/boost/math/special_functions/detail/erf_inv.hpp}. This implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport ln from '@stdlib/math-base-special-ln';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport rationalFcnR1 from './rational_p1q1.js';\nimport rationalFcnR2 from './rational_p2q2.js';\nimport rationalFcnR3 from './rational_p3q3.js';\nimport rationalFcnR4 from './rational_p4q4.js';\nimport rationalFcnR5 from './rational_p5q5.js';\n\n\n// VARIABLES //\n\nvar Y1 = 8.91314744949340820313e-2;\nvar Y2 = 2.249481201171875;\nvar Y3 = 8.07220458984375e-1;\nvar Y4 = 9.3995571136474609375e-1;\nvar Y5 = 9.8362827301025390625e-1;\n\n\n// MAIN //\n\n/**\n* Evaluates the inverse error function.\n*\n* ## Method\n*\n* 1.  For \\\\(|x| \\leq 0.5\\\\), we evaluate the inverse error function using the rational approximation\n*\n*     ```tex\n*     \\operatorname{erf^{-1}}(x) = x(x+10)(\\mathrm{Y} + \\operatorname{R}(x))\n*     ```\n*\n*     where \\\\(Y\\\\) is a constant and \\\\(\\operatorname{R}(x)\\\\) is optimized for a low absolute error compared to \\\\(|Y|\\\\).\n*\n*     <!-- <note> -->\n*\n*     Max error \\\\(2.001849\\mbox{e-}18\\\\). Maximum deviation found (error term at infinite precision) \\\\(8.030\\mbox{e-}21\\\\).\n*\n*     <!-- </note> -->\n*\n* 2.  For \\\\(0.5 > 1-|x| \\geq 0\\\\), we evaluate the inverse error function using the rational approximation\n*\n*     ```tex\n*     \\operatorname{erf^{-1}} = \\frac{\\sqrt{-2 \\cdot \\ln(1-x)}}{\\mathrm{Y} + \\operatorname{R}(1-x)}\n*     ```\n*\n*     where \\\\(Y\\\\) is a constant, and \\\\(\\operatorname{R}(q)\\\\) is optimized for a low absolute error compared to \\\\(Y\\\\).\n*\n*     <!-- <note> -->\n*\n*     Max error \\\\(7.403372\\mbox{e-}17\\\\). Maximum deviation found (error term at infinite precision) \\\\(4.811\\mbox{e-}20\\\\).\n*\n*     <!-- </note> -->\n*\n* 3.  For \\\\(1-|x| < 0.25\\\\), we have a series of rational approximations all of the general form\n*\n*     ```tex\n*     p = \\sqrt{-\\ln(1-x)}\n*     ```\n*\n*     Accordingly, the result is given by\n*\n*     ```tex\n*     \\operatorname{erf^{-1}}(x) = p(\\mathrm{Y} + \\operatorname{R}(p-B))\n*     ```\n*\n*     where \\\\(Y\\\\) is a constant, \\\\(B\\\\) is the lowest value of \\\\(p\\\\) for which the approximation is valid, and \\\\(\\operatorname{R}(x-B)\\\\) is optimized for a low absolute error compared to \\\\(Y\\\\).\n*\n*     <!-- <note> -->\n*\n*     Almost all code will only go through the first or maybe second approximation.  After that we are dealing with very small input values.\n*\n*     -   If \\\\(p < 3\\\\), max error \\\\(1.089051\\mbox{e-}20\\\\).\n*     -   If \\\\(p < 6\\\\), max error \\\\(8.389174\\mbox{e-}21\\\\).\n*     -   If \\\\(p < 18\\\\), max error \\\\(1.481312\\mbox{e-}19\\\\).\n*     -   If \\\\(p < 44\\\\), max error \\\\(5.697761\\mbox{e-}20\\\\).\n*     -   If \\\\(p \\geq 44\\\\), max error \\\\(1.279746\\mbox{e-}20\\\\).\n*\n*     <!-- </note> -->\n*\n*     <!-- <note> -->\n*\n*     The Boost library can accommodate \\\\(80\\\\) and \\\\(128\\\\) bit long doubles. JavaScript only supports a \\\\(64\\\\) bit double (IEEE 754). Accordingly, the smallest \\\\(p\\\\) (in JavaScript at the time of this writing) is \\\\(\\sqrt{-\\ln(\\sim5\\mbox{e-}324)} = 27.284429111150214\\\\).\n*\n*     <!-- </note> -->\n*\n*\n* @param {number} x - input value\n* @returns {number} function value\n*\n* @example\n* var y = erfinv( 0.5 );\n* // returns ~0.4769\n*\n* @example\n* var y = erfinv( 0.8 );\n* // returns ~0.9062\n*\n* @example\n* var y = erfinv( 0.0 );\n* // returns 0.0\n*\n* @example\n* var y = erfinv( -0.0 );\n* // returns -0.0\n*\n* @example\n* var y = erfinv( -1.0 );\n* // returns -Infinity\n*\n* @example\n* var y = erfinv( 1.0 );\n* // returns Infinity\n*\n* @example\n* var y = erfinv( NaN );\n* // returns NaN\n*/\nfunction erfinv( x ) {\n\tvar sign;\n\tvar ax;\n\tvar qs;\n\tvar q;\n\tvar g;\n\tvar r;\n\n\t// Special case: NaN\n\tif ( isnan( x ) ) {\n\t\treturn NaN;\n\t}\n\t// Special case: 1\n\tif ( x === 1.0 ) {\n\t\treturn PINF;\n\t}\n\t// Special case: -1\n\tif ( x === -1.0 ) {\n\t\treturn NINF;\n\t}\n\t// Special case: +-0\n\tif ( x === 0.0 ) {\n\t\treturn x;\n\t}\n\t// Special case: |x| > 1 (range error)\n\tif ( x > 1.0 || x < -1.0 ) {\n\t\treturn NaN;\n\t}\n\t// Argument reduction (reduce to interval [0,1]). If `x` is negative, we can safely negate the value, taking advantage of the error function being an odd function; i.e., `erf(-x) = -erf(x)`.\n\tif ( x < 0.0 ) {\n\t\tsign = -1.0;\n\t\tax = -x;\n\t} else {\n\t\tsign = 1.0;\n\t\tax = x;\n\t}\n\tq = 1.0 - ax;\n\n\t// |x| <= 0.5\n\tif ( ax <= 0.5 ) {\n\t\tg = ax * ( ax + 10.0 );\n\t\tr = rationalFcnR1( ax );\n\t\treturn sign * ( (g*Y1) + (g*r) );\n\t}\n\t// 1-|x| >= 0.25\n\tif ( q >= 0.25 ) {\n\t\tg = sqrt( -2.0 * ln(q) );\n\t\tq -= 0.25;\n\t\tr = rationalFcnR2( q );\n\t\treturn sign * ( g / (Y2+r) );\n\t}\n\tq = sqrt( -ln( q ) );\n\n\t// q < 3\n\tif ( q < 3.0 ) {\n\t\tqs = q - 1.125;\n\t\tr = rationalFcnR3( qs );\n\t\treturn sign * ( (Y3*q) + (r*q) );\n\t}\n\t// q < 6\n\tif ( q < 6.0 ) {\n\t\tqs = q - 3.0;\n\t\tr = rationalFcnR4( qs );\n\t\treturn sign * ( (Y4*q) + (r*q) );\n\t}\n\t// q < 18\n\tqs = q - 6.0;\n\tr = rationalFcnR5( qs );\n\treturn sign * ( (Y5*q) + (r*q) );\n}\n\n\n// EXPORTS //\n\nexport default erfinv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn -0.0005087819496582806;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = -0.0005087819496582806 + (x * (-0.008368748197417368 + (x * (0.03348066254097446 + (x * (-0.012692614766297404 + (x * (-0.03656379714117627 + (x * (0.02198786811111689 + (x * (0.008226878746769157 + (x * (-0.005387729650712429 + (x * (0.0 + (x * 0.0))))))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (-0.9700050433032906 + (x * (-1.5657455823417585 + (x * (1.5622155839842302 + (x * (0.662328840472003 + (x * (-0.7122890234154284 + (x * (-0.05273963823400997 + (x * (0.07952836873415717 + (x * (-0.0023339375937419 + (x * 0.0008862163904564247))))))))))))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = 0.0 + (x * (0.0 + (x * (-0.005387729650712429 + (x * (0.008226878746769157 + (x * (0.02198786811111689 + (x * (-0.03656379714117627 + (x * (-0.012692614766297404 + (x * (0.03348066254097446 + (x * (-0.008368748197417368 + (x * -0.0005087819496582806))))))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 0.0008862163904564247 + (x * (-0.0023339375937419 + (x * (0.07952836873415717 + (x * (-0.05273963823400997 + (x * (-0.7122890234154284 + (x * (0.662328840472003 + (x * (1.5622155839842302 + (x * (-1.5657455823417585 + (x * (-0.9700050433032906 + (x * 1.0))))))))))))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn -0.20243350835593876;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = -0.20243350835593876 + (x * (0.10526468069939171 + (x * (8.3705032834312 + (x * (17.644729840837403 + (x * (-18.851064805871424 + (x * (-44.6382324441787 + (x * (17.445385985570866 + (x * (21.12946554483405 + (x * -3.6719225470772936))))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (6.242641248542475 + (x * (3.971343795334387 + (x * (-28.66081804998 + (x * (-20.14326346804852 + (x * (48.560921310873994 + (x * (10.826866735546016 + (x * (-22.643693341313973 + (x * 1.7211476576120028))))))))))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = -3.6719225470772936 + (x * (21.12946554483405 + (x * (17.445385985570866 + (x * (-44.6382324441787 + (x * (-18.851064805871424 + (x * (17.644729840837403 + (x * (8.3705032834312 + (x * (0.10526468069939171 + (x * -0.20243350835593876))))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.7211476576120028 + (x * (-22.643693341313973 + (x * (10.826866735546016 + (x * (48.560921310873994 + (x * (-20.14326346804852 + (x * (-28.66081804998 + (x * (3.971343795334387 + (x * (6.242641248542475 + (x * 1.0))))))))))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn -0.1311027816799519;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = -0.1311027816799519 + (x * (-0.16379404719331705 + (x * (0.11703015634199525 + (x * (0.38707973897260434 + (x * (0.3377855389120359 + (x * (0.14286953440815717 + (x * (0.029015791000532906 + (x * (0.0021455899538880526 + (x * (-6.794655751811263e-7 + (x * (2.8522533178221704e-8 + (x * -6.81149956853777e-10))))))))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (3.4662540724256723 + (x * (5.381683457070069 + (x * (4.778465929458438 + (x * (2.5930192162362027 + (x * (0.848854343457902 + (x * (0.15226433829533179 + (x * (0.011059242293464892 + (x * (0.0 + (x * (0.0 + (x * 0.0))))))))))))))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = -6.81149956853777e-10 + (x * (2.8522533178221704e-8 + (x * (-6.794655751811263e-7 + (x * (0.0021455899538880526 + (x * (0.029015791000532906 + (x * (0.14286953440815717 + (x * (0.3377855389120359 + (x * (0.38707973897260434 + (x * (0.11703015634199525 + (x * (-0.16379404719331705 + (x * -0.1311027816799519))))))))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 0.0 + (x * (0.0 + (x * (0.0 + (x * (0.011059242293464892 + (x * (0.15226433829533179 + (x * (0.848854343457902 + (x * (2.5930192162362027 + (x * (4.778465929458438 + (x * (5.381683457070069 + (x * (3.4662540724256723 + (x * 1.0))))))))))))))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn -0.0350353787183178;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = -0.0350353787183178 + (x * (-0.0022242652921344794 + (x * (0.018557330651423107 + (x * (0.009508047013259196 + (x * (0.0018712349281955923 + (x * (0.00015754461742496055 + (x * (0.00000460469890584318 + (x * (-2.304047769118826e-10 + (x * 2.6633922742578204e-12))))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (1.3653349817554064 + (x * (0.7620591645536234 + (x * (0.22009110576413124 + (x * (0.03415891436709477 + (x * (0.00263861676657016 + (x * (0.00007646752923027944 + (x * (0.0 + (x * 0.0))))))))))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = 2.6633922742578204e-12 + (x * (-2.304047769118826e-10 + (x * (0.00000460469890584318 + (x * (0.00015754461742496055 + (x * (0.0018712349281955923 + (x * (0.009508047013259196 + (x * (0.018557330651423107 + (x * (-0.0022242652921344794 + (x * -0.0350353787183178))))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 0.0 + (x * (0.0 + (x * (0.00007646752923027944 + (x * (0.00263861676657016 + (x * (0.03415891436709477 + (x * (0.22009110576413124 + (x * (0.7620591645536234 + (x * (1.3653349817554064 + (x * 1.0))))))))))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn -0.016743100507663373;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = -0.016743100507663373 + (x * (-0.0011295143874558028 + (x * (0.001056288621524929 + (x * (0.00020938631748758808 + (x * (0.000014962478375834237 + (x * (4.4969678992770644e-7 + (x * (4.625961635228786e-9 + (x * (-2.811287356288318e-14 + (x * 9.905570997331033e-17))))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (0.5914293448864175 + (x * (0.1381518657490833 + (x * (0.016074608709367652 + (x * (0.0009640118070051656 + (x * (0.000027533547476472603 + (x * (2.82243172016108e-7 + (x * (0.0 + (x * 0.0))))))))))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = 9.905570997331033e-17 + (x * (-2.811287356288318e-14 + (x * (4.625961635228786e-9 + (x * (4.4969678992770644e-7 + (x * (0.000014962478375834237 + (x * (0.00020938631748758808 + (x * (0.001056288621524929 + (x * (-0.0011295143874558028 + (x * -0.016743100507663373))))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 0.0 + (x * (0.0 + (x * (2.82243172016108e-7 + (x * (0.000027533547476472603 + (x * (0.0009640118070051656 + (x * (0.016074608709367652 + (x * (0.1381518657490833 + (x * (0.5914293448864175 + (x * 1.0))))))))))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport erfinv from '@stdlib/math-base-special-erfinv';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport sqrt from '@stdlib/math-base-special-sqrt';\n\n\n// MAIN //\n\n/**\n* Evaluates the quantile function for a normal distribution with mean `mu` and standard deviation `sigma` at a probability `p`.\n*\n* @param {Probability} p - input value\n* @param {number} mu - mean\n* @param {NonNegativeNumber} sigma - standard deviation\n* @returns {number} evaluated quantile function\n*\n* @example\n* var y = quantile( 0.8, 0.0, 1.0 );\n* // returns ~0.842\n*\n* @example\n* var y = quantile( 0.5, 4.0, 2.0 );\n* // returns 4.0\n*\n* @example\n* var y = quantile( 1.1, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( -0.2, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( NaN, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.0, 0.0, NaN );\n* // returns NaN\n*\n* @example\n* // Negative standard deviation:\n* var y = quantile( 0.5, 0.0, -1.0 );\n* // returns NaN\n*/\nfunction quantile( p, mu, sigma ) {\n\tvar A;\n\tvar B;\n\n\tif (\n\t\tisnan( mu ) ||\n\t\tisnan( sigma ) ||\n\t\tisnan( p ) ||\n\t\tsigma < 0.0 ||\n\t\tp < 0.0 ||\n\t\tp > 1.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( sigma === 0.0 ) {\n\t\treturn mu;\n\t}\n\tA = mu;\n\tB = sigma * sqrt( 2.0 );\n\treturn A + (B * erfinv( (2.0*p) - 1.0 ));\n}\n\n\n// EXPORTS //\n\nexport default quantile;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport qnormal from '@stdlib/stats-base-dists-normal-quantile';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport exp from '@stdlib/math-base-special-exp';\n\n\n// MAIN //\n\n/**\n* Evaluates the quantile function for a lognormal distribution with location parameter `mu` and scale parameter `sigma` at a probability `p`.\n*\n* @param {Probability} p - input value\n* @param {number} mu - location parameter\n* @param {PositiveNumber} sigma - scale parameter\n* @returns {number} evaluated quantile function\n*\n* @example\n* var y = quantile( 0.8, 0.0, 1.0 );\n* // returns ~2.32\n*\n* @example\n* var y = quantile( 0.5, 4.0, 2.0 );\n* // returns ~54.598\n*\n* @example\n* var y = quantile( 1.1, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( -0.2, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( NaN, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.0, 0.0, NaN );\n* // returns NaN\n*\n* @example\n* // Negative scale parameter:\n* var y = quantile( 0.5, 0.0, -1.0 );\n* // returns NaN\n*/\nfunction quantile( p, mu, sigma ) {\n\tif (\n\t\tisnan( mu ) ||\n\t\tisnan( sigma ) ||\n\t\tisnan( p ) ||\n\t\tsigma <= 0.0 ||\n\t\tp < 0.0 ||\n\t\tp > 1.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn exp( mu + (sigma * qnormal( p, 0.0, 1.0 )) );\n}\n\n\n// EXPORTS //\n\nexport default quantile;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nimport defineProperty from '@stdlib/utils-define-property';\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport setReadOnlyAccessor from '@stdlib/utils-define-nonenumerable-read-only-accessor';\nimport { isPrimitive as isPositive } from '@stdlib/assert-is-positive-number';\nimport { isPrimitive as isNumber } from '@stdlib/assert-is-number';\nimport isnan from '@stdlib/assert-is-nan';\nimport entropy from '@stdlib/stats-base-dists-lognormal-entropy';\nimport kurtosis from '@stdlib/stats-base-dists-lognormal-kurtosis';\nimport mean from '@stdlib/stats-base-dists-lognormal-mean';\nimport median from '@stdlib/stats-base-dists-lognormal-median';\nimport mode from '@stdlib/stats-base-dists-lognormal-mode';\nimport skewness from '@stdlib/stats-base-dists-lognormal-skewness';\nimport stdev from '@stdlib/stats-base-dists-lognormal-stdev';\nimport variance from '@stdlib/stats-base-dists-lognormal-variance';\nimport cdf from '@stdlib/stats-base-dists-lognormal-cdf';\nimport logpdf from '@stdlib/stats-base-dists-lognormal-logpdf';\nimport pdf from '@stdlib/stats-base-dists-lognormal-pdf';\nimport quantile from '@stdlib/stats-base-dists-lognormal-quantile';\nimport format from '@stdlib/string-format';\n\n\n// FUNCTIONS //\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {Probability} evaluated CDF\n*/\nfunction lognormalCDF( x ) {\n\treturn cdf( x, this.mu, this.sigma );\n}\n\n/**\n* Evaluates the natural logarithm of the probability density function (PDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n*/\nfunction lognormalLogPDF( x ) {\n\treturn logpdf( x, this.mu, this.sigma );\n}\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n*/\nfunction lognormalPDF( x ) {\n\treturn pdf( x, this.mu, this.sigma );\n}\n\n/**\n* Evaluates the quantile function.\n*\n* @private\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n*/\nfunction lognormalQuantile( p ) {\n\treturn quantile( p, this.mu, this.sigma );\n}\n\n\n// MAIN //\n\n/**\n* Lognormal distribution constructor.\n*\n* @constructor\n* @param {number} [mu=0.0] - location parameter\n* @param {PositiveNumber} [sigma=1.0] - scale parameter\n* @throws {TypeError} `sigma` must be a positive number\n* @returns {LogNormal} distribution instance\n*\n* @example\n* var lognormal = new LogNormal( 1.0, 1.0 );\n*\n* var y = lognormal.cdf( 1.5 );\n* // returns ~0.276\n*\n* var v = lognormal.mean;\n* // returns ~4.482\n*/\nfunction LogNormal() {\n\tvar sigma;\n\tvar mu;\n\tif ( !(this instanceof LogNormal) ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn new LogNormal();\n\t\t}\n\t\treturn new LogNormal( arguments[ 0 ], arguments[ 1 ] );\n\t}\n\tif ( arguments.length ) {\n\t\tmu = arguments[ 0 ];\n\t\tsigma = arguments[ 1 ];\n\t\tif ( !isNumber( mu ) || isnan( mu ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Location parameter must be a number. Value: `%s`.', mu ) );\n\t\t}\n\t\tif ( !isPositive( sigma ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Scale parameter must be a positive number. Value: `%s`.', sigma ) );\n\t\t}\n\t} else {\n\t\tmu = 0.0;\n\t\tsigma = 1.0;\n\t}\n\tdefineProperty( this, 'mu', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn mu;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isNumber( value ) || isnan( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid assignment. Must be a number. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\tmu = value;\n\t\t}\n\t});\n\tdefineProperty( this, 'sigma', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn sigma;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isPositive( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid assignment. Must be a positive number. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\tsigma = value;\n\t\t}\n\t});\n\treturn this;\n}\n\n/**\n* Lognormal distribution differential entropy.\n*\n* @name entropy\n* @memberof LogNormal.prototype\n* @type {number}\n* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}\n*\n* @example\n* var lognormal = new LogNormal( 4.0, 12.0 );\n*\n* var v = lognormal.entropy;\n* // returns ~7.904\n*/\nsetReadOnlyAccessor( LogNormal.prototype, 'entropy', function get() {\n\treturn entropy( this.mu, this.sigma );\n});\n\n/**\n* Lognormal distribution excess kurtosis.\n*\n* @name kurtosis\n* @memberof LogNormal.prototype\n* @type {number}\n* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}\n*\n* @example\n* var lognormal = new LogNormal( 4.0, 12.0 );\n*\n* var v = lognormal.kurtosis;\n* // returns 1.4243659274306933e+250\n*/\nsetReadOnlyAccessor( LogNormal.prototype, 'kurtosis', function get() {\n\treturn kurtosis( this.mu, this.sigma );\n});\n\n/**\n* Lognormal distribution expected value.\n*\n* @name mean\n* @memberof LogNormal.prototype\n* @type {number}\n* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}\n*\n* @example\n* var lognormal = new LogNormal( 4.0, 12.0 );\n*\n* var v = lognormal.mean;\n* // returns 1.0148003881138887e+33\n*/\nsetReadOnlyAccessor( LogNormal.prototype, 'mean', function get() {\n\treturn mean( this.mu, this.sigma );\n});\n\n/**\n* Lognormal distribution median.\n*\n* @name median\n* @memberof LogNormal.prototype\n* @type {number}\n* @see [median]{@link https://en.wikipedia.org/wiki/Median}\n*\n* @example\n* var lognormal = new LogNormal( 4.0, 12.0 );\n*\n* var v = lognormal.median;\n* // returns ~54.598\n*/\nsetReadOnlyAccessor( LogNormal.prototype, 'median', function get() {\n\treturn median( this.mu, this.sigma );\n});\n\n/**\n* Lognormal distribution mode.\n*\n* @name mode\n* @memberof LogNormal.prototype\n* @type {number}\n* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}\n*\n* @example\n* var lognormal = new LogNormal( 4.0, 12.0 );\n*\n* var v = lognormal.mode;\n* // returns 1.580420060273613e-61\n*/\nsetReadOnlyAccessor( LogNormal.prototype, 'mode', function get() {\n\treturn mode( this.mu, this.sigma );\n});\n\n/**\n* Lognormal distribution skewness.\n*\n* @name skewness\n* @memberof LogNormal.prototype\n* @type {number}\n* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}\n*\n* @example\n* var lognormal = new LogNormal( 4.0, 12.0 );\n*\n* var v = lognormal.skewness;\n* // returns 6.421080152185613e+93\n*/\nsetReadOnlyAccessor( LogNormal.prototype, 'skewness', function get() {\n\treturn skewness( this.mu, this.sigma );\n});\n\n/**\n* Lognormal distribution standard deviation.\n*\n* @name stdev\n* @memberof LogNormal.prototype\n* @type {NonNegativeNumber}\n* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}\n*\n* @example\n* var lognormal = new LogNormal( 4.0, 12.0 );\n*\n* var v = lognormal.stdev;\n* // returns 1.886180808490652e+64\n*/\nsetReadOnlyAccessor( LogNormal.prototype, 'stdev', function get() {\n\treturn stdev( this.mu, this.sigma );\n});\n\n/**\n* Lognormal distribution variance.\n*\n* @name variance\n* @memberof LogNormal.prototype\n* @type {NonNegativeNumber}\n* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}\n*\n* @example\n* var lognormal = new LogNormal( 4.0, 12.0 );\n*\n* var v = lognormal.variance;\n* // returns 3.55767804231845e+128\n*/\nsetReadOnlyAccessor( LogNormal.prototype, 'variance', function get() {\n\treturn variance( this.mu, this.sigma );\n});\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @name cdf\n* @memberof LogNormal.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var lognormal = new LogNormal( 2.0, 4.0 );\n*\n* var v = lognormal.cdf( 0.5 );\n* // returns ~0.25\n*/\nsetReadOnly( LogNormal.prototype, 'cdf', lognormalCDF );\n\n/**\n* Evaluates the natural logarithm of the probability density function (PDF).\n*\n* @name logpdf\n* @memberof LogNormal.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var lognormal = new LogNormal( 2.0, 4.0 );\n*\n* var v = lognormal.logpdf( 0.8 );\n* // returns ~-2.237\n*/\nsetReadOnly( LogNormal.prototype, 'logpdf', lognormalLogPDF );\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @name pdf\n* @memberof LogNormal.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var lognormal = new LogNormal( 2.0, 4.0 );\n*\n* var v = lognormal.pdf( 0.8 );\n* // returns ~0.107\n*/\nsetReadOnly( LogNormal.prototype, 'pdf', lognormalPDF );\n\n/**\n* Evaluates the quantile function.\n*\n* @name quantile\n* @memberof LogNormal.prototype\n* @type {Function}\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}\n*\n* @example\n* var lognormal = new LogNormal( 2.0, 4.0 );\n*\n* var v = lognormal.quantile( 0.5 );\n* // returns ~7.389\n*/\nsetReadOnly( LogNormal.prototype, 'quantile', lognormalQuantile );\n\n\n// EXPORTS //\n\nexport default LogNormal;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Normal distribution quantile function.\n*\n* @module @stdlib/stats-base-dists-normal-quantile\n*\n* @example\n* import quantile from '@stdlib/stats-base-dists-normal-quantile';\n*\n* var y = quantile( 0.8, 0.0, 1.0 );\n* // returns ~0.842\n*\n* var myQuantile = quantile.factory( 10.0, 2.0 );\n* y = myQuantile( 0.5 );\n* // returns 10.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport quantile from './quantile.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( quantile, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default quantile;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport { factory as degenerate } from '@stdlib/stats-base-dists-degenerate-quantile';\nimport erfinv from '@stdlib/math-base-special-erfinv';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport sqrt from '@stdlib/math-base-special-sqrt';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the quantile function of a normal distribution.\n*\n* @param {number} mu - mean\n* @param {NonNegativeNumber} sigma - standard deviation\n* @returns {Function} quantile function\n*\n* @example\n* var quantile = factory( 10.0, 2.0 );\n* var y = quantile( 0.5 );\n* // returns 10.0\n*\n* y = quantile( 0.8 );\n* // returns ~11.683\n*/\nfunction factory( mu, sigma ) {\n\tvar A;\n\tvar B;\n\tif ( isnan( mu ) || isnan( sigma ) || sigma < 0.0 ) {\n\t\treturn constantFunction( NaN );\n\t}\n\tif ( sigma === 0.0 ) {\n\t\tdegenerate( mu );\n\t}\n\tA = mu;\n\tB = sigma * sqrt( 2.0 );\n\treturn quantile;\n\n\t/**\n\t* Evaluates the quantile function for a normal distribution.\n\t*\n\t* @private\n\t* @param {Probability} p - input value\n\t* @returns {number} evaluated quantile function\n\t*\n\t* @example\n\t* var y = quantile( 0.3 );\n\t* // returns <number>\n\t*/\n\tfunction quantile( p ) {\n\t\tif ( isnan( p ) || p < 0.0 || p > 1.0 ) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn A + ( B * erfinv( (2.0*p) - 1.0 ) );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate the quantile function for a lognormal distribution.\n*\n* @module @stdlib/stats-base-dists-lognormal-quantile\n*\n* @example\n* import quantile from '@stdlib/stats-base-dists-lognormal-quantile';\n*\n* var y = quantile( 0.8, 0.0, 1.0 );\n* // returns ~2.32\n*\n* y = quantile( 0.5, 4.0, 2.0 );\n* // returns ~54.598\n*\n* var myquantile = quantile.factory( 4.0, 2.0 );\n*\n* y = myquantile( 0.2 );\n* // returns ~10.143\n*\n* y = myquantile( 0.8 );\n* // returns ~293.901\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport quantile from './quantile.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( quantile, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default quantile;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport qnormal from '@stdlib/stats-base-dists-normal-quantile';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport exp from '@stdlib/math-base-special-exp';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the quantile function for a lognormal distribution with location parameter `mu` and scale parameter `sigma`.\n*\n* @param {number} mu - location parameter\n* @param {PositiveNumber} sigma - scale parameter\n* @returns {Function} quantile function\n*\n* @example\n* var quantile = factory( 4.0, 2.0 );\n* var y = quantile( 0.5 );\n* // returns ~54.598\n*\n* y = quantile( 0.8 );\n* // returns ~293.901\n*/\nfunction factory( mu, sigma ) {\n\tif (\n\t\tisnan( mu ) ||\n\t\tisnan( sigma ) ||\n\t\tsigma <= 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn quantile;\n\n\t/**\n\t* Evaluates the quantile function for a lognormal distribution.\n\t*\n\t* @private\n\t* @param {Probability} p - input value\n\t* @returns {number} evaluated quantile function\n\t*\n\t* @example\n\t* var y = quantile( 0.3 );\n\t* // returns <number>\n\t*/\n\tfunction quantile( p ) {\n\t\tif ( isnan( p ) || p < 0.0 || p > 1.0 ) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn exp( mu + (sigma * qnormal( p, 0.0, 1.0 )) );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace lognormal\n*/\nvar lognormal = {};\n\n/**\n* @name cdf\n* @memberof lognormal\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/lognormal/cdf}\n*/\nimport cdf from '@stdlib/stats-base-dists-lognormal-cdf';\nsetReadOnly( lognormal, 'cdf', cdf );\n\n/**\n* @name LogNormal\n* @memberof lognormal\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/lognormal/ctor}\n*/\nimport LogNormal from '@stdlib/stats-base-dists-lognormal-ctor';\nsetReadOnly( lognormal, 'LogNormal', LogNormal );\n\n/**\n* @name entropy\n* @memberof lognormal\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/lognormal/entropy}\n*/\nimport entropy from '@stdlib/stats-base-dists-lognormal-entropy';\nsetReadOnly( lognormal, 'entropy', entropy );\n\n/**\n* @name kurtosis\n* @memberof lognormal\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/lognormal/kurtosis}\n*/\nimport kurtosis from '@stdlib/stats-base-dists-lognormal-kurtosis';\nsetReadOnly( lognormal, 'kurtosis', kurtosis );\n\n/**\n* @name logpdf\n* @memberof lognormal\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/lognormal/logpdf}\n*/\nimport logpdf from '@stdlib/stats-base-dists-lognormal-logpdf';\nsetReadOnly( lognormal, 'logpdf', logpdf );\n\n/**\n* @name mean\n* @memberof lognormal\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/lognormal/mean}\n*/\nimport mean from '@stdlib/stats-base-dists-lognormal-mean';\nsetReadOnly( lognormal, 'mean', mean );\n\n/**\n* @name median\n* @memberof lognormal\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/lognormal/median}\n*/\nimport median from '@stdlib/stats-base-dists-lognormal-median';\nsetReadOnly( lognormal, 'median', median );\n\n/**\n* @name mode\n* @memberof lognormal\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/lognormal/mode}\n*/\nimport mode from '@stdlib/stats-base-dists-lognormal-mode';\nsetReadOnly( lognormal, 'mode', mode );\n\n/**\n* @name pdf\n* @memberof lognormal\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/lognormal/pdf}\n*/\nimport pdf from '@stdlib/stats-base-dists-lognormal-pdf';\nsetReadOnly( lognormal, 'pdf', pdf );\n\n/**\n* @name quantile\n* @memberof lognormal\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/lognormal/quantile}\n*/\nimport quantile from '@stdlib/stats-base-dists-lognormal-quantile';\nsetReadOnly( lognormal, 'quantile', quantile );\n\n/**\n* @name skewness\n* @memberof lognormal\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/lognormal/skewness}\n*/\nimport skewness from '@stdlib/stats-base-dists-lognormal-skewness';\nsetReadOnly( lognormal, 'skewness', skewness );\n\n/**\n* @name stdev\n* @memberof lognormal\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/lognormal/stdev}\n*/\nimport stdev from '@stdlib/stats-base-dists-lognormal-stdev';\nsetReadOnly( lognormal, 'stdev', stdev );\n\n/**\n* @name variance\n* @memberof lognormal\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/lognormal/variance}\n*/\nimport variance from '@stdlib/stats-base-dists-lognormal-variance';\nsetReadOnly( lognormal, 'variance', variance );\n\n\n// EXPORTS //\n\nexport default lognormal;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport cdf from '@stdlib/stats-base-dists-negative-binomial-cdf';\n\n\n// VARIABLES //\n\nvar methods;\n\n\n// FUNCTIONS //\n\n/**\n* Performs a search to the left.\n*\n* @param {NonNegativeInteger} x - starting guess\n* @param {Probability} k - probability\n* @param {PositiveNumber} r - number of failures until experiment is stopped\n* @param {Probability} p - success probability\n* @returns {NonNegativeInteger} `k` quantile of the specified distribution\n*/\nfunction searchLeft( x, k, r, p ) {\n\twhile ( true ) {\n\t\tif ( x === 0 || cdf( x - 1.0, r, p ) < k ) {\n\t\t\treturn x;\n\t\t}\n\t\tx -= 1;\n\t}\n}\n\n/**\n* Performs a search to the right.\n*\n* @param {NonNegativeInteger} x - starting guess\n* @param {Probability} k - probability\n* @param {PositiveNumber} r - number of failures until experiment is stopped\n* @param {Probability} p - success probability\n* @returns {NonNegativeInteger} `k` quantile of the specified distribution\n*/\nfunction searchRight( x, k, r, p ) {\n\twhile ( true ) {\n\t\tx += 1;\n\t\tif ( cdf( x, r, p ) >= k ) {\n\t\t\treturn x;\n\t\t}\n\t}\n}\n\n\n// MAIN //\n\nmethods = {\n\t'left': searchLeft,\n\t'right': searchRight\n};\n\n\n// EXPORTS //\n\nexport default methods;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport betainc from '@stdlib/math-base-special-betainc';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport floor from '@stdlib/math-base-special-floor';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Evaluates the cumulative distribution function (CDF) for a negative binomial distribution with number of successes until experiment is stopped `r` and success probability `p` at a value `x`.\n*\n* @param {number} x - input value\n* @param {PositiveNumber} r - number of successes until experiment is stopped\n* @param {Probability} p - success probability\n* @returns {Probability} evaluated CDF\n*\n* @example\n* var y = cdf( 5.0, 20.0, 0.8 );\n* // returns ~0.617\n*\n* @example\n* var y = cdf( 21.0, 20.0, 0.5 );\n* // returns ~0.622\n*\n* @example\n* var y = cdf( 5.0, 10.0, 0.4 );\n* // returns ~0.034\n*\n* @example\n* var y = cdf( 0.0, 10.0, 0.9 );\n* // returns ~0.349\n*\n* @example\n* var y = cdf( 21.0, 15.5, 0.5 );\n* // returns ~0.859\n*\n* @example\n* var y = cdf( 5.0, 7.4, 0.4 );\n* // returns ~0.131\n*\n* @example\n* var y = cdf( 2.0, 0.0, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2.0, -2.0, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = cdf( NaN, 20.0, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, NaN, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, 20.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2.0, 20, -1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2.0, 20, 1.5 );\n* // returns NaN\n*/\nfunction cdf( x, r, p ) {\n\tvar xint;\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( r ) ||\n\t\tisnan( p ) ||\n\t\tr <= 0.0 ||\n\t\tp < 0.0 ||\n\t\tp > 1.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x < 0.0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( x === PINF ) {\n\t\treturn 1.0;\n\t}\n\t// Ensure left-continuity:\n\txint = floor( x + 1e-7 );\n\treturn betainc( p, r, xint + 1.0 );\n}\n\n\n// EXPORTS //\n\nexport default cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns the excess kurtosis of a negative binomial distribution.\n*\n* @param {PositiveNumber} r - number of failures until experiment is stopped\n* @param {Probability} p - success probability\n* @returns {NonNegativeNumber} excess kurtosis\n*\n* @example\n* var v = kurtosis( 100, 0.2 );\n* // returns ~0.061\n*\n* @example\n* var v = kurtosis( 20, 0.5 );\n* // returns ~0.325\n*\n* @example\n* var v = kurtosis( 10.3, 0.8 );\n* // returns ~0.893\n*\n* @example\n* var v = kurtosis( -2, 0.5 );\n* // returns NaN\n*\n* @example\n* var v = kurtosis( 20, 1.1 );\n* // returns NaN\n*\n* @example\n* var v = kurtosis( 20, NaN );\n* // returns NaN\n*\n* @example\n* var v = kurtosis( NaN, 0.5 );\n* // returns NaN\n*/\nfunction kurtosis( r, p ) {\n\tif (\n\t\tisnan( r ) ||\n\t\tisnan( p ) ||\n\t\tr <= 0.0 ||\n\t\tp < 0.0 ||\n\t\tp > 1.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn ( 6.0/r ) + ( ( p*p ) / ( ( 1.0-p ) * r ) );\n}\n\n\n// EXPORTS //\n\nexport default kurtosis;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns the expected value of a negative binomial distribution.\n*\n* @param {PositiveNumber} r - number of failures until experiment is stopped\n* @param {Probability} p - success probability\n* @returns {NonNegativeNumber} expected value\n*\n* @example\n* var v = mean( 100, 0.2 );\n* // returns 400.0\n*\n* @example\n* var v = mean( 20, 0.5 );\n* // returns 20.0\n*\n* @example\n* var v = mean( 10.3, 0.8 );\n* // returns ~2.575\n*\n* @example\n* var v = mean( -2, 0.5 );\n* // returns NaN\n*\n* @example\n* var v = mean( 20, 1.1 );\n* // returns NaN\n*\n* @example\n* var v = mean( 20, NaN );\n* // returns NaN\n*\n* @example\n* var v = mean( NaN, 0.5 );\n* // returns NaN\n*/\nfunction mean( r, p ) {\n\tif (\n\t\tisnan( r ) ||\n\t\tisnan( p )\n\t) {\n\t\treturn NaN;\n\t}\n\tif (\n\t\tr <= 0.0 ||\n\t\tp < 0.0 ||\n\t\tp > 1.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn ( (1.0-p) * r ) / p;\n}\n\n\n// EXPORTS //\n\nexport default mean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport floor from '@stdlib/math-base-special-floor';\n\n\n// MAIN //\n\n/**\n* Returns the mode of a negative binomial distribution.\n*\n* @param {PositiveNumber} r - number of failures until experiment is stopped\n* @param {Probability} p - success probability\n* @returns {NonNegativeInteger} mode\n*\n* @example\n* var v = mode( 100, 0.2 );\n* // returns 396\n*\n* @example\n* var v = mode( 20, 0.5 );\n* // returns 19\n*\n* @example\n* var v = mode( 10.3, 0.8 );\n* // returns 2\n*\n* @example\n* var v = mode( -2, 0.5 );\n* // returns NaN\n*\n* @example\n* var v = mode( 20, 1.1 );\n* // returns NaN\n*\n* @example\n* var v = mode( 20, NaN );\n* // returns NaN\n*\n* @example\n* var v = mode( NaN, 0.5 );\n* // returns NaN\n*/\nfunction mode( r, p ) {\n\tif (\n\t\tisnan( r ) ||\n\t\tisnan( p ) ||\n\t\tr <= 0.0 ||\n\t\tp < 0.0 ||\n\t\tp > 1.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn floor( ( 1.0-p ) * ( r-1.0 ) / p );\n}\n\n\n// EXPORTS //\n\nexport default mode;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport sqrt from '@stdlib/math-base-special-sqrt';\n\n\n// MAIN //\n\n/**\n* Returns the skewness of a negative binomial distribution.\n*\n* @param {PositiveNumber} r - number of failures until experiment is stopped\n* @param {Probability} p - success probability\n* @returns {NonNegativeNumber} skewness\n*\n* @example\n* var v = skewness( 100, 0.2 );\n* // returns ~0.201\n*\n* @example\n* var v = skewness( 20, 0.5 );\n* // returns ~0.474\n*\n* @example\n* var v = skewness( 10.3, 0.8 );\n* // returns ~0.836\n*\n* @example\n* var v = skewness( -2, 0.5 );\n* // returns NaN\n*\n* @example\n* var v = skewness( 20, 1.1 );\n* // returns NaN\n*\n* @example\n* var v = skewness( 20, NaN );\n* // returns NaN\n*\n* @example\n* var v = skewness( NaN, 0.5 );\n* // returns NaN\n*/\nfunction skewness( r, p ) {\n\tif (\n\t\tisnan( r ) ||\n\t\tisnan( p ) ||\n\t\tr <= 0.0 ||\n\t\tp < 0.0 ||\n\t\tp > 1.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn ( 2.0-p ) / sqrt( ( 1.0-p ) * r );\n}\n\n\n// EXPORTS //\n\nexport default skewness;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport sqrt from '@stdlib/math-base-special-sqrt';\n\n\n// MAIN //\n\n/**\n* Returns the standard deviation of a negative binomial distribution.\n*\n* @param {PositiveNumber} r - number of failures until experiment is stopped\n* @param {Probability} p - success probability\n* @returns {PositiveNumber} standard deviation\n*\n* @example\n* var v = stdev( 100, 0.2 );\n* // returns ~44.721\n*\n* @example\n* var v = stdev( 20, 0.5 );\n* // returns ~6.325\n*\n* @example\n* var v = stdev( 10.3, 0.8 );\n* // returns ~1.794\n*\n* @example\n* var v = stdev( -2, 0.5 );\n* // returns NaN\n*\n* @example\n* var v = stdev( 20, 1.1 );\n* // returns NaN\n*\n* @example\n* var v = stdev( 20, NaN );\n* // returns NaN\n*\n* @example\n* var v = stdev( NaN, 0.5 );\n* // returns NaN\n*/\nfunction stdev( r, p ) {\n\tif (\n\t\tisnan( r ) ||\n\t\tisnan( p ) ||\n\t\tr <= 0.0 ||\n\t\tp < 0.0 ||\n\t\tp > 1.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn sqrt( ( 1.0-p ) * r ) / p;\n}\n\n\n// EXPORTS //\n\nexport default stdev;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns the variance of a negative binomial distribution.\n*\n* @param {PositiveNumber} r - number of failures until experiment is stopped\n* @param {Probability} p - success probability\n* @returns {PositiveNumber} variance\n*\n* @example\n* var v = variance( 100, 0.2 );\n* // returns 2000.0\n*\n* @example\n* var v = variance( 20, 0.5 );\n* // returns 40.0\n*\n* @example\n* var v = variance( 10.3, 0.8 );\n* // returns ~3.219\n*\n* @example\n* var v = variance( -2, 0.5 );\n* // returns NaN\n*\n* @example\n* var v = variance( 20, 1.1 );\n* // returns NaN\n*\n* @example\n* var v = variance( 20, NaN );\n* // returns NaN\n*\n* @example\n* var v = variance( NaN, 0.5 );\n* // returns NaN\n*/\nfunction variance( r, p ) {\n\tif (\n\t\tisnan( r ) ||\n\t\tisnan( p ) ||\n\t\tr <= 0.0 ||\n\t\tp < 0.0 ||\n\t\tp > 1.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn ( ( 1.0-p ) * r ) / ( p*p );\n}\n\n\n// EXPORTS //\n\nexport default variance;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport ibetaPowerTerms from './ibeta_power_terms.js';\n\n\n// MAIN //\n\n/**\n* Computes the partial derivative with respect to x of the incomplete beta function.\n*\n* @private\n* @param {Probability} x - input value (0 < x <= 1)\n* @param {PositiveNumber} a - first parameter\n* @param {PositiveNumber} b - second parameter (must be greater than 1)\n* @returns {number} value of the partial derivative\n*/\nfunction ibetaDerivative( x, a, b ) {\n\tvar f1;\n\tvar y;\n\tif ( x === 1.0 ) {\n\t\treturn 0.0;\n\t}\n\t// Regular cases:\n\tf1 = ibetaPowerTerms( a, b, x, 1.0 - x, true );\n\ty = ( 1.0 - x ) * x;\n\tf1 /= y;\n\treturn f1;\n}\n\n\n// EXPORTS //\n\nexport default ibetaDerivative;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_62_0/boost/math/special_functions/beta.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport lanczosSumExpGScaled from '@stdlib/math-base-special-gamma-lanczos-sum-expg-scaled';\nimport expm1 from '@stdlib/math-base-special-expm1';\nimport log1p from '@stdlib/math-base-special-log1p';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport abs from '@stdlib/math-base-special-abs';\nimport exp from '@stdlib/math-base-special-exp';\nimport pow from '@stdlib/math-base-special-pow';\nimport max from '@stdlib/math-base-special-max';\nimport min from '@stdlib/math-base-special-min';\nimport ln from '@stdlib/math-base-special-ln';\nimport MAX_LN from '@stdlib/constants-float64-max-ln';\nimport MIN_LN from '@stdlib/constants-float64-min-ln';\nimport G from '@stdlib/constants-float64-gamma-lanczos-g';\nimport E from '@stdlib/constants-float64-e';\n\n\n// MAIN //\n\n/**\n* Computes the leading power terms in the incomplete beta function.\n*\n* When normalized,\n*\n* ```tex\n* \\frac{ x^a y^b }{ \\operatorname{Beta}(a,b) }\n* ```\n*\n* and otherwise\n*\n* ```tex\n* x^a y^b\n* ```\n*\n* ## Notes\n*\n* -   Almost all of the error in the incomplete beta comes from this function, particularly when \\\\( a \\\\) and \\\\( b \\\\) are large. Computing large powers are _hard_ though, and using logarithms just leads to horrendous cancellation errors.\n*\n* -   For \\\\( l1 * l2 > 0 \\\\) or \\\\( \\operatorname{min}( a, b ) < 1 \\\\), the two power terms both go in the same direction (towards zero or towards infinity). In this case if either term overflows or underflows, then the product of the two must do so also. Alternatively, if one exponent is less than one, then we can't productively use it to eliminate overflow or underflow from the other term.  Problems with spurious overflow/underflow can't be ruled out in this case, but it is _very_ unlikely since one of the power terms will evaluate to a number close to 1.\n*\n* -   If \\\\( \\max( \\abs(l1), \\abs(l2) ) < 0.5 \\\\), both exponents are near one and both the exponents are greater than one, and, further, these two power terms tend in opposite directions (one toward zero, the other toward infinity), so we have to combine the terms to avoid any risk of overflow or underflow. We do this by moving one power term inside the other, we have:\n*\n*     ```tex\n*     (1 + l_1)^a \\cdot (1 + l_2)^b \\\\\n*     = ((1 + l_1) \\cdot (1 + l_2)^(b/a))^a \\\\\n*     = (1 + l_1 + l_3 + l_1*l_3)^a\n*     ```\n*\n*     and\n*\n*     ```tex\n*     l_3 = (1 + l_2)^(b/a) - 1 \\\\\n*     = \\exp((b/a) * \\ln(1 + l_2)) - 1\n*     ```\n*\n*     The tricky bit is deciding which term to move inside. By preference we move the larger term inside, so that the size of the largest exponent is reduced.  However, that can only be done as long as l3 (see above) is also small.\n*\n* @private\n* @param {NonNegativeNumber} a - function parameter\n* @param {NonNegativeNumber} b - function parameter\n* @param {Probability} x - function parameter\n* @param {Probability} y - probability equal to `1-x`\n* @param {boolean} normalized - boolean indicating whether to evaluate the power terms of the regularized or non-regularized incomplete beta function\n* @returns {number} power terms\n*/\nfunction ibetaPowerTerms( a, b, x, y, normalized ) {\n\tvar result;\n\tvar smallA;\n\tvar ratio;\n\tvar agh;\n\tvar bgh;\n\tvar cgh;\n\tvar l1;\n\tvar l2;\n\tvar l3;\n\tvar p1;\n\tvar b1;\n\tvar b2;\n\tvar c;\n\tvar l;\n\n\tif ( !normalized ) {\n\t\t// Can we do better here?\n\t\treturn pow( x, a ) * pow( y, b );\n\t}\n\tc = a + b;\n\n\t// Combine power terms with Lanczos approximation:\n\tagh = a + G - 0.5;\n\tbgh = b + G - 0.5;\n\tcgh = c + G - 0.5;\n\tresult = lanczosSumExpGScaled( c );\n\tresult /= lanczosSumExpGScaled( a ) * lanczosSumExpGScaled( b );\n\n\t// Combine with the leftover terms from the Lanczos approximation:\n\tresult *= sqrt( bgh / E );\n\tresult *= sqrt( agh / cgh );\n\n\t// `l1` and `l2` are the base of the exponents minus one:\n\tl1 = ( ( x * b ) - ( y * agh ) ) / agh;\n\tl2 = ( ( y * a ) - ( x * bgh ) ) / bgh;\n\tif ( min( abs(l1), abs(l2) ) < 0.2 ) {\n\t\t// When the base of the exponent is very near 1 we get really gross errors unless extra care is taken:\n\t\tif ( l1 * l2 > 0 || min( a, b ) < 1 ) {\n\t\t\tif ( abs(l1) < 0.1 ) {\n\t\t\t\tresult *= exp( a * log1p( l1 ) );\n\t\t\t} else {\n\t\t\t\tresult *= pow( ( x*cgh ) / agh, a );\n\t\t\t}\n\t\t\tif ( abs(l2) < 0.1 ) {\n\t\t\t\tresult *= exp( b * log1p( l2 ) );\n\t\t\t} else {\n\t\t\t\tresult *= pow((y * cgh) / bgh, b);\n\t\t\t}\n\t\t}\n\t\telse if ( max( abs(l1), abs(l2) ) < 0.5 ) {\n\t\t\tsmallA = a < b;\n\t\t\tratio = b / a;\n\t\t\tif (\n\t\t\t\t(smallA && (ratio * l2 < 0.1)) ||\n\t\t\t\t(!smallA && (l1 / ratio > 0.1))\n\t\t\t) {\n\t\t\t\tl3 = expm1( ratio * log1p( l2 ) );\n\t\t\t\tl3 = l1 + l3 + ( l3 * l1 );\n\t\t\t\tl3 = a * log1p( l3 );\n\t\t\t\tresult *= exp( l3 );\n\t\t\t}\n\t\t\telse {\n\t\t\t\tl3 = expm1( log1p( l1 ) / ratio );\n\t\t\t\tl3 = l2 + l3 + ( l3 * l2 );\n\t\t\t\tl3 = b * log1p( l3 );\n\t\t\t\tresult *= exp( l3 );\n\t\t\t}\n\t\t}\n\t\telse if ( abs(l1) < abs(l2) ) {\n\t\t\t// First base near 1 only:\n\t\t\tl = ( a * log1p( l1 ) ) + ( b * ln( ( y*cgh ) / bgh ) );\n\t\t\tif ( l <= MIN_LN || l >= MAX_LN ) {\n\t\t\t\tl += ln(result);\n\t\t\t\tif ( l >= MAX_LN ) {\n\t\t\t\t\treturn NaN;\n\t\t\t\t}\n\t\t\t\tresult = exp( l );\n\t\t\t} else {\n\t\t\t\tresult *= exp( l );\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t// Second base near 1 only:\n\t\t\tl = ( b * log1p( l2 ) ) + ( a * ln( (x*cgh) / agh ) );\n\t\t\tif ( l <= MIN_LN || l >= MAX_LN ) {\n\t\t\t\tl += ln(result);\n\t\t\t\tif ( l >= MAX_LN ) {\n\t\t\t\t\treturn NaN;\n\t\t\t\t}\n\t\t\t\tresult = exp( l );\n\t\t\t} else {\n\t\t\t\tresult *= exp( l );\n\t\t\t}\n\t\t}\n\t}\n\telse {\n\t\t// General case:\n\t\tb1 = (x * cgh) / agh;\n\t\tb2 = (y * cgh) / bgh;\n\t\tl1 = a * ln(b1);\n\t\tl2 = b * ln(b2);\n\t\tif (\n\t\t\tl1 >= MAX_LN ||\n\t\t\tl1 <= MIN_LN ||\n\t\t\tl2 >= MAX_LN ||\n\t\t\tl2 <= MIN_LN\n\t\t) {\n\t\t\t// Oops, under/overflow, sidestep if we can:\n\t\t\tif ( a < b ) {\n\t\t\t\tp1 = pow( b2, b / a );\n\t\t\t\tl3 = a * ( ln(b1) + ln(p1) );\n\t\t\t\tif ( l3 < MAX_LN && l3 > MIN_LN ) {\n\t\t\t\t\tresult *= pow( p1 * b1, a );\n\t\t\t\t} else {\n\t\t\t\t\tl2 += l1 + ln(result);\n\t\t\t\t\tif ( l2 >= MAX_LN ) {\n\t\t\t\t\t\treturn NaN;\n\t\t\t\t\t}\n\t\t\t\t\tresult = exp( l2 );\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tp1 = pow( b1, a / b );\n\t\t\t\tl3 = ( ln(p1) + ln(b2) ) * b;\n\t\t\t\tif ( l3 < MAX_LN && l3 > MIN_LN ) {\n\t\t\t\t\tresult *= pow( p1 * b2, b );\n\t\t\t\t} else {\n\t\t\t\t\tl2 += l1 + ln( result );\n\t\t\t\t\tif (l2 >= MAX_LN) {\n\t\t\t\t\t\treturn NaN;\n\t\t\t\t\t}\n\t\t\t\t\tresult = exp( l2 );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t// Finally the normal case:\n\t\t\tresult *= pow( b1, a ) * pow( b2, b );\n\t\t}\n\t}\n\treturn result;\n}\n\n\n// EXPORTS //\n\nexport default ibetaPowerTerms;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isNonNegativeInteger from '@stdlib/math-base-assert-is-nonnegative-integer';\nimport ln from '@stdlib/math-base-special-ln';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport ibetaDerivative from './ibeta_derivative.js';\n\n\n// MAIN //\n\n/**\n* Evaluates the natural logarithm of the probability mass function (PMF) for a negative binomial distribution with number of successes until experiment is stopped `r` and success probability `p`.\n*\n* @param {number} x - input value\n* @param {PositiveNumber} r - number of successes until experiment is stopped\n* @param {Probability} p - success probability\n* @returns {number} evaluated logPMF\n*\n* @example\n* var y = logpmf( 5.0, 20.0, 0.8 );\n* // returns ~-1.853\n*\n* @example\n* var y = logpmf( 21.0, 20.0, 0.5 );\n* // returns ~-2.818\n*\n* @example\n* var y = logpmf( 5.0, 10.0, 0.4 );\n* // returns ~-4.115\n*\n* @example\n* var y = logpmf( 0.0, 10.0, 0.9 );\n* // returns ~-1.054\n*\n* @example\n* var y = logpmf( 21.0, 15.5, 0.5 );\n* // returns ~-3.292\n*\n* @example\n* var y = logpmf( 5.0, 7.4, 0.4 );\n* // returns ~-2.976\n*\n* @example\n* var y = logpmf( 2.0, 0.0, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = logpmf( 2.0, -2.0, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = logpmf( 2.0, 20, -1.0 );\n* // returns NaN\n*\n* @example\n* var y = logpmf( 2.0, 20, 1.5 );\n* // returns NaN\n*\n* @example\n* var y = logpmf( NaN, 20.0, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = logpmf( 0.0, NaN, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = logpmf( 0.0, 20.0, NaN );\n* // returns NaN\n*/\nfunction logpmf( x, r, p ) {\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( r ) ||\n\t\tisnan( p ) ||\n\t\tr <= 0.0 ||\n\t\tp <= 0.0 ||\n\t\tp > 1.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( !isNonNegativeInteger( x ) || p === 0.0 ) {\n\t\treturn NINF;\n\t}\n\treturn ln( p ) - ln( r + x ) + ln( ibetaDerivative( p, r, x + 1.0 ) );\n}\n\n\n// EXPORTS //\n\nexport default logpmf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport exp from '@stdlib/math-base-special-exp';\nimport pow from '@stdlib/math-base-special-pow';\nimport ln from '@stdlib/math-base-special-ln';\n\n\n// MAIN //\n\n/**\n* Evaluates the moment-generating function (MGF) for a negative binomial distribution.\n*\n* @param {number} t - input value\n* @param {PositiveNumber} r - number of successes until experiment is stopped\n* @param {Probability} p - success probability\n* @returns {number} evaluated MGF\n*\n* @example\n* var y = mgf( 0.05, 20.0, 0.8 );\n* // returns ~267.839\n*\n* @example\n* var y = mgf( 0.1, 20.0, 0.1 );\n* // returns ~9.347\n*\n* @example\n* var y = mgf( 0.5, 10.0, 0.4 );\n* // returns ~42822.023\n*\n* @example\n* var y = mgf( 0.1, 0.0, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = mgf( 0.1, -2.0, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = mgf( NaN, 20.0, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = mgf( 0.0, NaN, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = mgf( 0.0, 20.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = mgf( 0.2, 20, -1.0 );\n* // returns NaN\n*\n* @example\n* var y = mgf( 0.2, 20, 1.5 );\n* // returns NaN\n*/\nfunction mgf( t, r, p ) {\n\tif (\n\t\tisnan( t ) ||\n\t\tisnan( r ) ||\n\t\tisnan( p ) ||\n\t\tr <= 0.0 ||\n\t\tp < 0.0 ||\n\t\tp > 1.0 ||\n\t\tt >= -ln( p )\n\t) {\n\t\treturn NaN;\n\t}\n\treturn pow( ( (1.0 - p) * exp( t ) ) / ( 1.0 - (p * exp( t )) ), r );\n}\n\n\n// EXPORTS //\n\nexport default mgf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport ibetaPowerTerms from './ibeta_power_terms.js';\n\n\n// MAIN //\n\n/**\n* Computes the partial derivative with respect to x of the incomplete beta function.\n*\n* @private\n* @param {Probability} x - input value (0 < x <= 1)\n* @param {PositiveNumber} a - first parameter\n* @param {PositiveNumber} b - second parameter (must be greater than 1)\n* @returns {number} value of the partial derivative\n*/\nfunction ibetaDerivative( x, a, b ) {\n\tvar f1;\n\tvar y;\n\tif ( x === 1.0 ) {\n\t\treturn 0.0;\n\t}\n\t// Regular cases:\n\tf1 = ibetaPowerTerms( a, b, x, 1.0 - x, true );\n\ty = ( 1.0 - x ) * x;\n\tf1 /= y;\n\treturn f1;\n}\n\n\n// EXPORTS //\n\nexport default ibetaDerivative;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_62_0/boost/math/special_functions/beta.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport lanczosSumExpGScaled from '@stdlib/math-base-special-gamma-lanczos-sum-expg-scaled';\nimport expm1 from '@stdlib/math-base-special-expm1';\nimport log1p from '@stdlib/math-base-special-log1p';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport abs from '@stdlib/math-base-special-abs';\nimport exp from '@stdlib/math-base-special-exp';\nimport pow from '@stdlib/math-base-special-pow';\nimport max from '@stdlib/math-base-special-max';\nimport min from '@stdlib/math-base-special-min';\nimport ln from '@stdlib/math-base-special-ln';\nimport MAX_LN from '@stdlib/constants-float64-max-ln';\nimport MIN_LN from '@stdlib/constants-float64-min-ln';\nimport G from '@stdlib/constants-float64-gamma-lanczos-g';\nimport E from '@stdlib/constants-float64-e';\n\n\n// MAIN //\n\n/**\n* Computes the leading power terms in the incomplete beta function.\n*\n* When normalized,\n*\n* ```tex\n* \\frac{ x^a y^b }{ \\operatorname{Beta}(a,b) }\n* ```\n*\n* and otherwise\n*\n* ```tex\n* x^a y^b\n* ```\n*\n* ## Notes\n*\n* -   Almost all of the error in the incomplete beta comes from this function, particularly when \\\\( a \\\\) and \\\\( b \\\\) are large. Computing large powers are _hard_ though, and using logarithms just leads to horrendous cancellation errors.\n*\n* -   For \\\\( l1 * l2 > 0 \\\\) or \\\\( \\operatorname{min}( a, b ) < 1 \\\\), the two power terms both go in the same direction (towards zero or towards infinity). In this case if either term overflows or underflows, then the product of the two must do so also. Alternatively, if one exponent is less than one, then we can't productively use it to eliminate overflow or underflow from the other term.  Problems with spurious overflow/underflow can't be ruled out in this case, but it is _very_ unlikely since one of the power terms will evaluate to a number close to 1.\n*\n* -   If \\\\( \\max( \\abs(l1), \\abs(l2) ) < 0.5 \\\\), both exponents are near one and both the exponents are greater than one, and, further, these two power terms tend in opposite directions (one toward zero, the other toward infinity), so we have to combine the terms to avoid any risk of overflow or underflow. We do this by moving one power term inside the other, we have:\n*\n*     ```tex\n*     (1 + l_1)^a \\cdot (1 + l_2)^b \\\\\n*     = ((1 + l_1) \\cdot (1 + l_2)^(b/a))^a \\\\\n*     = (1 + l_1 + l_3 + l_1*l_3)^a\n*     ```\n*\n*     and\n*\n*     ```tex\n*     l_3 = (1 + l_2)^(b/a) - 1 \\\\\n*     = \\exp((b/a) * \\ln(1 + l_2)) - 1\n*     ```\n*\n*     The tricky bit is deciding which term to move inside. By preference we move the larger term inside, so that the size of the largest exponent is reduced.  However, that can only be done as long as l3 (see above) is also small.\n*\n* @private\n* @param {NonNegativeNumber} a - function parameter\n* @param {NonNegativeNumber} b - function parameter\n* @param {Probability} x - function parameter\n* @param {Probability} y - probability equal to `1-x`\n* @param {boolean} normalized - boolean indicating whether to evaluate the power terms of the regularized or non-regularized incomplete beta function\n* @returns {number} power terms\n*/\nfunction ibetaPowerTerms( a, b, x, y, normalized ) {\n\tvar result;\n\tvar smallA;\n\tvar ratio;\n\tvar agh;\n\tvar bgh;\n\tvar cgh;\n\tvar l1;\n\tvar l2;\n\tvar l3;\n\tvar p1;\n\tvar b1;\n\tvar b2;\n\tvar c;\n\tvar l;\n\n\tif ( !normalized ) {\n\t\t// Can we do better here?\n\t\treturn pow( x, a ) * pow( y, b );\n\t}\n\tc = a + b;\n\n\t// Combine power terms with Lanczos approximation:\n\tagh = a + G - 0.5;\n\tbgh = b + G - 0.5;\n\tcgh = c + G - 0.5;\n\tresult = lanczosSumExpGScaled( c );\n\tresult /= lanczosSumExpGScaled( a ) * lanczosSumExpGScaled( b );\n\n\t// Combine with the leftover terms from the Lanczos approximation:\n\tresult *= sqrt( bgh / E );\n\tresult *= sqrt( agh / cgh );\n\n\t// `l1` and `l2` are the base of the exponents minus one:\n\tl1 = ( ( x * b ) - ( y * agh ) ) / agh;\n\tl2 = ( ( y * a ) - ( x * bgh ) ) / bgh;\n\tif ( min( abs(l1), abs(l2) ) < 0.2 ) {\n\t\t// When the base of the exponent is very near 1 we get really gross errors unless extra care is taken:\n\t\tif ( l1 * l2 > 0 || min( a, b ) < 1 ) {\n\t\t\tif ( abs(l1) < 0.1 ) {\n\t\t\t\tresult *= exp( a * log1p( l1 ) );\n\t\t\t} else {\n\t\t\t\tresult *= pow( ( x*cgh ) / agh, a );\n\t\t\t}\n\t\t\tif ( abs(l2) < 0.1 ) {\n\t\t\t\tresult *= exp( b * log1p( l2 ) );\n\t\t\t} else {\n\t\t\t\tresult *= pow((y * cgh) / bgh, b);\n\t\t\t}\n\t\t}\n\t\telse if ( max( abs(l1), abs(l2) ) < 0.5 ) {\n\t\t\tsmallA = a < b;\n\t\t\tratio = b / a;\n\t\t\tif (\n\t\t\t\t(smallA && (ratio * l2 < 0.1)) ||\n\t\t\t\t(!smallA && (l1 / ratio > 0.1))\n\t\t\t) {\n\t\t\t\tl3 = expm1( ratio * log1p( l2 ) );\n\t\t\t\tl3 = l1 + l3 + ( l3 * l1 );\n\t\t\t\tl3 = a * log1p( l3 );\n\t\t\t\tresult *= exp( l3 );\n\t\t\t}\n\t\t\telse {\n\t\t\t\tl3 = expm1( log1p( l1 ) / ratio );\n\t\t\t\tl3 = l2 + l3 + ( l3 * l2 );\n\t\t\t\tl3 = b * log1p( l3 );\n\t\t\t\tresult *= exp( l3 );\n\t\t\t}\n\t\t}\n\t\telse if ( abs(l1) < abs(l2) ) {\n\t\t\t// First base near 1 only:\n\t\t\tl = ( a * log1p( l1 ) ) + ( b * ln( ( y*cgh ) / bgh ) );\n\t\t\tif ( l <= MIN_LN || l >= MAX_LN ) {\n\t\t\t\tl += ln(result);\n\t\t\t\tif ( l >= MAX_LN ) {\n\t\t\t\t\treturn NaN;\n\t\t\t\t}\n\t\t\t\tresult = exp( l );\n\t\t\t} else {\n\t\t\t\tresult *= exp( l );\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t// Second base near 1 only:\n\t\t\tl = ( b * log1p( l2 ) ) + ( a * ln( (x*cgh) / agh ) );\n\t\t\tif ( l <= MIN_LN || l >= MAX_LN ) {\n\t\t\t\tl += ln(result);\n\t\t\t\tif ( l >= MAX_LN ) {\n\t\t\t\t\treturn NaN;\n\t\t\t\t}\n\t\t\t\tresult = exp( l );\n\t\t\t} else {\n\t\t\t\tresult *= exp( l );\n\t\t\t}\n\t\t}\n\t}\n\telse {\n\t\t// General case:\n\t\tb1 = (x * cgh) / agh;\n\t\tb2 = (y * cgh) / bgh;\n\t\tl1 = a * ln(b1);\n\t\tl2 = b * ln(b2);\n\t\tif (\n\t\t\tl1 >= MAX_LN ||\n\t\t\tl1 <= MIN_LN ||\n\t\t\tl2 >= MAX_LN ||\n\t\t\tl2 <= MIN_LN\n\t\t) {\n\t\t\t// Oops, under/overflow, sidestep if we can:\n\t\t\tif ( a < b ) {\n\t\t\t\tp1 = pow( b2, b / a );\n\t\t\t\tl3 = a * ( ln(b1) + ln(p1) );\n\t\t\t\tif ( l3 < MAX_LN && l3 > MIN_LN ) {\n\t\t\t\t\tresult *= pow( p1 * b1, a );\n\t\t\t\t} else {\n\t\t\t\t\tl2 += l1 + ln(result);\n\t\t\t\t\tif ( l2 >= MAX_LN ) {\n\t\t\t\t\t\treturn NaN;\n\t\t\t\t\t}\n\t\t\t\t\tresult = exp( l2 );\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tp1 = pow( b1, a / b );\n\t\t\t\tl3 = ( ln(p1) + ln(b2) ) * b;\n\t\t\t\tif ( l3 < MAX_LN && l3 > MIN_LN ) {\n\t\t\t\t\tresult *= pow( p1 * b2, b );\n\t\t\t\t} else {\n\t\t\t\t\tl2 += l1 + ln( result );\n\t\t\t\t\tif (l2 >= MAX_LN) {\n\t\t\t\t\t\treturn NaN;\n\t\t\t\t\t}\n\t\t\t\t\tresult = exp( l2 );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t// Finally the normal case:\n\t\t\tresult *= pow( b1, a ) * pow( b2, b );\n\t\t}\n\t}\n\treturn result;\n}\n\n\n// EXPORTS //\n\nexport default ibetaPowerTerms;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isNonNegativeInteger from '@stdlib/math-base-assert-is-nonnegative-integer';\nimport ibetaDerivative from './ibeta_derivative.js';\n\n\n// MAIN //\n\n/**\n* Evaluates the probability mass function (PMF) for a negative binomial distribution with number of successes until experiment is stopped `r` and success probability `p`.\n*\n* @param {number} x - input value\n* @param {PositiveNumber} r - number of successes until experiment is stopped\n* @param {Probability} p - success probability\n* @returns {Probability} evaluated PMF\n*\n* @example\n* var y = pmf( 5.0, 20.0, 0.8 );\n* // returns ~0.157\n*\n* @example\n* var y = pmf( 21.0, 20.0, 0.5 );\n* // returns ~0.06\n*\n* @example\n* var y = pmf( 5.0, 10.0, 0.4 );\n* // returns ~0.016\n*\n* @example\n* var y = pmf( 0.0, 10.0, 0.9 );\n* // returns ~0.349\n*\n* @example\n* var y = pmf( 21.0, 15.5, 0.5 );\n* // returns ~0.037\n*\n* @example\n* var y = pmf( 5.0, 7.4, 0.4 );\n* // returns ~0.051\n*\n* @example\n* var y = pmf( 2.0, 0.0, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = pmf( 2.0, -2.0, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = pmf( 2.0, 20, -1.0 );\n* // returns NaN\n*\n* @example\n* var y = pmf( 2.0, 20, 1.5 );\n* // returns NaN\n*\n* @example\n* var y = pmf( NaN, 20.0, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = pmf( 0.0, NaN, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = pmf( 0.0, 20.0, NaN );\n* // returns NaN\n*/\nfunction pmf( x, r, p ) {\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( r ) ||\n\t\tisnan( p ) ||\n\t\tr <= 0.0 ||\n\t\tp <= 0.0 ||\n\t\tp > 1.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( !isNonNegativeInteger( x ) || p === 0.0 ) {\n\t\treturn 0.0;\n\t}\n\treturn ( p / ( r + x ) ) * ibetaDerivative( p, r, x + 1.0 );\n}\n\n\n// EXPORTS //\n\nexport default pmf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Negative binomial distribution cumulative distribution function (CDF).\n*\n* @module @stdlib/stats-base-dists-negative-binomial-cdf\n*\n* @example\n* import cdf from '@stdlib/stats-base-dists-negative-binomial-cdf';\n*\n* var y = cdf( 5.0, 20.0, 0.8 );\n* // returns ~0.617\n*\n* y = cdf( 21.0, 20.0, 0.5 );\n* // returns ~0.622\n*\n* y = cdf( 5.0, 10.0, 0.4 );\n* // returns ~0.034\n*\n* y = cdf( 0.0, 10.0, 0.9 );\n* // returns ~0.349\n*\n* y = cdf( 21.0, 15.5, 0.5 );\n* // returns ~0.859\n*\n* y = cdf( 5.0, 7.4, 0.4 );\n* // returns ~0.131\n*\n* var mycdf = cdf.factory( 10, 0.5 );\n* y = mycdf( 3.0 );\n* // returns ~0.046\n*\n* y = mycdf( 11.0 );\n* // returns ~0.668\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport cdf from './cdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( cdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport betainc from '@stdlib/math-base-special-betainc';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport floor from '@stdlib/math-base-special-floor';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the cumulative distribution function (CDF) for a negative binomial distribution with number of successes until experiment is stopped `r` and success probability `p`.\n*\n* @param {PositiveNumber} r - number of successes until experiment is stopped\n* @param {Probability} p - success probability\n* @returns {Function} CDF\n*\n* @example\n* var cdf = factory( 10, 0.5 );\n* var y = cdf( 3.0 );\n* // returns ~0.046\n*\n* y = cdf( 11.0 );\n* // returns ~0.668\n*/\nfunction factory( r, p ) {\n\tif (\n\t\tisnan( r ) ||\n\t\tisnan( p ) ||\n\t\tr <= 0.0 ||\n\t\tp < 0.0 ||\n\t\tp > 1.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn cdf;\n\n\t/**\n\t* Evaluates the cumulative distribution function (CDF) for a negative binomial distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated CDF\n\t*/\n\tfunction cdf( x ) {\n\t\tvar xint;\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x < 0.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\tif ( x === PINF ) {\n\t\t\treturn 1.0;\n\t\t}\n\t\t// Ensure left-continuity:\n\t\txint = floor( x + 1e-7 );\n\t\treturn betainc( p, r, xint + 1.0 );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Natural logarithm of the probability mass function (PMF) for a negative binomial distribution.\n*\n* @module @stdlib/stats-base-dists-negative-binomial-logpmf\n*\n* @example\n* import logpmf from '@stdlib/stats-base-dists-negative-binomial-logpmf';\n*\n* var y = logpmf( 5.0, 20.0, 0.8 );\n* // returns ~-1.853\n*\n* y = logpmf( 21.0, 20.0, 0.5 );\n* // returns ~-2.818\n*\n* y = logpmf( 5.0, 10.0, 0.4 );\n* // returns ~-4.115\n*\n* y = logpmf( 0.0, 10.0, 0.9 );\n* // returns ~-1.054\n*\n* y = logpmf( 21.0, 15.5, 0.5 );\n* // returns ~-3.292\n*\n* y = logpmf( 5.0, 7.4, 0.4 );\n* // returns ~-2.976\n*\n* var mylogpmf = logpmf.factory( 10, 0.5 );\n* y = mylogpmf( 3.0 );\n* // returns ~-3.612\n*\n* y = mylogpmf( 5.0 );\n* // returns ~-2.797\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport logpmf from './logpmf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( logpmf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default logpmf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNonNegativeInteger from '@stdlib/math-base-assert-is-nonnegative-integer';\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport ln from '@stdlib/math-base-special-ln';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport ibetaDerivative from './ibeta_derivative.js';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the natural logarithm of the probability mass function (PMF) for a negative binomial distribution with number of successes until experiment is stopped `r` and success probability `p`.\n*\n* @param {PositiveNumber} r - number of successes until experiment is stopped\n* @param {Probability} p - success probability\n* @returns {Function} logPMF\n*\n* @example\n* var logpmf = factory( 10, 0.5 );\n* var y = logpmf( 3.0 );\n* // returns ~-3.617\n*\n* y = logpmf( 5.0 );\n* // returns ~-2.795\n*/\nfunction factory( r, p ) {\n\tif (\n\t\tisnan( r ) ||\n\t\tisnan( p ) ||\n\t\tr <= 0.0 ||\n\t\tp <= 0.0 ||\n\t\tp > 1.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn logpmf;\n\n\t/**\n\t* Evaluates the natural logarithm of the probability mass function (PMF) for a negative binomial distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {number} evaluated logPMF\n\t*\n\t* @example\n\t* var y = logpmf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction logpmf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( !isNonNegativeInteger( x ) ) {\n\t\t\treturn NINF;\n\t\t}\n\t\treturn ln( p ) - ln( r + x ) + ln( ibetaDerivative( p, r, x + 1.0 ) );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate the moment-generating function (MGF) for a negative binomial distribution.\n*\n* @module @stdlib/stats-base-dists-negative-binomial-mgf\n*\n* @example\n* import mgf from '@stdlib/stats-base-dists-negative-binomial-mgf';\n*\n* var y = mgf( 0.05, 20.0, 0.8 );\n* // returns ~267.839\n*\n* y = mgf( 0.1, 20.0, 0.1 );\n* // returns ~9.347\n*\n* y = mgf( 0.5, 10.0, 0.4 );\n* // returns ~42822.023\n*\n* var myMGF = mgf.factory( 4.3, 0.4 );\n* y = myMGF( 0.2 );\n* // returns ~4.696\n*\n* y = myMGF( 0.4 );\n* // returns ~30.83\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport mgf from './mgf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( mgf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default mgf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport exp from '@stdlib/math-base-special-exp';\nimport pow from '@stdlib/math-base-special-pow';\nimport ln from '@stdlib/math-base-special-ln';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the moment-generating function (MGF) of a negative binomial distribution.\n*\n* @param {PositiveNumber} r - number of successes until experiment is stopped\n* @param {Probability} p - success probability\n* @returns {Function} MGF\n*\n* @example\n* var mgf = factory( 4.3, 0.4 );\n* var y = mgf( 0.2 );\n* // returns ~4.696\n*/\nfunction factory( r, p ) {\n\tif (\n\t\tisnan( r ) ||\n\t\tisnan( p ) ||\n\t\tr <= 0.0 ||\n\t\tp < 0.0 ||\n\t\tp > 1.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn mgf;\n\n\t/**\n\t* Evaluates the moment-generating function (MGF) for a negative binomial distribution.\n\t*\n\t* @private\n\t* @param {number} t - input value\n\t* @returns {number} evaluated MGF\n\t*\n\t* @example\n\t* var y = mgf( 0.5 );\n\t* // returns <number>\n\t*/\n\tfunction mgf( t ) {\n\t\tif ( t >= -ln( p ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn pow( ( (1.0 - p) * exp( t ) ) / ( 1.0 - (p * exp( t )) ), r );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Negative binomial distribution probability mass function (PMF).\n*\n* @module @stdlib/stats-base-dists-negative-binomial-pmf\n*\n* @example\n* import pmf from '@stdlib/stats-base-dists-negative-binomial-pmf';\n*\n* var y = pmf( 5.0, 20.0, 0.8 );\n* // returns ~0.157\n*\n* y = pmf( 21.0, 20.0, 0.5 );\n* // returns ~0.06\n*\n* y = pmf( 5.0, 10.0, 0.4 );\n* // returns ~0.016\n*\n* y = pmf( 0.0, 10.0, 0.9 );\n* // returns ~0.349\n*\n* y = pmf( 21.0, 15.5, 0.5 );\n* // returns ~0.037\n*\n* y = pmf( 5.0, 7.4, 0.4 );\n* // returns ~0.051\n*\n* var mypmf = pmf.factory( 10, 0.5 );\n* y = mypmf( 3.0 );\n* // returns ~0.027\n*\n* y = mypmf( 5.0 );\n* // returns ~0.061\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport pmf from './pmf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( pmf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default pmf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNonNegativeInteger from '@stdlib/math-base-assert-is-nonnegative-integer';\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport ibetaDerivative from './ibeta_derivative.js';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the probability mass function (PMF) for a negative binomial distribution with number of successes until experiment is stopped `r` and success probability `p`.\n*\n* @param {PositiveNumber} r - number of successes until experiment is stopped\n* @param {Probability} p - success probability\n* @returns {Function} PMF\n*\n* @example\n* var pmf = factory( 10, 0.5 );\n* var y = pmf( 3.0 );\n* // returns ~0.027\n*\n* y = pmf( 5.0 );\n* // returns ~0.061\n*/\nfunction factory( r, p ) {\n\tif (\n\t\tisnan( r ) ||\n\t\tisnan( p ) ||\n\t\tr <= 0.0 ||\n\t\tp <= 0.0 ||\n\t\tp > 1.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn pmf;\n\n\t/**\n\t* Evaluates the probability mass function (PMF) for a negative binomial distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated PMF\n\t*\n\t* @example\n\t* var y = pmf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction pmf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( !isNonNegativeInteger( x ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn ( p / ( r + x ) ) * ibetaDerivative( p, r, x + 1.0 );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport cdf from '@stdlib/stats-base-dists-negative-binomial-cdf';\nimport erfcinv from '@stdlib/math-base-special-erfcinv';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport round from '@stdlib/math-base-special-round';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport SQRT2 from '@stdlib/constants-float64-sqrt-two';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport search from './search.js';\n\n\n// MAIN //\n\n/**\n* Evaluates the quantile function for a negative binomial distribution with number of successes until experiment is stopped `r` and success probability `p` at a probability `k`.\n*\n* @param {Probability} k - input value\n* @param {PositiveNumber} r - number of successes until experiment is stopped\n* @param {Probability} p - success probability\n* @returns {NonNegativeInteger} evaluated quantile function\n*\n* @example\n* var y = quantile( 0.9, 20.0, 0.2 );\n* // returns 106\n*\n* @example\n* var y = quantile( 0.9, 20.0, 0.8 );\n* // returns 8\n*\n* @example\n* var y = quantile( 0.5, 10.0, 0.4 );\n* // returns 14\n*\n* @example\n* var y = quantile( 0.0, 10.0, 0.9 );\n* // returns 0\n*\n* @example\n* var y = quantile( 1.1, 20.0, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = quantile( -0.1, 20.0, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.5, 0.0, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.5, -2.0, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.3, 20.0, -1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.3, 20.0, 1.5 );\n* // returns NaN\n*\n* @example\n* var y = quantile( NaN, 20.0, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.3, NaN, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.3, 20.0, NaN );\n* // returns NaN\n*/\nfunction quantile( k, r, p ) {\n\tvar sigmaInv;\n\tvar guess;\n\tvar sigma;\n\tvar corr;\n\tvar mu;\n\tvar x2;\n\tvar x;\n\tvar q;\n\n\tif (\n\t\tisnan( r ) ||\n\t\tisnan( p ) ||\n\t\tisnan( k ) ||\n\t\tr <= 0.0 ||\n\t\tp < 0.0 ||\n\t\tp > 1.0 ||\n\t\tk < 0.0 ||\n\t\tk > 1.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( k === 0.0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( k === 1.0 ) {\n\t\treturn PINF;\n\t}\n\tq = 1.0 - p;\n\tmu = ( r * q ) / p;\n\tsigma = sqrt( r * q ) / p;\n\tsigmaInv = 1.0 / sigma;\n\n\t// Cornish-Fisher expansion:\n\tif ( k < 0.5 ) {\n\t\tx = -erfcinv( 2.0 * k ) * SQRT2;\n\t} else {\n\t\tx = erfcinv( 2.0 * (1.0-k) ) * SQRT2;\n\t}\n\tx2 = x * x;\n\n\t// Skewness correction:\n\tcorr = x + (sigmaInv * ( x2 - 1.0 ) / 6.0);\n\tguess = round( mu + (sigma * corr) );\n\treturn ( cdf( guess, r, p ) >= k ) ?\n\t\tsearch.left( guess, k, r, p ) :\n\t\tsearch.right( guess, k, r, p );\n}\n\n\n// EXPORTS //\n\nexport default quantile;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isProbability } from '@stdlib/assert-is-probability';\nimport defineProperty from '@stdlib/utils-define-property';\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport setReadOnlyAccessor from '@stdlib/utils-define-nonenumerable-read-only-accessor';\nimport { isPrimitive as isPositive } from '@stdlib/assert-is-positive-number';\nimport kurtosis from '@stdlib/stats-base-dists-negative-binomial-kurtosis';\nimport mean from '@stdlib/stats-base-dists-negative-binomial-mean';\nimport mode from '@stdlib/stats-base-dists-negative-binomial-mode';\nimport skewness from '@stdlib/stats-base-dists-negative-binomial-skewness';\nimport stdev from '@stdlib/stats-base-dists-negative-binomial-stdev';\nimport variance from '@stdlib/stats-base-dists-negative-binomial-variance';\nimport cdf from '@stdlib/stats-base-dists-negative-binomial-cdf';\nimport logpmf from '@stdlib/stats-base-dists-negative-binomial-logpmf';\nimport mgf from '@stdlib/stats-base-dists-negative-binomial-mgf';\nimport pmf from '@stdlib/stats-base-dists-negative-binomial-pmf';\nimport quantile from '@stdlib/stats-base-dists-negative-binomial-quantile';\nimport format from '@stdlib/string-format';\n\n\n// FUNCTIONS //\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n*/\nfunction negativeBinomialCDF( x ) {\n\treturn cdf( x, this.r, this.p );\n}\n\n/**\n* Evaluates the natural logarithm of the probability mass function (PMF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logPMF\n*/\nfunction negativeBinomialLogPMF( x ) {\n\treturn logpmf( x, this.r, this.p );\n}\n\n/**\n* Evaluates the moment-generating function (MGF).\n*\n* @private\n* @param {number} t - input value\n* @returns {number} evaluated MGF\n*/\nfunction negativeBinomialMGF( t ) {\n\treturn mgf( t, this.r, this.p );\n}\n\n/**\n* Evaluates the probability mass function (PMF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated PMF\n*/\nfunction negativeBinomialPMF( x ) {\n\treturn pmf( x, this.r, this.p );\n}\n\n/**\n* Evaluates the quantile function.\n*\n* @private\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n*/\nfunction negativeBinomialQuantile( p ) {\n\treturn quantile( p, this.r, this.p );\n}\n\n\n// MAIN //\n\n/**\n* Negative binomial distribution constructor.\n*\n* @constructor\n* @param {PositiveNumber} [r=1.0] - number of successes until experiment is stopped\n* @param {Probability} [p=0.5] - success probability\n* @throws {TypeError} `r` must be a positive number\n* @throws {TypeError} `p` must be a number between 0 and 1\n* @returns {NegativeBinomial} distribution instance\n*\n* @example\n* var nbinomial = new NegativeBinomial( 5.0, 0.1 );\n*\n* var y = nbinomial.cdf( 10.0 );\n* // returns ~0.013\n*\n* var v = nbinomial.mode;\n* // returns 36.0\n*/\nfunction NegativeBinomial() {\n\tvar r;\n\tvar p;\n\tif ( !(this instanceof NegativeBinomial) ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn new NegativeBinomial();\n\t\t}\n\t\treturn new NegativeBinomial( arguments[ 0 ], arguments[ 1 ] );\n\t}\n\tif ( arguments.length ) {\n\t\tr = arguments[ 0 ];\n\t\tp = arguments[ 1 ];\n\t\tif ( !isPositive( r ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Number of trials until experiment is stopped must be a positive number. Value: `%s`.', r ) );\n\t\t}\n\t\tif ( !isProbability( p ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Success probability must be a number between 0 and 1. Value: `%s`.', p ) );\n\t\t}\n\t} else {\n\t\tr = 1.0;\n\t\tp = 0.5;\n\t}\n\tdefineProperty( this, 'r', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn r;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isPositive( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid assignment. Must be a positive number. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\tr = value;\n\t\t}\n\t});\n\tdefineProperty( this, 'p', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn p;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isProbability( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid assignment. Must be a number on the interval: [0, 1]. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\tp = value;\n\t\t}\n\t});\n\treturn this;\n}\n\n/**\n* Negative binomial distribution excess kurtosis.\n*\n* @name kurtosis\n* @memberof NegativeBinomial.prototype\n* @type {number}\n* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}\n*\n* @example\n* var nbinomial = new NegativeBinomial( 12.0, 0.4 );\n*\n* var v = nbinomial.kurtosis;\n* // returns ~0.522\n*/\nsetReadOnlyAccessor( NegativeBinomial.prototype, 'kurtosis', function get() {\n\treturn kurtosis( this.r, this.p );\n});\n\n/**\n* Negative binomial distribution expected value.\n*\n* @name mean\n* @memberof NegativeBinomial.prototype\n* @type {number}\n* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}\n*\n* @example\n* var nbinomial = new NegativeBinomial( 12.0, 0.4 );\n*\n* var v = nbinomial.mean;\n* // returns ~18.0\n*/\nsetReadOnlyAccessor( NegativeBinomial.prototype, 'mean', function get() {\n\treturn mean( this.r, this.p );\n});\n\n/**\n* Negative binomial distribution mode.\n*\n* @name mode\n* @memberof NegativeBinomial.prototype\n* @type {NonNegativeInteger}\n* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}\n*\n* @example\n* var nbinomial = new NegativeBinomial( 12.0, 0.4 );\n*\n* var v = nbinomial.mode;\n* // returns 16.0\n*/\nsetReadOnlyAccessor( NegativeBinomial.prototype, 'mode', function get() {\n\treturn mode( this.r, this.p );\n});\n\n/**\n* Negative binomial distribution skewness.\n*\n* @name skewness\n* @memberof NegativeBinomial.prototype\n* @type {number}\n* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}\n*\n* @example\n* var nbinomial = new NegativeBinomial( 12.0, 0.4 );\n*\n* var v = nbinomial.skewness;\n* // returns ~0.596\n*/\nsetReadOnlyAccessor( NegativeBinomial.prototype, 'skewness', function get() {\n\treturn skewness( this.r, this.p );\n});\n\n/**\n* Negative binomial distribution standard deviation.\n*\n* @name stdev\n* @memberof NegativeBinomial.prototype\n* @type {PositiveNumber}\n* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}\n*\n* @example\n* var nbinomial = new NegativeBinomial( 12.0, 0.4 );\n*\n* var v = nbinomial.stdev;\n* // returns ~6.708\n*/\nsetReadOnlyAccessor( NegativeBinomial.prototype, 'stdev', function get() {\n\treturn stdev( this.r, this.p );\n});\n\n/**\n* Negative binomial distribution variance.\n*\n* @name variance\n* @memberof NegativeBinomial.prototype\n* @type {PositiveNumber}\n* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}\n*\n* @example\n* var nbinomial = new NegativeBinomial( 12.0, 0.4 );\n*\n* var v = nbinomial.variance;\n* // returns ~45.0\n*/\nsetReadOnlyAccessor( NegativeBinomial.prototype, 'variance', function get() {\n\treturn variance( this.r, this.p );\n});\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @name cdf\n* @memberof NegativeBinomial.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var nbinomial = new NegativeBinomial( 4.0, 0.2 );\n*\n* var v = nbinomial.cdf( 3.0 );\n* // returns ~0.033\n*/\nsetReadOnly( NegativeBinomial.prototype, 'cdf', negativeBinomialCDF );\n\n/**\n* Evaluates the natural logarithm of the probability mass function (PMF).\n*\n* @name logpmf\n* @memberof NegativeBinomial.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logPMF\n* @see [pmf]{@link https://en.wikipedia.org/wiki/Probability_mass_function}\n*\n* @example\n* var nbinomial = new NegativeBinomial( 4.0, 0.2 );\n*\n* var v = nbinomial.logpmf( 9.0 );\n* // returns ~-3.052\n*/\nsetReadOnly( NegativeBinomial.prototype, 'logpmf', negativeBinomialLogPMF );\n\n/**\n* Evaluates the moment-generating function (MGF).\n*\n* @name mgf\n* @memberof NegativeBinomial.prototype\n* @type {Function}\n* @param {number} t - input value\n* @returns {number} evaluated MGF\n* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}\n*\n* @example\n* var nbinomial = new NegativeBinomial( 4.0, 0.2 );\n*\n* var v = nbinomial.mgf( 0.1 );\n* // returns ~1.66\n*/\nsetReadOnly( NegativeBinomial.prototype, 'mgf', negativeBinomialMGF );\n\n/**\n* Evaluates the probability mass function (PMF).\n*\n* @name pmf\n* @memberof NegativeBinomial.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated PMF\n* @see [pmf]{@link https://en.wikipedia.org/wiki/Probability_mass_function}\n*\n* @example\n* var nbinomial = new NegativeBinomial( 4.0, 0.2 );\n*\n* var v = nbinomial.pmf( 9.0 );\n* // returns ~0.047\n*/\nsetReadOnly( NegativeBinomial.prototype, 'pmf', negativeBinomialPMF );\n\n/**\n* Evaluates the quantile function.\n*\n* @name quantile\n* @memberof NegativeBinomial.prototype\n* @type {Function}\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}\n*\n* @example\n* var nbinomial = new NegativeBinomial( 4.0, 0.2 );\n*\n* var v = nbinomial.quantile( 0.5 );\n* // returns 15.0\n*/\nsetReadOnly( NegativeBinomial.prototype, 'quantile', negativeBinomialQuantile );\n\n\n// EXPORTS //\n\nexport default NegativeBinomial;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Negative binomial distribution quantile function.\n*\n* @module @stdlib/stats-base-dists-negative-binomial-quantile\n*\n* @example\n* import quantile from '@stdlib/stats-base-dists-negative-binomial-quantile';\n*\n* var y = quantile( 0.9, 20.0, 0.2 );\n* // returns 106\n*\n* y = quantile( 0.9, 20.0, 0.8 );\n* // returns 8\n*\n* var myquantile = quantile.factory( 10.0, 0.5 );\n* y = myquantile( 0.1 );\n* // returns 5\n*\n* y = myquantile( 0.9 );\n* // returns 16\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport quantile from './quantile.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( quantile, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default quantile;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport cdf from '@stdlib/stats-base-dists-negative-binomial-cdf';\nimport erfcinv from '@stdlib/math-base-special-erfcinv';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport round from '@stdlib/math-base-special-round';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport SQRT2 from '@stdlib/constants-float64-sqrt-two';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport search from './search.js';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the quantile function for a negative binomial distribution with number of successes until experiment is stopped `r` and success probability `p`.\n*\n* @param {PositiveNumber} r - number of successes until experiment is stopped\n* @param {Probability} p - success probability\n* @returns {Function} quantile function\n*\n* @example\n* var quantile = factory( 10.0, 0.5 );\n* var y = quantile( 0.1 );\n* // returns 5\n*\n* y = quantile( 0.9 );\n* // returns 16\n*/\nfunction factory( r, p ) {\n\tvar sigmaInv;\n\tvar sigma;\n\tvar mu;\n\tvar q;\n\tif (\n\t\tisnan( r ) ||\n\t\tisnan( p ) ||\n\t\tr <= 0.0 ||\n\t\tp < 0.0 ||\n\t\tp > 1.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\tq = 1.0 - p;\n\tmu = ( r * q ) / p;\n\tsigma = sqrt( r * q ) / p;\n\tsigmaInv = ( (2.0/p) - 1.0 ) / sigma;\n\treturn quantile;\n\n\t/**\n\t* Evaluates the quantile function for a negative binomial distribution.\n\t*\n\t* @private\n\t* @param {Probability} k - input value\n\t* @returns {NonNegativeInteger} evaluated quantile function\n\t*\n\t* @example\n\t* var y = quantile( 0.3 );\n\t* // returns <number>\n\t*/\n\tfunction quantile( k ) {\n\t\tvar guess;\n\t\tvar corr;\n\t\tvar x2;\n\t\tvar x;\n\n\t\tif ( isnan( k ) || k < 0.0 || k > 1.0 ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( k === 0.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\tif ( k === 1.0 ) {\n\t\t\treturn PINF;\n\t\t}\n\n\t\t// Cornish-Fisher expansion:\n\t\tif ( k < 0.5 ) {\n\t\t\tx = -erfcinv( 2.0 * k ) * SQRT2;\n\t\t} else {\n\t\t\tx = erfcinv( 2.0 * (1.0-k) ) * SQRT2;\n\t\t}\n\t\tx2 = x * x;\n\n\t\t// Skewness correction:\n\t\tcorr = x + (sigmaInv * ( x2 - 1.0 ) / 6.0);\n\t\tguess = round( mu + (sigma * corr) );\n\t\treturn ( cdf( guess, r, p ) >= k ) ?\n\t\t\tsearch.left( guess, k, r, p ) :\n\t\t\tsearch.right( guess, k, r, p );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace negativeBinomial\n*/\nvar negativeBinomial = {};\n\n/**\n* @name cdf\n* @memberof negativeBinomial\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/negative-binomial/cdf}\n*/\nimport cdf from '@stdlib/stats-base-dists-negative-binomial-cdf';\nsetReadOnly( negativeBinomial, 'cdf', cdf );\n\n/**\n* @name NegativeBinomial\n* @memberof negativeBinomial\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/negative-binomial/ctor}\n*/\nimport NegativeBinomial from '@stdlib/stats-base-dists-negative-binomial-ctor';\nsetReadOnly( negativeBinomial, 'NegativeBinomial', NegativeBinomial );\n\n/**\n* @name kurtosis\n* @memberof negativeBinomial\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/negative-binomial/kurtosis}\n*/\nimport kurtosis from '@stdlib/stats-base-dists-negative-binomial-kurtosis';\nsetReadOnly( negativeBinomial, 'kurtosis', kurtosis );\n\n/**\n* @name logpmf\n* @memberof negativeBinomial\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/negative-binomial/logpmf}\n*/\nimport logpmf from '@stdlib/stats-base-dists-negative-binomial-logpmf';\nsetReadOnly( negativeBinomial, 'logpmf', logpmf );\n\n/**\n* @name mean\n* @memberof negativeBinomial\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/negative-binomial/mean}\n*/\nimport mean from '@stdlib/stats-base-dists-negative-binomial-mean';\nsetReadOnly( negativeBinomial, 'mean', mean );\n\n/**\n* @name mgf\n* @memberof negativeBinomial\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/negative-binomial/mgf}\n*/\nimport mgf from '@stdlib/stats-base-dists-negative-binomial-mgf';\nsetReadOnly( negativeBinomial, 'mgf', mgf );\n\n/**\n* @name mode\n* @memberof negativeBinomial\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/negative-binomial/mode}\n*/\nimport mode from '@stdlib/stats-base-dists-negative-binomial-mode';\nsetReadOnly( negativeBinomial, 'mode', mode );\n\n/**\n* @name pmf\n* @memberof negativeBinomial\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/negative-binomial/pmf}\n*/\nimport pmf from '@stdlib/stats-base-dists-negative-binomial-pmf';\nsetReadOnly( negativeBinomial, 'pmf', pmf );\n\n/**\n* @name quantile\n* @memberof negativeBinomial\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/negative-binomial/quantile}\n*/\nimport quantile from '@stdlib/stats-base-dists-negative-binomial-quantile';\nsetReadOnly( negativeBinomial, 'quantile', quantile );\n\n/**\n* @name skewness\n* @memberof negativeBinomial\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/negative-binomial/skewness}\n*/\nimport skewness from '@stdlib/stats-base-dists-negative-binomial-skewness';\nsetReadOnly( negativeBinomial, 'skewness', skewness );\n\n/**\n* @name stdev\n* @memberof negativeBinomial\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/negative-binomial/stdev}\n*/\nimport stdev from '@stdlib/stats-base-dists-negative-binomial-stdev';\nsetReadOnly( negativeBinomial, 'stdev', stdev );\n\n/**\n* @name variance\n* @memberof negativeBinomial\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/negative-binomial/variance}\n*/\nimport variance from '@stdlib/stats-base-dists-negative-binomial-variance';\nsetReadOnly( negativeBinomial, 'variance', variance );\n\n\n// EXPORTS //\n\nexport default negativeBinomial;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport ln from '@stdlib/math-base-special-ln';\nimport TWO_PI from '@stdlib/constants-float64-two-pi';\nimport E from '@stdlib/constants-float64-e';\n\n\n// MAIN //\n\n/**\n* Returns the differential entropy for a normal distribution with mean `mu` and standard deviation `sigma`.\n*\n* @param {number} mu - mean\n* @param {PositiveNumber} sigma - standard deviation\n* @returns {number} entropy\n*\n* @example\n* var y = entropy( 0.0, 1.0 );\n* // returns ~1.419\n*\n* @example\n* var y = entropy( 5.0, 3.0 );\n* // returns ~2.518\n*\n* @example\n* var y = entropy( NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = entropy( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = entropy( 0.0, 0.0 );\n* // returns NaN\n*/\nfunction entropy( mu, sigma ) {\n\tif (\n\t\tisnan( mu ) ||\n\t\tisnan( sigma ) ||\n\t\tsigma <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn 0.5 * ln( TWO_PI * E * sigma*sigma );\n}\n\n\n// EXPORTS //\n\nexport default entropy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns the excess kurtosis for a normal distribution with mean `mu` and standard deviation `sigma`.\n*\n* @param {number} mu - mean\n* @param {PositiveNumber} sigma - standard deviation\n* @returns {number} excess kurtosis\n*\n* @example\n* var y = kurtosis( 0.0, 1.0 );\n* // returns 0.0\n*\n* @example\n* var y = kurtosis( 5.0, 3.0 );\n* // returns 0.0\n*\n* @example\n* var y = kurtosis( NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = kurtosis( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = kurtosis( 0.0, 0.0 );\n* // returns NaN\n*/\nfunction kurtosis( mu, sigma ) {\n\tif (\n\t\tisnan( mu ) ||\n\t\tisnan( sigma ) ||\n\t\tsigma <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn 0.0;\n}\n\n\n// EXPORTS //\n\nexport default kurtosis;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns the expected value for a normal distribution with mean `mu` and standard deviation `sigma`.\n*\n* @param {number} mu - mean\n* @param {PositiveNumber} sigma - standard deviation\n* @returns {number} expected value\n*\n* @example\n* var y = mean( 0.0, 1.0 );\n* // returns 0.0\n*\n* @example\n* var y = mean( 5.0, 2.0 );\n* // returns 5.0\n*\n* @example\n* var y = mean( NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = mean( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = mean( 0.0, 0.0 );\n* // returns NaN\n*/\nfunction mean( mu, sigma ) {\n\tif (\n\t\tisnan( mu ) ||\n\t\tisnan( sigma ) ||\n\t\tsigma <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn mu;\n}\n\n\n// EXPORTS //\n\nexport default mean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns the median for a normal distribution with mean `mu` and standard deviation `sigma`.\n*\n* @param {number} mu - mean\n* @param {PositiveNumber} sigma - standard deviation\n* @returns {number} median\n*\n* @example\n* var y = median( 0.0, 1.0 );\n* // returns 0.0\n*\n* @example\n* var y = median( 5.0, 2.0 );\n* // returns 5.0\n*\n* @example\n* var y = median( NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = median( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = median( 0.0, 0.0 );\n* // returns NaN\n*/\nfunction median( mu, sigma ) {\n\tif (\n\t\tisnan( mu ) ||\n\t\tisnan( sigma ) ||\n\t\tsigma <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn mu;\n}\n\n\n// EXPORTS //\n\nexport default median;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns the mode for a normal distribution with mean `mu` and standard deviation `sigma`.\n*\n* @param {number} mu - mean\n* @param {PositiveNumber} sigma - standard deviation\n* @returns {number} mode\n*\n* @example\n* var y = mode( 0.0, 1.0 );\n* // returns 0.0\n*\n* @example\n* var y = mode( 5.0, 2.0 );\n* // returns 5.0\n*\n* @example\n* var y = mode( NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = mode( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = mode( 0.0, 0.0 );\n* // returns NaN\n*/\nfunction mode( mu, sigma ) {\n\tif (\n\t\tisnan( mu ) ||\n\t\tisnan( sigma ) ||\n\t\tsigma <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn mu;\n}\n\n\n// EXPORTS //\n\nexport default mode;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns the skewness for a normal distribution with mean `mu` and standard deviation `sigma`.\n*\n* @param {number} mu - mean\n* @param {PositiveNumber} sigma - standard deviation\n* @returns {number} skewness\n*\n* @example\n* var y = skewness( 0.0, 1.0 );\n* // returns 0.0\n*\n* @example\n* var y = skewness( 5.0, 3.0 );\n* // returns 0.0\n*\n* @example\n* var y = skewness( NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = skewness( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = skewness( 0.0, 0.0 );\n* // returns NaN\n*/\nfunction skewness( mu, sigma ) {\n\tif (\n\t\tisnan( mu ) ||\n\t\tisnan( sigma ) ||\n\t\tsigma <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn 0.0;\n}\n\n\n// EXPORTS //\n\nexport default skewness;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns the standard deviation for a normal distribution with mean `mu` and standard deviation `sigma`.\n*\n* @param {number} mu - mean\n* @param {PositiveNumber} sigma - standard deviation\n* @returns {PositiveNumber} standard deviation\n*\n* @example\n* var y = stdev( 0.0, 1.0 );\n* // returns 1.0\n*\n* @example\n* var y = stdev( 5.0, 3.0 );\n* // returns 3.0\n*\n* @example\n* var y = stdev( NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = stdev( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = stdev( 0.0, 0.0 );\n* // returns NaN\n*/\nfunction stdev( mu, sigma ) {\n\tif (\n\t\tisnan( mu ) ||\n\t\tisnan( sigma ) ||\n\t\tsigma <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn sigma;\n}\n\n\n// EXPORTS //\n\nexport default stdev;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns the variance for a normal distribution with mean `mu` and standard deviation `sigma`.\n*\n* @param {number} mu - mean\n* @param {PositiveNumber} sigma - standard deviation\n* @returns {PositiveNumber} variance\n*\n* @example\n* var y = variance( 0.0, 1.0 );\n* // returns 1.0\n*\n* @example\n* var y = variance( 5.0, 3.0 );\n* // returns 9.0\n*\n* @example\n* var y = variance( NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = variance( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = variance( 0.0, 0.0 );\n* // returns NaN\n*/\nfunction variance( mu, sigma ) {\n\tif (\n\t\tisnan( mu ) ||\n\t\tisnan( sigma ) ||\n\t\tsigma <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn sigma*sigma;\n}\n\n\n// EXPORTS //\n\nexport default variance;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport ln from '@stdlib/math-base-special-ln';\nimport pow from '@stdlib/math-base-special-pow';\nimport LN_TWO_PI from '@stdlib/constants-float64-ln-two-pi';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Evaluates the natural logarithm of the probability density function (PDF) for a normal distribution with mean `mu` and standard deviation `sigma` at a value `x`.\n*\n* @param {number} x - input value\n* @param {number} mu - mean\n* @param {NonNegativeNumber} sigma - standard deviation\n* @returns {number} logarithm of probability density function\n*\n* @example\n* var y = logpdf( 2.0, 0.0, 1.0 );\n* // returns ~-2.919\n*\n* @example\n* var y = logpdf( -1.0, 4.0, 2.0 );\n* // returns ~-4.737\n*\n* @example\n* var y = logpdf( NaN, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = logpdf( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = logpdf( 0.0, 0.0, NaN );\n* // returns NaN\n*\n* @example\n* // Negative standard deviation:\n* var y = logpdf( 2.0, 0.0, -1.0 );\n* // returns NaN\n*\n* @example\n* var y = logpdf( 2.0, 8.0, 0.0 );\n* // returns -Infinity\n*\n* @example\n* var y = logpdf( 8.0, 8.0, 0.0 );\n* // returns Infinity\n*/\nfunction logpdf( x, mu, sigma ) {\n\tvar s2;\n\tvar A;\n\tvar B;\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( mu ) ||\n\t\tisnan( sigma ) ||\n\t\tsigma < 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( sigma === 0.0 ) {\n\t\treturn ( x === mu ) ? PINF : NINF;\n\t}\n\ts2 = pow( sigma, 2.0 );\n\tA = (-0.5) * ( ( 2.0*ln( sigma ) ) + LN_TWO_PI );\n\tB = -1.0 / ( 2.0*s2 );\n\treturn A + ( B * pow( x-mu, 2.0 ) );\n}\n\n\n// EXPORTS //\n\nexport default logpdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport exp from '@stdlib/math-base-special-exp';\nimport pow from '@stdlib/math-base-special-pow';\n\n\n// MAIN //\n\n/**\n* Evaluates the moment-generating function (MGF) for a normal distribution with mean `mu` and standard deviation `sigma` at a value `t`.\n*\n* @param {number} t - input value\n* @param {number} mu - mean\n* @param {PositiveNumber} sigma - standard deviation\n* @returns {number} evaluated MGF\n*\n* @example\n* var y = mgf( 2.0, 0.0, 1.0 );\n* // returns ~7.389\n*\n* @example\n* var y = mgf( 0.0, 0.0, 1.0 );\n* // returns 1.0\n*\n* @example\n* var y = mgf( -1.0, 4.0, 2.0 );\n* // returns ~0.1353\n*\n* @example\n* var y = mgf( NaN, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = mgf( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = mgf( 0.0, 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = mgf( 2.0, 0.0, 0.0 );\n* // returns NaN\n*/\nfunction mgf( t, mu, sigma ) {\n\tif (\n\t\tisnan( t ) ||\n\t\tisnan( mu ) ||\n\t\tisnan( sigma ) ||\n\t\tsigma <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn exp( (mu * t) + (0.5 * pow( sigma * t, 2.0 )) );\n}\n\n\n// EXPORTS //\n\nexport default mgf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport exp from '@stdlib/math-base-special-exp';\nimport pow from '@stdlib/math-base-special-pow';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport TWO_PI from '@stdlib/constants-float64-two-pi';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Evaluates the probability density function (PDF) for a normal distribution with mean `mu` and standard deviation `sigma` at a value `x`.\n*\n* @param {number} x - input value\n* @param {number} mu - mean\n* @param {NonNegativeNumber} sigma - standard deviation\n* @returns {number} evaluated probability density function\n*\n* @example\n* var y = pdf( 2.0, 0.0, 1.0 );\n* // returns ~0.054\n*\n* @example\n* var y = pdf( -1.0, 4.0, 2.0 );\n* // returns ~0.009\n*\n* @example\n* var y = pdf( NaN, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = pdf( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = pdf( 0.0, 0.0, NaN );\n* // returns NaN\n*\n* @example\n* // Negative standard deviation:\n* var y = pdf( 2.0, 0.0, -1.0 );\n* // returns NaN\n*\n* @example\n* var y = pdf( 2.0, 8.0, 0.0 );\n* // returns 0.0\n*\n* @example\n* var y = pdf( 8.0, 8.0, 0.0 );\n* // returns Infinity\n*/\nfunction pdf( x, mu, sigma ) {\n\tvar s2;\n\tvar A;\n\tvar B;\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( mu ) ||\n\t\tisnan( sigma ) ||\n\t\tsigma < 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( sigma === 0.0 ) {\n\t\treturn ( x === mu ) ? PINF : 0.0;\n\t}\n\ts2 = pow( sigma, 2.0 );\n\tA = 1.0 / sqrt( s2*TWO_PI );\n\tB = -1.0 / ( 2.0*s2 );\n\treturn A * exp( B * pow(x-mu, 2.0) );\n}\n\n\n// EXPORTS //\n\nexport default pdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nimport defineProperty from '@stdlib/utils-define-property';\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport setReadOnlyAccessor from '@stdlib/utils-define-nonenumerable-read-only-accessor';\nimport { isPrimitive as isPositive } from '@stdlib/assert-is-positive-number';\nimport { isPrimitive as isNumber } from '@stdlib/assert-is-number';\nimport isnan from '@stdlib/assert-is-nan';\nimport entropy from '@stdlib/stats-base-dists-normal-entropy';\nimport kurtosis from '@stdlib/stats-base-dists-normal-kurtosis';\nimport mean from '@stdlib/stats-base-dists-normal-mean';\nimport median from '@stdlib/stats-base-dists-normal-median';\nimport mode from '@stdlib/stats-base-dists-normal-mode';\nimport skewness from '@stdlib/stats-base-dists-normal-skewness';\nimport stdev from '@stdlib/stats-base-dists-normal-stdev';\nimport variance from '@stdlib/stats-base-dists-normal-variance';\nimport cdf from '@stdlib/stats-base-dists-normal-cdf';\nimport logpdf from '@stdlib/stats-base-dists-normal-logpdf';\nimport mgf from '@stdlib/stats-base-dists-normal-mgf';\nimport pdf from '@stdlib/stats-base-dists-normal-pdf';\nimport quantile from '@stdlib/stats-base-dists-normal-quantile';\nimport format from '@stdlib/string-format';\n\n\n// FUNCTIONS //\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {Probability} evaluated CDF\n*/\nfunction normalCDF( x ) {\n\treturn cdf( x, this.mu, this.sigma );\n}\n\n/**\n* Evaluates the natural logarithm of the probability density function (PDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n*/\nfunction normalLogPDF( x ) {\n\treturn logpdf( x, this.mu, this.sigma );\n}\n\n/**\n* Evaluates the moment-generating function (MGF).\n*\n* @private\n* @param {number} t - input value\n* @returns {number} evaluated MGF\n*/\nfunction normalMGF( t ) {\n\treturn mgf( t, this.mu, this.sigma );\n}\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n*/\nfunction normalPDF( x ) {\n\treturn pdf( x, this.mu, this.sigma );\n}\n\n/**\n* Evaluates the quantile function.\n*\n* @private\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n*/\nfunction normalQuantile( p ) {\n\treturn quantile( p, this.mu, this.sigma );\n}\n\n\n// MAIN //\n\n/**\n* Normal distribution constructor.\n*\n* @constructor\n* @param {number} [mu=0.0] - location parameter\n* @param {PositiveNumber} [sigma=1.0] - scale parameter\n* @throws {TypeError} `sigma` must be a positive number\n* @returns {Normal} distribution instance\n*\n* @example\n* var normal = new Normal( 1.0, 1.0 );\n*\n* var y = normal.cdf( 1.5 );\n* // returns ~0.691\n*\n* var mu = normal.mean;\n* // returns 1.0\n*/\nfunction Normal() {\n\tvar sigma;\n\tvar mu;\n\tif ( !(this instanceof Normal) ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn new Normal();\n\t\t}\n\t\treturn new Normal( arguments[ 0 ], arguments[ 1 ] );\n\t}\n\tif ( arguments.length ) {\n\t\tmu = arguments[ 0 ];\n\t\tsigma = arguments[ 1 ];\n\t\tif ( !isNumber( mu ) || isnan( mu ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Location parameter must be a number. Value: `%s`.', mu ) );\n\t\t}\n\t\tif ( !isPositive( sigma ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Scale parameter must be a positive number. Value: `%s`.', sigma ) );\n\t\t}\n\t} else {\n\t\tmu = 0.0;\n\t\tsigma = 1.0;\n\t}\n\tdefineProperty( this, 'mu', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn mu;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isNumber( value ) || isnan( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid assignment. Must be a number. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\tmu = value;\n\t\t}\n\t});\n\tdefineProperty( this, 'sigma', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn sigma;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isPositive( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid assignment. Must be a positive number. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\tsigma = value;\n\t\t}\n\t});\n\treturn this;\n}\n\n/**\n* Normal distribution differential entropy.\n*\n* @name entropy\n* @memberof Normal.prototype\n* @type {number}\n* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}\n*\n* @example\n* var normal = new Normal( 4.0, 12.0 );\n*\n* var v = normal.entropy;\n* // returns ~3.904\n*/\nsetReadOnlyAccessor( Normal.prototype, 'entropy', function get() {\n\treturn entropy( this.mu, this.sigma );\n});\n\n/**\n* Normal distribution excess kurtosis.\n*\n* @name kurtosis\n* @memberof Normal.prototype\n* @type {number}\n* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}\n*\n* @example\n* var normal = new Normal( 4.0, 12.0 );\n*\n* var v = normal.kurtosis;\n* // returns 0.0\n*/\nsetReadOnlyAccessor( Normal.prototype, 'kurtosis', function get() {\n\treturn kurtosis( this.mu, this.sigma );\n});\n\n/**\n* Normal distribution expected value.\n*\n* @name mean\n* @memberof Normal.prototype\n* @type {number}\n* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}\n*\n* @example\n* var normal = new Normal( 4.0, 12.0 );\n*\n* var v = normal.mean;\n* // returns 4.0\n*/\nsetReadOnlyAccessor( Normal.prototype, 'mean', function get() {\n\treturn mean( this.mu, this.sigma );\n});\n\n/**\n* Normal distribution median.\n*\n* @name median\n* @memberof Normal.prototype\n* @type {number}\n* @see [median]{@link https://en.wikipedia.org/wiki/Median}\n*\n* @example\n* var normal = new Normal( 4.0, 12.0 );\n*\n* var v = normal.median;\n* // returns 4.0\n*/\nsetReadOnlyAccessor( Normal.prototype, 'median', function get() {\n\treturn median( this.mu, this.sigma );\n});\n\n/**\n* Normal distribution mode.\n*\n* @name mode\n* @memberof Normal.prototype\n* @type {number}\n* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}\n*\n* @example\n* var normal = new Normal( 4.0, 12.0 );\n*\n* var v = normal.mode;\n* // returns 4.0\n*/\nsetReadOnlyAccessor( Normal.prototype, 'mode', function get() {\n\treturn mode( this.mu, this.sigma );\n});\n\n/**\n* Normal distribution skewness.\n*\n* @name skewness\n* @memberof Normal.prototype\n* @type {number}\n* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}\n*\n* @example\n* var normal = new Normal( 4.0, 12.0 );\n*\n* var v = normal.skewness;\n* // returns 0.0\n*/\nsetReadOnlyAccessor( Normal.prototype, 'skewness', function get() {\n\treturn skewness( this.mu, this.sigma );\n});\n\n/**\n* Normal distribution standard deviation.\n*\n* @name stdev\n* @memberof Normal.prototype\n* @type {PositiveNumber}\n* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}\n*\n* @example\n* var normal = new Normal( 4.0, 12.0 );\n*\n* var v = normal.stdev;\n* // returns 12.0\n*/\nsetReadOnlyAccessor( Normal.prototype, 'stdev', function get() {\n\treturn stdev( this.mu, this.sigma );\n});\n\n/**\n* Normal distribution variance.\n*\n* @name variance\n* @memberof Normal.prototype\n* @type {PositiveNumber}\n* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}\n*\n* @example\n* var normal = new Normal( 4.0, 12.0 );\n*\n* var v = normal.variance;\n* // returns 144.0\n*/\nsetReadOnlyAccessor( Normal.prototype, 'variance', function get() {\n\treturn variance( this.mu, this.sigma );\n});\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @name cdf\n* @memberof Normal.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var normal = new Normal( 2.0, 4.0 );\n*\n* var v = normal.cdf( 0.5 );\n* // returns ~0.354\n*/\nsetReadOnly( Normal.prototype, 'cdf', normalCDF );\n\n/**\n* Evaluates the natural logarithm of the probability density function (PDF).\n*\n* @name logpdf\n* @memberof Normal.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var normal = new Normal( 2.0, 4.0 );\n*\n* var v = normal.logpdf( 0.8 );\n* // returns ~-2.35\n*/\nsetReadOnly( Normal.prototype, 'logpdf', normalLogPDF );\n\n/**\n* Evaluates the moment-generating function (MGF).\n*\n* @name mgf\n* @memberof Normal.prototype\n* @type {Function}\n* @param {number} t - input value\n* @returns {number} evaluated MGF\n* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}\n*\n* @example\n* var normal = new Normal( 2.0, 4.0 );\n*\n* var v = normal.mgf( 0.01 );\n* // returns ~1.021\n*/\nsetReadOnly( Normal.prototype, 'mgf', normalMGF );\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @name pdf\n* @memberof Normal.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var normal = new Normal( 2.0, 4.0 );\n*\n* var v = normal.pdf( 0.8 );\n* // returns ~0.095\n*/\nsetReadOnly( Normal.prototype, 'pdf', normalPDF );\n\n/**\n* Evaluates the quantile function.\n*\n* @name quantile\n* @memberof Normal.prototype\n* @type {Function}\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}\n*\n* @example\n* var normal = new Normal( 2.0, 4.0 );\n*\n* var v = normal.quantile( 0.5 );\n* // returns 2.0\n*/\nsetReadOnly( Normal.prototype, 'quantile', normalQuantile );\n\n\n// EXPORTS //\n\nexport default Normal;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Natural logarithm of the probability density function (PDF) for a normal distribution.\n*\n* @module @stdlib/stats-base-dists-normal-logpdf\n*\n* @example\n* import logpdf from '@stdlib/stats-base-dists-normal-logpdf';\n*\n* var y = logpdf( 2.0, 0.0, 1.0 );\n* // returns ~-2.919\n*\n* var myLogPDF = logpdf.factory( 10.0, 2.0 );\n* y = myLogPDF( 10.0 );\n* // returns ~-1.612\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport logpdf from './logpdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( logpdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default logpdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport { factory as degenerate } from '@stdlib/stats-base-dists-degenerate-logpdf';\nimport LN_TWO_PI from '@stdlib/constants-float64-ln-two-pi';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport pow from '@stdlib/math-base-special-pow';\nimport ln from '@stdlib/math-base-special-ln';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the natural logarithm of the probability density function (PDF) for a normal distribution.\n*\n* @param {number} mu - mean\n* @param {NonNegativeNumber} sigma - standard deviation\n* @returns {Function} logPDF\n*\n* @example\n* var logpdf = factory( 10.0, 2.0 );\n* var y = logpdf( 10.0 );\n* // returns ~-1.612\n*\n* y = logpdf( 5.0 );\n* // returns ~-4.737\n*/\nfunction factory( mu, sigma ) {\n\tvar s2;\n\tvar A;\n\tvar B;\n\tif (\n\t\tisnan( mu ) ||\n\t\tisnan( sigma ) ||\n\t\tsigma < 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\tif ( sigma === 0.0 ) {\n\t\treturn degenerate( mu );\n\t}\n\ts2 = pow( sigma, 2.0 );\n\tA = (-0.5) * ( ( 2.0*ln( sigma ) ) + LN_TWO_PI );\n\tB = -1.0 / ( 2.0*s2 );\n\treturn logpdf;\n\n\t/**\n\t* Evaluates the natural logarithm of the probability density function (PDF) for a normal distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {number} evaluated logPDF\n\t*\n\t* @example\n\t* var y = logpdf( -3.14 );\n\t* // returns <number>\n\t*/\n\tfunction logpdf( x ) {\n\t\treturn A + ( B * pow( x-mu, 2.0 ) );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate the moment-generating function (MGF) for a normal distribution.\n*\n* @module @stdlib/stats-base-dists-normal-mgf\n*\n* @example\n* import mgf from '@stdlib/stats-base-dists-normal-mgf';\n*\n* var y = mgf( 2.0, 0.0, 1.0 );\n* // returns ~7.389\n*\n* y = mgf( 0.0, 0.0, 1.0 );\n* // returns 1.0\n*\n* y = mgf( -1.0, 4.0, 2.0 );\n* // returns ~0.1353\n*\n* var mymgf = mgf.factory( 4.0, 2.0 );\n*\n* y = mymgf( 1.0 );\n* // returns ~403.429\n*\n* y = mymgf( 0.5 );\n* // returns ~12.182\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport mgf from './mgf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( mgf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default mgf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport exp from '@stdlib/math-base-special-exp';\nimport pow from '@stdlib/math-base-special-pow';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the moment-generating function (MGF) of a normal distribution with mean `mu` and standard deviation `sigma`.\n*\n* @param {number} mu - mean\n* @param {PositiveNumber} sigma - standard deviation\n* @returns {Function} MGF\n*\n* @example\n* var mgf = factory( 4.0, 2.0 );\n*\n* var y = mgf( 1.0 );\n* // returns ~403.429\n*\n* y = mgf( 0.5 );\n* // returns ~12.182\n*/\nfunction factory( mu, sigma ) {\n\tif (\n\t\tisnan( mu ) ||\n\t\tisnan( sigma ) ||\n\t\tsigma <= 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn mgf;\n\n\t/**\n\t* Evaluates the moment-generating function (MGF) for a normal distribution.\n\t*\n\t* @private\n\t* @param {number} t - input value\n\t* @returns {number} evaluated MGF\n\t*\n\t* @example\n\t* var y = mgf( 0.5 );\n\t* // returns <number>\n\t*/\n\tfunction mgf( t ) {\n\t\tif ( isnan( t ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn exp( (mu * t) + (0.5 * pow( sigma * t, 2.0 )) );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Normal distribution probability density function (PDF).\n*\n* @module @stdlib/stats-base-dists-normal-pdf\n*\n* @example\n* import pdf from '@stdlib/stats-base-dists-normal-pdf';\n*\n* var y = pdf( 2.0, 0.0, 1.0 );\n* // returns ~0.054\n*\n* var myPDF = pdf.factory( 10.0, 2.0 );\n* y = myPDF( 10.0 );\n* // returns ~0.199\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport pdf from './pdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( pdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default pdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport { factory as degenerate } from '@stdlib/stats-base-dists-degenerate-pdf';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport exp from '@stdlib/math-base-special-exp';\nimport pow from '@stdlib/math-base-special-pow';\nimport TWO_PI from '@stdlib/constants-float64-two-pi';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the probability density function (PDF) for a normal distribution.\n*\n* @param {number} mu - mean\n* @param {NonNegativeNumber} sigma - standard deviation\n* @returns {Function} function to evaluate the probability density function\n*\n* @example\n* var pdf = factory( 10.0, 2.0 );\n* var y = pdf( 10.0 );\n* // returns ~0.199\n*\n* y = pdf( 5.0 );\n* // returns ~0.009\n*/\nfunction factory( mu, sigma ) {\n\tvar s2;\n\tvar A;\n\tvar B;\n\tif (\n\t\tisnan( mu ) ||\n\t\tisnan( sigma ) ||\n\t\tsigma < 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\tif ( sigma === 0.0 ) {\n\t\treturn degenerate( mu );\n\t}\n\ts2 = pow( sigma, 2.0 );\n\tA = 1.0 / sqrt( s2*TWO_PI );\n\tB = -1.0 / ( 2.0*s2 );\n\treturn pdf;\n\n\t/**\n\t* Evaluates the probability density function (PDF) for a normal distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {number} evaluated probability density function\n\t*\n\t* @example\n\t* var y = pdf( -3.14 );\n\t* // returns <number>\n\t*/\n\tfunction pdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn A * exp( B * pow(x-mu, 2.0) );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace normal\n*/\nvar normal = {};\n\n/**\n* @name cdf\n* @memberof normal\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/normal/cdf}\n*/\nimport cdf from '@stdlib/stats-base-dists-normal-cdf';\nsetReadOnly( normal, 'cdf', cdf );\n\n/**\n* @name Normal\n* @memberof normal\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/normal/ctor}\n*/\nimport Normal from '@stdlib/stats-base-dists-normal-ctor';\nsetReadOnly( normal, 'Normal', Normal );\n\n/**\n* @name entropy\n* @memberof normal\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/normal/entropy}\n*/\nimport entropy from '@stdlib/stats-base-dists-normal-entropy';\nsetReadOnly( normal, 'entropy', entropy );\n\n/**\n* @name kurtosis\n* @memberof normal\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/normal/kurtosis}\n*/\nimport kurtosis from '@stdlib/stats-base-dists-normal-kurtosis';\nsetReadOnly( normal, 'kurtosis', kurtosis );\n\n/**\n* @name logpdf\n* @memberof normal\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/normal/logpdf}\n*/\nimport logpdf from '@stdlib/stats-base-dists-normal-logpdf';\nsetReadOnly( normal, 'logpdf', logpdf );\n\n/**\n* @name mean\n* @memberof normal\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/normal/mean}\n*/\nimport mean from '@stdlib/stats-base-dists-normal-mean';\nsetReadOnly( normal, 'mean', mean );\n\n/**\n* @name median\n* @memberof normal\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/normal/median}\n*/\nimport median from '@stdlib/stats-base-dists-normal-median';\nsetReadOnly( normal, 'median', median );\n\n/**\n* @name mgf\n* @memberof normal\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/normal/mgf}\n*/\nimport mgf from '@stdlib/stats-base-dists-normal-mgf';\nsetReadOnly( normal, 'mgf', mgf );\n\n/**\n* @name mode\n* @memberof normal\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/normal/mode}\n*/\nimport mode from '@stdlib/stats-base-dists-normal-mode';\nsetReadOnly( normal, 'mode', mode );\n\n/**\n* @name pdf\n* @memberof normal\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/normal/pdf}\n*/\nimport pdf from '@stdlib/stats-base-dists-normal-pdf';\nsetReadOnly( normal, 'pdf', pdf );\n\n/**\n* @name quantile\n* @memberof normal\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/normal/quantile}\n*/\nimport quantile from '@stdlib/stats-base-dists-normal-quantile';\nsetReadOnly( normal, 'quantile', quantile );\n\n/**\n* @name skewness\n* @memberof normal\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/normal/skewness}\n*/\nimport skewness from '@stdlib/stats-base-dists-normal-skewness';\nsetReadOnly( normal, 'skewness', skewness );\n\n/**\n* @name stdev\n* @memberof normal\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/normal/stdev}\n*/\nimport stdev from '@stdlib/stats-base-dists-normal-stdev';\nsetReadOnly( normal, 'stdev', stdev );\n\n/**\n* @name variance\n* @memberof normal\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/normal/variance}\n*/\nimport variance from '@stdlib/stats-base-dists-normal-variance';\nsetReadOnly( normal, 'variance', variance );\n\n\n// EXPORTS //\n\nexport default normal;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport pow from '@stdlib/math-base-special-pow';\n\n\n// MAIN //\n\n/**\n* Evaluates the cumulative distribution function (CDF) for a Pareto (Type I) distribution with shape parameter `alpha` and scale parameter `beta` at a value `x`.\n*\n* @param {number} x - input value\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} beta - scale parameter\n* @returns {Probability} evaluated CDF\n*\n* @example\n* var y = cdf( 2.0, 1.0, 1.0 );\n* // returns 0.5\n*\n* @example\n* var y = cdf( 5.0, 2.0, 4.0 );\n* // returns ~0.36\n*\n* @example\n* var y = cdf( 4.0, 2.0, 2.0 );\n* // returns 0.75\n*\n* @example\n* var y = cdf( 1.9, 2.0, 2.0 );\n* // returns 0.0\n*\n* @example\n* var y = cdf( +Infinity, 4.0, 2.0 );\n* // returns 1.0\n*\n* @example\n* var y = cdf( 2.0, -1.0, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2.0, 0.5, -1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( NaN, 1.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, 1.0, NaN );\n* // returns NaN\n*/\nfunction cdf( x, alpha, beta ) {\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( alpha ) ||\n\t\tisnan( beta ) ||\n\t\talpha <= 0.0 ||\n\t\tbeta <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x < beta ) {\n\t\treturn 0.0;\n\t}\n\treturn 1.0 - pow( beta / x, alpha );\n}\n\n\n// EXPORTS //\n\nexport default cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport exp from '@stdlib/math-base-special-exp';\nimport ln from '@stdlib/math-base-special-ln';\n\n\n// MAIN //\n\n/**\n* Returns the differential entropy of a Pareto (Type I) distribution.\n*\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} beta - scale parameter\n* @returns {number} differential entropy\n*\n* @example\n* var v = entropy( 1.0, 1.0 );\n* // returns 2.0\n*\n* @example\n* var v = entropy( 4.0, 12.0 );\n* // returns ~2.349\n*\n* @example\n* var v = entropy( 8.0, 2.0 );\n* // returns ~-0.261\n*\n* @example\n* var v = entropy( 1.0, -0.1 );\n* // returns NaN\n*\n* @example\n* var v = entropy( -0.1, 1.0 );\n* // returns NaN\n*\n* @example\n* var v = entropy( 2.0, NaN );\n* // returns NaN\n*\n* @example\n* var v = entropy( NaN, 2.0 );\n* // returns NaN\n*/\nfunction entropy( alpha, beta ) {\n\tif (\n\t\tisnan( alpha ) ||\n\t\talpha <= 0.0 ||\n\t\tisnan( beta ) ||\n\t\tbeta <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn ln( ( beta/alpha ) * exp( 1.0 + ( 1.0/alpha ) ) );\n}\n\n\n// EXPORTS //\n\nexport default entropy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport pow from '@stdlib/math-base-special-pow';\n\n\n// MAIN //\n\n/**\n* Returns the excess kurtosis of a Pareto (Type I) distribution.\n*\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} beta - scale parameter\n* @returns {PositiveNumber} excess kurtosis\n*\n* @example\n* var v = kurtosis( 5.0, 1.0 );\n* // returns ~70.8\n*\n* @example\n* var v = kurtosis( 7.0, 12.0 );\n* // returns ~24.857\n*\n* @example\n* var v = kurtosis( 8.0, 2.0 );\n* // returns ~19.725\n*\n* @example\n* var v = kurtosis( 1.0, -0.1 );\n* // returns NaN\n*\n* @example\n* var v = kurtosis( -0.1, 1.0 );\n* // returns NaN\n*\n* @example\n* var v = kurtosis( 2.0, NaN );\n* // returns NaN\n*\n* @example\n* var v = kurtosis( NaN, 2.0 );\n* // returns NaN\n*/\nfunction kurtosis( alpha, beta ) {\n\tvar out;\n\tif (\n\t\tisnan( alpha ) ||\n\t\talpha <= 4.0 ||\n\t\tisnan( beta ) ||\n\t\tbeta <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tout = 6.0 * ( pow( alpha, 3.0 ) + pow( alpha, 2.0 ) - ( 6.0*alpha ) - 2.0 );\n\tout /= alpha * ( alpha-3.0 ) * ( alpha-4.0 );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default kurtosis;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Returns the expected value of a Pareto (Type I) distribution.\n*\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} beta - scale parameter\n* @returns {PositiveNumber} expected value\n*\n* @example\n* var v = mean( 1.0, 1.0 );\n* // returns Infinity\n*\n* @example\n* var v = mean( 4.0, 12.0 );\n* // returns 16.0\n*\n* @example\n* var v = mean( 8.0, 2.0 );\n* // returns ~2.286\n*\n* @example\n* var v = mean( 1.0, -0.1 );\n* // returns NaN\n*\n* @example\n* var v = mean( -0.1, 1.0 );\n* // returns NaN\n*\n* @example\n* var v = mean( 2.0, NaN );\n* // returns NaN\n*\n* @example\n* var v = mean( NaN, 2.0 );\n* // returns NaN\n*/\nfunction mean( alpha, beta ) {\n\tif ( alpha <= 0.0 || beta <= 0.0 ) {\n\t\treturn NaN;\n\t}\n\tif ( alpha <= 1.0 ) {\n\t\treturn PINF;\n\t}\n\treturn ( alpha*beta ) / ( alpha-1.0 );\n}\n\n\n// EXPORTS //\n\nexport default mean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport pow from '@stdlib/math-base-special-pow';\n\n\n// MAIN //\n\n/**\n* Returns the median of a Pareto (Type I) distribution.\n*\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} beta - scale parameter\n* @returns {PositiveNumber} median\n*\n* @example\n* var v = median( 1.0, 1.0 );\n* // returns 2.0\n*\n* @example\n* var v = median( 4.0, 12.0 );\n* // returns ~14.27\n*\n* @example\n* var v = median( 8.0, 2.0 );\n* // returns ~2.181\n*\n* @example\n* var v = median( 1.0, -0.1 );\n* // returns NaN\n*\n* @example\n* var v = median( -0.1, 1.0 );\n* // returns NaN\n*\n* @example\n* var v = median( 2.0, NaN );\n* // returns NaN\n*\n* @example\n* var v = median( NaN, 2.0 );\n* // returns NaN\n*/\nfunction median( alpha, beta ) {\n\tif ( alpha <= 0.0 || beta <= 0.0 ) {\n\t\treturn NaN;\n\t}\n\treturn beta * pow( 2.0, 1.0/alpha );\n}\n\n\n// EXPORTS //\n\nexport default median;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns the mode of a Pareto (Type I) distribution.\n*\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} beta - scale parameter\n* @returns {PositiveNumber} mode\n*\n* @example\n* var v = mode( 1.0, 1.0 );\n* // returns 1.0\n*\n* @example\n* var v = mode( 4.0, 12.0 );\n* // returns 12.0\n*\n* @example\n* var v = mode( 8.0, 2.0 );\n* // returns 2.0\n*\n* @example\n* var v = mode( 1.0, -0.1 );\n* // returns NaN\n*\n* @example\n* var v = mode( -0.1, 1.0 );\n* // returns NaN\n*\n* @example\n* var v = mode( 2.0, NaN );\n* // returns NaN\n*\n* @example\n* var v = mode( NaN, 2.0 );\n* // returns NaN\n*/\nfunction mode( alpha, beta ) {\n\tif (\n\t\tisnan( alpha ) ||\n\t\talpha <= 0.0 ||\n\t\tisnan( beta ) ||\n\t\tbeta <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn beta;\n}\n\n\n// EXPORTS //\n\nexport default mode;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport sqrt from '@stdlib/math-base-special-sqrt';\n\n\n// MAIN //\n\n/**\n* Returns the skewness of a Pareto (Type I) distribution.\n*\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} beta - scale parameter\n* @returns {PositiveNumber} skewness\n*\n* @example\n* var v = skewness( 3.5, 1.0 );\n* // returns ~11.784\n*\n* @example\n* var v = skewness( 4.0, 12.0 );\n* // returns ~7.071\n*\n* @example\n* var v = skewness( 8.0, 2.0 );\n* // returns ~3.118\n*\n* @example\n* var v = skewness( 1.0, -0.1 );\n* // returns NaN\n*\n* @example\n* var v = skewness( -0.1, 1.0 );\n* // returns NaN\n*\n* @example\n* var v = skewness( 2.0, NaN );\n* // returns NaN\n*\n* @example\n* var v = skewness( NaN, 2.0 );\n* // returns NaN\n*/\nfunction skewness( alpha, beta ) {\n\tif (\n\t\tisnan( alpha ) ||\n\t\talpha <= 3.0 ||\n\t\tisnan( beta ) ||\n\t\tbeta <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn 2.0 * ( 1.0+alpha ) / ( alpha-3.0 ) * sqrt( ( alpha-2.0 ) / alpha );\n}\n\n\n// EXPORTS //\n\nexport default skewness;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport pow from '@stdlib/math-base-special-pow';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Returns the variance of a Pareto (Type I) distribution.\n*\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} beta - scale parameter\n* @returns {PositiveNumber} variance\n*\n* @example\n* var v = variance( 4.0, 12.0 );\n* // returns 32.0\n*\n* @example\n* var v = variance( 8.0, 2.0 );\n* // returns ~0.109\n*\n* @example\n* var v = variance( 1.0, 1.0 );\n* // returns Infinity\n*\n* @example\n* var v = variance( 1.0, -0.1 );\n* // returns NaN\n*\n* @example\n* var v = variance( -0.1, 1.0 );\n* // returns NaN\n*\n* @example\n* var v = variance( 2.0, NaN );\n* // returns NaN\n*\n* @example\n* var v = variance( NaN, 2.0 );\n* // returns NaN\n*/\nfunction variance( alpha, beta ) {\n\tif (\n\t\tisnan( alpha ) ||\n\t\talpha <= 0.0 ||\n\t\tisnan( beta ) ||\n\t\tbeta <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( alpha < 2.0 ) {\n\t\treturn PINF;\n\t}\n\treturn ( beta*beta * alpha ) / ( pow( alpha-1.0, 2.0 ) * ( alpha-2.0 ) );\n}\n\n\n// EXPORTS //\n\nexport default variance;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport log1p from '@stdlib/math-base-special-log1p';\nimport pow from '@stdlib/math-base-special-pow';\nimport NINF from '@stdlib/constants-float64-ninf';\n\n\n// MAIN //\n\n/**\n* Evaluates the cumulative distribution function (CDF) for a Pareto (Type I) distribution with shape parameter `alpha` and scale parameter `beta` at a value `x`.\n*\n* @param {number} x - input value\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} beta - scale parameter\n* @returns {number} evaluated logCDF\n*\n* @example\n* var y = logcdf( 2.0, 1.0, 1.0 );\n* // returns ~-0.693\n*\n* @example\n* var y = logcdf( 5.0, 2.0, 4.0 );\n* // returns ~-1.022\n*\n* @example\n* var y = logcdf( 4.0, 2.0, 2.0 );\n* // returns ~-0.288\n*\n* @example\n* var y = logcdf( 1.9, 2.0, 2.0 );\n* // returns -Infinity\n*\n* @example\n* var y = logcdf( +Infinity, 4.0, 2.0 );\n* // returns 0.0\n*\n* @example\n* var y = logcdf( 2.0, -1.0, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = logcdf( 2.0, 0.5, -1.0 );\n* // returns NaN\n*\n* @example\n* var y = logcdf( NaN, 1.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = logcdf( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = logcdf( 0.0, 1.0, NaN );\n* // returns NaN\n*/\nfunction logcdf( x, alpha, beta ) {\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( alpha ) ||\n\t\tisnan( beta ) ||\n\t\talpha <= 0.0 ||\n\t\tbeta <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x < beta ) {\n\t\treturn NINF;\n\t}\n\treturn log1p( -pow( beta / x, alpha ) );\n}\n\n\n// EXPORTS //\n\nexport default logcdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport ln from '@stdlib/math-base-special-ln';\nimport NINF from '@stdlib/constants-float64-ninf';\n\n\n// MAIN //\n\n/**\n* Evaluates the natural logarithm of the probability density function (PDF) for a Pareto (Type I) distribution with shape parameter `alpha` and scale parameter `beta` at a value `x`.\n*\n* @param {number} x - input value\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} beta - scale parameter\n* @returns {number} evaluated logPDF\n*\n* @example\n* var y = logpdf( 4.0, 1.0, 1.0 );\n* // returns ~-2.773\n*\n* @example\n* var y = logpdf( 20.0, 1.0, 10.0 );\n* // returns ~-3.689\n*\n* @example\n* var y = logpdf( 7.0, 2.0, 6.0 );\n* // returns ~-1.561\n*\n* @example\n* var y = logpdf( 7.0, 6.0, 3.0 );\n* // returns ~-5.238\n*\n* @example\n* var y = logpdf( 1.0, 4.0, 2.0 );\n* // returns -Infinity\n*\n* @example\n* var y = logpdf( 1.5, 4.0, 2.0 );\n* // returns -Infinity\n*\n* @example\n* var y = logpdf( 0.5, -1.0, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = logpdf( 0.5, 0.5, -1.0 );\n* // returns NaN\n*\n* @example\n* var y = logpdf( NaN, 1.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = logpdf( 0.5, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = logpdf( 0.5, 1.0, NaN );\n* // returns NaN\n*/\nfunction logpdf( x, alpha, beta ) {\n\tvar denom;\n\tvar num;\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( alpha ) ||\n\t\tisnan( beta ) ||\n\t\talpha <= 0.0 ||\n\t\tbeta <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x >= beta ) {\n\t\tnum = ln( alpha ) + ( alpha * ln( beta ) );\n\t\tdenom = ( alpha + 1.0 ) * ln( x );\n\t\treturn num - denom;\n\t}\n\treturn NINF;\n}\n\n\n// EXPORTS //\n\nexport default logpdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport pow from '@stdlib/math-base-special-pow';\n\n\n// MAIN //\n\n/**\n* Evaluates the probability density function (PDF) for a Pareto (Type I) distribution with shape parameter `alpha` and scale parameter `beta` at a value `x`.\n*\n* @param {number} x - input value\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} beta - scale parameter\n* @returns {number} evaluated PDF\n*\n* @example\n* var y = pdf( 4.0, 1.0, 1.0 );\n* // returns ~0.063\n*\n* @example\n* var y = pdf( 20.0, 1.0, 10.0 );\n* // returns 0.025\n*\n* @example\n* var y = pdf( 7.0, 2.0, 6.0 );\n* // returns ~0.21\n*\n* @example\n* var y = pdf( 7.0, 6.0, 3.0 );\n* // returns ~0.005\n*\n* @example\n* var y = pdf( 1.0, 4.0, 2.0 );\n* // returns 0.0\n*\n* @example\n* var y = pdf( 1.5, 4.0, 2.0 );\n* // returns 0.0\n*\n* @example\n* var y = pdf( 0.5, -1.0, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = pdf( 0.5, 0.5, -1.0 );\n* // returns NaN\n*\n* @example\n* var y = pdf( NaN, 1.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = pdf( 0.5, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = pdf( 0.5, 1.0, NaN );\n* // returns NaN\n*/\nfunction pdf( x, alpha, beta ) {\n\tvar denom;\n\tvar num;\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( alpha ) ||\n\t\tisnan( beta ) ||\n\t\talpha <= 0.0 ||\n\t\tbeta <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x >= beta ) {\n\t\tnum = alpha * pow( beta, alpha );\n\t\tdenom = pow( x, alpha + 1.0 );\n\t\treturn num / denom;\n\t}\n\treturn 0.0;\n}\n\n\n// EXPORTS //\n\nexport default pdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport pow from '@stdlib/math-base-special-pow';\n\n\n// MAIN //\n\n/**\n* Evaluates the quantile function for a Pareto (Type I) distribution with shape parameter `alpha` and scale parameter `beta` at a probability `p`.\n*\n* @param {Probability} p - input value\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} beta - scale parameter\n* @returns {number} evaluated quantile function\n*\n* @example\n* var y = quantile( 0.8, 2.0, 1.0 );\n* // returns ~2.236\n*\n* @example\n* var y = quantile( 0.8, 1.0, 10.0 );\n* // returns ~50.0\n*\n* @example\n* var y = quantile( 0.1, 1.0, 10.0 );\n* // returns ~11.111\n*\n* @example\n* var y = quantile( 1.1, 1.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( -0.2, 1.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( NaN, 1.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.5, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.5, 1.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.5, -1.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.5, 1.0, -1.0 );\n* // returns NaN\n*/\nfunction quantile( p, alpha, beta ) {\n\tif (\n\t\tisnan( alpha ) ||\n\t\tisnan( beta ) ||\n\t\tisnan( p ) ||\n\t\talpha <= 0.0 ||\n\t\tbeta <= 0.0 ||\n\t\tp < 0.0 ||\n\t\tp > 1.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn beta / pow( 1.0 - p, 1.0/alpha );\n}\n\n\n// EXPORTS //\n\nexport default quantile;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nimport defineProperty from '@stdlib/utils-define-property';\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport setReadOnlyAccessor from '@stdlib/utils-define-nonenumerable-read-only-accessor';\nimport { isPrimitive as isPositive } from '@stdlib/assert-is-positive-number';\nimport entropy from '@stdlib/stats-base-dists-pareto-type1-entropy';\nimport kurtosis from '@stdlib/stats-base-dists-pareto-type1-kurtosis';\nimport mean from '@stdlib/stats-base-dists-pareto-type1-mean';\nimport median from '@stdlib/stats-base-dists-pareto-type1-median';\nimport mode from '@stdlib/stats-base-dists-pareto-type1-mode';\nimport skewness from '@stdlib/stats-base-dists-pareto-type1-skewness';\nimport variance from '@stdlib/stats-base-dists-pareto-type1-variance';\nimport cdf from '@stdlib/stats-base-dists-pareto-type1-cdf';\nimport logcdf from '@stdlib/stats-base-dists-pareto-type1-logcdf';\nimport logpdf from '@stdlib/stats-base-dists-pareto-type1-logpdf';\nimport pdf from '@stdlib/stats-base-dists-pareto-type1-pdf';\nimport quantile from '@stdlib/stats-base-dists-pareto-type1-quantile';\nimport format from '@stdlib/string-format';\n\n\n// FUNCTIONS //\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {Probability} evaluated CDF\n*/\nfunction paretoCDF( x ) {\n\treturn cdf( x, this.alpha, this.beta );\n}\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {Probability} evaluated logCDF\n*/\nfunction paretoLogCDF( x ) {\n\treturn logcdf( x, this.alpha, this.beta );\n}\n\n/**\n* Evaluates the natural logarithm of the probability density function (PDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n*/\nfunction paretoLogPDF( x ) {\n\treturn logpdf( x, this.alpha, this.beta );\n}\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n*/\nfunction paretoPDF( x ) {\n\treturn pdf( x, this.alpha, this.beta );\n}\n\n/**\n* Evaluates the quantile function.\n*\n* @private\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n*/\nfunction paretoQuantile( p ) {\n\treturn quantile( p, this.alpha, this.beta );\n}\n\n\n// MAIN //\n\n/**\n* Pareto (Type I) distribution constructor.\n*\n* @constructor\n* @param {PositiveNumber} [alpha=1.0] - shape parameter\n* @param {PositiveNumber} [beta=1.0] - scale parameter\n* @throws {TypeError} `alpha` must be a positive number\n* @throws {TypeError} `beta` must be a positive number\n* @returns {Pareto1} distribution instance\n*\n* @example\n* var pareto1 = new Pareto1( 1.0, 1.0 );\n*\n* var y = pareto1.cdf( 0.8 );\n* // returns 0.0\n*\n* var mu = pareto1.mean;\n* // returns Infinity\n*/\nfunction Pareto1() {\n\tvar alpha;\n\tvar beta;\n\tif ( !(this instanceof Pareto1) ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn new Pareto1();\n\t\t}\n\t\treturn new Pareto1( arguments[ 0 ], arguments[ 1 ] );\n\t}\n\tif ( arguments.length ) {\n\t\talpha = arguments[ 0 ];\n\t\tbeta = arguments[ 1 ];\n\t\tif ( !isPositive( alpha ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First shape parameter must be a positive number. Value: `%s`.', alpha ) );\n\t\t}\n\t\tif ( !isPositive( beta ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second shape parameter must be a positive number. Value: `%s`.', beta ) );\n\t\t}\n\t} else {\n\t\talpha = 1.0;\n\t\tbeta = 1.0;\n\t}\n\tdefineProperty( this, 'alpha', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn alpha;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isPositive( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid assignment. Must be a positive number. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\talpha = value;\n\t\t}\n\t});\n\tdefineProperty( this, 'beta', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn beta;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isPositive( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid assignment. Must be a positive number. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\tbeta = value;\n\t\t}\n\t});\n\treturn this;\n}\n\n/**\n* Pareto (Type I) distribution differential entropy.\n*\n* @name entropy\n* @memberof Pareto1.prototype\n* @type {number}\n* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}\n*\n* @example\n* var pareto1 = new Pareto1( 4.0, 12.0 );\n*\n* var v = pareto1.entropy;\n* // returns ~2.349\n*/\nsetReadOnlyAccessor( Pareto1.prototype, 'entropy', function get() {\n\treturn entropy( this.alpha, this.beta );\n});\n\n/**\n* Pareto (Type I) distribution excess kurtosis.\n*\n* @name kurtosis\n* @memberof Pareto1.prototype\n* @type {number}\n* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}\n*\n* @example\n* var pareto1 = new Pareto1( 4.0, 12.0 );\n*\n* var v = pareto1.kurtosis;\n* // returns NaN\n*/\nsetReadOnlyAccessor( Pareto1.prototype, 'kurtosis', function get() {\n\treturn kurtosis( this.alpha, this.beta );\n});\n\n/**\n* Pareto (Type I) distribution expected value.\n*\n* @name mean\n* @memberof Pareto1.prototype\n* @type {number}\n* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}\n*\n* @example\n* var pareto1 = new Pareto1( 4.0, 12.0 );\n*\n* var v = pareto1.mean;\n* // returns 16.0\n*/\nsetReadOnlyAccessor( Pareto1.prototype, 'mean', function get() {\n\treturn mean( this.alpha, this.beta );\n});\n\n/**\n* Pareto (Type I) distribution median.\n*\n* @name median\n* @memberof Pareto1.prototype\n* @type {number}\n* @see [median]{@link https://en.wikipedia.org/wiki/Median}\n*\n* @example\n* var pareto1 = new Pareto1( 4.0, 12.0 );\n*\n* var v = pareto1.median;\n* // returns ~14.27\n*/\nsetReadOnlyAccessor( Pareto1.prototype, 'median', function get() {\n\treturn median( this.alpha, this.beta );\n});\n\n/**\n* Pareto (Type I) distribution mode.\n*\n* @name mode\n* @memberof Pareto1.prototype\n* @type {number}\n* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}\n*\n* @example\n* var pareto1 = new Pareto1( 4.0, 12.0 );\n*\n* var v = pareto1.mode;\n* // returns 12.0\n*/\nsetReadOnlyAccessor( Pareto1.prototype, 'mode', function get() {\n\treturn mode( this.alpha, this.beta );\n});\n\n/**\n* Pareto (Type I) distribution skewness.\n*\n* @name skewness\n* @memberof Pareto1.prototype\n* @type {number}\n* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}\n*\n* @example\n* var pareto1 = new Pareto1( 4.0, 12.0 );\n*\n* var v = pareto1.skewness;\n* // returns ~7.071\n*/\nsetReadOnlyAccessor( Pareto1.prototype, 'skewness', function get() {\n\treturn skewness( this.alpha, this.beta );\n});\n\n/**\n* Pareto (Type I) distribution variance.\n*\n* @name variance\n* @memberof Pareto1.prototype\n* @type {number}\n* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}\n*\n* @example\n* var pareto1 = new Pareto1( 4.0, 12.0 );\n*\n* var v = pareto1.variance;\n* // returns 32.0\n*/\nsetReadOnlyAccessor( Pareto1.prototype, 'variance', function get() {\n\treturn variance( this.alpha, this.beta );\n});\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @name cdf\n* @memberof Pareto1.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var pareto1 = new Pareto1( 2.0, 4.0 );\n*\n* var v = pareto1.cdf( 4.0 );\n* // returns 0.0\n*/\nsetReadOnly( Pareto1.prototype, 'cdf', paretoCDF );\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (CDF).\n*\n* @name logcdf\n* @memberof Pareto1.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logCDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var pareto1 = new Pareto1( 2.0, 4.0 );\n*\n* var v = pareto1.logcdf( 4.0 );\n* // returns -Infinity\n*/\nsetReadOnly( Pareto1.prototype, 'logcdf', paretoLogCDF );\n\n/**\n* Evaluates the natural logarithm of the probability density function (PDF).\n*\n* @name logpdf\n* @memberof Pareto1.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var pareto1 = new Pareto1( 2.0, 4.0 );\n*\n* var v = pareto1.logpdf( 5.0 );\n* // returns ~-1.363\n*/\nsetReadOnly( Pareto1.prototype, 'logpdf', paretoLogPDF );\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @name pdf\n* @memberof Pareto1.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var pareto1 = new Pareto1( 2.0, 4.0 );\n*\n* var v = pareto1.pdf( 5.0 );\n* // returns ~0.256\n*/\nsetReadOnly( Pareto1.prototype, 'pdf', paretoPDF );\n\n/**\n* Evaluates the quantile function.\n*\n* @name quantile\n* @memberof Pareto1.prototype\n* @type {Function}\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}\n*\n* @example\n* var pareto1 = new Pareto1( 2.0, 4.0 );\n*\n* var v = pareto1.quantile( 0.5 );\n* // returns ~5.657\n*/\nsetReadOnly( Pareto1.prototype, 'quantile', paretoQuantile );\n\n\n// EXPORTS //\n\nexport default Pareto1;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Pareto (Type I) distribution cumulative distribution function (CDF).\n*\n* @module @stdlib/stats-base-dists-pareto-type1-cdf\n*\n* @example\n* import cdf from '@stdlib/stats-base-dists-pareto-type1-cdf';\n*\n* var y = cdf( 2.0, 1.0, 1.0 );\n* // returns 0.5\n*\n* y = cdf( 5.0, 2.0, 4.0 );\n* // returns ~0.36\n*\n* y = cdf( 4.0, 2.0, 2.0 );\n* // returns 0.75\n*\n* y = cdf( 1.9, 2.0, 2.0 );\n* // returns 0.0\n*\n* y = cdf( +Infinity, 4.0, 2.0 );\n* // returns 1.0\n*\n* var mycdf = cdf.factory( 10.0, 2.0 );\n* y = mycdf( 3.0 );\n* // returns ~0.983\n*\n* y = mycdf( 2.5 );\n* // returns ~0.893\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport cdf from './cdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( cdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport pow from '@stdlib/math-base-special-pow';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the cumulative distribution function (CDF) for a Pareto (Type I) distribution with shape parameter `alpha` and scale parameter `beta`.\n*\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} beta - scale parameter\n* @returns {Function} CDF\n*\n* @example\n* var cdf = factory( 10.0, 2.0 );\n* var y = cdf( 3.0 );\n* // returns ~0.983\n*\n* y = cdf( 2.5 );\n* // returns ~0.893\n*/\nfunction factory( alpha, beta ) {\n\tif (\n\t\tisnan( alpha ) ||\n\t\tisnan( beta ) ||\n\t\talpha <= 0.0 ||\n\t\tbeta <= 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn cdf;\n\n\t/**\n\t* Evaluates the cumulative distribution function (CDF) for a Pareto (Type I) distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated CDF\n\t*/\n\tfunction cdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x < beta ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn 1.0 - pow( beta / x, alpha );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Natural logarithm of the cumulative distribution function (CDF) for a Pareto (Type I) distribution.\n*\n* @module @stdlib/stats-base-dists-pareto-type1-logcdf\n*\n* @example\n* import logcdf from '@stdlib/stats-base-dists-pareto-type1-logcdf';\n*\n* var y = logcdf( 2.0, 1.0, 1.0 );\n* // returns ~-0.693\n*\n* y = logcdf( 5.0, 2.0, 4.0 );\n* // returns ~-1.022\n*\n* y = logcdf( 4.0, 2.0, 2.0 );\n* // returns ~-0.288\n*\n* y = logcdf( 1.9, 2.0, 2.0 );\n* // returns -Infinity\n*\n* y = logcdf( +Infinity, 4.0, 2.0 );\n* // returns 0.0\n*\n* var mylogcdf = logcdf.factory( 10.0, 2.0 );\n* y = mylogcdf( 3.0 );\n* // returns ~-0.017\n*\n* y = mylogcdf( 2.5 );\n* // returns ~-0.113\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport logcdf from './logcdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( logcdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default logcdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport log1p from '@stdlib/math-base-special-log1p';\nimport pow from '@stdlib/math-base-special-pow';\nimport NINF from '@stdlib/constants-float64-ninf';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the natural logarithm of the cumulative distribution function (CDF) for a Pareto (Type I) distribution with shape parameter `alpha` and scale parameter `beta`.\n*\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} beta - scale parameter\n* @returns {Function} logCDF\n*\n* @example\n* var logcdf = factory( 10.0, 2.0 );\n* var y = logcdf( 3.0 );\n* // returns ~-0.017\n*\n* y = logcdf( 2.5 );\n* // returns ~-0.114\n*/\nfunction factory( alpha, beta ) {\n\tif (\n\t\tisnan( alpha ) ||\n\t\tisnan( beta ) ||\n\t\talpha <= 0.0 ||\n\t\tbeta <= 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn logcdf;\n\n\t/**\n\t* Evaluates the natural logarithm of the cumulative distribution function (CDF) for a Pareto (Type I) distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {number} evaluated logCDF\n\t*/\n\tfunction logcdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x < beta ) {\n\t\t\treturn NINF;\n\t\t}\n\t\treturn log1p( -pow( beta / x, alpha ) );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate the natural logarithm of the probability density function (PDF) for a Pareto (Type I) distribution.\n*\n* @module @stdlib/stats-base-dists-pareto-type1-logpdf\n*\n* @example\n* import logpdf from '@stdlib/stats-base-dists-pareto-type1-logpdf';\n*\n* var y = logpdf( 4.0, 1.0, 1.0 );\n* // returns ~-2.773\n*\n* y = logpdf( 20.0, 1.0, 10.0 );\n* // returns ~-3.689\n*\n* y = logpdf( 7.0, 2.0, 6.0 );\n* // returns ~-1.561\n*\n* var mylogpdf = logpdf.factory( 0.5, 0.5 );\n*\n* y = mylogpdf( 0.8 );\n* // returns ~-0.705\n*\n* y = mylogpdf( 2.0 );\n* // returns ~-2.079\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport logpdf from './logpdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( logpdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default logpdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport ln from '@stdlib/math-base-special-ln';\nimport NINF from '@stdlib/constants-float64-ninf';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the natural logarithm of the probability density function (PDF) for a Pareto (Type I) distribution with shape parameter `alpha` and scale parameter `beta`.\n*\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} beta - scale parameter\n* @returns {Function} logPDF\n*\n* @example\n* var mylogpdf = factory( 0.5, 0.5 );\n*\n* var y = mylogpdf( 0.8 );\n* // returns ~-0.705\n*\n* y = mylogpdf( 2.0 );\n* // returns ~-2.079\n*/\nfunction factory( alpha, beta ) {\n\tvar num;\n\tif (\n\t\tisnan( alpha ) ||\n\t\tisnan( beta ) ||\n\t\talpha <= 0.0 ||\n\t\tbeta <= 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\tnum = ln( alpha ) + ( alpha * ln( beta ) );\n\treturn logpdf;\n\n\t/**\n\t* Evaluates the natural logarithm of the probability density function (PDF) for a Pareto (Type I) distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {number} evaluated logPDF\n\t*\n\t* @example\n\t* var y = logpdf( 4.0 );\n\t* // returns <number>\n\t*/\n\tfunction logpdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x >= beta ) {\n\t\t\treturn num - ( ( alpha + 1.0 ) * ln( x ) );\n\t\t}\n\t\treturn NINF;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate the probability density function (PDF) for a Pareto (Type I) distribution.\n*\n* @module @stdlib/stats-base-dists-pareto-type1-pdf\n*\n* @example\n* import pdf from '@stdlib/stats-base-dists-pareto-type1-pdf';\n*\n* var y = pdf( 4.0, 1.0, 1.0 );\n* // returns ~0.044\n*\n* y = pdf( 20.0, 1.0, 10.0 );\n* // returns 0.025\n*\n* y = pdf( 7.0, 2.0, 6.0 );\n* // returns ~0.21\n*\n* var mypdf = pdf.factory( 0.5, 0.5 );\n*\n* y = mypdf( 0.8 );\n* // returns ~0.494\n*\n* y = mypdf( 2.0 );\n* // returns ~0.125\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport pdf from './pdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( pdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default pdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport pow from '@stdlib/math-base-special-pow';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the probability density function (PDF) for a Pareto (Type I) distribution with shape parameter `alpha` and scale parameter `beta`.\n*\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} beta - scale parameter\n* @returns {Function} PDF\n*\n* @example\n* var mypdf = factory( 0.5, 0.5 );\n*\n* var y = mypdf( 0.8 );\n* // returns ~0.494\n*\n* y = mypdf( 2.0 );\n* // returns ~0.125\n*/\nfunction factory( alpha, beta ) {\n\tvar num;\n\tif (\n\t\tisnan( alpha ) ||\n\t\tisnan( beta ) ||\n\t\talpha <= 0.0 ||\n\t\tbeta <= 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\tnum = alpha * pow( beta, alpha );\n\treturn pdf;\n\n\t/**\n\t* Evaluates the probability density function (PDF) for a Pareto (Type I) distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {number} evaluated PDF\n\t*\n\t* @example\n\t* var y = pdf( 4.0 );\n\t* // returns <number>\n\t*/\n\tfunction pdf( x ) {\n\t\tvar denom;\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x >= beta ) {\n\t\t\tdenom = pow( x, alpha + 1.0 );\n\t\t\treturn num / denom;\n\t\t}\n\t\treturn 0.0;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Pareto (Type I) distribution quantile function.\n*\n* @module @stdlib/stats-base-dists-pareto-type1-quantile\n*\n* @example\n* import quantile from '@stdlib/stats-base-dists-pareto-type1-quantile';\n*\n* var y = quantile( 0.8, 2.0, 1.0 );\n* // returns ~2.236\n*\n* y = quantile( 0.8, 1.0, 10.0 );\n* // returns ~50.0\n*\n* y = quantile( 0.1, 1.0, 10.0 );\n* // returns ~10.541\n*\n* var myquantile = quantile.factory( 2.5, 0.5 );\n* y = myquantile( 0.5 );\n* // returns ~0.66\n*\n* y = myquantile( 0.8 );\n* // returns ~0.952\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport quantile from './quantile.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( quantile, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default quantile;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport pow from '@stdlib/math-base-special-pow';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the quantile function for a Pareto (Type I) distribution with shape parameter `alpha` and scale parameter `beta`.\n*\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} beta - scale parameter\n* @returns {Function} quantile function\n*\n* @example\n* var quantile = factory( 2.5, 0.5 );\n* var y = quantile( 0.5 );\n* // returns ~0.66\n*\n* y = quantile( 0.8 );\n* // returns ~0.952\n*/\nfunction factory( alpha, beta ) {\n\tvar alphaInv;\n\tif (\n\t\tisnan( alpha ) ||\n\t\tisnan( beta ) ||\n\t\talpha <= 0.0 ||\n\t\tbeta <= 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\talphaInv = 1.0 / alpha;\n\treturn quantile;\n\n\t/**\n\t* Evaluates the quantile function for a Pareto (Type I) distribution.\n\t*\n\t* @private\n\t* @param {Probability} p - input value\n\t* @returns {number} evaluated quantile function\n\t*\n\t* @example\n\t* var y = quantile( 0.3 );\n\t* // returns <number>\n\t*/\n\tfunction quantile( p ) {\n\t\tif ( isnan( p ) || p < 0.0 || p > 1.0 ) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn beta / pow( 1.0 - p, alphaInv );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace pareto1\n*/\nvar pareto1 = {};\n\n/**\n* @name cdf\n* @memberof pareto1\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/pareto-type1/cdf}\n*/\nimport cdf from '@stdlib/stats-base-dists-pareto-type1-cdf';\nsetReadOnly( pareto1, 'cdf', cdf );\n\n/**\n* @name Pareto1\n* @memberof pareto1\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/pareto-type1/ctor}\n*/\nimport Pareto1 from '@stdlib/stats-base-dists-pareto-type1-ctor';\nsetReadOnly( pareto1, 'Pareto1', Pareto1 );\n\n/**\n* @name entropy\n* @memberof pareto1\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/pareto-type1/entropy}\n*/\nimport entropy from '@stdlib/stats-base-dists-pareto-type1-entropy';\nsetReadOnly( pareto1, 'entropy', entropy );\n\n/**\n* @name kurtosis\n* @memberof pareto1\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/pareto-type1/kurtosis}\n*/\nimport kurtosis from '@stdlib/stats-base-dists-pareto-type1-kurtosis';\nsetReadOnly( pareto1, 'kurtosis', kurtosis );\n\n/**\n* @name logcdf\n* @memberof pareto1\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/pareto-type1/logcdf}\n*/\nimport logcdf from '@stdlib/stats-base-dists-pareto-type1-logcdf';\nsetReadOnly( pareto1, 'logcdf', logcdf );\n\n/**\n* @name logpdf\n* @memberof pareto1\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/pareto-type1/logpdf}\n*/\nimport logpdf from '@stdlib/stats-base-dists-pareto-type1-logpdf';\nsetReadOnly( pareto1, 'logpdf', logpdf );\n\n/**\n* @name mean\n* @memberof pareto1\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/pareto-type1/mean}\n*/\nimport mean from '@stdlib/stats-base-dists-pareto-type1-mean';\nsetReadOnly( pareto1, 'mean', mean );\n\n/**\n* @name median\n* @memberof pareto1\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/pareto-type1/median}\n*/\nimport median from '@stdlib/stats-base-dists-pareto-type1-median';\nsetReadOnly( pareto1, 'median', median );\n\n/**\n* @name mode\n* @memberof pareto1\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/pareto-type1/mode}\n*/\nimport mode from '@stdlib/stats-base-dists-pareto-type1-mode';\nsetReadOnly( pareto1, 'mode', mode );\n\n/**\n* @name pdf\n* @memberof pareto1\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/pareto-type1/pdf}\n*/\nimport pdf from '@stdlib/stats-base-dists-pareto-type1-pdf';\nsetReadOnly( pareto1, 'pdf', pdf );\n\n/**\n* @name quantile\n* @memberof pareto1\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/pareto-type1/quantile}\n*/\nimport quantile from '@stdlib/stats-base-dists-pareto-type1-quantile';\nsetReadOnly( pareto1, 'quantile', quantile );\n\n/**\n* @name skewness\n* @memberof pareto1\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/pareto-type1/skewness}\n*/\nimport skewness from '@stdlib/stats-base-dists-pareto-type1-skewness';\nsetReadOnly( pareto1, 'skewness', skewness );\n\n/**\n* @name stdev\n* @memberof pareto1\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/pareto-type1/stdev}\n*/\nimport stdev from '@stdlib/stats-base-dists-pareto-type1-stdev';\nsetReadOnly( pareto1, 'stdev', stdev );\n\n/**\n* @name variance\n* @memberof pareto1\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/pareto-type1/variance}\n*/\nimport variance from '@stdlib/stats-base-dists-pareto-type1-variance';\nsetReadOnly( pareto1, 'variance', variance );\n\n\n// EXPORTS //\n\nexport default pareto1;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport cdf from '@stdlib/stats-base-dists-poisson-cdf';\n\n\n// VARIABLES //\n\nvar methods;\n\n\n// FUNCTIONS //\n\n/**\n* Performs a search to the left.\n*\n* @private\n* @param {NonNegativeInteger} x - starting guess\n* @param {Probability} p - probability\n* @param {NonNegativeNumber} lambda - mean parameter\n* @returns {NonNegativeInteger} `p` quantile of the specified distribution\n*/\nfunction searchLeft( x, p, lambda ) {\n\twhile ( true ) {\n\t\tif ( x === 0 || cdf( x - 1.0, lambda ) < p ) {\n\t\t\treturn x;\n\t\t}\n\t\tx -= 1;\n\t}\n}\n\n/**\n* Performs a search to the right.\n*\n* @private\n* @param {NonNegativeInteger} x - starting guess\n* @param {Probability} p - probability\n* @param {NonNegativeNumber} lambda - mean parameter\n* @returns {NonNegativeInteger} `p` quantile of the specified distribution\n*/\nfunction searchRight( x, p, lambda ) {\n\twhile ( true ) {\n\t\tx += 1;\n\t\tif ( cdf( x, lambda ) >= p ) {\n\t\t\treturn x;\n\t\t}\n\t}\n}\n\n\n// MAIN //\n\nmethods = {\n\t'left': searchLeft,\n\t'right': searchRight\n};\n\n\n// EXPORTS //\n\nexport default methods;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport gammainc from '@stdlib/math-base-special-gammainc';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport floor from '@stdlib/math-base-special-floor';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Evaluates the cumulative distribution function (CDF) for a Poisson distribution with mean parameter `lambda` at a value `x`.\n*\n* @param {number} x - input value\n* @param {NonNegativeNumber} lambda - mean parameter\n* @returns {Probability} evaluated CDF\n*\n* @example\n* var y = cdf( 2.0, 0.5 );\n* // returns ~0.986\n*\n* @example\n* var y = cdf( 2.0, 10.0 );\n* // returns ~0.003\n*\n* @example\n* var y = cdf( -1.0, 4.0 );\n* // returns 0.0\n*\n* @example\n* var y = cdf( NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* // Negative mean parameter:\n* var y = cdf( 2.0, -1.0 );\n* // returns NaN\n*/\nfunction cdf( x, lambda ) {\n\tif ( isnan( x ) || isnan( lambda ) || lambda < 0.0 ) {\n\t\treturn NaN;\n\t}\n\tif ( x < 0.0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( lambda === 0.0 ) {\n\t\treturn 1.0;\n\t}\n\tif ( x === PINF ) {\n\t\treturn 1.0;\n\t}\n\treturn gammainc( lambda, floor( x ) + 1.0, true, true );\n}\n\n\n// EXPORTS //\n\nexport default cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport sumSeries from '@stdlib/math-base-tools-sum-series';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport factorialln from '@stdlib/math-base-special-factorialln';\nimport factorial from '@stdlib/math-base-special-factorial';\nimport exp from '@stdlib/math-base-special-exp';\nimport ln from '@stdlib/math-base-special-ln';\n\n\n// FUNCTIONS //\n\n/**\n* Returns a function to retrieve elements of the series \\\\( \\sum_{k=0}^{\\infty} \\frac{ \\lambda^k \\log(k!) }{ k! } \\\\).\n*\n* @private\n* @param {NonNegativeNumber} lambda - mean parameter\n* @returns {Function} function to retrieve series elements\n*/\nfunction seriesClosure( lambda ) {\n\tvar lk;\n\tvar k;\n\tk = 1;\n\tlk = lambda;\n\treturn seriesElement;\n\n\t/**\n\t* Returns the current series element.\n\t*\n\t* @private\n\t* @returns {number} series element\n\t*/\n\tfunction seriesElement() {\n\t\tk += 1;\n\t\tlk *= lambda;\n\t\treturn lk * factorialln( k ) / factorial( k );\n\t}\n}\n\n\n// MAIN //\n\n/**\n* Returns the entropy of a Poisson distribution.\n*\n* @param {NonNegativeNumber} lambda - mean parameter\n* @returns {PositiveNumber} entropy\n*\n* @example\n* var v = entropy( 9.0 );\n* // returns ~2.508\n*\n* @example\n* var v = entropy( 1.0 );\n* // returns ~1.305\n*\n* @example\n* var v = entropy( -0.2 );\n* // returns NaN\n*\n* @example\n* var v = entropy( NaN );\n* // returns NaN\n*/\nfunction entropy( lambda ) {\n\tvar gen;\n\tvar out;\n\tif ( isnan( lambda ) || lambda < 0.0 ) {\n\t\treturn NaN;\n\t}\n\tif ( lambda === 0.0 ) {\n\t\treturn 0.0;\n\t}\n\tgen = seriesClosure( lambda );\n\tout = lambda * ( 1.0-ln(lambda) );\n\tout += exp( -lambda ) * sumSeries( gen );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default entropy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns the excess kurtosis of a Poisson distribution.\n*\n* @param {PositiveNumber} lambda - mean parameter\n* @returns {PositiveNumber} excess kurtosis\n*\n* @example\n* var v = kurtosis( 9.0 );\n* // returns ~0.111\n*\n* @example\n* var v = kurtosis( 1.0 );\n* // returns 1.0\n*\n* @example\n* var v = kurtosis( -0.2 );\n* // returns NaN\n*\n* @example\n* var v = kurtosis( NaN );\n* // returns NaN\n*/\nfunction kurtosis( lambda ) {\n\tif ( isnan( lambda ) || lambda <= 0.0 ) {\n\t\treturn NaN;\n\t}\n\treturn 1.0 / lambda;\n}\n\n\n// EXPORTS //\n\nexport default kurtosis;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns the expected value of a Poisson distribution.\n*\n* @param {NonNegativeNumber} lambda - mean parameter\n* @returns {NonNegativeNumber} expected value\n*\n* @example\n* var v = mean( 9.0 );\n* // returns 9.0\n*\n* @example\n* var v = mean( 1.0 );\n* // returns 1.0\n*\n* @example\n* var v = mean( -0.2 );\n* // returns NaN\n*\n* @example\n* var v = mean( NaN );\n* // returns NaN\n*/\nfunction mean( lambda ) {\n\tif ( isnan( lambda ) || lambda < 0.0 ) {\n\t\treturn NaN;\n\t}\n\treturn lambda;\n}\n\n\n// EXPORTS //\n\nexport default mean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport floor from '@stdlib/math-base-special-floor';\n\n\n// MAIN //\n\n/**\n* Returns the median of a Poisson distribution.\n*\n* @param {NonNegativeNumber} lambda - mean parameter\n* @returns {NonNegativeInteger} median\n*\n* @example\n* var v = median( 9.0 );\n* // returns 9\n*\n* @example\n* var v = median( 1.0 );\n* // returns 1\n*\n* @example\n* var v = median( -0.2 );\n* // returns NaN\n*\n* @example\n* var v = median( NaN );\n* // returns NaN\n*/\nfunction median( lambda ) {\n\tif ( isnan( lambda ) || lambda < 0.0 ) {\n\t\treturn NaN;\n\t}\n\tif ( lambda === 0.0 ) {\n\t\treturn 0.0;\n\t}\n\treturn floor( lambda + ( 1.0/3.0 ) - ( 0.02/lambda ) );\n}\n\n\n// EXPORTS //\n\nexport default median;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport floor from '@stdlib/math-base-special-floor';\n\n\n// MAIN //\n\n/**\n* Returns the mode of a Poisson distribution.\n*\n* @param {NonNegativeNumber} lambda - mean parameter\n* @returns {NonNegativeInteger} mode\n*\n* @example\n* var v = mode( 9.0 );\n* // returns 9\n*\n* @example\n* var v = mode( 1.0 );\n* // returns 1\n*\n* @example\n* var v = mode( -0.2 );\n* // returns NaN\n*\n* @example\n* var v = mode( NaN );\n* // returns NaN\n*/\nfunction mode( lambda ) {\n\tif ( isnan( lambda ) || lambda < 0.0 ) {\n\t\treturn NaN;\n\t}\n\treturn floor( lambda );\n}\n\n\n// EXPORTS //\n\nexport default mode;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport sqrt from '@stdlib/math-base-special-sqrt';\n\n\n// MAIN //\n\n/**\n* Returns the skewness of a Poisson distribution.\n*\n* @param {PositiveNumber} lambda - mean parameter\n* @returns {PositiveNumber} skewness\n*\n* @example\n* var v = skewness( 9.0 );\n* // returns ~0.33\n*\n* @example\n* var v = skewness( 1.0 );\n* // returns 1.0\n*\n* @example\n* var v = skewness( -0.2 );\n* // returns NaN\n*\n* @example\n* var v = skewness( NaN );\n* // returns NaN\n*/\nfunction skewness( lambda ) {\n\tif ( isnan( lambda ) || lambda <= 0.0 ) {\n\t\treturn NaN;\n\t}\n\treturn 1.0 / sqrt( lambda );\n}\n\n\n// EXPORTS //\n\nexport default skewness;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport sqrt from '@stdlib/math-base-special-sqrt';\n\n\n// MAIN //\n\n/**\n* Returns the standard deviation of a Poisson distribution.\n*\n* @param {NonNegativeNumber} lambda - mean parameter\n* @returns {NonNegativeNumber} standard deviation\n*\n* @example\n* var v = stdev( 9.0 );\n* // returns 3.0\n*\n* @example\n* var v = stdev( 1.0 );\n* // returns 1.0\n*\n* @example\n* var v = stdev( -0.2 );\n* // returns NaN\n*\n* @example\n* var v = stdev( NaN );\n* // returns NaN\n*/\nfunction stdev( lambda ) {\n\tif ( isnan( lambda ) || lambda < 0.0 ) {\n\t\treturn NaN;\n\t}\n\treturn sqrt( lambda );\n}\n\n\n// EXPORTS //\n\nexport default stdev;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns the variance of a Poisson distribution.\n*\n* @param {NonNegativeNumber} lambda - mean parameter\n* @returns {NonNegativeNumber} variance\n*\n* @example\n* var v = variance( 9.0 );\n* // returns 9.0\n*\n* @example\n* var v = variance( 1.0 );\n* // returns 1.0\n*\n* @example\n* var v = variance( -0.2 );\n* // returns NaN\n*\n* @example\n* var v = variance( NaN );\n* // returns NaN\n*/\nfunction variance( lambda ) {\n\tif ( isnan( lambda ) || lambda < 0.0 ) {\n\t\treturn NaN;\n\t}\n\treturn lambda;\n}\n\n\n// EXPORTS //\n\nexport default variance;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNonNegativeInteger from '@stdlib/math-base-assert-is-nonnegative-integer';\nimport factorialln from '@stdlib/math-base-special-factorialln';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport ln from '@stdlib/math-base-special-ln';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Evaluates the natural logarithm of the probability mass function (PMF) for a Poisson distribution with mean parameter `lambda` at a value `x`.\n*\n* @param {number} x - input value\n* @param {NonNegativeNumber} lambda - mean parameter\n* @returns {number} evaluated logPMF\n*\n* @example\n* var y = logpmf( 4.0, 3.0 );\n* // returns ~-1.784\n*\n* @example\n* var y = logpmf( 1.0, 3.0 );\n* // returns ~-1.901\n*\n* @example\n* var y = logpmf( -1.0, 2.0 );\n* // returns -Infinity\n*\n* @example\n* var y = logpmf( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = logpmf( NaN, 0.5 );\n* // returns NaN\n*\n* @example\n* // Invalid mean parameter:\n* var y = logpmf( 2.0, -0.5 );\n* // returns NaN\n*/\nfunction logpmf( x, lambda ) {\n\tif ( isnan( x ) || isnan( lambda ) || lambda < 0.0 ) {\n\t\treturn NaN;\n\t}\n\tif ( lambda === 0.0 ) {\n\t\treturn ( x === 0.0 ) ? 0.0 : NINF;\n\t}\n\tif ( isNonNegativeInteger( x ) && x !== PINF ) {\n\t\treturn ( x * ln( lambda ) ) - lambda - factorialln( x );\n\t}\n\treturn NINF;\n}\n\n\n// EXPORTS //\n\nexport default logpmf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport exp from '@stdlib/math-base-special-exp';\n\n\n// MAIN //\n\n/**\n* Evaluates the moment-generating function (MGF) for a Poisson distribution with mean parameter `lambda` at a value `t`.\n*\n* @param {number} t - input value\n* @param {PositiveNumber} lambda - mean parameter\n* @returns {number} evaluated MGF\n*\n* @example\n* var y = mgf( 1.0, 1.5 );\n* // returns ~13.163\n*\n* @example\n* var y = mgf( 0.5, 0.5 );\n* // returns ~1.383\n*\n* @example\n* var y = mgf( NaN, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = mgf( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = mgf( -2.0, -1.0 );\n* // returns NaN\n*/\nfunction mgf( t, lambda ) {\n\tif ( isnan( t ) || isnan( lambda ) || lambda <= 0.0 ) {\n\t\treturn NaN;\n\t}\n\treturn exp( lambda * ( exp(t) - 1.0 ) );\n}\n\n\n// EXPORTS //\n\nexport default mgf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNonNegativeInteger from '@stdlib/math-base-assert-is-nonnegative-integer';\nimport factorialln from '@stdlib/math-base-special-factorialln';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport exp from '@stdlib/math-base-special-exp';\nimport ln from '@stdlib/math-base-special-ln';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Evaluates the probability mass function (PMF) for a Poisson distribution with mean parameter `lambda` at a value `x`.\n*\n* @param {number} x - input value\n* @param {NonNegativeNumber} lambda - mean parameter\n* @returns {Probability} evaluated PMF\n*\n* @example\n* var y = pmf( 4.0, 3.0 );\n* // returns ~0.168\n*\n* @example\n* var y = pmf( 1.0, 3.0 );\n* // returns ~0.149\n*\n* @example\n* var y = pmf( -1.0, 2.0 );\n* // returns 0.0\n*\n* @example\n* var y = pmf( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = pmf( NaN, 0.5 );\n* // returns NaN\n*\n* @example\n* // Invalid mean parameter:\n* var y = pmf( 2.0, -0.5 );\n* // returns NaN\n*/\nfunction pmf( x, lambda ) {\n\tvar lnl;\n\tif ( isnan( x ) || isnan( lambda ) || lambda < 0.0 ) {\n\t\treturn NaN;\n\t}\n\tif ( lambda === 0.0 ) {\n\t\treturn ( x === 0.0 ) ? 1.0 : 0.0;\n\t}\n\tif ( isNonNegativeInteger( x ) && x !== PINF ) {\n\t\tlnl = (x * ln( lambda )) - lambda - factorialln( x );\n\t\treturn exp( lnl );\n\t}\n\treturn 0.0;\n}\n\n\n// EXPORTS //\n\nexport default pmf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport pow from '@stdlib/math-base-special-pow';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Returns the standard deviation of a Pareto (Type I) distribution.\n*\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} beta - scale parameter\n* @returns {PositiveNumber} standard deviation\n*\n* @example\n* var v = stdev( 4.0, 12.0 );\n* // returns ~5.657\n*\n* @example\n* var v = stdev( 8.0, 2.0 );\n* // returns ~0.33\n*\n* @example\n* var v = stdev( 1.0, 1.0 );\n* // returns Infinity\n*\n* @example\n* var v = stdev( 1.0, -0.1 );\n* // returns NaN\n*\n* @example\n* var v = stdev( -0.1, 1.0 );\n* // returns NaN\n*\n* @example\n* var v = stdev( 2.0, NaN );\n* // returns NaN\n*\n* @example\n* var v = stdev( NaN, 2.0 );\n* // returns NaN\n*/\nfunction stdev( alpha, beta ) {\n\tvar out;\n\tif (\n\t\tisnan( alpha ) ||\n\t\talpha <= 0.0 ||\n\t\tisnan( beta ) ||\n\t\tbeta <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( alpha < 2.0 ) {\n\t\treturn PINF;\n\t}\n\tout = ( (beta*beta) * alpha ) / ( pow( alpha-1.0, 2.0 ) * ( alpha-2.0 ) );\n\treturn sqrt( out );\n}\n\n\n// EXPORTS //\n\nexport default stdev;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Poisson distribution cumulative distribution function (CDF).\n*\n* @module @stdlib/stats-base-dists-poisson-cdf\n*\n* @example\n* import cdf from '@stdlib/stats-base-dists-poisson-cdf';\n*\n* var y = cdf( 2.0, 0.5 );\n* // returns ~0.986\n*\n* y = cdf( 2.0, 10.0 );\n* // returns ~0.003\n*\n* y = cdf( -1.0, 4.0 );\n* // returns 0.0\n*\n* var mycdf = cdf.factory( 5.0 );\n* y = mycdf( 3.0 );\n* // returns ~0.265\n*\n* y = mycdf( 8.0 );\n* // returns ~0.932\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport cdf from './cdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( cdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport { factory as degenerate } from '@stdlib/stats-base-dists-degenerate-cdf';\nimport gammainc from '@stdlib/math-base-special-gammainc';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport floor from '@stdlib/math-base-special-floor';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the cumulative distribution function (CDF) for a Poisson distribution with mean parameter `lambda`.\n*\n* @param {NonNegativeNumber} lambda - mean parameter\n* @returns {Function} CDF\n*\n* @example\n* var cdf = factory( 5.0 );\n* var y = cdf( 3.0 );\n* // returns ~0.265\n*\n* y = cdf( 8.0 );\n* // returns ~0.932\n*/\nfunction factory( lambda ) {\n\tif ( isnan( lambda ) || lambda < 0.0 ) {\n\t\treturn constantFunction( NaN );\n\t}\n\tif ( lambda === 0.0 ) {\n\t\treturn degenerate( 0.0 );\n\t}\n\treturn cdf;\n\n\t/**\n\t* Evaluates the cumulative distribution function (CDF) for a Poisson distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated CDF\n\t*\n\t* @example\n\t* var y = cdf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction cdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x < 0.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\tif ( x === PINF ) {\n\t\t\treturn 1.0;\n\t\t}\n\t\treturn gammainc( lambda, floor( x ) + 1.0, true, true );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Natural logarithm of the probability mass function (PMF) for a Poisson distribution.\n*\n* @module @stdlib/stats-base-dists-poisson-logpmf\n*\n* @example\n* import logpmf from '@stdlib/stats-base-dists-poisson-logpmf';\n*\n* var y = logpmf( 4.0, 3.0 );\n* // returns ~-1.784\n*\n* y = logpmf( 1.0, 3.0 );\n* // returns ~-1.901\n*\n* y = logpmf( -1.0, 2.0 );\n* // returns -Infinity\n*\n* var mylogpmf = logpmf.factory( 1.0 );\n* y = mylogpmf( 3.0 );\n* // returns ~-2.797\n*\n* y = mylogpmf( 1.0 );\n* // returns ~-1.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport logpmf from './logpmf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( logpmf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default logpmf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNonNegativeInteger from '@stdlib/math-base-assert-is-nonnegative-integer';\nimport constantFunction from '@stdlib/utils-constant-function';\nimport factorialln from '@stdlib/math-base-special-factorialln';\nimport { factory as degenerate } from '@stdlib/stats-base-dists-degenerate-logpmf';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport ln from '@stdlib/math-base-special-ln';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the natural logarithm of the probability mass function (PMF) for a Poisson distribution with mean parameter `lambda`.\n*\n* @param {NonNegativeNumber} lambda - mean parameter\n* @returns {Function} logPMF\n*\n* @example\n* var logpmf = factory( 1.0 );\n* var y = logpmf( 3.0 );\n* // returns ~-2.792\n*\n* y = logpmf( 1.0 );\n* // returns ~-1.0\n*/\nfunction factory( lambda ) {\n\tif ( isnan( lambda ) || lambda < 0.0 ) {\n\t\treturn constantFunction( NaN );\n\t}\n\tif ( lambda === 0.0 ) {\n\t\treturn degenerate( 0.0 );\n\t}\n\treturn logpmf;\n\n\t/**\n\t* Evaluates the natural logarithm of the probability mass function (PMF) for a Poisson distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {number} evaluated logPMF\n\t*\n\t* @example\n\t* var y = logpmf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction logpmf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( isNonNegativeInteger( x ) && x !== PINF ) {\n\t\t\treturn ( x * ln( lambda ) ) - lambda - factorialln( x );\n\t\t}\n\t\treturn NINF;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate the moment-generating function (MGF) for a Poisson distribution.\n*\n* @module @stdlib/stats-base-dists-poisson-mgf\n*\n* @example\n* import mgf from '@stdlib/stats-base-dists-poisson-mgf';\n*\n* var v = mgf( 0.5, 0.5 );\n* // returns ~1.383\n*\n* var mymgf = mgf.factory( 2.0 );\n* y = mymgf( 0.1 );\n* // returns ~1.234\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport mgf from './mgf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( mgf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default mgf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport exp from '@stdlib/math-base-special-exp';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the moment-generating function (MGF) of a Poisson distribution with mean parameter `lambda`.\n*\n* @param {PositiveNumber} lambda - mean parameter\n* @returns {Function} MGF\n*\n* @example\n* var mgf = factory( 2.0 );\n* var y = mgf( 0.1 );\n* // returns ~1.234\n*/\nfunction factory( lambda ) {\n\tif ( isnan( lambda ) || lambda <= 0.0 ) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn mgf;\n\n\t/**\n\t* Evaluates the moment-generating function (MGF) for a Poisson distribution.\n\t*\n\t* @private\n\t* @param {number} t - input value\n\t* @returns {number} evaluated MGF\n\t*\n\t* @example\n\t* var y = mgf( 0.5 );\n\t* // returns <number>\n\t*/\n\tfunction mgf( t ) {\n\t\treturn exp( lambda * ( exp(t) - 1.0 ) );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Poisson distribution probability mass function (PMF).\n*\n* @module @stdlib/stats-base-dists-poisson-pmf\n*\n* @example\n* import pmf from '@stdlib/stats-base-dists-poisson-pmf';\n*\n* var y = pmf( 4.0, 3.0 );\n* // returns ~0.168\n*\n* y = pmf( 1.0, 3.0 );\n* // returns ~0.149\n*\n* y = pmf( -1.0, 2.0 );\n* // returns 0.0\n*\n* var mypmf = pmf.factory( 1.0 );\n* y = mypmf( 3.0 );\n* // returns ~0.061\n*\n* y = mypmf( 1.0 );\n* // returns ~0.368\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport pmf from './pmf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( pmf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default pmf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNonNegativeInteger from '@stdlib/math-base-assert-is-nonnegative-integer';\nimport constantFunction from '@stdlib/utils-constant-function';\nimport factorialln from '@stdlib/math-base-special-factorialln';\nimport { factory as degenerate } from '@stdlib/stats-base-dists-degenerate-pmf';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport exp from '@stdlib/math-base-special-exp';\nimport ln from '@stdlib/math-base-special-ln';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the probability mass function (PMF) for a Poisson distribution with mean parameter `lambda`.\n*\n* @param {NonNegativeNumber} lambda - mean parameter\n* @returns {Function} PMF\n*\n* @example\n* var pmf = factory( 1.0 );\n* var y = pmf( 3.0 );\n* // returns ~0.061\n*\n* y = pmf( 1.0 );\n* // returns ~0.368\n*/\nfunction factory( lambda ) {\n\tif ( isnan( lambda ) || lambda < 0.0 ) {\n\t\treturn constantFunction( NaN );\n\t}\n\tif ( lambda === 0.0 ) {\n\t\treturn degenerate( 0.0 );\n\t}\n\treturn pmf;\n\n\t/**\n\t* Evaluates the probability mass function (PMF) for a Poisson distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated PMF\n\t*\n\t* @example\n\t* var y = pmf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction pmf( x ) {\n\t\tvar lnl;\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( isNonNegativeInteger( x ) && x !== PINF ) {\n\t\t\tlnl = (x * ln( lambda )) - lambda - factorialln( x );\n\t\t\treturn exp( lnl );\n\t\t}\n\t\treturn 0.0;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport erfcinv from '@stdlib/math-base-special-erfcinv';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport round from '@stdlib/math-base-special-round';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport cdf from '@stdlib/stats-base-dists-poisson-cdf';\nimport SQRT2 from '@stdlib/constants-float64-sqrt-two';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport search from './search.js';\n\n\n// MAIN //\n\n/**\n* Evaluates the quantile function for a Poisson distribution with mean parameter `lambda` at a probability `p`.\n*\n* @param {Probability} p - input value\n* @param {NonNegativeNumber} lambda - mean parameter\n* @returns {NonNegativeInteger} evaluated quantile function\n*\n* @example\n* var y = quantile( 0.5, 2.0 );\n* // returns 2\n*\n* @example\n* var y = quantile( 0.9, 4.0 );\n* // returns 7\n*\n* @example\n* var y = quantile( 0.1, 200.0 );\n* // returns 182\n*\n* @example\n* var y = quantile( 1.1, 0.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( -0.2, 0.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( NaN, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.0, NaN );\n* // returns NaN\n*/\nfunction quantile( p, lambda ) {\n\tvar sigmaInv;\n\tvar guess;\n\tvar sigma;\n\tvar corr;\n\tvar x2;\n\tvar x;\n\tif ( isnan( lambda ) || lambda < 0.0 ) {\n\t\treturn NaN;\n\t}\n\tif ( isnan( p ) || p < 0.0 || p > 1.0 ) {\n\t\treturn NaN;\n\t}\n\tif ( lambda === 0.0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( p === 0.0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( p === 1.0 ) {\n\t\treturn PINF;\n\t}\n\t// Cornish-Fisher expansion:\n\tsigma = sqrt( lambda );\n\tsigmaInv = 1.0 / sigma;\n\tif ( p < 0.5 ) {\n\t\tx = -erfcinv( 2.0 * p ) * SQRT2;\n\t} else {\n\t\tx = erfcinv( 2.0 * ( 1.0 - p ) ) * SQRT2;\n\t}\n\tx2 = x * x;\n\n\t// Skewness correction:\n\tcorr = x + (sigmaInv * ( x2 - 1.0 ) / 6.0);\n\tguess = round( lambda + (sigma * corr) );\n\treturn ( cdf( guess, lambda ) >= p ) ?\n\t\tsearch.left( guess, p, lambda ) :\n\t\tsearch.right( guess, p, lambda );\n}\n\n\n// EXPORTS //\n\nexport default quantile;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nimport defineProperty from '@stdlib/utils-define-property';\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport setReadOnlyAccessor from '@stdlib/utils-define-nonenumerable-read-only-accessor';\nimport { isPrimitive as isPositive } from '@stdlib/assert-is-positive-number';\nimport entropy from '@stdlib/stats-base-dists-poisson-entropy';\nimport kurtosis from '@stdlib/stats-base-dists-poisson-kurtosis';\nimport mean from '@stdlib/stats-base-dists-poisson-mean';\nimport median from '@stdlib/stats-base-dists-poisson-median';\nimport mode from '@stdlib/stats-base-dists-poisson-mode';\nimport skewness from '@stdlib/stats-base-dists-poisson-skewness';\nimport stdev from '@stdlib/stats-base-dists-poisson-stdev';\nimport variance from '@stdlib/stats-base-dists-poisson-variance';\nimport cdf from '@stdlib/stats-base-dists-poisson-cdf';\nimport logpmf from '@stdlib/stats-base-dists-poisson-logpmf';\nimport mgf from '@stdlib/stats-base-dists-poisson-mgf';\nimport pmf from '@stdlib/stats-base-dists-poisson-pmf';\nimport quantile from '@stdlib/stats-base-dists-poisson-quantile';\nimport format from '@stdlib/string-format';\n\n\n// FUNCTIONS //\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n*/\nfunction poissonCDF( x ) {\n\treturn cdf( x, this.lambda );\n}\n\n/**\n* Evaluates the natural logarithm of the probability mass function (PMF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logPMF\n*/\nfunction poissonLogPMF( x ) {\n\treturn logpmf( x, this.lambda );\n}\n\n/**\n* Evaluates the moment-generating function (MGF).\n*\n* @private\n* @param {number} t - input value\n* @returns {number} evaluated MGF\n*/\nfunction poissonMGF( t ) {\n\treturn mgf( t, this.lambda );\n}\n\n/**\n* Evaluates the probability mass function (PMF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated PMF\n*/\nfunction poissonPMF( x ) {\n\treturn pmf( x, this.lambda );\n}\n\n/**\n* Evaluates the quantile function.\n*\n* @private\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n*/\nfunction poissonQuantile( p ) {\n\treturn quantile( p, this.lambda );\n}\n\n\n// MAIN //\n\n/**\n* Poisson distribution constructor.\n*\n* @constructor\n* @param {PositiveNumber} [lambda=1.0] - mean parameter\n* @throws {TypeError} `lambda` must be a positive number\n* @returns {Poisson} distribution instance\n*\n* @example\n* var poisson = new Poisson( 1.0 );\n*\n* var y = poisson.cdf( 0.8 );\n* // returns ~0.368\n*\n* var v = poisson.mode;\n* // returns 1.0\n*/\nfunction Poisson() {\n\tvar lambda;\n\tif ( !(this instanceof Poisson) ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn new Poisson();\n\t\t}\n\t\treturn new Poisson( arguments[ 0 ] );\n\t}\n\tif ( arguments.length ) {\n\t\tlambda = arguments[ 0 ];\n\t\tif ( !isPositive( lambda ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Mean parameter must be a positive number. Value: `%s`.', lambda ) );\n\t\t}\n\t} else {\n\t\tlambda = 1.0;\n\t}\n\tdefineProperty( this, 'lambda', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn lambda;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isPositive( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid assignment. Must be a positive number. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\tlambda = value;\n\t\t}\n\t});\n\treturn this;\n}\n\n/**\n* Poisson distribution differential entropy.\n*\n* @name entropy\n* @memberof Poisson.prototype\n* @type {number}\n* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}\n*\n* @example\n* var poisson = new Poisson( 4.0 );\n*\n* var v = poisson.entropy;\n* // returns ~2.087\n*/\nsetReadOnlyAccessor( Poisson.prototype, 'entropy', function get() {\n\treturn entropy( this.lambda );\n});\n\n/**\n* Poisson distribution excess kurtosis.\n*\n* @name kurtosis\n* @memberof Poisson.prototype\n* @type {number}\n* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}\n*\n* @example\n* var poisson = new Poisson( 4.0 );\n*\n* var v = poisson.kurtosis;\n* // returns 0.25\n*/\nsetReadOnlyAccessor( Poisson.prototype, 'kurtosis', function get() {\n\treturn kurtosis( this.lambda );\n});\n\n/**\n* Poisson distribution expected value.\n*\n* @name mean\n* @memberof Poisson.prototype\n* @type {number}\n* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}\n*\n* @example\n* var poisson = new Poisson( 4.0 );\n*\n* var v = poisson.mean;\n* // returns 4.0\n*/\nsetReadOnlyAccessor( Poisson.prototype, 'mean', function get() {\n\treturn mean( this.lambda );\n});\n\n/**\n* Poisson distribution median.\n*\n* @name median\n* @memberof Poisson.prototype\n* @type {number}\n* @see [median]{@link https://en.wikipedia.org/wiki/Median}\n*\n* @example\n* var poisson = new Poisson( 4.0 );\n*\n* var v = poisson.median;\n* // returns 4.0\n*/\nsetReadOnlyAccessor( Poisson.prototype, 'median', function get() {\n\treturn median( this.lambda );\n});\n\n/**\n* Poisson distribution mode.\n*\n* @name mode\n* @memberof Poisson.prototype\n* @type {number}\n* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}\n*\n* @example\n* var poisson = new Poisson( 4.0 );\n*\n* var v = poisson.mode;\n* // returns 4.0\n*/\nsetReadOnlyAccessor( Poisson.prototype, 'mode', function get() {\n\treturn mode( this.lambda );\n});\n\n/**\n* Poisson distribution skewness.\n*\n* @name skewness\n* @memberof Poisson.prototype\n* @type {number}\n* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}\n*\n* @example\n* var poisson = new Poisson( 4.0 );\n*\n* var v = poisson.skewness;\n* // returns 0.5\n*/\nsetReadOnlyAccessor( Poisson.prototype, 'skewness', function get() {\n\treturn skewness( this.lambda );\n});\n\n/**\n* Poisson distribution standard deviation.\n*\n* @name stdev\n* @memberof Poisson.prototype\n* @type {PositiveNumber}\n* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}\n*\n* @example\n* var poisson = new Poisson( 4.0 );\n*\n* var v = poisson.stdev;\n* // returns 2.0\n*/\nsetReadOnlyAccessor( Poisson.prototype, 'stdev', function get() {\n\treturn stdev( this.lambda );\n});\n\n/**\n* Poisson distribution variance.\n*\n* @name variance\n* @memberof Poisson.prototype\n* @type {PositiveNumber}\n* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}\n*\n* @example\n* var poisson = new Poisson( 4.0 );\n*\n* var v = poisson.variance;\n* // returns 4.0\n*/\nsetReadOnlyAccessor( Poisson.prototype, 'variance', function get() {\n\treturn variance( this.lambda );\n});\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @name cdf\n* @memberof Poisson.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var poisson = new Poisson( 2.0 );\n*\n* var v = poisson.cdf( 1.5 );\n* // returns ~0.406\n*/\nsetReadOnly( Poisson.prototype, 'cdf', poissonCDF );\n\n/**\n* Evaluates the natural logarithm of the probability mass function (PMF).\n*\n* @name logpmf\n* @memberof Poisson.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logPMF\n* @see [pmf]{@link https://en.wikipedia.org/wiki/Probability_mass_function}\n*\n* @example\n* var poisson = new Poisson( 2.0 );\n*\n* var v = poisson.logpmf( 2.0 );\n* // returns ~-1.307\n*\n* v = poisson.logpmf( 0.8 );\n* // returns -Infinity\n*/\nsetReadOnly( Poisson.prototype, 'logpmf', poissonLogPMF );\n\n/**\n* Evaluates the moment-generating function (MGF).\n*\n* @name mgf\n* @memberof Poisson.prototype\n* @type {Function}\n* @param {number} t - input value\n* @returns {number} evaluated MGF\n* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}\n*\n* @example\n* var poisson = new Poisson( 2.0 );\n*\n* var v = poisson.mgf( 0.5 );\n* // returns ~3.66\n*/\nsetReadOnly( Poisson.prototype, 'mgf', poissonMGF );\n\n/**\n* Evaluates the probability mass function (PMF).\n*\n* @name pmf\n* @memberof Poisson.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated PMF\n* @see [pmf]{@link https://en.wikipedia.org/wiki/Probability_mass_function}\n*\n* @example\n* var poisson = new Poisson( 2.0 );\n*\n* var v = poisson.pmf( 2.0 );\n* // returns ~0.271\n*\n* v = poisson.pmf( 0.8 );\n* // returns 0.0\n*/\nsetReadOnly( Poisson.prototype, 'pmf', poissonPMF );\n\n/**\n* Evaluates the quantile function.\n*\n* @name quantile\n* @memberof Poisson.prototype\n* @type {Function}\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}\n*\n* @example\n* var poisson = new Poisson( 2.0 );\n*\n* var v = poisson.quantile( 0.5 );\n* // returns 2.0\n*/\nsetReadOnly( Poisson.prototype, 'quantile', poissonQuantile );\n\n\n// EXPORTS //\n\nexport default Poisson;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Poisson distribution quantile function.\n*\n* @module @stdlib/stats-base-dists-poisson-quantile\n*\n* @example\n* import quantile from '@stdlib/stats-base-dists-poisson-quantile';\n*\n* var y = quantile( 0.5, 2.0 );\n* // returns 2\n*\n* y = quantile( 0.9, 4.0 );\n* // returns 7\n*\n* y = quantile( 0.1, 200.0 );\n* // returns 182\n*\n* var myquantile = quantile.factory( 5.0 );\n* y = myquantile( 0.4 );\n* // returns 4\n*\n* y = myquantile( 0.8 );\n* // returns 7\n*\n* y = myquantile( 1.0 );\n* // returns Infinity\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport quantile from './quantile.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( quantile, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default quantile;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport { factory as degenerate } from '@stdlib/stats-base-dists-degenerate-quantile';\nimport erfcinv from '@stdlib/math-base-special-erfcinv';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport round from '@stdlib/math-base-special-round';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport cdf from '@stdlib/stats-base-dists-poisson-cdf';\nimport SQRT2 from '@stdlib/constants-float64-sqrt-two';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport search from './search.js';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the quantile function for a Poisson distribution with mean parameter `lambda`.\n*\n* @param {NonNegativeNumber} lambda - mean parameter\n* @returns {Function} quantile function\n*\n* @example\n* var quantile = factory( 5.0 );\n* var y = quantile( 0.4 );\n* // returns 4\n*\n* y = quantile( 0.8 );\n* // returns 7\n*\n* y = quantile( 1.0 );\n* // returns Infinity\n*/\nfunction factory( lambda ) {\n\tvar sigmaInv;\n\tvar sigma;\n\n\tif ( isnan( lambda ) || lambda < 0.0 ) {\n\t\treturn constantFunction( NaN );\n\t}\n\tif ( lambda === 0.0 ) {\n\t\treturn degenerate( 0.0 );\n\t}\n\tsigma = sqrt( lambda );\n\tsigmaInv = 1.0 / sigma;\n\treturn quantile;\n\n\t/**\n\t* Evaluates the quantile function for a Poisson distribution.\n\t*\n\t* @private\n\t* @param {Probability} p - input value\n\t* @returns {NonNegativeInteger} evaluated quantile function\n\t*\n\t* @example\n\t* var y = quantile( 0.3 );\n\t* // returns <number>\n\t*/\n\tfunction quantile( p ) {\n\t\tvar guess;\n\t\tvar corr;\n\t\tvar x2;\n\t\tvar x;\n\n\t\tif ( isnan( p ) || p < 0.0 || p > 1.0 ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( p === 0.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\tif ( p === 1.0 ) {\n\t\t\treturn PINF;\n\t\t}\n\t\t// Cornish-Fisher expansion:\n\t\tif ( p < 0.5 ) {\n\t\t\tx = -erfcinv( 2.0 * p ) * SQRT2;\n\t\t} else {\n\t\t\tx = erfcinv( 2.0 * ( 1.0 - p ) ) * SQRT2;\n\t\t}\n\t\tx2 = x * x;\n\n\t\t// Skewness correction:\n\t\tcorr = x + (sigmaInv * ( x2 - 1.0 ) / 6.0);\n\t\tguess = round( lambda + (sigma * corr) );\n\t\treturn ( cdf( guess, lambda ) >= p ) ?\n\t\t\tsearch.left( guess, p, lambda ) :\n\t\t\tsearch.right( guess, p, lambda );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace poisson\n*/\nvar poisson = {};\n\n/**\n* @name cdf\n* @memberof poisson\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/poisson/cdf}\n*/\nimport cdf from '@stdlib/stats-base-dists-poisson-cdf';\nsetReadOnly( poisson, 'cdf', cdf );\n\n/**\n* @name Poisson\n* @memberof poisson\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/poisson/ctor}\n*/\nimport Poisson from '@stdlib/stats-base-dists-poisson-ctor';\nsetReadOnly( poisson, 'Poisson', Poisson );\n\n/**\n* @name kurtosis\n* @memberof poisson\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/poisson/kurtosis}\n*/\nimport kurtosis from '@stdlib/stats-base-dists-poisson-kurtosis';\nsetReadOnly( poisson, 'kurtosis', kurtosis );\n\n/**\n* @name logpmf\n* @memberof poisson\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/poisson/logpmf}\n*/\nimport logpmf from '@stdlib/stats-base-dists-poisson-logpmf';\nsetReadOnly( poisson, 'logpmf', logpmf );\n\n/**\n* @name mean\n* @memberof poisson\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/poisson/mean}\n*/\nimport mean from '@stdlib/stats-base-dists-poisson-mean';\nsetReadOnly( poisson, 'mean', mean );\n\n/**\n* @name median\n* @memberof poisson\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/poisson/median}\n*/\nimport median from '@stdlib/stats-base-dists-poisson-median';\nsetReadOnly( poisson, 'median', median );\n\n/**\n* @name mgf\n* @memberof poisson\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/poisson/mgf}\n*/\nimport mgf from '@stdlib/stats-base-dists-poisson-mgf';\nsetReadOnly( poisson, 'mgf', mgf );\n\n/**\n* @name mode\n* @memberof poisson\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/poisson/mode}\n*/\nimport mode from '@stdlib/stats-base-dists-poisson-mode';\nsetReadOnly( poisson, 'mode', mode );\n\n/**\n* @name pmf\n* @memberof poisson\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/poisson/pmf}\n*/\nimport pmf from '@stdlib/stats-base-dists-poisson-pmf';\nsetReadOnly( poisson, 'pmf', pmf );\n\n/**\n* @name quantile\n* @memberof poisson\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/poisson/quantile}\n*/\nimport quantile from '@stdlib/stats-base-dists-poisson-quantile';\nsetReadOnly( poisson, 'quantile', quantile );\n\n/**\n* @name skewness\n* @memberof poisson\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/poisson/skewness}\n*/\nimport skewness from '@stdlib/stats-base-dists-poisson-skewness';\nsetReadOnly( poisson, 'skewness', skewness );\n\n/**\n* @name stdev\n* @memberof poisson\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/poisson/stdev}\n*/\nimport stdev from '@stdlib/stats-base-dists-poisson-stdev';\nsetReadOnly( poisson, 'stdev', stdev );\n\n/**\n* @name variance\n* @memberof poisson\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/poisson/variance}\n*/\nimport variance from '@stdlib/stats-base-dists-poisson-variance';\nsetReadOnly( poisson, 'variance', variance );\n\n\n// EXPORTS //\n\nexport default poisson;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport exp from '@stdlib/math-base-special-exp';\nimport pow from '@stdlib/math-base-special-pow';\n\n\n// MAIN //\n\n/**\n* Evaluates the cumulative distribution function (CDF) for a Rayleigh distribution with scale parameter `sigma` at a value `x`.\n*\n* @param {number} x - input value\n* @param {NonNegativeNumber} sigma - scale parameter\n* @returns {Probability} evaluated CDF\n*\n* @example\n* var y = cdf( 2.0, 3.0 );\n* // returns ~0.199\n*\n* @example\n* var y = cdf( 1.0, 2.0 );\n* // returns ~0.118\n*\n* @example\n* var y = cdf( -1.0, 4.0 );\n* // returns 0.0\n*\n* @example\n* var y = cdf( NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* // Negative scale parameter:\n* var y = cdf( 2.0, -1.0 );\n* // returns NaN\n*/\nfunction cdf( x, sigma ) {\n\tvar s2;\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( sigma ) ||\n\t\tsigma < 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( sigma === 0.0 ) {\n\t\treturn ( x < 0.0 ) ? 0.0 : 1.0;\n\t}\n\tif ( x < 0.0 ) {\n\t\treturn 0.0;\n\t}\n\ts2 = pow( sigma, 2.0 );\n\treturn 1.0 - exp( -pow( x, 2.0 ) / ( 2.0 * s2 ) );\n}\n\n\n// EXPORTS //\n\nexport default cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport ln from '@stdlib/math-base-special-ln';\nimport GAMMA from '@stdlib/constants-float64-eulergamma';\nimport SQRT2 from '@stdlib/constants-float64-sqrt-two';\n\n\n// MAIN //\n\n/**\n* Returns the differential entropy of a Rayleigh distribution.\n*\n* @param {PositiveNumber} sigma - scale parameter\n* @returns {number} entropy\n*\n* @example\n* var v = entropy( 9.0 );\n* // returns ~3.139\n*\n* @example\n* var v = entropy( 2.0 );\n* // returns ~1.635\n*\n* @example\n* var v = entropy( -0.2 );\n* // returns NaN\n*\n* @example\n* var v = entropy( NaN );\n* // returns NaN\n*/\nfunction entropy( sigma ) {\n\tif ( isnan( sigma ) || sigma <= 0.0 ) {\n\t\treturn NaN;\n\t}\n\treturn 1.0 + ln( sigma / SQRT2 ) + ( 0.5 * GAMMA );\n}\n\n\n// EXPORTS //\n\nexport default entropy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Rayleigh distribution cumulative distribution function (CDF).\n*\n* @module @stdlib/stats-base-dists-rayleigh-cdf\n*\n* @example\n* import cdf from '@stdlib/stats-base-dists-rayleigh-cdf';\n*\n* var y = cdf( 2.0, 5.0 );\n* // returns ~0.077\n*\n* var myCDF = cdf.factory( 0.5 );\n* y = myCDF( 1.0 );\n* // returns ~0.865\n*\n* y = myCDF( 0.5 );\n* // returns ~0.393\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport cdf from './cdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( cdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport { factory as degenerate } from '@stdlib/stats-base-dists-degenerate-cdf';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport exp from '@stdlib/math-base-special-exp';\nimport pow from '@stdlib/math-base-special-pow';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the cumulative distribution function (CDF) for a Rayleigh distribution with scale parameter `sigma`.\n*\n* @param {NonNegativeNumber} sigma - scale parameter\n* @returns {Function} CDF\n*\n* @example\n* var cdf = factory( 2.0 );\n* var y = cdf( 3.0 );\n* // returns ~0.675\n*\n* y = cdf( 1.0 );\n* // returns ~0.118\n*/\nfunction factory( sigma ) {\n\tvar s2;\n\tif ( isnan( sigma ) || sigma < 0.0 ) {\n\t\treturn constantFunction( NaN );\n\t}\n\tif ( sigma === 0.0 ) {\n\t\treturn degenerate( 0.0 );\n\t}\n\ts2 = pow( sigma, 2.0 );\n\treturn cdf;\n\n\t/**\n\t* Evaluates the cumulative distribution function (CDF) for a Rayleigh distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated CDF\n\t*\n\t* @example\n\t* var y = cdf( 2 );\n\t* // returns <number>\n\t*/\n\tfunction cdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x < 0.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn 1.0 - exp( -pow( x, 2.0 ) / ( 2.0 * s2 ) );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport PI from '@stdlib/constants-float64-pi';\n\n\n// VARIABLES //\n\nvar KURTOSIS = -( ( 6.0*PI*PI ) - ( 24.0*PI ) + 16.0 ) / ( (4.0-PI)*(4.0-PI) );\n\n\n// MAIN //\n\n/**\n* Returns the excess kurtosis of a Rayleigh distribution.\n*\n* @param {NonNegativeNumber} sigma - scale parameter\n* @returns {NonNegativeNumber} excess kurtosis\n*\n* @example\n* var v = kurtosis( 9.0 );\n* // returns ~0.245\n*\n* @example\n* var v = kurtosis( 5.0 );\n* // returns ~0.245\n*\n* @example\n* var v = kurtosis( 3.0 );\n* // returns ~0.245\n*\n* @example\n* var v = kurtosis( -0.2 );\n* // returns NaN\n*\n* @example\n* var v = kurtosis( NaN );\n* // returns NaN\n*/\nfunction kurtosis( sigma ) {\n\tif ( isnan( sigma ) || sigma < 0.0 ) {\n\t\treturn NaN;\n\t}\n\treturn KURTOSIS;\n}\n\n\n// EXPORTS //\n\nexport default kurtosis;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Square root of the mathematical constant `π` divided by `2`.\n*\n* @module @stdlib/constants-float64-sqrt-half-pi\n* @type {number}\n*\n* @example\n* import SQRT_HALF_PI from '@stdlib/constants-float64-sqrt-half-pi';\n* // returns 1.2533141373155003\n*/\n\n\n// MAIN //\n\n/**\n* Square root of the mathematical constant `π` divided by `2`.\n*\n* @constant\n* @type {number}\n* @default 1.2533141373155003\n* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Pi}\n*/\nvar SQRT_HALF_PI = 1.253314137315500251207882642405522626503493370304969158314;\n\n\n// EXPORTS //\n\nexport default SQRT_HALF_PI;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport SQRT_HALF_PI from '@stdlib/constants-float64-sqrt-half-pi';\n\n\n// MAIN //\n\n/**\n* Returns the expected value of a Rayleigh distribution.\n*\n* @param {NonNegativeNumber} sigma - scale parameter\n* @returns {NonNegativeNumber} expected value\n*\n* @example\n* var v = mean( 9.0 );\n* // returns ~11.28\n*\n* @example\n* var v = mean( 2.0 );\n* // returns ~2.507\n*\n* @example\n* var v = mean( -0.2 );\n* // returns NaN\n*\n* @example\n* var v = mean( NaN );\n* // returns NaN\n*/\nfunction mean( sigma ) {\n\tif ( isnan( sigma ) || sigma < 0.0 ) {\n\t\treturn NaN;\n\t}\n\treturn sigma * SQRT_HALF_PI;\n}\n\n\n// EXPORTS //\n\nexport default mean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport LN2 from '@stdlib/constants-float64-ln-two';\n\n\n// VARIABLES //\n\nvar SQRT2LN2 = sqrt( 2.0 * LN2 );\n\n\n// MAIN //\n\n/**\n* Returns the median of a Rayleigh distribution.\n*\n* @param {NonNegativeNumber} sigma - scale parameter\n* @returns {NonNegativeNumber} median\n*\n* @example\n* var v = median( 9.0 );\n* // returns ~10.597\n*\n* @example\n* var v = median( 2.0 );\n* // returns ~2.355\n*\n* @example\n* var v = median( -0.2 );\n* // returns NaN\n*\n* @example\n* var v = median( NaN );\n* // returns NaN\n*/\nfunction median( sigma ) {\n\tif ( isnan( sigma ) || sigma < 0.0 ) {\n\t\treturn NaN;\n\t}\n\treturn sigma * SQRT2LN2;\n}\n\n\n// EXPORTS //\n\nexport default median;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns the mode of a Rayleigh distribution.\n*\n* @param {NonNegativeNumber} sigma - scale parameter\n* @returns {NonNegativeNumber} mode\n*\n* @example\n* var v = mode( 9.0 );\n* // returns 9.0\n*\n* @example\n* var v = mode( 2.0 );\n* // returns 2.0\n*\n* @example\n* var v = mode( -0.2 );\n* // returns NaN\n*\n* @example\n* var v = mode( NaN );\n* // returns NaN\n*/\nfunction mode( sigma ) {\n\tif ( isnan( sigma ) || sigma < 0.0 ) {\n\t\treturn NaN;\n\t}\n\treturn sigma;\n}\n\n\n// EXPORTS //\n\nexport default mode;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Square root of the mathematical constant `π`.\n*\n* @module @stdlib/constants-float64-sqrt-pi\n* @type {number}\n*\n* @example\n* import SQRT_PI from '@stdlib/constants-float64-sqrt-pi';\n* // returns 1.7724538509055160\n*/\n\n\n// MAIN //\n\n/**\n* Square root of the mathematical constant `π`.\n*\n* @constant\n* @type {number}\n* @default 1.7724538509055160\n* @see [OEIS]{@link https://oeis.org/A002161}\n* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Pi}\n*/\nvar SQRT_PI = 1.772453850905516027298167483341145182797549456122387128213;\n\n\n// EXPORTS //\n\nexport default SQRT_PI;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport pow from '@stdlib/math-base-special-pow';\nimport SQRT_PI from '@stdlib/constants-float64-sqrt-pi';\nimport PI from '@stdlib/constants-float64-pi';\n\n\n// VARIABLES //\n\nvar SKEWNESS = 2.0 * SQRT_PI * ( PI-3.0 ) / pow( 4.0-PI, 1.5 );\n\n\n// MAIN //\n\n/**\n* Returns the skewness of a Rayleigh distribution.\n*\n* @param {NonNegativeNumber} sigma - scale parameter\n* @returns {NonNegativeNumber} skewness\n*\n* @example\n* var v = skewness( 9.0 );\n* // returns ~0.631\n*\n* @example\n* var v = skewness( 2.0 );\n* // returns ~0.631\n*\n* @example\n* var v = skewness( -0.2 );\n* // returns NaN\n*\n* @example\n* var v = skewness( NaN );\n* // returns NaN\n*/\nfunction skewness( sigma ) {\n\tif ( isnan( sigma ) || sigma < 0.0 ) {\n\t\treturn NaN;\n\t}\n\treturn SKEWNESS;\n}\n\n\n// EXPORTS //\n\nexport default skewness;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport SQRT2 from '@stdlib/constants-float64-sqrt-two';\nimport PI from '@stdlib/constants-float64-pi';\n\n\n// VARIABLES //\n\nvar SQRT4MPI = sqrt( 4.0-PI );\n\n\n// MAIN //\n\n/**\n* Returns the standard deviation of a Rayleigh distribution.\n*\n* @param {NonNegativeNumber} sigma - scale parameter\n* @returns {NonNegativeNumber} standard deviation\n*\n* @example\n* var v = stdev( 9.0 );\n* // returns ~5.896\n*\n* @example\n* var v = stdev( 2.0 );\n* // returns ~1.31\n*\n* @example\n* var v = stdev( -0.2 );\n* // returns NaN\n*\n* @example\n* var v = stdev( NaN );\n* // returns NaN\n*/\nfunction stdev( sigma ) {\n\tif ( isnan( sigma ) || sigma < 0 ) {\n\t\treturn NaN;\n\t}\n\treturn SQRT4MPI * sigma / SQRT2;\n}\n\n\n// EXPORTS //\n\nexport default stdev;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport PI from '@stdlib/constants-float64-pi';\n\n\n// MAIN //\n\n/**\n* Returns the variance of a Rayleigh distribution.\n*\n* @param {NonNegativeNumber} sigma - scale parameter\n* @returns {NonNegativeNumber} variance\n*\n* @example\n* var v = variance( 9.0 );\n* // returns ~34.765\n*\n* @example\n* var v = variance( 2.0 );\n* // returns ~1.717\n*\n* @example\n* var v = variance( -0.2 );\n* // returns NaN\n*\n* @example\n* var v = variance( NaN );\n* // returns NaN\n*/\nfunction variance( sigma ) {\n\tif ( isnan( sigma ) || sigma < 0 ) {\n\t\treturn NaN;\n\t}\n\treturn ( 4.0-PI ) * sigma*sigma / 2.0;\n}\n\n\n// EXPORTS //\n\nexport default variance;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport expm1 from '@stdlib/math-base-special-expm1';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport log1p from '@stdlib/math-base-special-log1p';\nimport exp from '@stdlib/math-base-special-exp';\nimport pow from '@stdlib/math-base-special-pow';\nimport ln from '@stdlib/math-base-special-ln';\nimport LNHALF from '@stdlib/constants-float64-ln-half';\nimport NINF from '@stdlib/constants-float64-ninf';\n\n\n// MAIN //\n\n/**\n* Evaluates the logarithm of the cumulative distribution function (CDF) for a Rayleigh distribution with scale parameter `sigma` at a value `x`.\n*\n* @param {number} x - input value\n* @param {NonNegativeNumber} sigma - scale parameter\n* @returns {number} evaluated logCDF\n*\n* @example\n* var y = logcdf( 2.0, 3.0 );\n* // returns ~-1.613\n*\n* @example\n* var y = logcdf( 1.0, 2.0 );\n* // returns ~-2.141\n*\n* @example\n* var y = logcdf( -1.0, 4.0 );\n* // returns -Infinity\n*\n* @example\n* var y = logcdf( NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = logcdf( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* // Negative scale parameter:\n* var y = logcdf( 2.0, -1.0 );\n* // returns NaN\n*/\nfunction logcdf( x, sigma ) {\n\tvar s2;\n\tvar p;\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( sigma ) ||\n\t\tsigma < 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( sigma === 0.0 ) {\n\t\treturn ( x < 0.0 ) ? NINF : 0.0;\n\t}\n\tif ( x < 0.0 ) {\n\t\treturn NINF;\n\t}\n\ts2 = pow( sigma, 2.0 );\n\tp = -pow( x, 2.0 ) / ( 2.0 * s2 );\n\treturn ( p < LNHALF ) ? log1p( -exp( p ) ) : ln( -expm1( p ) );\n}\n\n\n// EXPORTS //\n\nexport default logcdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport pow from '@stdlib/math-base-special-pow';\nimport ln from '@stdlib/math-base-special-ln';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport NINF from '@stdlib/constants-float64-ninf';\n\n\n// MAIN //\n\n/**\n* Evaluates the logarithm of the probability density function (PDF) for a Rayleigh distribution with scale parameter `sigma` at a value `x`.\n*\n* @param {number} x - input value\n* @param {NonNegativeNumber} sigma - scale parameter\n* @returns {number} evaluated logPDF\n*\n* @example\n* var y = logpdf( 0.3, 1.0 );\n* // returns ~-1.249\n*\n* @example\n* var y = logpdf( 2.0, 0.8 );\n* // returns ~-1.986\n*\n* @example\n* var y = logpdf( -1.0, 0.5 );\n* // returns -Infinity\n*\n* @example\n* var y = logpdf( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = logpdf( NaN, 2.0 );\n* // returns NaN\n*\n* @example\n* // Negative scale parameter:\n* var y = logpdf( 2.0, -1.0 );\n* // returns NaN\n*/\nfunction logpdf( x, sigma ) {\n\tvar s2i;\n\tvar s2;\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( sigma ) ||\n\t\tsigma < 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( sigma === 0.0 ) {\n\t\treturn ( x === 0.0 ) ? PINF : NINF;\n\t}\n\tif ( x < 0.0 || x === PINF ) {\n\t\treturn NINF;\n\t}\n\ts2 = pow( sigma, 2.0 );\n\ts2i = 1.0 / s2;\n\treturn ln( s2i * x ) - (pow( x, 2.0 ) / ( 2.0 * s2 ));\n}\n\n\n// EXPORTS //\n\nexport default logpdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Rayleigh distribution logarithm of cumulative distribution function (CDF).\n*\n* @module @stdlib/stats-base-dists-rayleigh-logcdf\n*\n* @example\n* import logcdf from '@stdlib/stats-base-dists-rayleigh-logcdf';\n*\n* var y = logcdf( 2.0, 5.0 );\n* // returns ~-2.564\n*\n* var mylogcdf = logcdf.factory( 0.5 );\n* y = mylogcdf( 1.0 );\n* // returns ~-0.145\n*\n* y = mylogcdf( 0.5 );\n* // returns ~-0.934\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport logcdf from './logcdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( logcdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default logcdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport { factory as degenerate } from '@stdlib/stats-base-dists-degenerate-logcdf';\nimport expm1 from '@stdlib/math-base-special-expm1';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport log1p from '@stdlib/math-base-special-log1p';\nimport exp from '@stdlib/math-base-special-exp';\nimport pow from '@stdlib/math-base-special-pow';\nimport ln from '@stdlib/math-base-special-ln';\nimport LNHALF from '@stdlib/constants-float64-ln-half';\nimport NINF from '@stdlib/constants-float64-ninf';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the logarithm of the cumulative distribution function (CDF) for a Rayleigh distribution with scale parameter `sigma`.\n*\n* @param {NonNegativeNumber} sigma - scale parameter\n* @returns {Function} logCDF\n*\n* @example\n* var logcdf = factory( 2.0 );\n* var y = logcdf( 3.0 );\n* // returns ~-0.393\n*\n* y = logcdf( 1.0 );\n* // returns ~-2.141\n*/\nfunction factory( sigma ) {\n\tvar s2;\n\tif ( isnan( sigma ) || sigma < 0.0 ) {\n\t\treturn constantFunction( NaN );\n\t}\n\tif ( sigma === 0.0 ) {\n\t\treturn degenerate( 0.0 );\n\t}\n\ts2 = pow( sigma, 2.0 );\n\treturn logcdf;\n\n\t/**\n\t* Evaluates the logarithm of the cumulative distribution function (CDF) for a Rayleigh distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {number} evaluated logCDF\n\t*\n\t* @example\n\t* var y = logcdf( 2 );\n\t* // returns <number>\n\t*/\n\tfunction logcdf( x ) {\n\t\tvar p;\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x < 0.0 ) {\n\t\t\treturn NINF;\n\t\t}\n\t\tp = -pow( x, 2.0 ) / ( 2.0 * s2 );\n\t\treturn ( p < LNHALF ) ? log1p( -exp( p ) ) : ln( -expm1( p ) );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Rayleigh distribution logarithm of probability density function (PDF).\n*\n* @module @stdlib/stats-base-dists-rayleigh-logpdf\n*\n* @example\n* import logpdf from '@stdlib/stats-base-dists-rayleigh-logpdf';\n*\n* var y = logpdf( 2.0, 4.0 );\n* // returns ~-2.207\n*\n* var mylogpdf = logpdf.factory( 4.0 );\n*\n* y = mylogpdf( 6.0 );\n* // returns ~-2.104\n*\n* y = mylogpdf( 4.0 );\n* // returns ~-1.884\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport logpdf from './logpdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( logpdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default logpdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport { factory as degenerate } from '@stdlib/stats-base-dists-degenerate-logpdf';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport pow from '@stdlib/math-base-special-pow';\nimport ln from '@stdlib/math-base-special-ln';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport NINF from '@stdlib/constants-float64-ninf';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the logarithm of the probability density function (PDF) for a Rayleigh distribution with scale parameter `sigma`.\n*\n* @param {NonNegativeNumber} sigma - scale parameter\n* @returns {Function} logPDF\n*\n* @example\n* var logpdf = factory( 0.5 );\n* var y = logpdf( 1.0 );\n* // returns ~-0.614\n*\n* y = logpdf( 0.1 );\n* // returns ~-0.936\n*/\nfunction factory( sigma ) {\n\tvar s2i;\n\tvar s2;\n\tif ( isnan( sigma ) || sigma < 0.0 ) {\n\t\treturn constantFunction( NaN );\n\t}\n\tif ( sigma === 0.0 ) {\n\t\treturn degenerate( 0.0 );\n\t}\n\ts2 = pow( sigma, 2.0 );\n\ts2i = 1.0 / s2;\n\treturn logpdf;\n\n\t/**\n\t* Evaluates the logarithm of the probability density function (PDF) for a Rayleigh distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {number} evaluated logPDF\n\t*\n\t* @example\n\t* var y = logpdf( 2.3 );\n\t* // returns <number>\n\t*/\n\tfunction logpdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x < 0.0 || x === PINF ) {\n\t\t\treturn NINF;\n\t\t}\n\t\treturn ln( s2i * x ) - (pow( x, 2.0 ) / ( 2.0 * s2 ));\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_erf.c}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport exp from '@stdlib/math-base-special-exp';\nimport setLowWord from '@stdlib/number-float64-base-set-low-word';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport polyvalPP from './polyval_pp.js';\nimport polyvalQQ from './polyval_qq.js';\nimport polyvalPA from './polyval_pa.js';\nimport polyvalQA from './polyval_qa.js';\nimport polyvalRA from './polyval_ra.js';\nimport polyvalSA from './polyval_sa.js';\nimport polyvalRB from './polyval_rb.js';\nimport polyvalSB from './polyval_sb.js';\n\n\n// VARIABLES //\n\nvar TINY = 1.0e-300;\nvar VERY_TINY = 2.848094538889218e-306; // 0x00800000, 0x00000000\n\n// 2**-28 = 1/(1<<28) = 1/268435456\nvar SMALL = 3.725290298461914e-9;\n\nvar ERX = 8.45062911510467529297e-1;  // 0x3FEB0AC1, 0x60000000\n\nvar EFX = 1.28379167095512586316e-1;  // 0x3FC06EBA, 0x8214DB69\nvar EFX8 = 1.02703333676410069053;    // 0x3FF06EBA, 0x8214DB69\n\nvar PPC = 1.28379167095512558561e-1;  // 0x3FC06EBA, 0x8214DB68\nvar QQC = 1.0;\n\nvar PAC = -2.36211856075265944077e-3; // 0xBF6359B8, 0xBEF77538\nvar QAC = 1.0;\n\nvar RAC = -9.86494403484714822705e-3; // 0xBF843412, 0x600D6435\nvar SAC = 1.0;\n\nvar RBC = -9.86494292470009928597e-3; // 0xBF843412, 0x39E86F4A\nvar SBC = 1.0;\n\n\n// MAIN //\n\n/**\n* Evaluates the error function.\n*\n* ```tex\n* \\operatorname{erf}(x) = \\frac{2}{\\sqrt{\\pi}} \\int^{x}_{0} e^{-t^2}\\ \\mathrm{dt}\n* ```\n*\n* Note that\n*\n* ```tex\n* \\begin{align*}\n* \\operatorname{erfc}(x) &= 1 - \\operatorname{erf}(x) \\\\\n* \\operatorname{erf}(-x) &= -\\operatorname{erf}(x) \\\\\n* \\operatorname{erfc}(-x) &= 2 - \\operatorname{erfc}(x)\n* \\end{align*}\n* ```\n*\n* ## Method\n*\n* 1.  For \\\\(|x| \\in [0, 0.84375)\\\\),\n*\n*     ```tex\n*     \\operatorname{erf}(x) = x + x \\cdot \\operatorname{R}(x^2)\n*     ```\n*\n*     and\n*\n*     ```tex\n*     \\operatorname{erfc}(x) = \\begin{cases}\n*     1 - \\operatorname{erf}(x) & \\textrm{if}\\ x \\in (-.84375,0.25) \\\\\n*     0.5 + ((0.5-x)-x \\mathrm{R}) & \\textrm{if}\\ x \\in [0.25,0.84375)\n*     \\end{cases}\n*     ```\n*\n*     where \\\\(R = P/Q\\\\) and where \\\\(P\\\\) is an odd polynomial of degree \\\\(8\\\\) and \\\\(Q\\\\) is an odd polynomial of degree \\\\(10\\\\).\n*\n*     ```tex\n*     \\biggl| \\mathrm{R} - \\frac{\\operatorname{erf}(x)-x}{x} \\biggr| \\leq 2^{-57.90}\n*     ```\n*\n*     <!-- <note> -->\n*\n*     The formula is derived by noting\n*\n*     ```tex\n*     \\operatorname{erf}(x) = \\frac{2}{\\sqrt{\\pi}}\\biggl(x - \\frac{x^3}{3} + \\frac{x^5}{10} - \\frac{x^7}{42} + \\ldots \\biggr)\n*     ```\n*\n*     and that\n*\n*     ```tex\n*     \\frac{2}{\\sqrt{\\pi}} = 1.128379167095512573896158903121545171688\n*     ```\n*\n*     is close to unity. The interval is chosen because the fix point of \\\\(\\operatorname{erf}(x)\\\\) is near \\\\(0.6174\\\\) (i.e., \\\\(\\operatorname{erf(x)} = x\\\\) when \\\\(x\\\\) is near \\\\(0.6174\\\\)), and, by some experiment, \\\\(0.84375\\\\) is chosen to guarantee the error is less than one ulp for \\\\(\\operatorname{erf}(x)\\\\).\n*\n*     <!-- </note> -->\n*\n* 2.  For \\\\(|x| \\in [0.84375,1.25)\\\\), let \\\\(s = |x|-1\\\\), and \\\\(c = 0.84506291151\\\\) rounded to single (\\\\(24\\\\) bits)\n*\n*     ```tex\n*     \\operatorname{erf}(x) = \\operatorname{sign}(x) \\cdot \\biggl(c + \\frac{\\operatorname{P1}(s)}{\\operatorname{Q1}(s)}\\biggr)\n*     ```\n*\n*     and\n*\n*     ```tex\n*     \\operatorname{erfc}(x) = \\begin{cases}\n*     (1-c) - \\frac{\\operatorname{P1}(s)}{\\operatorname{Q1}(s)} & \\textrm{if}\\ x > 0 \\\\\n*     1 + \\biggl(c + \\frac{\\operatorname{P1}(s)}{\\operatorname{Q1}(s)}\\biggr) & \\textrm{if}\\ x < 0\n*     \\end{cases}\n*     ```\n*\n*     where\n*\n*     ```tex\n*     \\biggl|\\frac{\\mathrm{P1}}{\\mathrm{Q1}} - (\\operatorname{erf}(|x|)-c)\\biggr| \\leq 2^{-59.06}\n*     ```\n*\n*     <!-- <note> -->\n*\n*     Here, we use the Taylor series expansion at \\\\(x = 1\\\\)\n*\n*     ```tex\n*     \\begin{align*}\n*     \\operatorname{erf}(1+s) &= \\operatorname{erf}(1) + s\\cdot \\operatorname{poly}(s) \\\\\n*     &= 0.845.. + \\frac{\\operatorname{P1}(s)}{\\operatorname{Q1}(s)}\n*     \\end{align*}\n*     ```\n*\n*     using a rational approximation to approximate\n*\n*     ```tex\n*     \\operatorname{erf}(1+s) - (c = (\\mathrm{single})0.84506291151)\n*     ```\n*\n*     <!-- </note> -->\n*\n*     Note that, for \\\\(x \\in [0.84375,1.25)\\\\), \\\\(|\\mathrm{P1}/\\mathrm{Q1}| < 0.078\\\\), where\n*\n*     -   \\\\(\\operatorname{P1}(s)\\\\) is a degree \\\\(6\\\\) polynomial in \\\\(s\\\\)\n*     -   \\\\(\\operatorname{Q1}(s)\\\\) is a degree \\\\(6\\\\) polynomial in \\\\(s\\\\)\n*\n* 3.  For \\\\(x \\in [1.25,1/0.35)\\\\),\n*\n*     ```tex\n*     \\begin{align*}\n*     \\operatorname{erfc}(x) &= \\frac{1}{x}e^{-x^2-0.5625+(\\mathrm{R1}/\\mathrm{S1})} \\\\\n*     \\operatorname{erf}(x) &= 1 - \\operatorname{erfc}(x)\n*     \\end{align*}\n*     ```\n*\n*     where\n*\n*     -   \\\\(\\operatorname{R1}(z)\\\\) is a degree \\\\(7\\\\) polynomial in \\\\(z\\\\), where \\\\(z = 1/x^2\\\\)\n*     -   \\\\(\\operatorname{S1}(z)\\\\) is a degree \\\\(8\\\\) polynomial in \\\\(z\\\\)\n*\n* 4.  For \\\\(x \\in [1/0.35,28)\\\\),\n*\n*     ```tex\n*     \\operatorname{erfc}(x) = \\begin{cases}\n*     \\frac{1}{x} e^{-x^2-0.5625+(\\mathrm{R2}/\\mathrm{S2})} & \\textrm{if}\\ x > 0 \\\\\n*     2.0 - \\frac{1}{x} e^{-x^2-0.5625+(\\mathrm{R2}/\\mathrm{S2})} & \\textrm{if}\\ -6 < x < 0 \\\\\n*     2.0 - \\mathrm{tiny} & \\textrm{if}\\ x \\leq -6\n*     \\end{cases}\n*     ```\n*\n*     and\n*\n*     ```tex\n*     \\operatorname{erf}(x) = \\begin{cases}\n*     \\operatorname{sign}(x) \\cdot (1.0 - \\operatorname{erfc}(x)) & \\textrm{if}\\ x < 6 \\\\\n*     \\operatorname{sign}(x) \\cdot (1.0 - \\mathrm{tiny}) & \\textrm{otherwise}\n*     \\end{cases}\n*     ```\n*\n*     where\n*\n*     -   \\\\(\\operatorname{R2}(z)\\\\) is a degree \\\\(6\\\\) polynomial in \\\\(z\\\\), where \\\\(z = 1/x^2\\\\)\n*     -   \\\\(\\operatorname{S2}(z)\\\\) is a degree \\\\(7\\\\) polynomial in \\\\(z\\\\)\n*\n* 5.  For \\\\(x \\in [28, \\infty)\\\\),\n*\n*     ```tex\n*     \\begin{align*}\n*     \\operatorname{erf}(x) &= \\operatorname{sign}(x) \\cdot (1 - \\mathrm{tiny}) & \\textrm{(raise inexact)}\n*     \\end{align*}\n*     ```\n*\n*     and\n*\n*     ```tex\n*     \\operatorname{erfc}(x) = \\begin{cases}\n*     \\mathrm{tiny} \\cdot \\mathrm{tiny} & \\textrm{if}\\ x > 0\\ \\textrm{(raise underflow)} \\\\\n*     2 - \\mathrm{tiny} & \\textrm{if}\\ x < 0\n*     \\end{cases}\n*     ```\n*\n* ## Special Cases\n*\n* ```tex\n* \\begin{align*}\n* \\operatorname{erf}(0) &= 0 \\\\\n* \\operatorname{erf}(-0) &= -0 \\\\\n* \\operatorname{erf}(\\infty) &= 1 \\\\\n* \\operatorname{erf}(-\\infty) &= -1 \\\\\n* \\operatorname{erfc}(0) &= 1 \\\\\n* \\operatorname{erfc}(\\infty) &= 0 \\\\\n* \\operatorname{erfc}(-\\infty) &= 2 \\\\\n* \\operatorname{erf}(\\mathrm{NaN}) &= \\mathrm{NaN} \\\\\n* \\operatorname{erfc}(\\mathrm{NaN}) &= \\mathrm{NaN}\n* \\end{align*}\n* ```\n*\n*\n* ## Notes\n*\n* -   To compute \\\\(\\exp(-x^2-0.5625+(\\mathrm{R}/\\mathrm{S}))\\\\), let \\\\(s\\\\) be a single precision number and \\\\(s := x\\\\); then\n*\n*     ```tex\n*     -x^2 = -s^2 + (s-x)(s+x)\n*     ```\n*\n*     and\n*\n*     ```tex\n*     e^{-x^2-0.5626+(\\mathrm{R}/\\mathrm{S})} = e^{-s^2-0.5625} e^{(s-x)(s+x)+(\\mathrm{R}/\\mathrm{S})}\n*     ```\n*\n* -   `#4` and `#5` make use of the asymptotic series\n*\n*     ```tex\n*     \\operatorname{erfc}(x) \\approx \\frac{e^{-x^2}}{x\\sqrt{\\pi}} (1 + \\operatorname{poly}(1/x^2))\n*     ```\n*\n*     We use a rational approximation to approximate\n*\n*     ```tex\n*     g(s) = f(1/x^2) = \\ln(\\operatorname{erfc}(x) \\cdot x) - x^2 + 0.5625\n*     ```\n*\n* -   The error bound for \\\\(\\mathrm{R1}/\\mathrm{S1}\\\\) is\n*\n*     ```tex\n*     |\\mathrm{R1}/\\mathrm{S1} - f(x)| < 2^{-62.57}\n*     ```\n*\n*     and for \\\\(\\mathrm{R2}/\\mathrm{S2}\\\\) is\n*\n*     ```tex\n*     |\\mathrm{R2}/\\mathrm{S2} - f(x)| < 2^{-61.52}\n*     ```\n*\n* @param {number} x - input value\n* @returns {number} function value\n*\n* @example\n* var y = erf( 2.0 );\n* // returns ~0.9953\n*\n* @example\n* var y = erf( -1.0 );\n* // returns ~-0.8427\n*\n* @example\n* var y = erf( -0.0 );\n* // returns -0.0\n*\n* @example\n* var y = erf( NaN );\n* // returns NaN\n*/\nfunction erf( x ) {\n\tvar sign;\n\tvar ax;\n\tvar z;\n\tvar r;\n\tvar s;\n\tvar y;\n\tvar p;\n\tvar q;\n\n\t// Special case: NaN\n\tif ( isnan( x ) ) {\n\t\treturn NaN;\n\t}\n\t// Special case: +infinity\n\tif ( x === PINF ) {\n\t\treturn 1.0;\n\t}\n\t// Special case: -infinity\n\tif ( x === NINF ) {\n\t\treturn -1.0;\n\t}\n\t// Special case: +-0\n\tif ( x === 0.0 ) {\n\t\treturn x;\n\t}\n\tif ( x < 0.0 ) {\n\t\tsign = true;\n\t\tax = -x;\n\t} else {\n\t\tsign = false;\n\t\tax = x;\n\t}\n\t// |x| < 0.84375\n\tif ( ax < 0.84375 ) {\n\t\tif ( ax < SMALL ) {\n\t\t\tif ( ax < VERY_TINY ) {\n\t\t\t\t// Avoid underflow:\n\t\t\t\treturn 0.125 * ( (8.0*x) + (EFX8*x) );\n\t\t\t}\n\t\t\treturn x + (EFX*x);\n\t\t}\n\t\tz = x * x;\n\t\tr = PPC + ( z*polyvalPP( z ) );\n\t\ts = QQC + ( z*polyvalQQ( z ) );\n\t\ty = r / s;\n\t\treturn x + (x*y);\n\t}\n\t// 0.84375 <= |x| < 1.25\n\tif ( ax < 1.25 ) {\n\t\ts = ax - 1.0;\n\t\tp = PAC + ( s*polyvalPA( s ) );\n\t\tq = QAC + ( s*polyvalQA( s ) );\n\t\tif ( sign ) {\n\t\t\treturn -ERX - (p/q);\n\t\t}\n\t\treturn ERX + (p/q);\n\t}\n\t// +inf > |x| >= 6\n\tif ( ax >= 6.0 ) {\n\t\tif ( sign ) {\n\t\t\treturn TINY - 1.0; // raise inexact\n\t\t}\n\t\treturn 1.0 - TINY; // raise inexact\n\t}\n\ts = 1.0 / (ax*ax);\n\n\t// |x| < 1/0.35 ~ 2.857143\n\tif ( ax < 2.857142857142857 ) {\n\t\tr = RAC + ( s*polyvalRA( s ) );\n\t\ts = SAC + ( s*polyvalSA( s ) );\n\t}\n\t// |x| >= 1/0.35 ~ 2.857143\n\telse {\n\t\tr = RBC + ( s*polyvalRB( s ) );\n\t\ts = SBC + ( s*polyvalSB( s ) );\n\t}\n\tz = setLowWord( ax, 0 ); // pseudo-single (20-bit) precision x\n\tr = exp( -(z*z) - 0.5625 ) * exp( ( (z-ax) * (z+ax) ) + (r/s) );\n\tif ( sign ) {\n\t\treturn (r/ax) - 1.0;\n\t}\n\treturn 1.0 - (r/ax);\n}\n\n\n// EXPORTS //\n\nexport default erf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn -0.3250421072470015;\n\t}\n\treturn -0.3250421072470015 + (x * (-0.02848174957559851 + (x * (-0.005770270296489442 + (x * -0.000023763016656650163))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.39791722395915535;\n\t}\n\treturn 0.39791722395915535 + (x * (0.0650222499887673 + (x * (0.005081306281875766 + (x * (0.00013249473800432164 + (x * -0.000003960228278775368))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.41485611868374833;\n\t}\n\treturn 0.41485611868374833 + (x * (-0.3722078760357013 + (x * (0.31834661990116175 + (x * (-0.11089469428239668 + (x * (0.035478304325618236 + (x * -0.002166375594868791))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.10642088040084423;\n\t}\n\treturn 0.10642088040084423 + (x * (0.540397917702171 + (x * (0.07182865441419627 + (x * (0.12617121980876164 + (x * (0.01363708391202905 + (x * 0.011984499846799107))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn -0.6938585727071818;\n\t}\n\treturn -0.6938585727071818 + (x * (-10.558626225323291 + (x * (-62.375332450326006 + (x * (-162.39666946257347 + (x * (-184.60509290671104 + (x * (-81.2874355063066 + (x * -9.814329344169145))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 19.651271667439257;\n\t}\n\treturn 19.651271667439257 + (x * (137.65775414351904 + (x * (434.56587747522923 + (x * (645.3872717332679 + (x * (429.00814002756783 + (x * (108.63500554177944 + (x * (6.570249770319282 + (x * -0.0604244152148581))))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn -0.799283237680523;\n\t}\n\treturn -0.799283237680523 + (x * (-17.757954917754752 + (x * (-160.63638485582192 + (x * (-637.5664433683896 + (x * (-1025.0951316110772 + (x * -483.5191916086514))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 30.33806074348246;\n\t}\n\treturn 30.33806074348246 + (x * (325.7925129965739 + (x * (1536.729586084437 + (x * (3199.8582195085955 + (x * (2553.0504064331644 + (x * (474.52854120695537 + (x * -22.44095244658582))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport exp from '@stdlib/math-base-special-exp';\nimport erf from '@stdlib/math-base-special-erf';\nimport SQRT_HALF_PI from '@stdlib/constants-float64-sqrt-half-pi';\nimport SQRT2 from '@stdlib/constants-float64-sqrt-two';\n\n\n// MAIN //\n\n/**\n* Evaluates the moment-generating function (MGF) for a Rayleigh distribution with scale parameter `sigma` at a value `t`.\n*\n* @param {number} t - input value\n* @param {NonNegativeNumber} sigma - scale parameter\n* @returns {number} evaluated MGF\n*\n* @example\n* var y = mgf( 1.0, 3.0 );\n* // returns ~678.508\n*\n* @example\n* var y = mgf( 1.0, 2.0 );\n* // returns ~38.65\n*\n* @example\n* var y = mgf( -1.0, 4.0 );\n* // returns ~-0.947\n*\n* @example\n* var y = mgf( NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = mgf( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = mgf( 0.5, -1.0 );\n* // returns NaN\n*/\nfunction mgf( t, sigma ) {\n\tvar sigmat;\n\tvar out;\n\tif (\n\t\tisnan( t ) ||\n\t\tisnan( sigma ) ||\n\t\tsigma < 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tsigmat = t * sigma;\n\tout = 1.0 + (sigmat * exp( sigmat*sigmat / 2.0 ));\n\tout *= SQRT_HALF_PI * ( erf( sigmat / SQRT2 ) + 1.0 );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default mgf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport exp from '@stdlib/math-base-special-exp';\nimport pow from '@stdlib/math-base-special-pow';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Evaluates the probability density function (PDF) for a Rayleigh distribution with scale parameter `sigma` at a value `x`.\n*\n* @param {number} x - input value\n* @param {NonNegativeNumber} sigma - scale parameter\n* @returns {number} evaluated PDF\n*\n* @example\n* var y = pdf( 0.3, 1.0 );\n* // returns ~0.287\n*\n* @example\n* var y = pdf( 2.0, 0.8 );\n* // returns ~0.137\n*\n* @example\n* var y = pdf( -1.0, 0.5 );\n* // returns 0.0\n*\n* @example\n* var y = pdf( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = pdf( NaN, 2.0 );\n* // returns NaN\n*\n* @example\n* // Negative scale parameter:\n* var y = pdf( 2.0, -1.0 );\n* // returns NaN\n*/\nfunction pdf( x, sigma ) {\n\tvar s2i;\n\tvar s2;\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( sigma ) ||\n\t\tsigma < 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( sigma === 0.0 ) {\n\t\treturn ( x === 0.0 ) ? PINF : 0.0;\n\t}\n\tif ( x < 0.0 || x === PINF ) {\n\t\treturn 0.0;\n\t}\n\ts2 = pow( sigma, 2.0 );\n\ts2i = 1.0 / s2;\n\treturn s2i * x * exp( -pow( x, 2.0 ) / ( 2.0 * s2 ) );\n}\n\n\n// EXPORTS //\n\nexport default pdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport log1p from '@stdlib/math-base-special-log1p';\nimport sqrt from '@stdlib/math-base-special-sqrt';\n\n\n// MAIN //\n\n/**\n* Evaluates the quantile function for a Rayleigh distribution with scale parameter `sigma` at a probability `p`.\n*\n* @param {Probability} p - input value\n* @param {NonNegativeNumber} sigma - scale parameter\n* @returns {number} evaluated quantile function\n*\n* @example\n* var y = quantile( 0.8, 1.0 );\n* // returns ~1.794\n*\n* @example\n* var y = quantile( 0.5, 4.0 );\n* // returns ~4.71\n*\n* @example\n* var y = quantile( 1.1, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( -0.2, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* // Negative scale parameter:\n* var y = quantile( 0.5, -1.0 );\n* // returns NaN\n*/\nfunction quantile( p, sigma ) {\n\tvar s2;\n\tif ( isnan( sigma ) || sigma < 0.0 ) {\n\t\treturn NaN;\n\t}\n\tif ( isnan( p ) || p < 0.0 || p > 1.0 ) {\n\t\treturn NaN;\n\t}\n\tif ( sigma === 0.0 ) {\n\t\treturn 0.0;\n\t}\n\ts2 = sigma * sigma;\n\treturn sqrt( -2.0 * s2 * log1p( -p ) );\n}\n\n\n// EXPORTS //\n\nexport default quantile;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nimport defineProperty from '@stdlib/utils-define-property';\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport setReadOnlyAccessor from '@stdlib/utils-define-nonenumerable-read-only-accessor';\nimport { isPrimitive as isPositive } from '@stdlib/assert-is-positive-number';\nimport entropy from '@stdlib/stats-base-dists-rayleigh-entropy';\nimport kurtosis from '@stdlib/stats-base-dists-rayleigh-kurtosis';\nimport mean from '@stdlib/stats-base-dists-rayleigh-mean';\nimport median from '@stdlib/stats-base-dists-rayleigh-median';\nimport mode from '@stdlib/stats-base-dists-rayleigh-mode';\nimport skewness from '@stdlib/stats-base-dists-rayleigh-skewness';\nimport stdev from '@stdlib/stats-base-dists-rayleigh-stdev';\nimport variance from '@stdlib/stats-base-dists-rayleigh-variance';\nimport cdf from '@stdlib/stats-base-dists-rayleigh-cdf';\nimport logcdf from '@stdlib/stats-base-dists-rayleigh-logcdf';\nimport logpdf from '@stdlib/stats-base-dists-rayleigh-logpdf';\nimport mgf from '@stdlib/stats-base-dists-rayleigh-mgf';\nimport pdf from '@stdlib/stats-base-dists-rayleigh-pdf';\nimport quantile from '@stdlib/stats-base-dists-rayleigh-quantile';\nimport format from '@stdlib/string-format';\n\n\n// FUNCTIONS //\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n*/\nfunction rayleighCDF( x ) {\n\treturn cdf( x, this.sigma );\n}\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (logCDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logCDF\n*/\nfunction rayleighLogCDF( x ) {\n\treturn logcdf( x, this.sigma );\n}\n\n/**\n* Evaluates the natural logarithm of the probability density function (logPDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n*/\nfunction rayleighLogPDF( x ) {\n\treturn logpdf( x, this.sigma );\n}\n\n/**\n* Evaluates the moment-generating function (MGF).\n*\n* @private\n* @param {number} t - input value\n* @returns {number} evaluated MGF\n*/\nfunction rayleighMGF( t ) {\n\treturn mgf( t, this.sigma );\n}\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n*/\nfunction rayleighPDF( x ) {\n\treturn pdf( x, this.sigma );\n}\n\n/**\n* Evaluates the quantile function.\n*\n* @private\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n*/\nfunction rayleighQuantile( p ) {\n\treturn quantile( p, this.sigma );\n}\n\n\n// MAIN //\n\n/**\n* Rayleigh distribution constructor.\n*\n* @constructor\n* @param {PositiveNumber} [sigma=1.0] - scale parameter\n* @throws {TypeError} `sigma` must be a positive number\n* @returns {Rayleigh} distribution instance\n*\n* @example\n* var rayleigh = new Rayleigh( 1.0 );\n*\n* var y = rayleigh.cdf( 0.8 );\n* // returns ~0.274\n*\n* var v = rayleigh.mode;\n* // returns 1.0\n*/\nfunction Rayleigh() {\n\tvar sigma;\n\tif ( !(this instanceof Rayleigh) ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn new Rayleigh();\n\t\t}\n\t\treturn new Rayleigh( arguments[ 0 ] );\n\t}\n\tif ( arguments.length ) {\n\t\tsigma = arguments[ 0 ];\n\t\tif ( !isPositive( sigma ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Scale parameter must be a positive number. Value: `%s`.', sigma ) );\n\t\t}\n\t} else {\n\t\tsigma = 1.0;\n\t}\n\tdefineProperty( this, 'sigma', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn sigma;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isPositive( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid assignment. Must be a positive number. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\tsigma = value;\n\t\t}\n\t});\n\treturn this;\n}\n\n/**\n* Rayleigh distribution differential entropy.\n*\n* @name entropy\n* @memberof Rayleigh.prototype\n* @type {number}\n* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}\n*\n* @example\n* var rayleigh = new Rayleigh( 4.0 );\n*\n* var v = rayleigh.entropy;\n* // returns ~2.328\n*/\nsetReadOnlyAccessor( Rayleigh.prototype, 'entropy', function get() {\n\treturn entropy( this.sigma );\n});\n\n/**\n* Rayleigh distribution excess kurtosis.\n*\n* @name kurtosis\n* @memberof Rayleigh.prototype\n* @type {number}\n* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}\n*\n* @example\n* var rayleigh = new Rayleigh( 4.0 );\n*\n* var v = rayleigh.kurtosis;\n* // returns ~0.245\n*/\nsetReadOnlyAccessor( Rayleigh.prototype, 'kurtosis', function get() {\n\treturn kurtosis( this.sigma );\n});\n\n/**\n* Rayleigh distribution expected value.\n*\n* @name mean\n* @memberof Rayleigh.prototype\n* @type {number}\n* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}\n*\n* @example\n* var rayleigh = new Rayleigh( 4.0 );\n*\n* var v = rayleigh.mean;\n* // returns ~5.013\n*/\nsetReadOnlyAccessor( Rayleigh.prototype, 'mean', function get() {\n\treturn mean( this.sigma );\n});\n\n/**\n* Rayleigh distribution median.\n*\n* @name median\n* @memberof Rayleigh.prototype\n* @type {number}\n* @see [median]{@link https://en.wikipedia.org/wiki/Median}\n*\n* @example\n* var rayleigh = new Rayleigh( 4.0 );\n*\n* var v = rayleigh.median;\n* // returns ~4.71\n*/\nsetReadOnlyAccessor( Rayleigh.prototype, 'median', function get() {\n\treturn median( this.sigma );\n});\n\n/**\n* Rayleigh distribution mode.\n*\n* @name mode\n* @memberof Rayleigh.prototype\n* @type {number}\n* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}\n*\n* @example\n* var rayleigh = new Rayleigh( 4.0 );\n*\n* var v = rayleigh.mode;\n* // returns 4.0\n*/\nsetReadOnlyAccessor( Rayleigh.prototype, 'mode', function get() {\n\treturn mode( this.sigma );\n});\n\n/**\n* Rayleigh distribution skewness.\n*\n* @name skewness\n* @memberof Rayleigh.prototype\n* @type {number}\n* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}\n*\n* @example\n* var rayleigh = new Rayleigh( 4.0 );\n*\n* var v = rayleigh.skewness;\n* // returns ~0.631\n*/\nsetReadOnlyAccessor( Rayleigh.prototype, 'skewness', function get() {\n\treturn skewness( this.k, this.sigma );\n});\n\n/**\n* Rayleigh distribution standard deviation.\n*\n* @name stdev\n* @memberof Rayleigh.prototype\n* @type {PositiveNumber}\n* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}\n*\n* @example\n* var rayleigh = new Rayleigh( 4.0 );\n*\n* var v = rayleigh.stdev;\n* // returns ~2.62\n*/\nsetReadOnlyAccessor( Rayleigh.prototype, 'stdev', function get() {\n\treturn stdev( this.sigma );\n});\n\n/**\n* Rayleigh distribution variance.\n*\n* @name variance\n* @memberof Rayleigh.prototype\n* @type {PositiveNumber}\n* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}\n*\n* @example\n* var rayleigh = new Rayleigh( 4.0 );\n*\n* var v = rayleigh.variance;\n* // returns ~6.867\n*/\nsetReadOnlyAccessor( Rayleigh.prototype, 'variance', function get() {\n\treturn variance( this.sigma );\n});\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @name cdf\n* @memberof Rayleigh.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var rayleigh = new Rayleigh( 2.0 );\n*\n* var v = rayleigh.cdf( 0.5 );\n* // returns ~0.031\n*/\nsetReadOnly( Rayleigh.prototype, 'cdf', rayleighCDF );\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (CDF).\n*\n* @name cdf\n* @memberof Rayleigh.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logCDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var rayleigh = new Rayleigh( 2.0 );\n*\n* var v = rayleigh.logcdf( 0.5 );\n* // returns ~-3.481\n*/\nsetReadOnly( Rayleigh.prototype, 'logcdf', rayleighLogCDF );\n\n/**\n* Evaluates the natural logarithm of the probability density function (PDF).\n*\n* @name pdf\n* @memberof Rayleigh.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var rayleigh = new Rayleigh( 2.0 );\n*\n* var v = rayleigh.logpdf( 0.8 );\n* // returns ~-1.689\n*/\nsetReadOnly( Rayleigh.prototype, 'logpdf', rayleighLogPDF );\n\n/**\n* Evaluates the moment-generating function (MGF).\n*\n* @name mgf\n* @memberof Rayleigh.prototype\n* @type {Function}\n* @param {number} t - input value\n* @returns {number} evaluated MGF\n* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}\n*\n* @example\n* var rayleigh = new Rayleigh( 2.0 );\n*\n* var v = rayleigh.mgf( 0.5 );\n* // returns ~5.586\n*/\nsetReadOnly( Rayleigh.prototype, 'mgf', rayleighMGF );\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @name pdf\n* @memberof Rayleigh.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var rayleigh = new Rayleigh( 2.0 );\n*\n* var v = rayleigh.pdf( 4.0 );\n* // returns ~0.135\n*/\nsetReadOnly( Rayleigh.prototype, 'pdf', rayleighPDF );\n\n/**\n* Evaluates the quantile function.\n*\n* @name quantile\n* @memberof Rayleigh.prototype\n* @type {Function}\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}\n*\n* @example\n* var rayleigh = new Rayleigh( 2.0 );\n*\n* var v = rayleigh.quantile( 0.5 );\n* // returns ~2.355\n*/\nsetReadOnly( Rayleigh.prototype, 'quantile', rayleighQuantile );\n\n\n// EXPORTS //\n\nexport default Rayleigh;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate the moment-generating function (MGF) for a Rayleigh distribution.\n*\n* @module @stdlib/stats-base-dists-rayleigh-mgf\n*\n* @example\n* import mgf from '@stdlib/stats-base-dists-rayleigh-mgf';\n*\n* var y = mgf( 1.0, 3.0 );\n* // returns ~678.508\n*\n* y = mgf( 1.0, 2.0 );\n* // returns ~38.65\n*\n* y = mgf( -1.0, 4.0 );\n* // returns ~-0.947\n*\n* var myMGF = mgf.factory( 0.5 );\n*\n* y = myMGF( 1.0 );\n* // returns ~2.715\n*\n* y = myMGF( 0.5 );\n* // returns ~1.888\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport mgf from './mgf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( mgf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default mgf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport exp from '@stdlib/math-base-special-exp';\nimport erf from '@stdlib/math-base-special-erf';\nimport SQRT_HALF_PI from '@stdlib/constants-float64-sqrt-half-pi';\nimport SQRT2 from '@stdlib/constants-float64-sqrt-two';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the moment-generating function (MGF) of a Rayleigh distribution with scale parameter `sigma`.\n*\n* @param {NonNegativeNumber} sigma - scale parameter\n* @returns {Function} MGF\n*\n* @example\n* var mgf = factory( 0.5 );\n* var y = mgf( 1.0 );\n* // returns ~2.715\n*\n* y = mgf( 0.5 );\n* // returns ~1.888\n*/\nfunction factory( sigma ) {\n\tif ( isnan( sigma ) || sigma < 0.0 ) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn mgf;\n\n\t/**\n\t* Evaluates the moment-generating function (MGF) for a Rayleigh distribution.\n\t*\n\t* @private\n\t* @param {number} t - input value\n\t* @returns {number} evaluated MGF\n\t*\n\t* @example\n\t* var y = mgf( 0.5 );\n\t* // returns <number>\n\t*/\n\tfunction mgf( t ) {\n\t\tvar sigmat;\n\t\tvar ret;\n\n\t\tif ( isnan( t ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tsigmat = t * sigma;\n\t\tret = 1.0 + (sigmat * exp( sigmat*sigmat / 2.0 ));\n\t\tret *= SQRT_HALF_PI * ( erf( sigmat / SQRT2 ) + 1.0 );\n\t\treturn ret;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Rayleigh distribution probability density function (PDF).\n*\n* @module @stdlib/stats-base-dists-rayleigh-pdf\n*\n* @example\n* import pdf from '@stdlib/stats-base-dists-rayleigh-pdf';\n*\n* var y = pdf( 2.0, 4.0 );\n* // returns ~0.11\n*\n* var myPDF = pdf.factory( 4.0 );\n*\n* y = myPDF( 6.0 );\n* // returns ~0.122\n*\n* y = myPDF( 4.0 );\n* // returns ~0.152\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport pdf from './pdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( pdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default pdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport { factory as degenerate } from '@stdlib/stats-base-dists-degenerate-pdf';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport exp from '@stdlib/math-base-special-exp';\nimport pow from '@stdlib/math-base-special-pow';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the probability density function (PDF) for a Rayleigh distribution with scale parameter `sigma`.\n*\n* @param {NonNegativeNumber} sigma - scale parameter\n* @returns {Function} PDF\n*\n* @example\n* var pdf = factory( 0.5 );\n* var y = pdf( 1.0 );\n* // returns ~0.541\n*\n* y = pdf( 0.1 );\n* // returns ~0.392\n*/\nfunction factory( sigma ) {\n\tvar s2i;\n\tvar s2;\n\tif ( isnan( sigma ) || sigma < 0.0 ) {\n\t\treturn constantFunction( NaN );\n\t}\n\tif ( sigma === 0.0 ) {\n\t\treturn degenerate( 0.0 );\n\t}\n\ts2 = pow( sigma, 2.0 );\n\ts2i = 1.0 / s2;\n\treturn pdf;\n\n\t/**\n\t* Evaluates the probability density function (PDF) for a Rayleigh distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {number} evaluated PDF\n\t*\n\t* @example\n\t* var y = pdf( 2.3 );\n\t* // returns <number>\n\t*/\n\tfunction pdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x < 0.0 || x === PINF ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn s2i * x * exp( -pow( x, 2.0 ) / ( 2.0 * s2 ) );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Rayleigh distribution quantile function.\n*\n* @module @stdlib/stats-base-dists-rayleigh-quantile\n*\n* @example\n* import quantile from '@stdlib/stats-base-dists-rayleigh-quantile';\n*\n* var y = quantile( 0.5, 4.0 );\n* // returns ~4.71\n*\n* var myQuantile = quantile.factory( 0.4 );\n*\n* y = myQuantile( 0.4 );\n* // returns ~0.404\n*\n* y = myQuantile( 1.0 );\n* // returns Infinity\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport quantile from './quantile.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( quantile, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default quantile;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport { factory as degenerate } from '@stdlib/stats-base-dists-degenerate-quantile';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport log1p from '@stdlib/math-base-special-log1p';\nimport sqrt from '@stdlib/math-base-special-sqrt';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the quantile function for a Rayleigh distribution with scale parameter `sigma`.\n*\n* @param {NonNegativeNumber} sigma - scale parameter\n* @returns {Function} quantile function\n*\n* @example\n* var quantile = factory( 10.0 );\n* var y = quantile( 0.5 );\n* // returns ~11.774\n*\n* y = quantile( 0.8 );\n* // returns ~17.941\n*/\nfunction factory( sigma ) {\n\tvar s2;\n\tif ( isnan( sigma ) || sigma < 0.0 ) {\n\t\treturn constantFunction( NaN );\n\t}\n\tif ( sigma === 0.0 ) {\n\t\treturn degenerate( 0.0 );\n\t}\n\ts2 = sigma * sigma;\n\treturn quantile;\n\n\t/**\n\t* Evaluates the quantile function for a Rayleigh distribution.\n\t*\n\t* @private\n\t* @param {Probability} p - input value\n\t* @returns {number} evaluated quantile function\n\t*\n\t* @example\n\t* var y = quantile( 0.3 );\n\t* // returns <number>\n\t*/\n\tfunction quantile( p ) {\n\t\tif ( isnan( p ) || p < 0.0 || p > 1.0 ) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn sqrt( -2.0 * s2 * log1p( -p ) );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace rayleigh\n*/\nvar rayleigh = {};\n\n/**\n* @name cdf\n* @memberof rayleigh\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/rayleigh/cdf}\n*/\nimport cdf from '@stdlib/stats-base-dists-rayleigh-cdf';\nsetReadOnly( rayleigh, 'cdf', cdf );\n\n/**\n* @name Rayleigh\n* @memberof rayleigh\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/rayleigh/ctor}\n*/\nimport Rayleigh from '@stdlib/stats-base-dists-rayleigh-ctor';\nsetReadOnly( rayleigh, 'Rayleigh', Rayleigh );\n\n/**\n* @name entropy\n* @memberof rayleigh\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/rayleigh/entropy}\n*/\nimport entropy from '@stdlib/stats-base-dists-rayleigh-entropy';\nsetReadOnly( rayleigh, 'entropy', entropy );\n\n/**\n* @name kurtosis\n* @memberof rayleigh\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/rayleigh/kurtosis}\n*/\nimport kurtosis from '@stdlib/stats-base-dists-rayleigh-kurtosis';\nsetReadOnly( rayleigh, 'kurtosis', kurtosis );\n\n/**\n* @name logcdf\n* @memberof rayleigh\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/rayleigh/logcdf}\n*/\nimport logcdf from '@stdlib/stats-base-dists-rayleigh-logcdf';\nsetReadOnly( rayleigh, 'logcdf', logcdf );\n\n/**\n* @name logpdf\n* @memberof rayleigh\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/rayleigh/logpdf}\n*/\nimport logpdf from '@stdlib/stats-base-dists-rayleigh-logpdf';\nsetReadOnly( rayleigh, 'logpdf', logpdf );\n\n/**\n* @name mean\n* @memberof rayleigh\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/rayleigh/mean}\n*/\nimport mean from '@stdlib/stats-base-dists-rayleigh-mean';\nsetReadOnly( rayleigh, 'mean', mean );\n\n/**\n* @name median\n* @memberof rayleigh\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/rayleigh/median}\n*/\nimport median from '@stdlib/stats-base-dists-rayleigh-median';\nsetReadOnly( rayleigh, 'median', median );\n\n/**\n* @name mgf\n* @memberof rayleigh\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/rayleigh/mgf}\n*/\nimport mgf from '@stdlib/stats-base-dists-rayleigh-mgf';\nsetReadOnly( rayleigh, 'mgf', mgf );\n\n/**\n* @name mode\n* @memberof rayleigh\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/rayleigh/mode}\n*/\nimport mode from '@stdlib/stats-base-dists-rayleigh-mode';\nsetReadOnly( rayleigh, 'mode', mode );\n\n/**\n* @name pdf\n* @memberof rayleigh\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/rayleigh/pdf}\n*/\nimport pdf from '@stdlib/stats-base-dists-rayleigh-pdf';\nsetReadOnly( rayleigh, 'pdf', pdf );\n\n/**\n* @name quantile\n* @memberof rayleigh\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/rayleigh/quantile}\n*/\nimport quantile from '@stdlib/stats-base-dists-rayleigh-quantile';\nsetReadOnly( rayleigh, 'quantile', quantile );\n\n/**\n* @name skewness\n* @memberof rayleigh\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/rayleigh/skewness}\n*/\nimport skewness from '@stdlib/stats-base-dists-rayleigh-skewness';\nsetReadOnly( rayleigh, 'skewness', skewness );\n\n/**\n* @name variance\n* @memberof rayleigh\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/rayleigh/variance}\n*/\nimport variance from '@stdlib/stats-base-dists-rayleigh-variance';\nsetReadOnly( rayleigh, 'variance', variance );\n\n\n// EXPORTS //\n\nexport default rayleigh;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport PINF from '@stdlib/constants-float64-pinf';\nimport NINF from '@stdlib/constants-float64-ninf';\n\n\n// MAIN //\n\n/**\n* Tests if a double-precision floating-point numeric value is finite.\n*\n* @param {number} x - value to test\n* @returns {boolean} boolean indicating whether the value is finite\n*\n* @example\n* var bool = isfinite( 5.0 );\n* // returns true\n*\n* @example\n* var bool = isfinite( -2.0e64 );\n* // returns true\n*\n* @example\n* var bool = isfinite( Infinity );\n* // returns false\n*\n* @example\n* var bool = isfinite( -Infinity );\n* // returns false\n*/\nfunction isfinite( x ) {\n\treturn (\n\t\t// NaN check (x !== x ):\n\t\tx === x &&\n\n\t\t// +-infinity check:\n\t\tx > NINF &&\n\t\tx < PINF\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isfinite;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\nvar RE = /./;\n\n\n// EXPORTS //\n\nexport default RE;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Tests if a value is a boolean primitive.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a boolean primitive\n*\n* @example\n* var bool = isBoolean( true );\n* // returns true\n*\n* @example\n* var bool = isBoolean( false );\n* // returns true\n*\n* @example\n* var bool = isBoolean( new Boolean( true ) );\n* // returns false\n*/\nfunction isBoolean( value ) {\n\treturn ( typeof value === 'boolean' );\n}\n\n\n// EXPORTS //\n\nexport default isBoolean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// eslint-disable-next-line stdlib/no-redeclare\nvar toString = Boolean.prototype.toString; // non-generic\n\n\n// EXPORTS //\n\nexport default toString;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport hasToStringTag from '@stdlib/assert-has-tostringtag-support';\nimport nativeClass from '@stdlib/utils-native-class';\nimport test from './try2serialize.js';\n\n\n// VARIABLES //\n\nvar FLG = hasToStringTag();\n\n\n// MAIN //\n\n/**\n* Tests if a value is a boolean object.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a boolean object\n*\n* @example\n* var bool = isBoolean( true );\n* // returns false\n*\n* @example\n* var bool = isBoolean( new Boolean( false ) );\n* // returns true\n*/\nfunction isBoolean( value ) {\n\tif ( typeof value === 'object' ) {\n\t\tif ( value instanceof Boolean ) {\n\t\t\treturn true;\n\t\t}\n\t\tif ( FLG ) {\n\t\t\treturn test( value );\n\t\t}\n\t\treturn ( nativeClass( value ) === '[object Boolean]' );\n\t}\n\treturn false;\n}\n\n\n// EXPORTS //\n\nexport default isBoolean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport toString from './tostring.js'; // eslint-disable-line stdlib/no-redeclare\n\n\n// MAIN //\n\n/**\n* Attempts to serialize a value to a string.\n*\n* @private\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value can be serialized\n*/\nfunction test( value ) {\n\ttry {\n\t\ttoString.call( value );\n\t\treturn true;\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\treturn false;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default test;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPrimitive from './primitive.js';\nimport isObject from './object.js';\n\n\n// MAIN //\n\n/**\n* Tests if a value is a boolean.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is a boolean\n*\n* @example\n* var bool = isBoolean( false );\n* // returns true\n*\n* @example\n* var bool = isBoolean( true );\n* // returns true\n*\n* @example\n* var bool = isBoolean( new Boolean( false ) );\n* // returns true\n*\n* @example\n* var bool = isBoolean( new Boolean( true ) );\n* // returns true\n*/\nfunction isBoolean( value ) {\n\treturn ( isPrimitive( value ) || isObject( value ) );\n}\n\n\n// EXPORTS //\n\nexport default isBoolean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns the global object using code generation.\n*\n* @private\n* @returns {Object} global object\n*/\nfunction getGlobal() {\n\treturn new Function( 'return this;' )(); // eslint-disable-line no-new-func\n}\n\n\n// EXPORTS //\n\nexport default getGlobal;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if a value is a boolean.\n*\n* @module @stdlib/assert-is-boolean\n*\n* @example\n* import isBoolean from '@stdlib/assert-is-boolean';\n*\n* var bool = isBoolean( false );\n* // returns true\n*\n* bool = isBoolean( new Boolean( false ) );\n* // returns true\n*\n* @example\n* // Use interface to check for boolean primitives...\n* import { isPrimitive as isBoolean } from '@stdlib/assert-is-boolean';\n*\n* var bool = isBoolean( false );\n* // returns true\n*\n* bool = isBoolean( new Boolean( true ) );\n* // returns false\n*\n* @example\n* // Use interface to check for boolean objects...\n* import { isObject as isBoolean } from '@stdlib/assert-is-boolean';\n*\n* var bool = isBoolean( true );\n* // returns false\n*\n* bool = isBoolean( new Boolean( false ) );\n* // returns true\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport isBoolean from './main.js';\nimport isPrimitive from './primitive.js';\nimport isObject from './object.js';\n\n\n// MAIN //\n\nsetReadOnly( isBoolean, 'isPrimitive', isPrimitive );\nsetReadOnly( isBoolean, 'isObject', isObject );\n\n\n// EXPORTS //\n\nexport default isBoolean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar obj = ( typeof self === 'object' ) ? self : null;\n\n\n// EXPORTS //\n\nexport default obj;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar obj = ( typeof window === 'object' ) ? window : null;\n\n\n// EXPORTS //\n\nexport default obj;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar obj = ( typeof global === 'object' ) ? global : null;\n\n\n// EXPORTS //\n\nexport default obj;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport getGlobal from '@stdlib/utils-global';\n\n\n// MAIN //\n\nvar root = getGlobal();\nvar nodeList = root.document && root.document.childNodes;\n\n\n// EXPORTS //\n\nexport default nodeList;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isBoolean } from '@stdlib/assert-is-boolean';\nimport getThis from './codegen.js';\nimport Self from './self.js';\nimport Win from './window.js';\nimport Global from './global.js';\n\n\n// MAIN //\n\n/**\n* Returns the global object.\n*\n* ## Notes\n*\n* -   Using code generation is the **most** reliable way to resolve the global object; however, doing so is likely to violate content security policies (CSPs) in, e.g., Chrome Apps and elsewhere.\n*\n* @param {boolean} [codegen=false] - boolean indicating whether to use code generation to resolve the global object\n* @throws {TypeError} must provide a boolean\n* @throws {Error} unable to resolve global object\n* @returns {Object} global object\n*\n* @example\n* var g = getGlobal();\n* // returns {...}\n*/\nfunction getGlobal( codegen ) {\n\tif ( arguments.length ) {\n\t\tif ( !isBoolean( codegen ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Must provide a boolean primitive. Value: `'+codegen+'`.' );\n\t\t}\n\t\tif ( codegen ) {\n\t\t\treturn getThis();\n\t\t}\n\t\t// Fall through...\n\t}\n\t// Case: browsers and web workers\n\tif ( Self ) {\n\t\treturn Self;\n\t}\n\t// Case: browsers\n\tif ( Win ) {\n\t\treturn Win;\n\t}\n\t// Case: Node.js\n\tif ( Global ) {\n\t\treturn Global;\n\t}\n\t// Case: unknown\n\tthrow new Error( 'unexpected error. Unable to resolve global object.' );\n}\n\n\n// EXPORTS //\n\nexport default getGlobal;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\nvar typedarray = Int8Array; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default typedarray;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns a regular expression to capture everything that is not a space immediately after the `function` keyword and before the first left parenthesis.\n*\n* @returns {RegExp} regular expression\n*\n* @example\n* var RE_FUNCTION_NAME = reFunctionName();\n*\n* function fname( fcn ) {\n*     return RE_FUNCTION_NAME.exec( fcn.toString() )[ 1 ];\n* }\n*\n* var fn = fname( Math.sqrt );\n* // returns 'sqrt'\n*\n* fn = fname( Int8Array );\n* // returns 'Int8Array'\n*\n* fn = fname( Object.prototype.toString );\n* // returns 'toString'\n*\n* fn = fname( function(){} );\n* // returns ''\n*/\nfunction reFunctionName() {\n\treturn /^\\s*function\\s*([^(]*)/i;\n}\n\n\n// EXPORTS //\n\nexport default reFunctionName;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport reFunctionName from './main.js';\n\n\n// MAIN //\n\n/**\n* Captures everything that is not a space immediately after the `function` keyword and before the first left parenthesis.\n*\n* Regular expression: `/^\\s*function\\s*([^(]*)/i`\n*\n* -   `/^\\s*`\n*     -   Match zero or more spaces at beginning\n*\n* -   `function`\n*     -   Match the word `function`\n*\n* -   `\\s*`\n*     -   Match zero or more spaces after the word `function`\n*\n* -   `()`\n*     -   Capture\n*\n* -   `[^(]*`\n*     -   Match anything except a left parenthesis `(` zero or more times\n*\n* -   `/i`\n*     -   ignore case\n*\n* @constant\n* @type {RegExp}\n* @default /^\\s*function\\s*([^(]*)/i\n*/\nvar RE_FUNCTION_NAME = reFunctionName();\n\n\n// EXPORTS //\n\nexport default RE_FUNCTION_NAME;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Regular expression to capture everything that is not a space immediately after the `function` keyword and before the first left parenthesis.\n*\n* @module @stdlib/regexp-function-name\n*\n* @example\n* import reFunctionName from '@stdlib/regexp-function-name';\n* var RE_FUNCTION_NAME = reFunctionName();\n*\n* function fname( fcn ) {\n*     return RE_FUNCTION_NAME.exec( fcn.toString() )[ 1 ];\n* }\n*\n* var fn = fname( Math.sqrt );\n* // returns 'sqrt'\n*\n* fn = fname( Int8Array );\n* // returns 'Int8Array'\n*\n* fn = fname( Object.prototype.toString );\n* // returns 'toString'\n*\n* fn = fname( function(){} );\n* // returns ''\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport reFunctionName from './main.js';\nimport REGEXP from './regexp.js';\n\n\n// MAIN //\n\nsetReadOnly( reFunctionName, 'REGEXP', REGEXP );\n\n\n// EXPORTS //\n\nexport default reFunctionName;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport nativeClass from '@stdlib/utils-native-class';\n\n\n// VARIABLES //\n\nvar f;\n\n\n// FUNCTIONS //\n\n/**\n* Tests if a value is an array.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is an array\n*\n* @example\n* var bool = isArray( [] );\n* // returns true\n*\n* @example\n* var bool = isArray( {} );\n* // returns false\n*/\nfunction isArray( value ) {\n\treturn ( nativeClass( value ) === '[object Array]' );\n}\n\n\n// MAIN //\n\nif ( Array.isArray ) {\n\tf = Array.isArray;\n} else {\n\tf = isArray;\n}\n\n\n// EXPORTS //\n\nexport default f;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Tests if a value is object-like.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether a value is object-like\n*\n* @example\n* var bool = isObjectLike( {} );\n* // returns true\n*\n* @example\n* var bool = isObjectLike( [] );\n* // returns true\n*\n* @example\n* var bool = isObjectLike( null );\n* // returns false\n*/\nfunction isObjectLike( value ) {\n\treturn (\n\t\tvalue !== null &&\n\t\ttypeof value === 'object'\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isObjectLike;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport nativeClass from '@stdlib/utils-native-class';\nimport { REGEXP as RE } from '@stdlib/regexp-function-name';\nimport isBuffer from '@stdlib/assert-is-buffer';\n\n\n// MAIN //\n\n/**\n* Determines the name of a value's constructor.\n*\n* @param {*} v - input value\n* @returns {string} name of a value's constructor\n*\n* @example\n* var v = constructorName( 'a' );\n* // returns 'String'\n*\n* @example\n* var v = constructorName( 5 );\n* // returns 'Number'\n*\n* @example\n* var v = constructorName( null );\n* // returns 'Null'\n*\n* @example\n* var v = constructorName( undefined );\n* // returns 'Undefined'\n*\n* @example\n* var v = constructorName( function noop() {} );\n* // returns 'Function'\n*/\nfunction constructorName( v ) {\n\tvar match;\n\tvar name;\n\tvar ctor;\n\tname = nativeClass( v ).slice( 8, -1 );\n\tif ( (name === 'Object' || name === 'Error') && v.constructor ) {\n\t\tctor = v.constructor;\n\t\tif ( typeof ctor.name === 'string' ) {\n\t\t\treturn ctor.name;\n\t\t}\n\t\tmatch = RE.exec( ctor.toString() );\n\t\tif ( match ) {\n\t\t\treturn match[ 1 ];\n\t\t}\n\t}\n\tif ( isBuffer( v ) ) {\n\t\treturn 'Buffer';\n\t}\n\treturn name;\n}\n\n\n// EXPORTS //\n\nexport default constructorName;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isObjectLike from '@stdlib/assert-is-object-like';\n\n\n// MAIN //\n\n/**\n* Tests if a value is a Buffer instance.\n*\n* @param {*} value - value to validate\n* @returns {boolean} boolean indicating if a value is a Buffer instance\n*\n* @example\n* var v = isBuffer( new Buffer( 'beep' ) );\n* // returns true\n*\n* @example\n* var v = isBuffer( new Buffer( [1,2,3,4] ) );\n* // returns true\n*\n* @example\n* var v = isBuffer( {} );\n* // returns false\n*\n* @example\n* var v = isBuffer( [] );\n* // returns false\n*/\nfunction isBuffer( value ) {\n\treturn (\n\t\tisObjectLike( value ) &&\n\t\t(\n\t\t\t// eslint-disable-next-line no-underscore-dangle\n\t\t\tvalue._isBuffer || // for envs missing Object.prototype.constructor (e.g., Safari 5-7)\n\t\t\t(\n\t\t\t\tvalue.constructor &&\n\n\t\t\t\t// WARNING: `typeof` is not a foolproof check, as certain envs consider RegExp and NodeList instances to be functions\n\t\t\t\ttypeof value.constructor.isBuffer === 'function' &&\n\t\t\t\tvalue.constructor.isBuffer( value )\n\t\t\t)\n\t\t)\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isBuffer;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if a value is object-like.\n*\n* @module @stdlib/assert-is-object-like\n*\n* @example\n* import isObjectLike from '@stdlib/assert-is-object-like';\n*\n* var bool = isObjectLike( {} );\n* // returns true\n*\n* bool = isObjectLike( [] );\n* // returns true\n*\n* bool = isObjectLike( null );\n* // returns false\n*\n* @example\n* import { isObjectLikeArray as isObjectLike } from '@stdlib/assert-is-object-like';\n*\n* var bool = isObjectLike( [ {}, [] ] );\n* // returns true\n*\n* bool = isObjectLike( [ {}, '3.0' ] );\n* // returns false\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport arrayfun from '@stdlib/assert-tools-array-function';\nimport isObjectLike from './main.js';\n\n\n// VARIABLES //\n\nvar isObjectLikeArray = arrayfun( isObjectLike );\n\n\n// MAIN //\n\nsetReadOnly( isObjectLike, 'isObjectLikeArray', isObjectLikeArray );\n\n\n// EXPORTS //\n\nexport default isObjectLike;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isArray from '@stdlib/assert-is-array';\n\n\n// MAIN //\n\n/**\n* Returns a function which tests if every element in an array passes a test condition.\n*\n* @param {Function} predicate - function to apply\n* @throws {TypeError} must provide a function\n* @returns {Function} an array function\n*\n* @example\n* import isOdd from '@stdlib/assert-is-odd';\n*\n* var arr1 = [ 1, 3, 5, 7 ];\n* var arr2 = [ 3, 5, 8 ];\n*\n* var validate = arrayfcn( isOdd );\n*\n* var bool = validate( arr1 );\n* // returns true\n*\n* bool = validate( arr2 );\n* // returns false\n*/\nfunction arrayfcn( predicate ) {\n\tif ( typeof predicate !== 'function' ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide a function. Value: `' + predicate + '`.' );\n\t}\n\treturn every;\n\n\t/**\n\t* Tests if every element in an array passes a test condition.\n\t*\n\t* @private\n\t* @param {*} value - value to test\n\t* @returns {boolean} boolean indicating whether a value is an array for which all elements pass a test condition\n\t*/\n\tfunction every( value ) {\n\t\tvar len;\n\t\tvar i;\n\t\tif ( !isArray( value ) ) {\n\t\t\treturn false;\n\t\t}\n\t\tlen = value.length;\n\t\tif ( len === 0 ) {\n\t\t\treturn false;\n\t\t}\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tif ( predicate( value[ i ] ) === false ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default arrayfcn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Determine a value's type.\n*\n* @module @stdlib/utils-type-of\n*\n* @example\n* import typeOf from '@stdlib/utils-type-of';\n*\n* var str = typeOf( 'a' );\n* // returns 'string'\n*\n* str = typeOf( 5 );\n* // returns 'number'\n*/\n\n// MODULES //\n\nimport usePolyfill from './check.js';\nimport typeOf from './typeof.js';\nimport polyfill from './polyfill.js';\n\n\n// MAIN //\n\nvar main = ( usePolyfill() ) ? polyfill : typeOf;\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport memoize from '@stdlib/utils-memoize';\n\n\n// VARIABLES //\n\nvar memoized;\n\n\n// FUNCTIONS //\n\n/**\n* Calculates the weight for the `(x,n)` pair and memoizes the result.\n*\n* @private\n* @param {number} x - input value\n* @param {NonNegativeInteger} n - number of observations\n* @returns {number} weight\n*/\nfunction weights( x, n ) {\n\tvar mlim;\n\n\tif ( n === 0 ) {\n\t\treturn ( x === 0 ) ? 1 : 0;\n\t}\n\tmlim = n * ( n + 1 ) / 2;\n\tif ( x < 0 || x > mlim ) {\n\t\treturn 0;\n\t}\n\tif ( x > mlim / 2 ) {\n\t\tx = mlim - x;\n\t}\n\treturn memoized( x - n, n - 1 ) + memoized( x, n - 1 );\n}\n\n\n// MAIN //\n\nmemoized = memoize( weights );\n\n\n// EXPORTS //\n\nexport default memoized;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport RE from './fixtures/re.js';\nimport nodeList from './fixtures/nodelist.js';\nimport typedarray from './fixtures/typedarray.js';\n\n\n// MAIN //\n\n/**\n* Checks whether a polyfill is needed when using the `typeof` operator.\n*\n* @private\n* @returns {boolean} boolean indicating whether a polyfill is needed\n*/\nfunction check() {\n\tif (\n\t\t// Chrome 1-12 returns 'function' for regular expression instances (see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof):\n\t\ttypeof RE === 'function' ||\n\n\t\t// Safari 8 returns 'object' for typed array and weak map constructors (underscore #1929):\n\t\ttypeof typedarray === 'object' ||\n\n\t\t// PhantomJS 1.9 returns 'function' for `NodeList` instances (underscore #2236):\n\t\ttypeof nodeList === 'function'\n\t) {\n\t\treturn true;\n\t}\n\treturn false;\n}\n\n\n// EXPORTS //\n\nexport default check;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport ctorName from '@stdlib/utils-constructor-name';\n\n\n// MAIN //\n\n/**\n* Determines a value's type.\n*\n* @param {*} v - input value\n* @returns {string} string indicating the value's type\n*/\nfunction typeOf( v ) {\n\treturn ctorName( v ).toLowerCase();\n}\n\n\n// EXPORTS //\n\nexport default typeOf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport ctorName from '@stdlib/utils-constructor-name';\n\n\n// NOTES //\n\n/*\n* Built-in `typeof` operator behavior:\n*\n* ```text\n* typeof null => 'object'\n* typeof undefined => 'undefined'\n* typeof 'a' => 'string'\n* typeof 5 => 'number'\n* typeof NaN => 'number'\n* typeof true => 'boolean'\n* typeof false => 'boolean'\n* typeof {} => 'object'\n* typeof [] => 'object'\n* typeof function foo(){} => 'function'\n* typeof function* foo(){} => 'object'\n* typeof Symbol() => 'symbol'\n* ```\n*\n*/\n\n\n// MAIN //\n\n/**\n* Determines a value's type.\n*\n* @param {*} v - input value\n* @returns {string} string indicating the value's type\n*/\nfunction typeOf( v ) {\n\tvar type;\n\n\t// Address `typeof null` => `object` (see http://wiki.ecmascript.org/doku.php?id=harmony:typeof_null):\n\tif ( v === null ) {\n\t\treturn 'null';\n\t}\n\ttype = typeof v;\n\n\t// If the `typeof` operator returned something other than `object`, we are done. Otherwise, we need to check for an internal class name or search for a constructor.\n\tif ( type === 'object' ) {\n\t\treturn ctorName( v ).toLowerCase();\n\t}\n\treturn type;\n}\n\n\n// EXPORTS //\n\nexport default typeOf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport typeOf from '@stdlib/utils-type-of';\n\n\n// MAIN //\n\n/**\n* Tests if a value is a function.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is a function\n*\n* @example\n* function beep() {\n*     return 'beep';\n* }\n*\n* var bool = isFunction( beep );\n* // returns true\n*/\nfunction isFunction( value ) {\n\t// Note: cannot use `typeof` directly, as various browser engines incorrectly return `'function'` when operating on non-function objects, such as regular expressions and NodeLists.\n\treturn ( typeOf( value ) === 'function' );\n}\n\n\n// EXPORTS //\n\nexport default isFunction;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Identity function.\n*\n* @param {*} x - input value\n* @returns {*} input value\n*\n* @example\n* var v = identity( 3.14 );\n* // returns 3.14\n*/\nfunction identity( x ) {\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default identity;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isFunction from '@stdlib/assert-is-function';\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport identity from '@stdlib/utils-identity-function';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\n\n\n// MAIN //\n\n/**\n* Returns a memoized function.\n*\n* @param {Function} fcn - function to memoize\n* @param {Function} [hashFunction] - function to map a set of arguments to a single value identifying that set\n* @throws {TypeError} first argument must be a function\n* @throws {TypeError} second argument must be a function\n* @returns {Function} memoized function\n*\n* @example\n* function factorial( n ) {\n*     var prod;\n*     var i;\n*     prod = 1;\n*     for ( i = n; i > 1; i-- ) {\n*         prod *= i;\n*     }\n*     return prod;\n* }\n*\n* var memoized = memoize( factorial );\n*\n* var v = memoized( 5 );\n* // returns 120\n*\n* v = memoized( 5 );\n* // returns 120\n*/\nfunction memoize( fcn, hashFunction ) {\n\tvar toKey;\n\tvar cache;\n\tif ( !isFunction( fcn ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be a function. Value: `'+fcn+'`.' );\n\t}\n\tif ( arguments.length < 2 ) {\n\t\ttoKey = identity;\n\t} else {\n\t\ttoKey = hashFunction;\n\t\tif ( !isFunction( toKey ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Hash function argument must be a function. Value: `' + toKey + '`.' );\n\t\t}\n\t}\n\tcache = {};\n\tsetReadOnly( memoized, 'cache', cache );\n\treturn memoized;\n\n\t/**\n\t* Memoized function.\n\t*\n\t* @private\n\t* @param {...*} args - function arguments\n\t* @returns {*} memoized function result\n\t*/\n\tfunction memoized() {\n\t\tvar args;\n\t\tvar out;\n\t\tvar key;\n\t\tvar i;\n\t\targs = new Array( arguments.length );\n\t\tfor ( i = 0; i < arguments.length; i++ ) {\n\t\t\targs[ i ] = arguments[ i ];\n\t\t}\n\t\tkey = toKey( args ).toString();\n\t\tif ( hasOwnProp( cache, key ) ) {\n\t\t\treturn cache[ key ];\n\t\t}\n\t\tout = fcn.apply( null, args );\n\t\tcache[ key ] = out;\n\t\treturn out;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default memoize;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport memoize from '@stdlib/utils-memoize';\n\n\n// VARIABLES //\n\nvar memoized;\n\n\n// FUNCTIONS //\n\n/**\n* Calculates the weight for the `(x,n)` pair and memoizes the result.\n*\n* @private\n* @param {number} x - input value\n* @param {NonNegativeInteger} n - number of observations\n* @returns {number} weight\n*/\nfunction weights( x, n ) {\n\tvar mlim;\n\n\tif ( n === 0 ) {\n\t\treturn ( x === 0 ) ? 1 : 0;\n\t}\n\tmlim = n * ( n + 1 ) / 2;\n\tif ( x < 0 || x > mlim ) {\n\t\treturn 0;\n\t}\n\tif ( x > mlim / 2 ) {\n\t\tx = mlim - x;\n\t}\n\treturn memoized( x - n, n - 1 ) + memoized( x, n - 1 );\n}\n\n\n// MAIN //\n\nmemoized = memoize( weights );\n\n\n// EXPORTS //\n\nexport default memoized;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPositiveInteger from '@stdlib/math-base-assert-is-positive-integer';\nimport isfinite from '@stdlib/math-base-assert-is-finite';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport round from '@stdlib/math-base-special-round';\nimport exp from '@stdlib/math-base-special-exp';\nimport LN2 from '@stdlib/constants-float64-ln-two';\nimport weights from './weights.js';\n\n\n// MAIN //\n\n/**\n* Evaluates the cumulative distribution function (CDF) of the Wilcoxon signed rank test statistic with `n` observations.\n*\n* @param {number} x - input value\n* @param {PositiveInteger} n - number of observations\n* @returns {Probability} evaluated CDF\n*\n* @example\n* var y = cdf( 7.0, 9 );\n* // returns ~0.037\n*\n* @example\n* var y = cdf( 7.0, 6 );\n* // returns ~0.281\n*\n* @example\n* var y = cdf( -1.0, 40 );\n* // returns 0.0\n*\n* @example\n* var y = cdf( NaN, 10 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2.0, -1 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2.0, 1.8 );\n* // returns NaN\n*/\nfunction cdf( x, n ) {\n\tvar mlim;\n\tvar pui;\n\tvar i;\n\tvar p;\n\tif (\n\t\tisnan( x ) ||\n\t\t!isPositiveInteger( n ) ||\n\t\t!isfinite( n )\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x < 0.0 ) {\n\t\treturn 0.0;\n\t}\n\tx = round( x );\n\tmlim = n * ( n + 1 ) / 2;\n\tif ( x >= mlim ) {\n\t\treturn 1.0;\n\t}\n\tpui = exp( -n * LN2 );\n\tp = 0;\n\tfor ( i = 0; i <= x; i++ ) {\n\t\tp += weights( i, n ) * pui;\n\t}\n\treturn p;\n}\n\n\n// EXPORTS //\n\nexport default cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Wilcoxon signed rank test statistic cumulative distribution function (CDF).\n*\n* @module @stdlib/stats-base-dists-signrank-cdf\n*\n* @example\n* import cdf from '@stdlib/stats-base-dists-signrank-cdf';\n*\n* var y = cdf( 7.0, 9 );\n* // returns ~0.037\n*\n* var myCDF = cdf.factory( 8 );\n* y = myCDF( 3.9 );\n* // returns ~0.027\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport cdf from './cdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( cdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPositiveInteger from '@stdlib/math-base-assert-is-positive-integer';\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isfinite from '@stdlib/math-base-assert-is-finite';\nimport round from '@stdlib/math-base-special-round';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport exp from '@stdlib/math-base-special-exp';\nimport LN2 from '@stdlib/constants-float64-ln-two';\nimport weights from './weights.js';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the cumulative distribution function (CDF) for the distribution of the Wilcoxon signed rank test statistic with `n` observations.\n*\n* @param {PositiveInteger} n - number of observations\n* @returns {Function} CDF\n*\n* @example\n* var cdf = factory( 8 );\n* var y = cdf( 3.9 );\n* // returns ~0.027\n*\n* y = cdf( 17.0 );\n* // returns ~0.473\n*/\nfunction factory( n ) {\n\tvar mlim;\n\tvar pui;\n\n\tif ( !isPositiveInteger( n ) || !isfinite( n ) ) {\n\t\treturn constantFunction( NaN );\n\t}\n\tpui = exp( -n * LN2 );\n\tmlim = n * ( n + 1 ) / 2;\n\treturn cdf;\n\n\t/**\n\t* Evaluates the cumulative distribution function (CDF) for the distribution of the Wilcoxon signed rank test statistic.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated CDF\n\t*\n\t* @example\n\t* var y = cdf( 2 );\n\t* // returns <number>\n\t*/\n\tfunction cdf( x ) {\n\t\tvar i;\n\t\tvar p;\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x < 0.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\tx = round( x );\n\t\tif ( x >= mlim ) {\n\t\t\treturn 1.0;\n\t\t}\n\t\tp = 0;\n\t\tfor ( i = 0; i <= x; i++ ) {\n\t\t\tp += weights( i, n ) * pui;\n\t\t}\n\t\treturn p;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport memoize from '@stdlib/utils-memoize';\n\n\n// VARIABLES //\n\nvar memoized;\n\n\n// FUNCTIONS //\n\n/**\n* Calculates the weight for the `(x,n)` pair and memoizes the result.\n*\n* @private\n* @param {number} x - input value\n* @param {NonNegativeInteger} n - number of observations\n* @returns {number} weight\n*/\nfunction weights( x, n ) {\n\tvar mlim;\n\n\tif ( n === 0 ) {\n\t\treturn ( x === 0 ) ? 1 : 0;\n\t}\n\tmlim = n * ( n + 1 ) / 2;\n\tif ( x < 0 || x > mlim ) {\n\t\treturn 0;\n\t}\n\tif ( x > mlim / 2 ) {\n\t\tx = mlim - x;\n\t}\n\treturn memoized( x - n, n - 1 ) + memoized( x, n - 1 );\n}\n\n\n// MAIN //\n\nmemoized = memoize( weights );\n\n\n// EXPORTS //\n\nexport default memoized;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPositiveInteger from '@stdlib/math-base-assert-is-positive-integer';\nimport isfinite from '@stdlib/math-base-assert-is-finite';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport exp from '@stdlib/math-base-special-exp';\nimport ln from '@stdlib/math-base-special-ln';\nimport LN2 from '@stdlib/constants-float64-ln-two';\nimport weights from './weights.js';\n\n\n// MAIN //\n\n/**\n* Evaluates the probability density function (PDF) of the Wilcoxon signed rank test statistic with `n` observations.\n*\n* @param {number} x - input value\n* @param {PositiveInteger} n - number of observations\n* @returns {Probability} evaluated PDF\n*\n* @example\n* var y = pdf( 7.0, 9 );\n* // returns ~0.01\n*\n* @example\n* var y = pdf( 7.0, 6 );\n* // returns ~0.063\n*\n* @example\n* var y = pdf( -1.0, 40 );\n* // returns 0.0\n*\n* @example\n* var y = pdf( NaN, 10 );\n* // returns NaN\n*\n* @example\n* var y = pdf( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = pdf( 2.0, -1 );\n* // returns NaN\n*\n* @example\n* var y = pdf( 2.0, 1.8 );\n* // returns NaN\n*/\nfunction pdf( x, n ) {\n\tvar mlim;\n\tif (\n\t\tisnan( x ) ||\n\t\t!isPositiveInteger( n ) ||\n\t\t!isfinite( n )\n\t) {\n\t\treturn NaN;\n\t}\n\tmlim = ( n * ( n + 1 ) ) / 2;\n\tif ( x < 0.0 || x > mlim ) {\n\t\treturn 0.0;\n\t}\n\treturn exp( ln( weights( x, n ) ) - ( n * LN2 ) );\n}\n\n\n// EXPORTS //\n\nexport default pdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Wilcoxon signed rank test statistic probability density function (PDF).\n*\n* @module @stdlib/stats-base-dists-signrank-pdf\n*\n* @example\n* import pdf from '@stdlib/stats-base-dists-signrank-pdf';\n*\n* var y = pdf( 7.0, 9 );\n* // returns ~0.01\n*\n* var mypdf = pdf.factory( 8 );\n* y = mypdf( 4.0 );\n* // returns ~0.008\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport pdf from './pdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( pdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default pdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPositiveInteger from '@stdlib/math-base-assert-is-positive-integer';\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isfinite from '@stdlib/math-base-assert-is-finite';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport exp from '@stdlib/math-base-special-exp';\nimport ln from '@stdlib/math-base-special-ln';\nimport LN2 from '@stdlib/constants-float64-ln-two';\nimport weights from './weights.js';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the probability density function (PDF) for the distribution of the Wilcoxon signed rank test statistic with `n` observations.\n*\n* @param {PositiveInteger} n - number of observations\n* @returns {Function} PDF\n*\n* @example\n* var pdf = factory( 8 );\n* var y = pdf( 4.0 );\n* // returns ~0.008\n*\n* y = pdf( 17.0 );\n* // returns ~0.051\n*/\nfunction factory( n ) {\n\tvar mlim;\n\tif ( !isPositiveInteger( n ) || !isfinite( n ) ) {\n\t\treturn constantFunction( NaN );\n\t}\n\tmlim = n * ( n + 1 ) / 2;\n\treturn pdf;\n\n\t/**\n\t* Evaluates the probability density function (PDF) for the distribution of the Wilcoxon signed rank test statistic.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated PDF\n\t*\n\t* @example\n\t* var y = pdf( 2 );\n\t* // returns <number>\n\t*/\n\tfunction pdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x < 0.0 || x > mlim ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn exp( ln( weights( x, n ) ) - ( n * LN2 ) );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPositiveInteger from '@stdlib/math-base-assert-is-positive-integer';\nimport isfinite from '@stdlib/math-base-assert-is-finite';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport exp from '@stdlib/math-base-special-exp';\nimport LN2 from '@stdlib/constants-float64-ln-two';\nimport weights from './weights.js';\n\n\n// MAIN //\n\n/**\n* Evaluates the quantile function of the Wilcoxon signed rank test statistic with `n` observations.\n*\n* @param {Probability} p - input value\n* @param {PositiveInteger} n - number of observations\n* @returns {NonNegativeInteger} evaluated quantile function\n*\n* @example\n* var y = quantile( 0.8, 5 );\n* // returns 11\n*\n* @example\n* var y = quantile( 0.5, 4 );\n* // returns 5\n*\n* @example\n* var y = quantile( 1.1, 5 );\n* // returns NaN\n*\n* @example\n* var y = quantile( -0.2, 5 );\n* // returns NaN\n*\n* @example\n* var y = quantile( NaN, 5 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.0, NaN );\n* // returns NaN\n*/\nfunction quantile( p, n ) {\n\tvar pui;\n\tvar q;\n\tvar r;\n\tif ( isnan( n ) || !isPositiveInteger( n ) || !isfinite( n ) ) {\n\t\treturn NaN;\n\t}\n\tif ( isnan( p ) || p < 0.0 || p > 1.0 ) {\n\t\treturn NaN;\n\t}\n\tif ( p === 0.0 ) {\n\t\treturn 0;\n\t}\n\tif ( p === 1.0 ) {\n\t\treturn ( n * ( n + 1 ) ) / 2;\n\t}\n\tpui = exp( -n * LN2 );\n\tr = 0;\n\tq = -1;\n\twhile ( r < p ) {\n\t\tq += 1;\n\t\tr += pui * weights( q, n );\n\t}\n\treturn q;\n}\n\n\n// EXPORTS //\n\nexport default quantile;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Wilcoxon signed rank test statistic quantile function.\n*\n* @module @stdlib/stats-base-dists-signrank-quantile\n*\n* @example\n* import quantile from '@stdlib/stats-base-dists-signrank-quantile';\n*\n* var y = quantile( 0.8, 5 );\n* // returns 11\n*\n* var myQuantile = quantile.factory( 4 );\n*\n* y = myQuantile( 0.5 );\n* // returns 5\n*\n* y = myQuantile( 0.0 );\n* // returns 0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport quantile from './quantile.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( quantile, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default quantile;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPositiveInteger from '@stdlib/math-base-assert-is-positive-integer';\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isfinite from '@stdlib/math-base-assert-is-finite';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport exp from '@stdlib/math-base-special-exp';\nimport LN2 from '@stdlib/constants-float64-ln-two';\nimport weights from './weights.js';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the quantile function of the Wilcoxon signed rank test statistic with `n` observations.\n*\n* @param {PositiveInteger} n - number of observations\n* @returns {Function} quantile function\n*\n* @example\n* var quantile = factory( 10 );\n* var y = quantile( 0.5 );\n* // returns 27\n*\n* y = quantile( 0.8 );\n* // returns 36\n*/\nfunction factory( n ) {\n\tvar pui;\n\tif ( isnan( n ) || !isPositiveInteger( n ) || !isfinite( n ) ) {\n\t\treturn constantFunction( NaN );\n\t}\n\tpui = exp( -n * LN2 );\n\treturn quantile;\n\n\t/**\n\t* Evaluates the quantile function of the Wilcoxon signed rank test statistic.\n\t*\n\t* @private\n\t* @param {Probability} p - input value\n\t* @returns {NonNegativeInteger} evaluated quantile function\n\t*\n\t* @example\n\t* var y = quantile( 0.3 );\n\t* // returns <number>\n\t*/\n\tfunction quantile( p ) {\n\t\tvar r;\n\t\tvar q;\n\t\tif ( isnan( p ) || p < 0.0 || p > 1.0 ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( p === 0.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\tif ( p === 1.0 ) {\n\t\t\treturn ( n * ( n + 1 ) ) / 2;\n\t\t}\n\t\tr = 0;\n\t\tq = -1;\n\t\twhile ( r < p ) {\n\t\t\tq += 1;\n\t\t\tr += pui * weights( q, n );\n\t\t}\n\t\treturn q;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace signrank\n*/\nvar signrank = {};\n\n/**\n* @name cdf\n* @memberof signrank\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/signrank/cdf}\n*/\nimport cdf from '@stdlib/stats-base-dists-signrank-cdf';\nsetReadOnly( signrank, 'cdf', cdf );\n\n/**\n* @name pdf\n* @memberof signrank\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/signrank/pdf}\n*/\nimport pdf from '@stdlib/stats-base-dists-signrank-pdf';\nsetReadOnly( signrank, 'pdf', pdf );\n\n/**\n* @name quantile\n* @memberof signrank\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/signrank/quantile}\n*/\nimport quantile from '@stdlib/stats-base-dists-signrank-quantile';\nsetReadOnly( signrank, 'quantile', quantile );\n\n\n// EXPORTS //\n\nexport default signrank;\n","/* eslint-disable max-len, no-mixed-operators */\n\n/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math-base-special-abs';\nimport exp from '@stdlib/math-base-special-exp';\nimport SQRT_TWO_PI from '@stdlib/constants-float64-sqrt-two-pi';\n\n\n// VARIABLES //\n\nvar CUTOFF = 7.071; // 10 / sqrt(2)\nvar p0 = 220.2068679123761e0;\nvar p1 = 221.2135961699311e0;\nvar p2 = 112.0792914978709e0;\nvar p3 = 33.91286607838300e0;\nvar p4 = 6.373962203531650e0;\nvar p5 = 0.7003830644436881e0;\nvar p6 = 0.3526249659989109e-01;\nvar q0 = 440.4137358247522e0;\nvar q1 = 793.8265125199484e0;\nvar q2 = 637.3336333788311e0;\nvar q3 = 296.5642487796737e0;\nvar q4 = 86.78073220294608e0;\nvar q5 = 16.06417757920695e0;\nvar q6 = 1.755667163182642e0;\nvar q7 = 0.8838834764831844e-1;\n\n\n// MAIN //\n\n/**\n* Evaluates the CDF of the standard normal distribution.\n*\n* @private\n* @param {number} z - standard deviation from the mean\n* @returns {number} evaluated CDF\n*/\nfunction apnorm( z ) {\n\tvar expntl;\n\tvar zabs;\n\tvar pdf;\n\tvar p;\n\tvar q;\n\n\tzabs = abs( z );\n\tif ( zabs > 37.0 ) {\n\t\tif ( z > 0.0 ) {\n\t\t\tp = 1.0;\n\t\t} else {\n\t\t\tp = 0.0;\n\t\t}\n\t} else {\n\t\t// Case: |z| >= 37\n\t\texpntl = exp( -0.5 * zabs * zabs );\n\t\tpdf = expntl / SQRT_TWO_PI;\n\t\tif ( zabs < CUTOFF ) {\n\t\t\tp = expntl * ((((((p6 * zabs + p5) * zabs + p4) * zabs + p3) * zabs + p2) * zabs + p1) * zabs + p0) /\n\t\t\t\t(((((((q7 * zabs + q6) * zabs + q5) * zabs + q4) * zabs + q3) * zabs + q2) * zabs + q1) * zabs + q0);\n\t\t}\n\t\telse {\n\t\t\tp = pdf / (zabs + 1.0 / (zabs + 2.0 / (zabs + 3.0 / (zabs + 4.0 / (zabs + 0.65)))));\n\t\t}\n\t\tif ( z >= 0.0 ) {\n\t\t\tq = p;\n\t\t\tp = 1.0 - q;\n\t\t}\n\t}\n\treturn p;\n}\n\n\n// EXPORTS //\n\nexport default apnorm;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport round from '@stdlib/math-base-special-round';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport exp from '@stdlib/math-base-special-exp';\nimport pow from '@stdlib/math-base-special-pow';\nimport ln from '@stdlib/math-base-special-ln';\nimport PI from '@stdlib/constants-float64-pi';\nimport apnorm from './apnorm.js';\nimport WEIGHT from './weight.json';\nimport ROOT from './root.json';\n\n\n// FUNCTIONS //\n\n/**\n* Evaluates a Gauss-Legendre quadrature.\n*\n* @private\n* @param {number} ww - quadrature point\n* @param {number} yii - integral bound\n* @param {number} aii - integral bound\n* @param {number} bii - integral bound\n* @param {number} r - relative error tolerance\n* @returns {number} integral value\n*/\nfunction fint( ww, yii, aii, bii, r ) {\n\tvar yyi = ( ( bii - aii ) * yii ) + bii + aii;\n\tvar out = exp( -yyi * yyi * 0.125 );\n\tout *= pow( apnorm( yyi * 0.5 ) -\n\t\tapnorm( ( yyi - (2*ww) ) * 0.5 ), r - 1 );\n\treturn out;\n}\n\n/**\n* Evaluates the Gauss-Legendre quadrature rule.\n*\n* @private\n* @param {number} ww - quadrature point\n* @param {number} aii - integral bound\n* @param {number} bii - integral bound\n* @param {number} r - relative error tolerance\n* @param {number} a - lower bound of integration\n* @param {number} b - upper bound of integration\n* @param {number} n - number of quadrature points\n* @returns {number} integral value\n*/\nfunction gaussLegreQuadrature( ww, aii, bii, r, a, b, n ) {\n\tvar wsum = 0.0;\n\tvar c = ( b - a ) * 0.5;\n\tvar d = ( b + a ) * 0.5;\n\tvar j;\n\tfor ( j = 0; j < n; j++ ) {\n\t\tif ( ROOT[j] === 0.0 ) {\n\t\t\twsum += WEIGHT[j] * fint( ww, d, aii, bii, r );\n\t\t} else {\n\t\t\twsum += WEIGHT[j] * ( fint( ww, ( ROOT[j]*c ) + d, aii, bii, r ) );\n\t\t}\n\t}\n\treturn c * wsum;\n}\n\n\n// MAIN //\n\n/**\n* Evaluates `H(w)`.\n*\n* @private\n* @param {number} w - quantile of the studentized range\n* @param {number} r - sample size for range (same for each group)\n* @returns {number} evaluated function\n*/\nfunction prangeVInf( w, r ) {\n\tvar soma;\n\tvar ai;\n\tvar ii;\n\tvar bi;\n\tvar i;\n\tvar k;\n\tif ( w <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( w <= 3 ) {\n\t\tk = 3.0;\n\t} else {\n\t\tk = 2.0;\n\t}\n\tai = w / 2.0;\n\tii = 1;\n\tbi = ( ( (k - ii) * (w / 2.0) ) + (8*ii) ) / k;\n\tsoma = 0;\n\tfor ( i = 1; i < round( k ) + 1; i++ ) {\n\t\tii = i;\n\t\tsoma += ((bi - ai) / 2.0) *\n\t\t\tgaussLegreQuadrature( w, ai, bi, r, -1.0, +1.0, 20 );\n\t\tai = bi;\n\t\tif ( i + 1 === round(k) ) {\n\t\t\tbi = 8;\n\t\t} else {\n\t\t\tbi = ( ( (k - ii - 1) * (w / 2.0) ) + ( 8 * (ii + 1) ) ) / k;\n\t\t}\n\t}\n\tsoma *= 2.0 * r / sqrt( 2.0 * PI );\n\tsoma += pow( exp(1), r * ln( ( 2.0 * apnorm( w / 2.0 ) ) - 1.0 ) );\n\treturn soma;\n}\n\n\n// EXPORTS //\n\nexport default prangeVInf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport lngamma from '@stdlib/math-base-special-gammaln';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport abs from '@stdlib/math-base-special-abs';\nimport exp from '@stdlib/math-base-special-exp';\nimport ln from '@stdlib/math-base-special-ln';\nimport LN_TWO from '@stdlib/constants-float64-ln-two';\nimport prangeVInf from './prange_v_inf.js';\n\n\n// MAIN //\n\n/**\n* Evaluates a Gauss-Legendre quadrature.\n*\n* @private\n* @param {number} q - quadrature point\n* @param {number} za - integral bound\n* @param {number} aii - integral bound\n* @param {number} c - integral upper bound\n* @param {number} r - relative error tolerance\n* @param {number} v - number of integration variables\n* @param {number} l - logarithm of the absolute value of the integral\n* @returns {number} integral value\n*/\nfunction f26( q, za, aii, c, r, v, l ) {\n\tvar aux1;\n\tvar yyi;\n\tvar aux;\n\n\tyyi = ( za * l ) + ( 2.0 * aii * l ) + l;\n\taux1 = prangeVInf( sqrt(yyi / 2.0) * q, r );\n\tif ( aux1 === 0 ) {\n\t\taux1 = 1.0e-37;\n\t}\n\taux = ( c * ln(aux1) ) + ln(l) + ( (v / 2.0) * ln(v) ) +\n\t\t( -yyi * v / 4.0 ) + ( ( ( v / 2.0 ) - 1.0 ) * ln(yyi) ) -\n\t\t( ( v * LN_TWO ) + lngamma( v / 2.0 ) );\n\tif ( abs( aux ) >= 1.0e30 ) {\n\t\treturn 0.0;\n\t}\n\treturn exp( aux );\n}\n\n\n// EXPORTS //\n\nexport default f26;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport WEIGHT from './weight.json';\nimport ROOT from './root.json';\nimport f26 from './f26.js';\n\n\n// MAIN //\n\n/**\n* Evaluates a Gauss-Legendre quadrature rule.\n*\n* @private\n* @param {number} q - quadrature point\n* @param {number} aii - integral bound\n* @param {number} r - relative error tolerance\n* @param {number} ci - integral upper bound\n* @param {number} a - lower bound of integration\n* @param {number} b - upper bound of integration\n* @param {number} n - number of quadrature points\n* @param {number} v - number of integration variables\n* @param {number} l - logarithm of the absolute value of the integral\n* @returns {number} integral value\n*/\nfunction gausslegdquad( q, aii, r, ci, a, b, n, v, l ) {\n\tvar wsum = 0.0;\n\tvar cmm = ( b - a ) / 2.0;\n\tvar d = ( b + a ) / 2.0;\n\tvar j;\n\tfor ( j = 0; j < n; j++ ) {\n\t\tif ( ROOT[ j ] === 0.0 ) {\n\t\t\twsum += WEIGHT[ j ] * f26( q, d, aii, ci, r, v, l );\n\t\t} else {\n\t\t\twsum += WEIGHT[ j ] *\n\t\t\t\t( f26( q, ( ROOT[ j ] * cmm ) + d, aii, ci, r, v, l ) );\n\t\t}\n\t}\n\treturn cmm * wsum;\n}\n\n\n// EXPORTS //\n\nexport default gausslegdquad;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isPositiveInteger } from '@stdlib/assert-is-positive-integer';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport abs from '@stdlib/math-base-special-abs';\nimport pow from '@stdlib/math-base-special-pow';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport gausslegdquad from './gausslegdquad.js';\nimport prangeVInf from './prange_v_inf.js';\n\n\n// VARIABLES //\n\nvar PRECISION = 1e-10;\n\n\n// MAIN //\n\n/**\n* Evaluates the cumulative distribution function (CDF) of the studentized range distribution.\n*\n* ## References\n*\n* -   Ferreira, D. F., Demetrico, C. G. B., Manly, B. F. J., and Machado, A. de A. 2007. \"Quantis da distribuição do máximo da amplitude estudentizada.\" _Rev. Mat. Est._, São Paulo, 25 (1): 117-135. <http://jaguar.fcav.unesp.br/RME/fasciculos/v25/v25_n1/A8_Daniel.pdf>.\n*\n* @param {number} q - quantile of the studentized range\n* @param {number} r - sample size for range (same for each group)\n* @param {number} v - degrees of freedom\n* @param {number} [nranges=1] - number of groups whose maximum range is considered\n* @returns {number} evaluated CDF\n*\n* @example\n* var y = cdf( 0.5, 3.0, 2.0 );\n* // returns ~0.0644\n*\n* @example\n* var y = cdf( 12.1, 17.0, 2.0 );\n* // returns ~0.913\n*\n* @example\n* var y = cdf( 0.5, 3.0, 2.0, 2 );\n* // returns ~0.01\n*/\nfunction cdf( q, r, v, nranges ) {\n\tvar probinic;\n\tvar auxprob;\n\tvar found;\n\tvar ll;\n\tvar a;\n\n\tif ( isnan( q ) || isnan( r ) || isnan( v ) ) {\n\t\treturn NaN;\n\t}\n\tif ( r < 2.0 || v < 2.0 ) {\n\t\treturn NaN;\n\t}\n\tif ( nranges === void 0 ) {\n\t\tnranges = 1;\n\t}\n\telse if ( !isPositiveInteger( nranges ) ) {\n\t\treturn NaN;\n\t}\n\tif ( v === 1 ) {\n\t\tif ( r < 10 ) {\n\t\t\tll = 1.0 + ( 1.0 / ( (2.0 * r) + 3.0 ) );\n\t\t} else if ( r <= 100 ) {\n\t\t\tll = 1.0844 + ( (1.119 - 1.0844) / 90.0 * (r - 10.0) );\n\t\t} else {\n\t\t\tll = 1.119 + ( 1.0 / r );\n\t\t}\n\t}\n\telse if ( v === 2 ) {\n\t\tll = 0.968;\n\t}\n\telse if ( v <= 100 ) {\n\t\tll = 1;\n\t}\n\telse if ( v <= 800 ) {\n\t\tll = 1 / 2.0;\n\t}\n\telse if ( v <= 5000 ) {\n\t\tll = 1 / 4.0;\n\t}\n\telse {\n\t\tll = 1 / 8.0;\n\t}\n\n\tif ( q < 0.0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( q === PINF ) {\n\t\treturn 1.0;\n\t}\n\tif (\n\t\tv > 25000 ||\n\t\tgausslegdquad( q, 0, r, nranges, -1.0, 1.0, 20, v, ll ) === 0\n\t) {\n\t\treturn pow( prangeVInf( q, r ), nranges );\n\t}\n\tauxprob = 0;\n\tfound = false;\n\ta = 0;\n\tprobinic = 0;\n\twhile ( !found ) {\n\t\tauxprob += gausslegdquad( q, a, r, nranges, -1.0, +1.0, 20, v, ll );\n\t\tif ( auxprob > 1.0 ) {\n\t\t\treturn 1.0;\n\t\t}\n\t\tif ( abs(auxprob - probinic) / auxprob <= PRECISION ) {\n\t\t\tfound = true;\n\t\t} else {\n\t\t\tprobinic = auxprob;\n\t\t}\n\t\ta += 1;\n\t}\n\treturn auxprob;\n}\n\n\n// EXPORTS //\n\nexport default cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Studentized range cumulative distribution function (CDF).\n*\n* @module @stdlib/stats-base-dists-studentized-range-cdf\n*\n* @example\n* import cdf from '@stdlib/stats-base-dists-studentized-range-cdf';\n*\n* var y = cdf( 2.0, 0.1 );\n* // returns ~0.611\n*\n* y = cdf( 1.0, 2.0 );\n* // returns ~0.789\n*\n* y = cdf( -1.0, 4.0 );\n* // returns ~0.187\n*\n* var mycdf = cdf.factory( 3.0, 2.0 );\n* y = mycdf( 3.0 );\n* // returns ~0.712\n*\n* y = mycdf( 1.0 );\n* // returns ~0.216\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isPositiveInteger } from '@stdlib/assert-is-positive-integer';\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport abs from '@stdlib/math-base-special-abs';\nimport pow from '@stdlib/math-base-special-pow';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport gausslegdquad from './gausslegdquad.js';\nimport prangeVInf from './prange_v_inf.js';\n\n\n// VARIABLES //\n\nvar PRECISION = 1e-10;\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the cumulative distribution function (CDF) for a studentized range distribution.\n*\n* @param {number} r - sample size for range (same for each group)\n* @param {number} v - degrees of freedom\n* @param {number} [nranges=1] - number of groups whose maximum range is considered\n* @returns {Function} CDF\n*\n* @example\n* var cdf = factory( 3.0, 2.0 );\n* var y = cdf( 3.0 );\n* // returns ~0.712\n*\n* y = cdf( 1.0 );\n* // returns ~0.216\n*/\nfunction factory( r, v, nranges ) {\n\tvar ll;\n\tif ( isnan( v ) || isnan( r ) || r < 2.0 || v < 2.0 ) {\n\t\treturn constantFunction( NaN );\n\t}\n\tif ( nranges === void 0 ) {\n\t\tnranges = 1;\n\t}\n\telse if ( !isPositiveInteger( nranges ) ) {\n\t\treturn constantFunction( NaN );\n\t}\n\tif ( v === 1 ) {\n\t\tif ( r < 10 ) {\n\t\t\tll = 1.0 + ( 1.0 / ( (2.0 * r) + 3.0 ) );\n\t\t} else if ( r <= 100 ) {\n\t\t\tll = 1.0844 + ( (1.119 - 1.0844) / 90.0 * (r - 10.0) );\n\t\t} else {\n\t\t\tll = 1.119 + ( 1.0 / r );\n\t\t}\n\t}\n\telse if ( v === 2 ) {\n\t\tll = 0.968;\n\t}\n\telse if ( v <= 100 ) {\n\t\tll = 1;\n\t}\n\telse if ( v <= 800 ) {\n\t\tll = 1 / 2.0;\n\t}\n\telse if ( v <= 5000 ) {\n\t\tll = 1 / 4.0;\n\t}\n\telse {\n\t\tll = 1 / 8.0;\n\t}\n\treturn cdf;\n\n\t/**\n\t* Evaluates the cumulative distribution function (CDF) for a studentized range distribution.\n\t*\n\t* @private\n\t* @param {number} q - quantile of the studentized range\n\t* @returns {Probability} evaluated CDF\n\t*\n\t* @example\n\t* var y = cdf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction cdf( q ) {\n\t\tvar probinic;\n\t\tvar auxprob;\n\t\tvar found;\n\t\tvar a;\n\t\tif ( isnan( q ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( q < 0.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\tif ( q === PINF ) {\n\t\t\treturn 1.0;\n\t\t}\n\t\tif (\n\t\t\tv > 25000 ||\n\t\t\tgausslegdquad( q, 0, r, nranges, -1.0, 1.0, 20, v, ll ) === 0\n\t\t) {\n\t\t\treturn pow( prangeVInf( q, r ), nranges );\n\t\t}\n\t\tauxprob = 0;\n\t\tfound = false;\n\t\ta = 0;\n\t\tprobinic = 0;\n\t\twhile ( !found ) {\n\t\t\tauxprob += gausslegdquad( q, a, r, nranges, -1.0, +1.0, 20, v, ll );\n\t\t\tif ( auxprob > 1.0 ) {\n\t\t\t\treturn 1.0;\n\t\t\t}\n\t\t\tif ( abs(auxprob - probinic) / auxprob <= PRECISION ) {\n\t\t\t\tfound = true;\n\t\t\t} else {\n\t\t\t\tprobinic = auxprob;\n\t\t\t}\n\t\t\ta += 1;\n\t\t}\n\t\treturn auxprob;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport ln from '@stdlib/math-base-special-ln';\nimport apnorminv from './apnorminv.js';\n\n\n// VARIABLES //\n\nvar VMAX = 120.0;\nvar c1 = 0.8843;\nvar c2 = 0.2368;\nvar c3 = 1.214;\nvar c4 = 1.208;\nvar c5 = 1.4142;\n\n\n// MAIN //\n\n/**\n* Calculates an initial percentile from the studentized range distribution.\n*\n* @private\n* @param {number} p - quantile\n* @param {number} v - degrees of freedom\n* @param {number} r - number of samples\n* @returns {number} initial percentile\n*/\nfunction qtrngo( p, v, r ) {\n\tvar q;\n\n\tvar t = apnorminv( 0.5 + ( 0.5 * p ) );\n\tif ( v < VMAX ) {\n\t\tt += ( ( t * t * t ) + t) / v / 4.0;\n\t}\n\tq = c1 - ( c2 * t );\n\tif ( v < VMAX ) {\n\t\tq -= ( c3 / v ) + ( c4 * t / v );\n\t}\n\treturn t * ( ( q * ln(r - 1.0) ) + c5 );\n}\n\n\n// EXPORTS //\n\nexport default qtrngo;\n","/* eslint-disable max-len, no-mixed-operators */\n\n/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport abs from '@stdlib/math-base-special-abs';\nimport ln from '@stdlib/math-base-special-ln';\n\n\n// VARIABLES //\n\n// Coefficients for P close to 0.5\nvar a0 = 3.3871328727963666080E0;\nvar a1 = 1.3314166789178437745E+2;\nvar a2 = 1.9715909503065514427E+3;\nvar a3 = 1.3731693765509461125E+4;\nvar a4 = 4.5921953931549871457E+4;\nvar a5 = 6.7265770927008700853E+4;\nvar a6 = 3.3430575583588128105E+4;\nvar a7 = 2.5090809287301226727E+3;\nvar b1 = 4.2313330701600911252E+1;\nvar b2 = 6.8718700749205790830E+2;\nvar b3 = 5.3941960214247511077E+3;\nvar b4 = 2.1213794301586595867E+4;\nvar b5 = 3.9307895800092710610E+4;\nvar b6 = 2.8729085735721942674E+4;\nvar b7 = 5.2264952788528545610E+3;\n\n// Coefficients for P not close to 0, 0.5 or 1.\nvar c0 = 1.42343711074968357734E0;\nvar c1 = 4.63033784615654529590E0;\nvar c2 = 5.76949722146069140550E0;\nvar c3 = 3.64784832476320460504E0;\nvar c4 = 1.27045825245236838258E0;\nvar c5 = 2.41780725177450611770E-1;\nvar c6 = 2.27238449892691845833E-2;\nvar c7 = 7.74545014278341407640E-4;\nvar d1 = 2.05319162663775882187E0;\nvar d2 = 1.67638483018380384940E0;\nvar d3 = 6.89767334985100004550E-1;\nvar d4 = 1.48103976427480074590E-1;\nvar d5 = 1.51986665636164571966E-2;\nvar d6 = 5.47593808499534494600E-4;\nvar d7 = 1.05075007164441684324E-9;\n\n// Coefficients for P near 0 or 1.\nvar e0 = 6.65790464350110377720E0;\nvar e1 = 5.46378491116411436990E0;\nvar e2 = 1.78482653991729133580E0;\nvar e3 = 2.96560571828504891230E-1;\nvar e4 = 2.65321895265761230930E-2;\nvar e5 = 1.24266094738807843860E-3;\nvar e6 = 2.71155556874348757815E-5;\nvar e7 = 2.01033439929228813265E-7;\nvar f1 = 5.99832206555887937690E-1;\nvar f2 = 1.36929880922735805310E-1;\nvar f3 = 1.48753612908506148525E-2;\nvar f4 = 7.86869131145613259100E-4;\nvar f5 = 1.84631831751005468180E-5;\nvar f6 = 1.42151175831644588870E-7;\nvar f7 = 2.04426310338993978564E-15;\n\n\n// MAIN //\n\n/**\n* Returns the normal deviate Z corresponding to a given lower tail area of `p`.\n*\n* @private\n* @param {Probability} p - lower tail area\n* @returns {number} normal deviate\n*/\nfunction apnorminv( p ) {\n\tvar ppnd;\n\tvar q;\n\tvar r;\n\n\tq = p - 0.5;\n\tif ( abs( q ) <= 0.425 ) {\n\t\tr = 0.180625 - ( q * q );\n\t\tppnd = q * (((((((a7 * r + a6) * r + a5) * r + a4) * r + a3) * r + a2) * r + a1) * r + a0) /\n\t\t\t(((((((b7 * r + b6) * r + b5) * r + b4) * r + b3) * r + b2) * r + b1) * r + 1.0);\n\t} else {\n\t\tif ( q < 0.0 ) {\n\t\t\tr = p;\n\t\t} else {\n\t\t\tr = 1.0 - p;\n\t\t}\n\t\tif ( r <= 0.0 ) {\n\t\t\tppnd = 0.0;\n\t\t} else {\n\t\t\tr = sqrt( -ln( r ) );\n\t\t\tif ( r <= 5.0 ) {\n\t\t\t\tr -= 1.6;\n\t\t\t\tppnd = (((((((c7 * r + c6) * r + c5) * r + c4) * r + c3) * r + c2) * r + c1) * r + c0) /\n\t\t\t\t\t(((((((d7 * r + d6) * r + d5) * r + d4) * r + d3) * r + d2) * r + d1) * r + 1.0);\n\t\t\t} else {\n\t\t\t\tr -= 5.0;\n\t\t\t\tppnd = (((((((e7 * r + e6) * r + e5) * r + e4) * r + e3) * r + e2) * r + e1) * r + e0) /\n\t\t\t\t\t(((((((f7 * r + f6) * r + f5) * r + f4) * r + f3) * r + f2) * r + f1) * r + 1.0);\n\t\t\t}\n\t\t\tif ( q < 0.0 ) {\n\t\t\t\tppnd = -ppnd;\n\t\t\t}\n\t\t}\n\t}\n\treturn ppnd;\n}\n\n\n// EXPORTS //\n\nexport default apnorminv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isPositiveInteger } from '@stdlib/assert-is-positive-integer';\nimport prange from '@stdlib/stats-base-dists-studentized-range-cdf';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport abs from '@stdlib/math-base-special-abs';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport qtrngo from './qtrngo.js';\n\n\n// VARIABLES //\n\nvar PCUT = 1e-8;\nvar JMAX = 28;\n\n\n// MAIN //\n\n/**\n* Evaluates the quantile function for a studentized range distribution at probability `p` with `r` samples and `v` degrees of freedom.\n*\n* ## References\n*\n* -   Ferreira, D. F., Demetrico, C. G. B., Manly, B. F. J., and Machado, A. de A. 2007. \"Quantis da distribuição do máximo da amplitude estudentizada.\" _Rev. Mat. Est._, São Paulo, 25 (1): 117-135. <http://jaguar.fcav.unesp.br/RME/fasciculos/v25/v25_n1/A8_Daniel.pdf>.\n*\n* @param {Probability} p - input probability\n* @param {number} r - sample size for range (same for each group; must be greater than or equal to `2`)\n* @param {number} v - degrees of freedom (must be greater than or equal to `2`)\n* @param {PositiveInteger} [nranges=1] - number of groups whose maximum range is considered\n* @returns evaluated quantile function\n*\n* @example\n* var y = quantile( 0.5, 3.0, 2.0 );\n* // returns ~0.0644\n*\n* @example\n* var y = quantile( 0.9, 17.0, 2.0 );\n* // returns ~0.913\n*\n* @example\n* var y = quantile( 0.5, 3.0, 2.0, 2 );\n* // returns ~0.01\n*/\nfunction qrange( p, r, v, nranges ) {\n\tvar aux;\n\tvar e1;\n\tvar e2;\n\tvar q1;\n\tvar q2;\n\tvar p1;\n\tvar p2;\n\tvar j;\n\n\tif (\n\t\tisnan( r ) ||\n\t\tisnan( v ) ||\n\t\tr < 2.0 ||\n\t\tv < 2.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( isnan( p ) || p < 0.0 || p > 1.0 ) {\n\t\treturn NaN;\n\t}\n\tif ( p === 0.0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( p === 1.0 ) {\n\t\treturn PINF;\n\t}\n\tif ( nranges === void 0 ) {\n\t\tnranges = 1;\n\t}\n\telse if ( !isPositiveInteger( nranges ) ) {\n\t\treturn NaN;\n\t}\n\tq1 = qtrngo( p, v, r );\n\twhile ( true ) {\n\t\tp1 = prange( q1, r, v, nranges );\n\t\tif ( p1 > p ) {\n\t\t\tq1 -= 0.4;\n\t\t}\n\t\tif ( q1 < 0.0 ) {\n\t\t\tq1 = 0.1;\n\t\t}\n\t\tif ( p1 < p ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\taux = q1;\n\tif ( abs( p1 - p ) < PCUT ) {\n\t\treturn NaN;\n\t}\n\tq2 = q1 + 0.5;\n\twhile ( true ) {\n\t\tp2 = prange( q2, r, v, nranges );\n\t\tif ( p2 < p ) {\n\t\t\tq2 += 0.4;\n\t\t}\n\t\tif ( q2 < 0.0 ) {\n\t\t\tq2 = 1.0;\n\t\t}\n\t\tif ( p2 > p ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\tif ( q2 < q1 ) {\n\t\tq2 = q1 + 0.01;\n\t}\n\tj = 2;\n\twhile ( j <= JMAX ) {\n\t\tp2 = prange( q2, r, v, nranges );\n\t\te1 = p1 - p;\n\t\te2 = p2 - p;\n\t\tif ( e2 - e1 !== 0 ) {\n\t\t\taux = ( ( e2 * q1 ) - ( e1 * q2 ) ) / ( e2 - e1 );\n\t\t}\n\t\tif ( abs( e1 ) < abs( e2 ) ) {\n\t\t\tif ( abs( p1 - p ) < PCUT * 5.0 ) {\n\t\t\t\tj = JMAX + 2;\n\t\t\t}\n\t\t\tq1 = aux;\n\t\t\tp1 = prange( q1, r, v, nranges );\n\t\t} else {\n\t\t\tq1 = q2;\n\t\t\tp1 = p2;\n\t\t\tq2 = aux;\n\t\t}\n\t\tj += 1;\n\t}\n\treturn aux;\n}\n\n\n// EXPORTS //\n\nexport default qrange;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate the quantile function for a studentized range distribution.\n*\n* @module @stdlib/stats-base-dists-studentized-range-quantile\n*\n* @example\n* import quantile from '@stdlib/stats-base-dists-studentized-range-quantile';\n*\n* var y = quantile( 0.5, 3.0, 2.0 );\n* // returns ~1.908\n*\n* y = quantile( 0.1, 3.0, 4.0 );\n* // returns ~0.627\n*\n* var myquantile = quantile.factory( 3.0, 3.0 );\n*\n* y = myquantile( 0.5 );\n* // returns ~1.791\n*\n* y = myquantile( 0.8 );\n* // returns ~3.245\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport { isPrimitive as isPositiveInteger } from '@stdlib/assert-is-positive-integer';\nimport prange from '@stdlib/stats-base-dists-studentized-range-cdf';\nimport abs from '@stdlib/math-base-special-abs';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport qtrngo from './qtrngo.js';\n\n\n// VARIABLES //\n\nvar PCUT = 1e-8;\nvar JMAX = 28;\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the quantile function for a studentized range distribution.\n*\n* @param {PositiveNumber} v - degrees of freedom\n* @param {number} r - sample size for range (same for each group; must be greater than or equal to `2`)\n* @param {number} v - degrees of freedom (must be greater than or equal to `2`)\n* @param {PositiveInteger} [nranges=1] - number of groups whose maximum range is considered\n* @returns {Function} quantile function\n*\n* @example\n* var quantile = factory( 3.0, 3.0 );\n* var y = quantile( 0.5 );\n* // returns ~1.791\n*\n* y = quantile( 0.8 );\n* // returns ~3.245\n*\n* y = quantile( 1.0 );\n* // returns Infinity\n*/\nfunction factory( r, v, nranges ) {\n\tif (\n\t\tisnan( r ) ||\n\t\tisnan( v ) ||\n\t\tr < 2.0 ||\n\t\tv < 2.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\tif ( nranges === void 0 ) {\n\t\tnranges = 1;\n\t}\n\telse if ( !isPositiveInteger( nranges ) ) {\n\t\treturn NaN;\n\t}\n\treturn quantile;\n\n\t/**\n\t* Evaluates the quantile function for a studentized range distribution.\n\t*\n\t* @private\n\t* @param {Probability} p - input value\n\t* @returns {number} evaluated quantile function\n\t*\n\t* @example\n\t* var y = quantile( 0.3 );\n\t* // returns <number>\n\t*/\n\tfunction quantile( p ) {\n\t\tvar aux;\n\t\tvar e1;\n\t\tvar e2;\n\t\tvar q1;\n\t\tvar q2;\n\t\tvar p1;\n\t\tvar p2;\n\t\tvar j;\n\n\t\tif ( isnan( p ) || p < 0.0 || p > 1.0 ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( p === 0.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\tif ( p === 1.0 ) {\n\t\t\treturn PINF;\n\t\t}\n\t\tq1 = qtrngo( p, v, r );\n\t\twhile ( true ) {\n\t\t\tp1 = prange( q1, r, v, nranges );\n\t\t\tif ( p1 > p ) {\n\t\t\t\tq1 -= 0.4;\n\t\t\t}\n\t\t\tif ( q1 < 0.0 ) {\n\t\t\t\tq1 = 0.1;\n\t\t\t}\n\t\t\tif ( p1 < p ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\taux = q1;\n\t\tif ( abs( p1 - p ) < PCUT ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tq2 = q1 + 0.5;\n\t\twhile ( true ) {\n\t\t\tp2 = prange( q2, r, v, nranges );\n\t\t\tif ( p2 < p ) {\n\t\t\t\tq2 += 0.4;\n\t\t\t}\n\t\t\tif ( q2 < 0.0 ) {\n\t\t\t\tq2 = 1.0;\n\t\t\t}\n\t\t\tif ( p2 > p ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif ( q2 < q1 ) {\n\t\t\tq2 = q1 + 0.01;\n\t\t}\n\t\tj = 2;\n\t\twhile ( j <= JMAX ) {\n\t\t\tp2 = prange( q2, r, v, nranges );\n\t\t\te1 = p1 - p;\n\t\t\te2 = p2 - p;\n\t\t\tif ( e2 - e1 !== 0 ) {\n\t\t\t\taux = ( ( e2 * q1 ) - ( e1 * q2 ) ) / ( e2 - e1 );\n\t\t\t}\n\t\t\tif ( abs( e1 ) < abs( e2 ) ) {\n\t\t\t\tif ( abs( p1 - p ) < PCUT * 5.0 ) {\n\t\t\t\t\tj = JMAX + 2;\n\t\t\t\t}\n\t\t\t\tq1 = aux;\n\t\t\t\tp1 = prange( q1, r, v, nranges );\n\t\t\t} else {\n\t\t\t\tq1 = q2;\n\t\t\t\tp1 = p2;\n\t\t\t\tq2 = aux;\n\t\t\t}\n\t\t\tj += 1;\n\t\t}\n\t\treturn aux;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace tukey\n*/\nvar tukey = {};\n\n/**\n* @name cdf\n* @memberof tukey\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/studentized-range/cdf}\n*/\nimport cdf from '@stdlib/stats-base-dists-studentized-range-cdf';\nsetReadOnly( tukey, 'cdf', cdf );\n\n/**\n* @name quantile\n* @memberof tukey\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/studentized-range/quantile}\n*/\nimport quantile from '@stdlib/stats-base-dists-studentized-range-quantile';\nsetReadOnly( tukey, 'quantile', quantile );\n\n\n// EXPORTS //\n\nexport default tukey;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport betainc from '@stdlib/math-base-special-betainc';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport pow from '@stdlib/math-base-special-pow';\n\n\n// MAIN //\n\n/**\n* Evaluates the cumulative distribution function (CDF) for a Student's t distribution with degrees of freedom `v` at a value `x`.\n*\n* @param {number} x - input value\n* @param {PositiveNumber} v - degrees of freedom\n* @returns {Probability} evaluated CDF\n*\n* @example\n* var y = cdf( 2.0, 0.1 );\n* // returns ~0.611\n*\n* @example\n* var y = cdf( 1.0, 2.0 );\n* // returns ~0.789\n*\n* @example\n* var y = cdf( -1.0, 4.0 );\n* // returns ~0.187\n*\n* @example\n* var y = cdf( NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2.0, -1.0 );\n* // returns NaN\n*/\nfunction cdf( x, v ) {\n\tvar x2;\n\tvar p;\n\tvar z;\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( v ) ||\n\t\tv <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x === 0.0 ) {\n\t\treturn 0.5;\n\t}\n\tx2 = pow( x, 2.0 );\n\tif ( v > 2.0*x2 ) {\n\t\tz = x2 / ( v + x2 );\n\t\tp = betainc( z, 0.5, v/2.0, true, true ) / 2.0;\n\t} else {\n\t\tz = v / ( v + x2 );\n\t\tp = betainc( z, v/2.0, 0.5, true, false ) / 2.0;\n\t}\n\treturn ( x > 0.0 ) ? 1.0 - p : p;\n}\n\n\n// EXPORTS //\n\nexport default cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport digamma from '@stdlib/math-base-special-digamma';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport beta from '@stdlib/math-base-special-beta';\nimport ln from '@stdlib/math-base-special-ln';\n\n\n// MAIN //\n\n/**\n* Returns the differential entropy of a Student's t distribution.\n*\n* @param {PositiveNumber} v - degrees of freedom\n* @returns {number} entropy\n*\n* @example\n* var v = entropy( 9.0 );\n* // returns ~1.533\n*\n* @example\n* var v = entropy( 2.0 );\n* // returns ~1.96\n*\n* @example\n* var v = entropy( -0.2 );\n* // returns NaN\n*\n* @example\n* var v = entropy( NaN );\n* // returns NaN\n*/\nfunction entropy( v ) {\n\tvar out;\n\tvar vh;\n\tif ( isnan( v ) || v <= 0.0 ) {\n\t\treturn NaN;\n\t}\n\tvh = v / 2.0;\n\tout = ( v + 1.0 ) / 2.0;\n\tout *= digamma( ( 1.0+v ) / 2.0 ) - digamma( vh );\n\tout += ln( sqrt( v ) * beta( vh, 0.5 ) );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default entropy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Returns the excess kurtosis of a Student's t distribution.\n*\n* @param {NonNegativeNumber} v - degrees of freedom\n* @returns {NonNegativeNumber} excess kurtosis\n*\n* @example\n* var v = kurtosis( 9.0 );\n* // returns 1.2\n*\n* @example\n* var v = kurtosis( 5.0 );\n* // returns 6.0\n*\n* @example\n* var v = kurtosis( 3.0 );\n* // returns Infinity\n*\n* @example\n* var v = kurtosis( 0.5 );\n* // returns NaN\n*\n* @example\n* var v = kurtosis( -0.2 );\n* // returns NaN\n*\n* @example\n* var v = kurtosis( NaN );\n* // returns NaN\n*/\nfunction kurtosis( v ) {\n\tif ( isnan( v ) || v <= 2.0 ) {\n\t\treturn NaN;\n\t}\n\tif ( v <= 4.0 ) {\n\t\treturn PINF;\n\t}\n\treturn 6.0 / ( v - 4.0 );\n}\n\n\n// EXPORTS //\n\nexport default kurtosis;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns the expected value of a Student's t distribution.\n*\n* @param {NonNegativeNumber} v - degrees of freedom\n* @returns {NonNegativeNumber} expected value\n*\n* @example\n* var v = mean( 9.0 );\n* // returns 0.0\n*\n* @example\n* var v = mean( 2.0 );\n* // returns 0.0\n*\n* @example\n* var v = mean( 0.5 );\n* // returns NaN\n*\n* @example\n* var v = mean( -0.2 );\n* // returns NaN\n*\n* @example\n* var v = mean( NaN );\n* // returns NaN\n*/\nfunction mean( v ) {\n\tif ( isnan( v ) || v <= 1.0 ) {\n\t\treturn NaN;\n\t}\n\treturn 0.0;\n}\n\n\n// EXPORTS //\n\nexport default mean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns the median of a Student's t distribution.\n*\n* @param {NonNegativeNumber} v - degrees of freedom\n* @returns {NonNegativeNumber} median\n*\n* @example\n* var v = median( 9.0 );\n* // returns 0.0\n*\n* @example\n* var v = median( 2.0 );\n* // returns 0.0\n*\n* @example\n* var v = median( -0.2 );\n* // returns NaN\n*\n* @example\n* var v = median( NaN );\n* // returns NaN\n*/\nfunction median( v ) {\n\tif ( isnan( v ) || v < 0.0 ) {\n\t\treturn NaN;\n\t}\n\treturn 0.0;\n}\n\n\n// EXPORTS //\n\nexport default median;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns the mode of a Student's t distribution.\n*\n* @param {NonNegativeNumber} v - degrees of freedom\n* @returns {NonNegativeNumber} mode\n*\n* @example\n* var v = mode( 9.0 );\n* // returns 0.0\n*\n* @example\n* var v = mode( 2.0 );\n* // returns 0.0\n*\n* @example\n* var v = mode( -0.2 );\n* // returns NaN\n*\n* @example\n* var v = mode( NaN );\n* // returns NaN\n*/\nfunction mode( v ) {\n\tif ( isnan( v ) || v < 0.0 ) {\n\t\treturn NaN;\n\t}\n\treturn 0.0;\n}\n\n\n// EXPORTS //\n\nexport default mode;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns the skewness of a Student's t distribution.\n*\n* @param {NonNegativeNumber} v - degrees of freedom\n* @returns {NonNegativeNumber} skewness\n*\n* @example\n* var v = skewness( 9.0 );\n* // returns 0.0\n*\n* @example\n* var v = skewness( 4.0 );\n* // returns 0.0\n*\n* @example\n* var v = skewness( 0.5 );\n* // returns NaN\n*\n* @example\n* var v = skewness( -0.2 );\n* // returns NaN\n*\n* @example\n* var v = skewness( NaN );\n* // returns NaN\n*/\nfunction skewness( v ) {\n\tif ( isnan( v ) || v <= 3.0 ) {\n\t\treturn NaN;\n\t}\n\treturn 0.0;\n}\n\n\n// EXPORTS //\n\nexport default skewness;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Returns the standard deviation of a Student's t distribution.\n*\n* @param {PositiveNumber} v - degrees of freedom\n* @returns {PositiveNumber} standard deviation\n*\n* @example\n* var v = stdev( 9.0 );\n* // returns ~1.134\n*\n* @example\n* var v = stdev( 2.0 );\n* // returns Infinity\n*\n* @example\n* var v = stdev( 0.5 );\n* // returns NaN\n*\n* @example\n* var v = stdev( -0.2 );\n* // returns NaN\n*\n* @example\n* var v = stdev( NaN );\n* // returns NaN\n*/\nfunction stdev( v ) {\n\tif ( isnan( v ) || v <= 1.0 ) {\n\t\treturn NaN;\n\t}\n\tif ( v <= 2.0 ) {\n\t\treturn PINF;\n\t}\n\treturn sqrt( v / ( v - 2.0 ) );\n}\n\n\n// EXPORTS //\n\nexport default stdev;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Returns the variance of a Student's t distribution.\n*\n* @param {PositiveNumber} v - degrees of freedom\n* @returns {PositiveNumber} variance\n*\n* @example\n* var v = variance( 9.0 );\n* // returns ~1.286\n*\n* @example\n* var v = variance( 2.0 );\n* // returns Infinity\n*\n* @example\n* var v = variance( 0.5 );\n* // returns NaN\n*\n* @example\n* var v = variance( -0.2 );\n* // returns NaN\n*\n* @example\n* var v = variance( NaN );\n* // returns NaN\n*/\nfunction variance( v ) {\n\tif ( isnan( v ) || v <= 1.0 ) {\n\t\treturn NaN;\n\t}\n\tif ( v <= 2.0 ) {\n\t\treturn PINF;\n\t}\n\treturn v / ( v - 2.0 );\n}\n\n\n// EXPORTS //\n\nexport default variance;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport betainc from '@stdlib/math-base-special-betainc';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport log1p from '@stdlib/math-base-special-log1p';\nimport pow from '@stdlib/math-base-special-pow';\nimport ln from '@stdlib/math-base-special-ln';\nimport LN_HALF from '@stdlib/constants-float64-ln-half';\n\n\n// MAIN //\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (CDF) for a Student's t distribution with degrees of freedom `v` at a value `x`.\n*\n* @param {number} x - input value\n* @param {PositiveNumber} v - degrees of freedom\n* @returns {number} evaluated logCDF\n*\n* @example\n* var y = logcdf( 2.0, 0.1 );\n* // returns ~-0.493\n*\n* @example\n* var y = logcdf( 1.0, 2.0 );\n* // returns ~-0.237\n*\n* @example\n* var y = logcdf( -1.0, 4.0 );\n* // returns ~-1.677\n*\n* @example\n* var y = logcdf( NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = logcdf( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = logcdf( 2.0, -1.0 );\n* // returns NaN\n*/\nfunction logcdf( x, v ) {\n\tvar x2;\n\tvar p;\n\tvar z;\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( v ) ||\n\t\tv <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x === 0.0 ) {\n\t\treturn LN_HALF;\n\t}\n\tx2 = pow( x, 2.0 );\n\tif ( v > 2.0*x2 ) {\n\t\tz = x2 / ( v + x2 );\n\t\tp = betainc( z, 0.5, v/2.0, true, true ) / 2.0;\n\t} else {\n\t\tz = v / ( v + x2 );\n\t\tp = betainc( z, v/2.0, 0.5, true, false ) / 2.0;\n\t}\n\treturn ( x > 0.0 ) ? log1p( -p ) : ln( p );\n}\n\n\n// EXPORTS //\n\nexport default logcdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport betaln from '@stdlib/math-base-special-betaln';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport pow from '@stdlib/math-base-special-pow';\nimport ln from '@stdlib/math-base-special-ln';\n\n\n// MAIN //\n\n/**\n* Evaluates the natural logarithm of the probability density function (PDF) for a Student's t distribution with degrees of freedom `v` at a value `x`.\n*\n* @param {number} x - input value\n* @param {PositiveNumber} v - degrees of freedom\n* @returns {number} evaluated logPDF\n*\n* @example\n* var y = logpdf( 0.3, 4.0 );\n* // returns ~-1.036\n*\n* @example\n* var y = logpdf( 2.0, 0.7 );\n* // returns ~-2.841\n*\n* @example\n* var y = logpdf( -1.0, 0.5 );\n* // returns ~-2.134\n*\n* @example\n* var y = logpdf( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = logpdf( NaN, 2.0 );\n* // returns NaN\n*\n* @example\n* var y = logpdf( 2.0, -1.0 );\n* // returns NaN\n*/\nfunction logpdf( x, v ) {\n\tvar betaTerm;\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( v ) ||\n\t\tv <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tbetaTerm = ln( sqrt( v ) ) + betaln( v/2.0, 0.5 );\n\treturn ( ( (1.0+v) / 2.0 ) * ln( v / ( v + pow( x, 2.0 ) ) ) ) - betaTerm;\n}\n\n\n// EXPORTS //\n\nexport default logpdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport beta from '@stdlib/math-base-special-beta';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport pow from '@stdlib/math-base-special-pow';\n\n\n// MAIN //\n\n/**\n* Evaluates the probability density function (PDF) for a Student's t distribution with degrees of freedom `v` at a value `x`.\n*\n* @param {number} x - input value\n* @param {PositiveNumber} v - degrees of freedom\n* @returns {number} evaluated PDF\n*\n* @example\n* var y = pdf( 0.3, 4.0 );\n* // returns ~0.355\n*\n* @example\n* var y = pdf( 2.0, 0.7 );\n* // returns ~0.058\n*\n* @example\n* var y = pdf( -1.0, 0.5 );\n* // returns ~0.118\n*\n* @example\n* var y = pdf( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = pdf( NaN, 2.0 );\n* // returns NaN\n*\n* @example\n* var y = pdf( 2.0, -1.0 );\n* // returns NaN\n*/\nfunction pdf( x, v ) {\n\tvar betaTerm;\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( v ) ||\n\t\tv <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tbetaTerm = sqrt( v ) * beta( v/2.0, 0.5 );\n\treturn pow( v / ( v + pow( x, 2.0 ) ), (1.0+v) / 2.0 ) / betaTerm;\n}\n\n\n// EXPORTS //\n\nexport default pdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport kernelBetaincinv from '@stdlib/math-base-special-kernel-betaincinv';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport sign from '@stdlib/math-base-special-signum';\nimport sqrt from '@stdlib/math-base-special-sqrt';\n\n\n// MAIN //\n\n/**\n* Evaluates the quantile function for a Student's t distribution with degrees of freedom `v` at a probability `p`.\n*\n* @param {Probability} p - input value\n* @param {PositiveNumber} v - degrees of freedom\n* @returns {number} evaluated quantile function\n*\n* @example\n* var y = quantile( 0.8, 1.0 );\n* // returns ~1.376\n*\n* @example\n* var y = quantile( 0.1, 1.0 );\n* // returns ~-3.078\n*\n* @example\n* var y = quantile( 0.5, 0.1 );\n* // returns 0.0\n*\n* @example\n* var y = quantile( -0.2, 0.1 );\n* // returns NaN\n*\n* @example\n* var y = quantile( NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.5, -1.0 );\n* // returns NaN\n*/\nfunction quantile( p, v ) {\n\tvar prob;\n\tvar xs;\n\tif (\n\t\tisnan( v ) ||\n\t\tisnan( p ) ||\n\t\tv <= 0.0 ||\n\t\tp < 0.0 ||\n\t\tp > 1.0\n\t) {\n\t\treturn NaN;\n\t}\n\tprob = ( p > 0.5 ) ? 1.0 - p : p;\n\txs = kernelBetaincinv( v / 2.0, 0.5, 2.0 * prob, 1.0 - (2.0 * prob) );\n\treturn sign( p - 0.5 ) * sqrt( v * xs[ 1 ] / xs[ 0 ] );\n}\n\n\n// EXPORTS //\n\nexport default quantile;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nimport defineProperty from '@stdlib/utils-define-property';\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport setReadOnlyAccessor from '@stdlib/utils-define-nonenumerable-read-only-accessor';\nimport { isPrimitive as isPositive } from '@stdlib/assert-is-positive-number';\nimport entropy from '@stdlib/stats-base-dists-t-entropy';\nimport kurtosis from '@stdlib/stats-base-dists-t-kurtosis';\nimport mean from '@stdlib/stats-base-dists-t-mean';\nimport median from '@stdlib/stats-base-dists-t-median';\nimport mode from '@stdlib/stats-base-dists-t-mode';\nimport skewness from '@stdlib/stats-base-dists-t-skewness';\nimport stdev from '@stdlib/stats-base-dists-t-stdev';\nimport variance from '@stdlib/stats-base-dists-t-variance';\nimport cdf from '@stdlib/stats-base-dists-t-cdf';\nimport logcdf from '@stdlib/stats-base-dists-t-logcdf';\nimport logpdf from '@stdlib/stats-base-dists-t-logpdf';\nimport pdf from '@stdlib/stats-base-dists-t-pdf';\nimport quantile from '@stdlib/stats-base-dists-t-quantile';\nimport format from '@stdlib/string-format';\n\n\n// FUNCTIONS //\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {Probability} evaluated CDF\n*/\nfunction tCDF( x ) {\n\treturn cdf( x, this.v );\n}\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logCDF\n*/\nfunction tLogCDF( x ) {\n\treturn logcdf( x, this.v );\n}\n\n/**\n* Evaluates the natural logarithm of the probability density function (PDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n*/\nfunction tLogPDF( x ) {\n\treturn logpdf( x, this.v );\n}\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n*/\nfunction tPDF( x ) {\n\treturn pdf( x, this.v );\n}\n\n/**\n* Evaluates the quantile function.\n*\n* @private\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n*/\nfunction tQuantile( p ) {\n\treturn quantile( p, this.v );\n}\n\n\n// MAIN //\n\n/**\n* Student's t distribution constructor.\n*\n* @constructor\n* @param {PositiveNumber} [v=1.0] - degrees of freedom\n* @throws {TypeError} `v` must be a positive number\n* @returns {T} distribution instance\n*\n* @example\n* var t = new T( 1.0 );\n*\n* var y = t.cdf( 0.8 );\n* // returns ~0.715\n*\n* var v = t.mode;\n* // returns 0.0\n*/\nfunction T() {\n\tvar v;\n\tif ( !(this instanceof T) ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn new T();\n\t\t}\n\t\treturn new T( arguments[ 0 ] );\n\t}\n\tif ( arguments.length ) {\n\t\tv = arguments[ 0 ];\n\t\tif ( !isPositive( v ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Rate parameter must be a positive number. Value: `%s`.', v ) );\n\t\t}\n\t} else {\n\t\tv = 1.0;\n\t}\n\tdefineProperty( this, 'v', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn v;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isPositive( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid assignment. Must be a positive number. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\tv = value;\n\t\t}\n\t});\n\treturn this;\n}\n\n/**\n* Student's t distribution differential entropy.\n*\n* @name entropy\n* @memberof T.prototype\n* @type {number}\n* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}\n*\n* @example\n* var t = new T( 4.0 );\n*\n* var v = t.entropy;\n* // returns ~1.682\n*/\nsetReadOnlyAccessor( T.prototype, 'entropy', function get() {\n\treturn entropy( this.v );\n});\n\n/**\n* Student's t distribution excess kurtosis.\n*\n* @name kurtosis\n* @memberof T.prototype\n* @type {number}\n* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}\n*\n* @example\n* var t = new T( 4.0 );\n*\n* var v = t.kurtosis;\n* // returns Infinity\n*/\nsetReadOnlyAccessor( T.prototype, 'kurtosis', function get() {\n\treturn kurtosis( this.v );\n});\n\n/**\n* Student's t distribution expected value.\n*\n* @name mean\n* @memberof T.prototype\n* @type {number}\n* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}\n*\n* @example\n* var t = new T( 4.0 );\n*\n* var v = t.mean;\n* // returns 0.0\n*/\nsetReadOnlyAccessor( T.prototype, 'mean', function get() {\n\treturn mean( this.v );\n});\n\n/**\n* Student's t distribution median.\n*\n* @name median\n* @memberof T.prototype\n* @type {number}\n* @see [median]{@link https://en.wikipedia.org/wiki/Median}\n*\n* @example\n* var t = new T( 4.0 );\n*\n* var v = t.median;\n* // returns 0.0\n*/\nsetReadOnlyAccessor( T.prototype, 'median', function get() {\n\treturn median( this.v );\n});\n\n/**\n* Student's t distribution mode.\n*\n* @name mode\n* @memberof T.prototype\n* @type {number}\n* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}\n*\n* @example\n* var t = new T( 4.0 );\n*\n* var v = t.mode;\n* // returns 0.0\n*/\nsetReadOnlyAccessor( T.prototype, 'mode', function get() {\n\treturn mode( this.v );\n});\n\n/**\n* Student's t distribution skewness.\n*\n* @name skewness\n* @memberof T.prototype\n* @type {number}\n* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}\n*\n* @example\n* var t = new T( 4.0 );\n*\n* var v = t.skewness;\n* // returns 0.0\n*/\nsetReadOnlyAccessor( T.prototype, 'skewness', function get() {\n\treturn skewness( this.v );\n});\n\n/**\n* Student's t distribution standard deviation.\n*\n* @name stdev\n* @memberof T.prototype\n* @type {PositiveNumber}\n* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}\n*\n* @example\n* var t = new T( 4.0 );\n*\n* var v = t.stdev;\n* // returns ~1.414\n*/\nsetReadOnlyAccessor( T.prototype, 'stdev', function get() {\n\treturn stdev( this.v );\n});\n\n/**\n* Student's t distribution variance.\n*\n* @name variance\n* @memberof T.prototype\n* @type {PositiveNumber}\n* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}\n*\n* @example\n* var t = new T( 4.0 );\n*\n* var v = t.variance;\n* // returns 2.0\n*/\nsetReadOnlyAccessor( T.prototype, 'variance', function get() {\n\treturn variance( this.v );\n});\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @name cdf\n* @memberof T.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var t = new T( 2.0 );\n*\n* var v = t.cdf( 0.5 );\n* // returns ~0.667\n*/\nsetReadOnly( T.prototype, 'cdf', tCDF );\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (CDF).\n*\n* @name logcdf\n* @memberof T.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logCDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var t = new T( 2.0 );\n*\n* var v = t.logcdf( 0.5 );\n* // returns ~-0.405\n*/\nsetReadOnly( T.prototype, 'logcdf', tLogCDF );\n\n/**\n* Evaluates the natural logarithm of the probability density function (PDF).\n*\n* @name logpdf\n* @memberof T.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var t = new T( 2.0 );\n*\n* var v = t.logpdf( 0.8 );\n* // returns ~-1.456\n*/\nsetReadOnly( T.prototype, 'logpdf', tLogPDF );\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @name pdf\n* @memberof T.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var t = new T( 2.0 );\n*\n* var v = t.pdf( 0.8 );\n* // returns ~0.233\n*/\nsetReadOnly( T.prototype, 'pdf', tPDF );\n\n/**\n* Evaluates the quantile function.\n*\n* @name quantile\n* @memberof T.prototype\n* @type {Function}\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}\n*\n* @example\n* var t = new T( 2.0 );\n*\n* var v = t.quantile( 0.5 );\n* // returns 0.0\n*/\nsetReadOnly( T.prototype, 'quantile', tQuantile );\n\n\n// EXPORTS //\n\nexport default T;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Student's t distribution cumulative distribution function (CDF).\n*\n* @module @stdlib/stats-base-dists-t-cdf\n*\n* @example\n* import cdf from '@stdlib/stats-base-dists-t-cdf';\n*\n* var y = cdf( 2.0, 0.1 );\n* // returns ~0.611\n*\n* y = cdf( 1.0, 2.0 );\n* // returns ~0.789\n*\n* y = cdf( -1.0, 4.0 );\n* // returns ~0.187\n*\n* var mycdf = cdf.factory( 0.5 );\n* y = mycdf( 3.0 );\n* // returns ~0.816\n*\n* y = mycdf( 1.0 );\n* // returns ~0.699\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport cdf from './cdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( cdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport betainc from '@stdlib/math-base-special-betainc';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport pow from '@stdlib/math-base-special-pow';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the cumulative distribution function (CDF) for a Student's t distribution with degrees of freedom `v`.\n*\n* @param {PositiveNumber} v - degrees of freedom\n* @returns {Function} CDF\n*\n* @example\n* var cdf = factory( 0.5 );\n* var y = cdf( 3.0 );\n* // returns ~0.816\n*\n* y = cdf( 1.0 );\n* // returns ~0.699\n*/\nfunction factory( v ) {\n\tif ( isnan( v ) || v <= 0.0 ) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn cdf;\n\n\t/**\n\t* Evaluates the cumulative distribution function (CDF) for a Student's t distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated CDF\n\t*\n\t* @example\n\t* var y = cdf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction cdf( x ) {\n\t\tvar x2;\n\t\tvar p;\n\t\tvar z;\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x === 0.0 ) {\n\t\t\treturn 0.5;\n\t\t}\n\t\tx2 = pow( x, 2.0 );\n\t\tif ( v > 2.0*x2 ) {\n\t\t\tz = x2 / ( v + x2 );\n\t\t\tp = betainc( z, 0.5, v/2.0, true, true ) / 2.0;\n\t\t} else {\n\t\t\tz = v / ( v + x2 );\n\t\t\tp = betainc( z, v/2.0, 0.5, true, false ) / 2.0;\n\t\t}\n\t\treturn ( x > 0.0 ) ? 1.0 - p : p;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Natural logarithm of the cumulative distribution function (CDF) for a Student's t distribution.\n*\n* @module @stdlib/stats-base-dists-t-logcdf\n*\n* @example\n* import logcdf from '@stdlib/stats-base-dists-t-logcdf';\n*\n* var y = logcdf( 2.0, 0.1 );\n* // returns ~-0.493\n*\n* y = logcdf( 1.0, 2.0 );\n* // returns ~-0.237\n*\n* y = logcdf( -1.0, 4.0 );\n* // returns ~-1.677\n*\n* var mylogcdf = logcdf.factory( 0.5 );\n* y = mylogcdf( 3.0 );\n* // returns ~-0.203\n*\n* y = mylogcdf( 1.0 );\n* // returns ~-0.358\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport logcdf from './logcdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( logcdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default logcdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport betainc from '@stdlib/math-base-special-betainc';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport log1p from '@stdlib/math-base-special-log1p';\nimport pow from '@stdlib/math-base-special-pow';\nimport ln from '@stdlib/math-base-special-ln';\nimport LN_HALF from '@stdlib/constants-float64-ln-half';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the natural logarithm of the cumulative distribution function (CDF) for a Student's t distribution with degrees of freedom `v`.\n*\n* @param {PositiveNumber} v - degrees of freedom\n* @returns {Function} logCDF\n*\n* @example\n* var logcdf = factory( 0.5 );\n* var y = logcdf( 3.0 );\n* // returns ~-0.203\n*\n* y = logcdf( 1.0 );\n* // returns ~-0.358\n*/\nfunction factory( v ) {\n\tif ( isnan( v ) || v <= 0.0 ) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn logcdf;\n\n\t/**\n\t* Evaluates the natural logarithm of the cumulative distribution function (CDF) for a Student's t distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {number} evaluated logCDF\n\t*\n\t* @example\n\t* var y = logcdf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction logcdf( x ) {\n\t\tvar x2;\n\t\tvar p;\n\t\tvar z;\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x === 0.0 ) {\n\t\t\treturn LN_HALF;\n\t\t}\n\t\tx2 = pow( x, 2.0 );\n\t\tif ( v > 2.0*x2 ) {\n\t\t\tz = x2 / ( v + x2 );\n\t\t\tp = betainc( z, 0.5, v/2.0, true, true ) / 2.0;\n\t\t} else {\n\t\t\tz = v / ( v + x2 );\n\t\t\tp = betainc( z, v/2.0, 0.5, true, false ) / 2.0;\n\t\t}\n\t\treturn ( x > 0.0 ) ? log1p( -p ) : ln( p );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Natural logarithm of the probability density function (PDF) for a Student's t distribution.\n*\n* @module @stdlib/stats-base-dists-t-logpdf\n*\n* @example\n* import logpdf from '@stdlib/stats-base-dists-t-logpdf';\n*\n* var y = logpdf( 3.0, 1.0 );\n* // returns ~-3.442\n*\n* var mylogPDF = logpdf.factory( 3.0 );\n* y = mylogPDF( 1.0 );\n* // returns ~-1.575\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport logpdf from './logpdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( logpdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default logpdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport betaln from '@stdlib/math-base-special-betaln';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport pow from '@stdlib/math-base-special-pow';\nimport ln from '@stdlib/math-base-special-ln';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the natural logarithm of the probability density function (PDF) for a Student's t distribution with `v` degrees of freedom.\n*\n* @param {PositiveNumber} v - degrees of freedom\n* @returns {Function} logPDF\n*\n* @example\n* var logpdf = factory( 1.0 );\n* var y = logpdf( 3.0 );\n* // returns ~-3.447\n*\n* y = logpdf( 1.0 );\n* // returns ~-1.838\n*/\nfunction factory( v ) {\n\tvar exponent;\n\tvar betaTerm;\n\n\tif ( isnan( v ) || v <= 0 ) {\n\t\treturn constantFunction( NaN );\n\t}\n\tbetaTerm = ln( sqrt( v ) ) + betaln( v/2.0, 0.5 );\n\texponent = ( 1.0 + v ) / 2.0;\n\treturn logpdf;\n\n\t/**\n\t* Evaluates the natural logarithm of the probability density function (PDF) for a Student's t distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {number} evaluated logPDF\n\t*\n\t* @example\n\t* var y = logpdf( 2.3 );\n\t* // returns <number>\n\t*/\n\tfunction logpdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn ( exponent * ln( v / ( v + pow( x, 2.0 ) ) ) ) - betaTerm;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Student's t distribution probability density function (PDF).\n*\n* @module @stdlib/stats-base-dists-t-pdf\n*\n* @example\n* import pdf from '@stdlib/stats-base-dists-t-pdf';\n*\n* var y = pdf( 3.0, 1.0 );\n* // returns ~0.032\n*\n* var myPDF = pdf.factory( 3.0 );\n* y = myPDF( 1.0 );\n* // returns ~0.207\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport pdf from './pdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( pdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default pdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport beta from '@stdlib/math-base-special-beta';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport pow from '@stdlib/math-base-special-pow';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the probability density function (PDF) for a Student's t distribution with `v` degrees of freedom.\n*\n* @param {PositiveNumber} v - degrees of freedom\n* @returns {Function} PDF\n*\n* @example\n* var pdf = factory( 1.0 );\n* var y = pdf( 3.0 );\n* // returns ~0.032\n*\n* y = pdf( 1.0 );\n* // returns ~0.159\n*/\nfunction factory( v ) {\n\tvar exponent;\n\tvar betaTerm;\n\n\tif ( isnan( v ) || v <= 0 ) {\n\t\treturn constantFunction( NaN );\n\t}\n\tbetaTerm = sqrt( v ) * beta( v/2.0, 0.5 );\n\texponent = ( 1.0 + v ) / 2.0;\n\treturn pdf;\n\n\t/**\n\t* Evaluates the probability density function (PDF) for a Student's t distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {number} evaluated PDF\n\t*\n\t* @example\n\t* var y = pdf( 2.3 );\n\t* // returns <number>\n\t*/\n\tfunction pdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn pow( v / ( v + pow( x, 2.0 ) ), exponent ) / betaTerm;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate the quantile function for a Student's t distribution.\n*\n* @module @stdlib/stats-base-dists-t-quantile\n*\n* @example\n* import quantile from '@stdlib/stats-base-dists-t-quantile';\n*\n* var y = quantile( 0.8, 1.0 );\n* // returns ~1.376\n*\n* y = quantile( 0.1, 1.0 );\n* // returns ~-3.078\n*\n* y = quantile( 0.5, 0.1 );\n* // returns 0.0\n*\n* var myquantile = quantile.factory( 4.0 );\n*\n* y = myquantile( 0.2 );\n* // returns ~-0.941\n*\n* y = myquantile( 0.9 );\n* // returns ~1.533\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport quantile from './quantile.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( quantile, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default quantile;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport kernelBetaincinv from '@stdlib/math-base-special-kernel-betaincinv';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport sign from '@stdlib/math-base-special-signum';\nimport sqrt from '@stdlib/math-base-special-sqrt';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the quantile function for a Student's t distribution with degrees of freedom `v`.\n*\n* @param {PositiveNumber} v - degrees of freedom\n* @returns {Function} quantile function\n*\n* @example\n* var quantile = factory( 0.5 );\n* var y = quantile( 0.5 );\n* // returns 0.0\n*\n* y = quantile( 0.8 );\n* // returns ~2.513\n*\n* y = quantile( 1.0 );\n* // returns Infinity\n*/\nfunction factory( v ) {\n\tif ( isnan( v ) || v <= 0.0 ) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn quantile;\n\n\t/**\n\t* Evaluates the quantile function for a Student's t distribution.\n\t*\n\t* @private\n\t* @param {Probability} p - input value\n\t* @returns {number} evaluated quantile function\n\t*\n\t* @example\n\t* var y = quantile( 0.3 );\n\t* // returns <number>\n\t*/\n\tfunction quantile( p ) {\n\t\tvar prob;\n\t\tvar xs;\n\n\t\tif ( isnan( p ) || p < 0.0 || p > 1.0 ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tprob = ( p > 0.5 ) ? 1.0 - p : p;\n\t\txs = kernelBetaincinv( v / 2.0, 0.5, 2.0 * prob, 1.0 - (2.0 * prob) );\n\t\treturn sign( p - 0.5 ) * sqrt( v * xs[ 1 ] / xs[ 0 ] );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace t\n*/\nvar t = {};\n\n/**\n* @name cdf\n* @memberof t\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/t/cdf}\n*/\nimport cdf from '@stdlib/stats-base-dists-t-cdf';\nsetReadOnly( t, 'cdf', cdf );\n\n/**\n* @name T\n* @memberof t\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/t/ctor}\n*/\nimport T from '@stdlib/stats-base-dists-t-ctor';\nsetReadOnly( t, 'T', T );\n\n/**\n* @name entropy\n* @memberof t\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/t/entropy}\n*/\nimport entropy from '@stdlib/stats-base-dists-t-entropy';\nsetReadOnly( t, 'entropy', entropy );\n\n/**\n* @name kurtosis\n* @memberof t\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/t/kurtosis}\n*/\nimport kurtosis from '@stdlib/stats-base-dists-t-kurtosis';\nsetReadOnly( t, 'kurtosis', kurtosis );\n\n/**\n* @name logcdf\n* @memberof t\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/t/logcdf}\n*/\nimport logcdf from '@stdlib/stats-base-dists-t-logcdf';\nsetReadOnly( t, 'logcdf', logcdf );\n\n/**\n* @name logpdf\n* @memberof t\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/t/logpdf}\n*/\nimport logpdf from '@stdlib/stats-base-dists-t-logpdf';\nsetReadOnly( t, 'logpdf', logpdf );\n\n/**\n* @name mean\n* @memberof t\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/t/mean}\n*/\nimport mean from '@stdlib/stats-base-dists-t-mean';\nsetReadOnly( t, 'mean', mean );\n\n/**\n* @name median\n* @memberof t\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/t/median}\n*/\nimport median from '@stdlib/stats-base-dists-t-median';\nsetReadOnly( t, 'median', median );\n\n/**\n* @name mode\n* @memberof t\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/t/mode}\n*/\nimport mode from '@stdlib/stats-base-dists-t-mode';\nsetReadOnly( t, 'mode', mode );\n\n/**\n* @name pdf\n* @memberof t\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/t/pdf}\n*/\nimport pdf from '@stdlib/stats-base-dists-t-pdf';\nsetReadOnly( t, 'pdf', pdf );\n\n/**\n* @name quantile\n* @memberof t\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/t/quantile}\n*/\nimport quantile from '@stdlib/stats-base-dists-t-quantile';\nsetReadOnly( t, 'quantile', quantile );\n\n/**\n* @name skewness\n* @memberof t\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/t/skewness}\n*/\nimport skewness from '@stdlib/stats-base-dists-t-skewness';\nsetReadOnly( t, 'skewness', skewness );\n\n/**\n* @name stdev\n* @memberof t\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/t/stdev}\n*/\nimport stdev from '@stdlib/stats-base-dists-t-stdev';\nsetReadOnly( t, 'stdev', stdev );\n\n/**\n* @name variance\n* @memberof t\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/t/variance}\n*/\nimport variance from '@stdlib/stats-base-dists-t-variance';\nsetReadOnly( t, 'variance', variance );\n\n\n// EXPORTS //\n\nexport default t;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport pow from '@stdlib/math-base-special-pow';\n\n\n// MAIN //\n\n/**\n* Evaluates the cumulative distribution function (CDF) for a triangular distribution with lower limit `a` and upper limit `b` and mode `c` at a value `x`.\n*\n* @param {number} x - input value\n* @param {number} a - lower limit\n* @param {number} b - upper limit\n* @param {number} c - mode\n* @returns {Probability} evaluated CDF\n*\n* @example\n* var y = cdf( 0.5, -1.0, 1.0, 0.0 );\n* // returns 0.875\n*\n* @example\n* var y = cdf( 0.5, -1.0, 1.0, 0.5 );\n* // returns 0.75\n*\n* @example\n* var y = cdf( -10.0, -20.0, 0.0, -2.0 );\n* // returns ~0.278\n*\n* @example\n* var y = cdf( -2.0, -1.0, 1.0, 0.0 );\n* // returns 0.0\n*\n* @example\n* var y = cdf( NaN, 0.0, 1.0, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, NaN, 1.0, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, 0.0, NaN, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2.0, 1.0, 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2.0, 1.0, 0.0, 1.5 );\n* // returns NaN\n*/\nfunction cdf( x, a, b, c ) {\n\tvar denom1;\n\tvar denom2;\n\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\tisnan( c ) ||\n\t\ta > c ||\n\t\tc > b\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x <= a ) {\n\t\treturn 0.0;\n\t}\n\tdenom1 = ( b - a ) * ( c - a );\n\tdenom2 = ( b - a ) * ( b - c );\n\n\t// Case: x > a\n\tif ( x <= c ) {\n\t\treturn pow( x - a, 2.0 ) / denom1;\n\t}\n\t// Case: x > c\n\tif ( x < b ) {\n\t\treturn 1.0 - ( pow( b - x, 2.0 ) / denom2 );\n\t}\n\t// Case: x >= b\n\treturn 1.0;\n}\n\n\n// EXPORTS //\n\nexport default cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport ln from '@stdlib/math-base-special-ln';\n\n\n// MAIN //\n\n/**\n* Returns the differential entropy of a triangular distribution.\n*\n* @param {number} a - minimum support\n* @param {number} b - maximum support\n* @param {number} c - mode\n* @returns {number} entropy\n*\n* @example\n* var v = entropy( 0.0, 1.0, 0.5 );\n* // returns ~-0.193\n*\n* @example\n* var v = entropy( 4.0, 12.0, 9.0 );\n* // returns ~1.886\n*\n* @example\n* var v = entropy( -4.0, 4.0, -1.0 );\n* // returns ~1.886\n*\n* @example\n* var v = entropy( 1.0, -0.1, 0.5 );\n* // returns NaN\n*\n* @example\n* var v = entropy( 0.0, 1.0, 2.0 );\n* // returns NaN\n*\n* @example\n* var v = entropy( NaN, 4.0, 2.0 );\n* // returns NaN\n*\n* @example\n* var v = entropy( 0.0, NaN, 2.0 );\n* // returns NaN\n*\n* @example\n* var v = entropy( 0.0, 4.0, NaN );\n* // returns NaN\n*/\nfunction entropy( a, b, c ) {\n\tif (\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\tisnan( c ) ||\n\t\t!( a <= c && c <= b )\n\t) {\n\t\treturn NaN;\n\t}\n\treturn 0.5 + ln( 0.5 * ( b-a ) );\n}\n\n\n// EXPORTS //\n\nexport default entropy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns the excess kurtosis of a triangular distribution.\n*\n* @param {number} a - minimum support\n* @param {number} b - maximum support\n* @param {number} c - mode\n* @returns {number} excess kurtosis\n*\n* @example\n* var v = kurtosis( 0.0, 1.0, 0.5 );\n* // returns -0.6\n*\n* @example\n* var v = kurtosis( 4.0, 12.0, 9.0 );\n* // returns -0.6\n*\n* @example\n* var v = kurtosis( -4.0, 4.0, -1.0 );\n* // returns -0.6\n*\n* @example\n* var v = kurtosis( 1.0, -0.1, 0.5 );\n* // returns NaN\n*\n* @example\n* var v = kurtosis( 0.0, 1.0, 2.0 );\n* // returns NaN\n*\n* @example\n* var v = kurtosis( NaN, 4.0, 2.0 );\n* // returns NaN\n*\n* @example\n* var v = kurtosis( 0.0, NaN, 2.0 );\n* // returns NaN\n*\n* @example\n* var v = kurtosis( 0.0, 4.0, NaN );\n* // returns NaN\n*/\nfunction kurtosis( a, b, c ) {\n\tif (\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\tisnan( c ) ||\n\t\t!( a <= c && c <= b )\n\t) {\n\t\treturn NaN;\n\t}\n\treturn -0.6;\n}\n\n\n// EXPORTS //\n\nexport default kurtosis;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns the expected value of a triangular distribution.\n*\n* @param {number} a - minimum support\n* @param {number} b - maximum support\n* @param {number} c - mode\n* @returns {number} expected value\n*\n* @example\n* var v = mean( 0.0, 1.0, 0.5 );\n* // returns ~0.5\n*\n* @example\n* var v = mean( 4.0, 12.0, 9.0 );\n* // returns ~8.333\n*\n* @example\n* var v = mean( -4.0, 4.0, -1.0 );\n* // returns ~-0.333\n*\n* @example\n* var v = mean( 1.0, -0.1, 0.5 );\n* // returns NaN\n*\n* @example\n* var v = mean( 0.0, 1.0, 2.0 );\n* // returns NaN\n*\n* @example\n* var v = mean( NaN, 4.0, 2.0 );\n* // returns NaN\n*\n* @example\n* var v = mean( 0.0, NaN, 2.0 );\n* // returns NaN\n*\n* @example\n* var v = mean( 0.0, 4.0, NaN );\n* // returns NaN\n*/\nfunction mean( a, b, c ) {\n\tif (\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\tisnan( c ) ||\n\t\t!( a <= c && c <= b )\n\t) {\n\t\treturn NaN;\n\t}\n\treturn ( a + b + c ) / 3.0;\n}\n\n\n// EXPORTS //\n\nexport default mean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport sqrt from '@stdlib/math-base-special-sqrt';\n\n\n// MAIN //\n\n/**\n* Returns the median of a triangular distribution.\n*\n* @param {number} a - minimum support\n* @param {number} b - maximum support\n* @param {number} c - mode\n* @returns {number} median\n*\n* @example\n* var v = median( 0.0, 1.0, 0.5 );\n* // returns 0.5\n*\n* @example\n* var v = median( 4.0, 12.0, 9.0 );\n* // returns ~8.472\n*\n* @example\n* var v = median( -4.0, 4.0, -1.0 );\n* // returns ~-0.472\n*\n* @example\n* var v = median( 1.0, -0.1, 0.5 );\n* // returns NaN\n*\n* @example\n* var v = median( 0.0, 1.0, 2.0 );\n* // returns NaN\n*\n* @example\n* var v = median( NaN, 4.0, 2.0 );\n* // returns NaN\n*\n* @example\n* var v = median( 0.0, NaN, 2.0 );\n* // returns NaN\n*\n* @example\n* var v = median( 0.0, 4.0, NaN );\n* // returns NaN\n*/\nfunction median( a, b, c ) {\n\tif (\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\tisnan( c ) ||\n\t\t!( a <= c && c <= b )\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( c >= ( a+b ) / 2.0 ) {\n\t\treturn a + sqrt( 0.5 * ( b-a ) * ( c-a ) );\n\t}\n\treturn b - sqrt( 0.5 * ( b-a ) * ( b-c ) );\n}\n\n\n// EXPORTS //\n\nexport default median;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns the mode of a triangular distribution.\n*\n* @param {number} a - minimum support\n* @param {number} b - maximum support\n* @param {number} c - mode\n* @returns {number} mode\n*\n* @example\n* var v = mode( 0.0, 1.0, 0.5 );\n* // returns 0.5\n*\n* @example\n* var v = mode( 4.0, 12.0, 9.0 );\n* // returns 9.0\n*\n* @example\n* var v = mode( -4.0, 4.0, -1.0 );\n* // returns -1.0\n*\n* @example\n* var v = mode( 1.0, -0.1, 0.5 );\n* // returns NaN\n*\n* @example\n* var v = mode( 0.0, 1.0, 2.0 );\n* // returns NaN\n*\n* @example\n* var v = mode( NaN, 4.0, 2.0 );\n* // returns NaN\n*\n* @example\n* var v = mode( 0.0, NaN, 2.0 );\n* // returns NaN\n*\n* @example\n* var v = mode( 0.0, 4.0, NaN );\n* // returns NaN\n*/\nfunction mode( a, b, c ) {\n\tif (\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\tisnan( c ) ||\n\t\t!( a <= c && c <= b )\n\t) {\n\t\treturn NaN;\n\t}\n\treturn c;\n}\n\n\n// EXPORTS //\n\nexport default mode;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport pow from '@stdlib/math-base-special-pow';\nimport SQRT2 from '@stdlib/constants-float64-sqrt-two';\n\n\n// MAIN //\n\n/**\n* Returns the skewness of a triangular distribution.\n*\n* @param {number} a - minimum support\n* @param {number} b - maximum support\n* @param {number} c - mode\n* @returns {number} skewness\n*\n* @example\n* var v = skewness( 0.0, 1.0, 0.5 );\n* // returns 0.0\n*\n* @example\n* var v = skewness( 4.0, 12.0, 9.0 );\n* // returns ~-0.236\n*\n* @example\n* var v = skewness( -4.0, 4.0, -1.0 );\n* // returns ~0.236\n*\n* @example\n* var v = skewness( 1.0, -0.1, 0.5 );\n* // returns NaN\n*\n* @example\n* var v = skewness( 0.0, 1.0, 2.0 );\n* // returns NaN\n*\n* @example\n* var v = skewness( NaN, 4.0, 2.0 );\n* // returns NaN\n*\n* @example\n* var v = skewness( 0.0, NaN, 2.0 );\n* // returns NaN\n*\n* @example\n* var v = skewness( 0.0, 4.0, NaN );\n* // returns NaN\n*/\nfunction skewness( a, b, c ) {\n\tvar out;\n\tif (\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\tisnan( c ) ||\n\t\t!( a <= c && c <= b )\n\t) {\n\t\treturn NaN;\n\t}\n\tout = SQRT2 * ( a + b - (2*c) ) * ( (2*a) - b - c ) * ( a - (2*b) + c );\n\tout /= 5.0 * pow( (a*a) + (b*b) + (c*c) - (a*b) - (a*c) - (b*c), 1.5 );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default skewness;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport sqrt from '@stdlib/math-base-special-sqrt';\n\n\n// MAIN //\n\n/**\n* Returns the standard deviation of a triangular distribution.\n*\n* @param {number} a - minimum support\n* @param {number} b - maximum support\n* @param {number} c - mode\n* @returns {PositiveNumber} standard deviation\n*\n* @example\n* var v = stdev( 0.0, 1.0, 0.5 );\n* // returns ~0.204\n*\n* @example\n* var v = stdev( 4.0, 12.0, 9.0 );\n* // returns ~1.65\n*\n* @example\n* var v = stdev( -4.0, 4.0, -1.0 );\n* // returns ~1.65\n*\n* @example\n* var v = stdev( 1.0, -0.1, 0.5 );\n* // returns NaN\n*\n* @example\n* var v = stdev( 0.0, 1.0, 2.0 );\n* // returns NaN\n*\n* @example\n* var v = stdev( NaN, 4.0, 2.0 );\n* // returns NaN\n*\n* @example\n* var v = stdev( 0.0, NaN, 2.0 );\n* // returns NaN\n*\n* @example\n* var v = stdev( 0.0, 4.0, NaN );\n* // returns NaN\n*/\nfunction stdev( a, b, c ) {\n\tif (\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\tisnan( c ) ||\n\t\t!( a <= c && c <= b )\n\t) {\n\t\treturn NaN;\n\t}\n\treturn sqrt( ( (a*a) + (b*b) + (c*c) - (a*b) - (a*c) - (b*c) ) / 18.0 );\n}\n\n\n// EXPORTS //\n\nexport default stdev;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns the variance of a triangular distribution.\n*\n* @param {number} a - minimum support\n* @param {number} b - maximum support\n* @param {number} c - mode\n* @returns {PositiveNumber} variance\n*\n* @example\n* var v = variance( 0.0, 1.0, 0.5 );\n* // returns ~0.042\n*\n* @example\n* var v = variance( 4.0, 12.0, 9.0 );\n* // returns ~2.722\n*\n* @example\n* var v = variance( -4.0, 4.0, -1.0 );\n* // returns ~2.722\n*\n* @example\n* var v = variance( 1.0, -0.1, 0.5 );\n* // returns NaN\n*\n* @example\n* var v = variance( 0.0, 1.0, 2.0 );\n* // returns NaN\n*\n* @example\n* var v = variance( NaN, 4.0, 2.0 );\n* // returns NaN\n*\n* @example\n* var v = variance( 0.0, NaN, 2.0 );\n* // returns NaN\n*\n* @example\n* var v = variance( 0.0, 4.0, NaN );\n* // returns NaN\n*/\nfunction variance( a, b, c ) {\n\tif (\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\tisnan( c ) ||\n\t\t!( a <= c && c <= b )\n\t) {\n\t\treturn NaN;\n\t}\n\treturn ( (a*a) + (b*b) + (c*c) - (a*b) - (a*c) - (b*c) ) / 18.0;\n}\n\n\n// EXPORTS //\n\nexport default variance;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport pow from '@stdlib/math-base-special-pow';\nimport ln from '@stdlib/math-base-special-ln';\nimport NINF from '@stdlib/constants-float64-ninf';\n\n\n// MAIN //\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (CDF) for a triangular distribution with lower limit `a` and upper limit `b` and mode `c` at a value `x`.\n*\n* @param {number} x - input value\n* @param {number} a - lower limit\n* @param {number} b - upper limit\n* @param {number} c - mode\n* @returns {number} evaluated logCDF\n*\n* @example\n* var y = logcdf( 0.5, -1.0, 1.0, 0.0 );\n* // returns ~-0.134\n*\n* @example\n* var y = logcdf( 0.5, -1.0, 1.0, 0.5 );\n* // returns ~-0.288\n*\n* @example\n* var y = logcdf( -10.0, -20.0, 0.0, -2.0 );\n* // returns ~-1.281\n*\n* @example\n* var y = logcdf( -2.0, -1.0, 1.0, 0.0 );\n* // returns -Infinity\n*\n* @example\n* var y = logcdf( NaN, 0.0, 1.0, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = logcdf( 0.0, NaN, 1.0, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = logcdf( 0.0, 0.0, NaN, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = logcdf( 2.0, 1.0, 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = logcdf( 2.0, 1.0, 0.0, 1.5 );\n* // returns NaN\n*/\nfunction logcdf( x, a, b, c ) {\n\tvar denom1;\n\tvar denom2;\n\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\tisnan( c ) ||\n\t\ta > c ||\n\t\tc > b\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x <= a ) {\n\t\treturn NINF;\n\t}\n\tdenom1 = ( b - a ) * ( c - a );\n\tdenom2 = ( b - a ) * ( b - c );\n\n\t// Case: x > a\n\tif ( x <= c ) {\n\t\treturn ( 2.0 * ln( x - a ) ) - ln( denom1 );\n\t}\n\t// Case: x > c\n\tif ( x < b ) {\n\t\treturn ln( 1.0 - ( pow( b - x, 2.0 ) / denom2 ) );\n\t}\n\t// Case: x >= b\n\treturn 0.0;\n}\n\n\n// EXPORTS //\n\nexport default logcdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport ln from '@stdlib/math-base-special-ln';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport LN2 from '@stdlib/constants-float64-ln-two';\n\n\n// MAIN //\n\n/**\n* Evaluates the natural logarithm of the probability density function (PDF) for a triangular distribution with lower limit `a` and upper limit `b` and mode `c` at a value `x`.\n*\n* @param {number} x - input value\n* @param {number} a - lower limit\n* @param {number} b - upper limit\n* @param {number} c - mode\n* @returns {number} evaluated logPDF\n*\n* @example\n* var y = logpdf( 0.5, -1.0, 1.0, 0.0 );\n* // returns ~-0.693\n*\n* @example\n* var y = logpdf( 0.5, -1.0, 1.0, 0.5 );\n* // returns 0.0\n*\n* @example\n* var y = logpdf( -10.0, -20.0, 0.0, -2.0 );\n* // returns ~-2.89\n*\n* @example\n* var y = logpdf( -2.0, -1.0, 1.0, 0.0 );\n* // returns -Infinity\n*\n* @example\n* var y = logpdf( NaN, 0.0, 1.0, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = logpdf( 0.0, NaN, 1.0, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = logpdf( 0.0, 0.0, NaN, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = logpdf( 2.0, 1.0, 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = logpdf( 2.0, 1.0, 0.0, 1.5 );\n* // returns NaN\n*/\nfunction logpdf( x, a, b, c ) {\n\tvar denom1;\n\tvar denom2;\n\tvar denom3;\n\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\tisnan( c ) ||\n\t\ta > c ||\n\t\tc > b\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x < a ) {\n\t\treturn NINF;\n\t}\n\tdenom1 = ln( b - a ) + ln( c - a );\n\tdenom2 = ln( b - a );\n\tdenom3 = ln( b - a ) + ln( b - c );\n\n\t// Case: x >= a\n\tif ( x < c ) {\n\t\treturn LN2 + ln( x - a ) - denom1;\n\t}\n\tif ( x === c ) {\n\t\treturn LN2 - denom2;\n\t}\n\t// Case: x > c\n\tif ( x <= b ) {\n\t\treturn LN2 + ln( b - x ) - denom3;\n\t}\n\t// Case: x > b\n\treturn NINF;\n}\n\n\n// EXPORTS //\n\nexport default logpdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport exp from '@stdlib/math-base-special-exp';\nimport pow from '@stdlib/math-base-special-pow';\n\n\n// MAIN //\n\n/**\n* Evaluates the moment-generating function (MGF) for a triangular distribution with lower limit `a`, upper limit `b`, and mode `c` at a value `t`.\n*\n* @param {number} t - input value\n* @param {number} a - lower limit\n* @param {number} b - upper limit\n* @param {number} c - mode\n* @returns {number} evaluated MGF\n*\n* @example\n* var y = mgf( 0.5, -1.0, 1.0, 0.0 );\n* // returns ~1.021\n*\n* @example\n* var y = mgf( 0.5, -1.0, 1.0, 0.5 );\n* // returns ~1.111\n*\n* @example\n* var y = mgf( -0.3, -20.0, 0.0, -2.0 );\n* // returns ~24.334\n*\n* @example\n* var y = mgf( -2.0, -1.0, 1.0, 0.0 );\n* // returns ~1.381\n*\n* @example\n* var y = mgf( NaN, 0.0, 1.0, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = mgf( 0.0, NaN, 1.0, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = mgf( 0.0, 0.0, NaN, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = mgf( 0.5, 1.0, 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = mgf( 0.5, 1.0, 0.0, 1.5 );\n* // returns NaN\n*/\nfunction mgf( t, a, b, c ) {\n\tvar bmc;\n\tvar bma;\n\tvar cma;\n\tvar ret;\n\n\tif (\n\t\tisnan( t ) ||\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\tisnan( c ) ||\n\t\ta > c ||\n\t\tc > b\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( t === 0.0 ) {\n\t\treturn 1.0;\n\t}\n\tbmc = b - c;\n\tbma = b - a;\n\tcma = c - a;\n\tret = (bmc * exp( a * t )) - (bma * exp( c * t ));\n\tret += cma * exp( b * t );\n\tret *= 2.0;\n\tret /= bma * cma * bmc * pow( t, 2.0 );\n\treturn ret;\n}\n\n\n// EXPORTS //\n\nexport default mgf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Evaluates the probability density function (PDF) for a triangular distribution with lower limit `a` and upper limit `b` and mode `c` at a value `x`.\n*\n* @param {number} x - input value\n* @param {number} a - lower limit\n* @param {number} b - upper limit\n* @param {number} c - mode\n* @returns {number} evaluated PDF\n*\n* @example\n* var y = pdf( 0.5, -1.0, 1.0, 0.0 );\n* // returns 0.5\n*\n* @example\n* var y = pdf( 0.5, -1.0, 1.0, 0.5 );\n* // returns 1.0\n*\n* @example\n* var y = pdf( -10.0, -20.0, 0.0, -2.0 );\n* // returns ~0.056\n*\n* @example\n* var y = pdf( -2.0, -1.0, 1.0, 0.0 );\n* // returns 0.0\n*\n* @example\n* var y = pdf( NaN, 0.0, 1.0, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = pdf( 0.0, NaN, 1.0, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = pdf( 0.0, 0.0, NaN, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = pdf( 2.0, 1.0, 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = pdf( 2.0, 1.0, 0.0, 1.5 );\n* // returns NaN\n*/\nfunction pdf( x, a, b, c ) {\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\tisnan( c ) ||\n\t\ta > c ||\n\t\tc > b\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x < a ) {\n\t\treturn 0.0;\n\t}\n\t// Case: x >= a\n\tif ( x < c ) {\n\t\treturn ( 2.0 * ( x - a ) ) / ( ( b - a ) * ( c - a ) );\n\t}\n\tif ( x === c ) {\n\t\treturn 2.0 / ( b - a );\n\t}\n\t// Case: x > c\n\tif ( x <= b ) {\n\t\treturn ( 2.0 * ( b - x ) ) / ( ( b - a ) * ( b - c ) );\n\t}\n\t// Case: x > b\n\treturn 0.0;\n}\n\n\n// EXPORTS //\n\nexport default pdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport sqrt from '@stdlib/math-base-special-sqrt';\n\n\n// MAIN //\n\n/**\n* Evaluates the quantile function for a triangular distribution with lower limit `a` and upper limit `b` and mode `c` at a probability `p`.\n*\n* @param {Probability} p - input value\n* @param {number} a - lower limit\n* @param {number} b - upper limit\n* @param {number} c - mode\n* @returns {number} evaluated quantile function\n*\n* @example\n* var y = quantile( 0.9, -1.0, 1.0, 0.0 );\n* // returns ~0.553\n*\n* @example\n* var y = quantile( 0.1, -1.0, 1.0, 0.5 );\n* // returns ~-0.452\n*\n* @example\n* var y = quantile( 0.1, -20.0, 0.0, -2.0 );\n* // returns -14.0\n*\n* @example\n* var y = quantile( 0.8, 0.0, 20.0, 0.0 );\n* // returns ~11.056\n*\n* @example\n* var y = quantile( 1.1, -1.0, 1.0, 0.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( -0.1, -1.0, 1.0, 0.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( NaN, 0.0, 1.0, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.3, NaN, 1.0, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.3, 0.0, NaN, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.3, 1.0, 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.3, 1.0, 0.0, 1.5 );\n* // returns NaN\n*/\nfunction quantile( p, a, b, c ) {\n\tvar pInflection;\n\tvar fact1;\n\tvar fact2;\n\n\tif (\n\t\tisnan( p ) ||\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\tisnan( c ) ||\n\t\ta > c ||\n\t\tc > b ||\n\t\tp < 0.0 ||\n\t\tp > 1.0\n\t) {\n\t\treturn NaN;\n\t}\n\tpInflection = ( c - a ) / ( b - a );\n\tfact1 = ( b - a ) * ( c - a);\n\tfact2 = ( b - a ) * ( b - c );\n\tif ( p < pInflection ) {\n\t\treturn a + sqrt( fact1 * p );\n\t}\n\tif ( p > pInflection ) {\n\t\treturn b - sqrt( fact2 * ( 1.0 - p ) );\n\t}\n\t// Case: p = pInflection\n\treturn c;\n}\n\n\n// EXPORTS //\n\nexport default quantile;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nimport defineProperty from '@stdlib/utils-define-property';\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport setReadOnlyAccessor from '@stdlib/utils-define-nonenumerable-read-only-accessor';\nimport { isPrimitive as isNumber } from '@stdlib/assert-is-number';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport entropy from '@stdlib/stats-base-dists-triangular-entropy';\nimport kurtosis from '@stdlib/stats-base-dists-triangular-kurtosis';\nimport mean from '@stdlib/stats-base-dists-triangular-mean';\nimport median from '@stdlib/stats-base-dists-triangular-median';\nimport mode from '@stdlib/stats-base-dists-triangular-mode';\nimport skewness from '@stdlib/stats-base-dists-triangular-skewness';\nimport stdev from '@stdlib/stats-base-dists-triangular-stdev';\nimport variance from '@stdlib/stats-base-dists-triangular-variance';\nimport cdf from '@stdlib/stats-base-dists-triangular-cdf';\nimport logcdf from '@stdlib/stats-base-dists-triangular-logcdf';\nimport logpdf from '@stdlib/stats-base-dists-triangular-logpdf';\nimport mgf from '@stdlib/stats-base-dists-triangular-mgf';\nimport pdf from '@stdlib/stats-base-dists-triangular-pdf';\nimport quantile from '@stdlib/stats-base-dists-triangular-quantile';\nimport format from '@stdlib/string-format';\n\n\n// FUNCTIONS //\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {Probability} evaluated CDF\n*/\nfunction triangularCDF( x ) {\n\treturn cdf( x, this.a, this.b, this.c );\n}\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logCDF\n*/\nfunction triangularLogCDF( x ) {\n\treturn logcdf( x, this.a, this.b, this.c );\n}\n\n/**\n* Evaluates the natural logarithm of the probability density function (PDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n*/\nfunction triangularLogPDF( x ) {\n\treturn logpdf( x, this.a, this.b, this.c );\n}\n\n/**\n* Evaluates the moment-generating function (MGF).\n*\n* @private\n* @param {number} t - input value\n* @returns {number} evaluated MGF\n*/\nfunction triangularMGF( t ) {\n\treturn mgf( t, this.a, this.b, this.c );\n}\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n*/\nfunction triangularPDF( x ) {\n\treturn pdf( x, this.a, this.b, this.c );\n}\n\n/**\n* Evaluates the quantile function.\n*\n* @private\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n*/\nfunction triangularQuantile( p ) {\n\treturn quantile( p, this.a, this.b, this.c );\n}\n\n\n// MAIN //\n\n/**\n* Triangular distribution constructor.\n*\n* @constructor\n* @param {number} [a=0.0] - minimum support\n* @param {number} [b=1.0] - maximum support\n* @param {number} [c=0.5] - mode\n* @throws {TypeError} `a` must be a number\n* @throws {TypeError} `b` must be a number\n* @throws {TypeError} `c` must be a number\n* @throws {RangeError} `a` must be less than or equal to `b` and `c`\n* @throws {RangeError} `b` must be greater than or equal to `a` and `b`\n* @throws {RangeError} `c` must be greater than or equal to `a` and smaller than or equal to `b`\n* @returns {Triangular} distribution instance\n*\n* @example\n* var triangular = new Triangular( 0.0, 1.0, 0.25 );\n*\n* var y = triangular.cdf( 0.8 );\n* // returns ~0.947\n*\n* var mu = triangular.mean;\n* // returns ~0.417\n*/\nfunction Triangular() {\n\tvar a;\n\tvar b;\n\tvar c;\n\tif ( !(this instanceof Triangular) ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn new Triangular();\n\t\t}\n\t\treturn new Triangular( arguments[ 0 ], arguments[ 1 ], arguments[ 2 ] );\n\t}\n\tif ( arguments.length ) {\n\t\ta = arguments[ 0 ];\n\t\tb = arguments[ 1 ];\n\t\tc = arguments[ 2 ];\n\t\tif ( !isNumber( a ) || isnan( a ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Minimum support must be a number. Value: `%s`.', a ) );\n\t\t}\n\t\tif ( !isNumber( b ) || isnan( b ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Maximum support must be a number. Value: `%s`.', b ) );\n\t\t}\n\t\tif ( !isNumber( c ) || isnan( c ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Mode must be a number. Value: `%s`.', c ) );\n\t\t}\n\t\tif ( !( a <= c && c <= b ) ) {\n\t\t\tthrow new RangeError( format( 'invalid arguments. Parameters must satisfy the following condition: %s. a: `%f`. b: `%f`. c: `%f`.', 'a <= c <= b', a, b, c ) );\n\t\t}\n\t} else {\n\t\ta = 0.0;\n\t\tb = 1.0;\n\t\tc = 0.5;\n\t}\n\tdefineProperty( this, 'a', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn a;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isNumber( value ) || isnan( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid assignment. Must be a number. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\tif ( value > b || value > c ) {\n\t\t\t\tthrow new RangeError( format( 'invalid assignment. Must be less than or equal to both the maximum support and the mode. Value: `%f`.', value ) );\n\t\t\t}\n\t\t\ta = value;\n\t\t}\n\t});\n\tdefineProperty( this, 'b', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn b;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isNumber( value ) || isnan( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid assignment. Must be a number. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\tif ( a > value || c > value ) {\n\t\t\t\tthrow new RangeError( format( 'invalid assignment. Must be greater than or equal to both the minimum support and the mode. Value: `%f`.', value ) );\n\t\t\t}\n\t\t\tb = value;\n\t\t}\n\t});\n\tdefineProperty( this, 'c', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn c;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isNumber( value ) || isnan( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid assignment. Must be a number. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\tif ( a > value || b < value ) {\n\t\t\t\tthrow new RangeError( format( 'invalid assignment. Must be greater than or equal to the minimum support and less than or equal to the maximum support. Value: `%f`.', value ) );\n\t\t\t}\n\t\t\tc = value;\n\t\t}\n\t});\n\treturn this;\n}\n\n/**\n* Triangular distribution differential entropy.\n*\n* @name entropy\n* @memberof Triangular.prototype\n* @type {number}\n* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}\n*\n* @example\n* var triangular = new Triangular( 4.0, 12.0, 10.0 );\n*\n* var v = triangular.entropy;\n* // returns ~1.886\n*/\nsetReadOnlyAccessor( Triangular.prototype, 'entropy', function get() {\n\treturn entropy( this.a, this.b, this.c );\n});\n\n/**\n* Triangular distribution excess kurtosis.\n*\n* @name kurtosis\n* @memberof Triangular.prototype\n* @type {number}\n* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}\n*\n* @example\n* var triangular = new Triangular( 4.0, 12.0, 10.0 );\n*\n* var v = triangular.kurtosis;\n* // returns -0.6\n*/\nsetReadOnlyAccessor( Triangular.prototype, 'kurtosis', function get() {\n\treturn kurtosis( this.a, this.b, this.c );\n});\n\n/**\n* Triangular distribution expected value.\n*\n* @name mean\n* @memberof Triangular.prototype\n* @type {number}\n* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}\n*\n* @example\n* var triangular = new Triangular( 4.0, 12.0, 10.0 );\n*\n* var v = triangular.mean;\n* // returns ~8.667\n*/\nsetReadOnlyAccessor( Triangular.prototype, 'mean', function get() {\n\treturn mean( this.a, this.b, this.c );\n});\n\n/**\n* Triangular distribution median.\n*\n* @name median\n* @memberof Triangular.prototype\n* @type {number}\n* @see [median]{@link https://en.wikipedia.org/wiki/Median}\n*\n* @example\n* var triangular = new Triangular( 4.0, 12.0, 10.0 );\n*\n* var v = triangular.median;\n* // returns ~8.899\n*/\nsetReadOnlyAccessor( Triangular.prototype, 'median', function get() {\n\treturn median( this.a, this.b, this.c );\n});\n\n/**\n* Triangular distribution mode.\n*\n* @name mode\n* @memberof Triangular.prototype\n* @type {number}\n* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}\n*\n* @example\n* var triangular = new Triangular( 4.0, 12.0, 10.0 );\n*\n* var v = triangular.mode;\n* // returns 10.0\n*/\nsetReadOnlyAccessor( Triangular.prototype, 'mode', function get() {\n\treturn mode( this.a, this.b, this.c );\n});\n\n/**\n* Triangular distribution skewness.\n*\n* @name skewness\n* @memberof Triangular.prototype\n* @type {number}\n* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}\n*\n* @example\n* var triangular = new Triangular( 4.0, 12.0, 10.0 );\n*\n* var v = triangular.skewness;\n* // returns ~-0.422\n*/\nsetReadOnlyAccessor( Triangular.prototype, 'skewness', function get() {\n\treturn skewness( this.a, this.b, this.c );\n});\n\n/**\n* Triangular distribution standard deviation.\n*\n* @name stdev\n* @memberof Triangular.prototype\n* @type {PositiveNumber}\n* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}\n*\n* @example\n* var triangular = new Triangular( 4.0, 12.0, 10.0 );\n*\n* var v = triangular.stdev;\n* // returns ~1.7\n*/\nsetReadOnlyAccessor( Triangular.prototype, 'stdev', function get() {\n\treturn stdev( this.a, this.b, this.c );\n});\n\n/**\n* Triangular distribution variance.\n*\n* @name variance\n* @memberof Triangular.prototype\n* @type {PositiveNumber}\n* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}\n*\n* @example\n* var triangular = new Triangular( 4.0, 12.0, 10.0 );\n*\n* var v = triangular.variance;\n* // returns ~2.889\n*/\nsetReadOnlyAccessor( Triangular.prototype, 'variance', function get() {\n\treturn variance( this.a, this.b, this.c );\n});\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @name cdf\n* @memberof Triangular.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {Probability} evaluated CDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var triangular = new Triangular( 2.0, 4.0, 3.0 );\n*\n* var v = triangular.cdf( 3.0 );\n* // returns 0.5\n*/\nsetReadOnly( Triangular.prototype, 'cdf', triangularCDF );\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (CDF).\n*\n* @name logcdf\n* @memberof Triangular.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logCDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var triangular = new Triangular( 2.0, 4.0, 3.0 );\n*\n* var v = triangular.logcdf( 3.0 );\n* // returns ~-0.693\n*/\nsetReadOnly( Triangular.prototype, 'logcdf', triangularLogCDF );\n\n/**\n* Evaluates the natural logarithm of the probability density function (PDF).\n*\n* @name logpdf\n* @memberof Triangular.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var triangular = new Triangular( 2.0, 4.0, 3.0 );\n*\n* var v = triangular.logpdf( 2.4 );\n* // returns ~-0.916\n*/\nsetReadOnly( Triangular.prototype, 'logpdf', triangularLogPDF );\n\n/**\n* Evaluates the moment-generating function (MGF).\n*\n* @name mgf\n* @memberof Triangular.prototype\n* @type {Function}\n* @param {number} t - input value\n* @returns {number} evaluated MGF\n* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}\n*\n* @example\n* var triangular = new Triangular( 2.0, 4.0, 3.0 );\n*\n* var v = triangular.mgf( 0.5 );\n* // returns ~4.576\n*/\nsetReadOnly( Triangular.prototype, 'mgf', triangularMGF );\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @name pdf\n* @memberof Triangular.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var triangular = new Triangular( 2.0, 4.0, 3.0 );\n*\n* var v = triangular.pdf( 2.4 );\n* // returns ~0.40\n*/\nsetReadOnly( Triangular.prototype, 'pdf', triangularPDF );\n\n/**\n* Evaluates the quantile function.\n*\n* @name quantile\n* @memberof Triangular.prototype\n* @type {Function}\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}\n*\n* @example\n* var triangular = new Triangular( 2.0, 4.0, 3.0 );\n*\n* var v = triangular.quantile( 0.5 );\n* // returns 3.0\n*/\nsetReadOnly( Triangular.prototype, 'quantile', triangularQuantile );\n\n\n// EXPORTS //\n\nexport default Triangular;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Triangular distribution cumulative distribution function (CDF).\n*\n* @module @stdlib/stats-base-dists-triangular-cdf\n*\n* @example\n* import cdf from '@stdlib/stats-base-dists-triangular-cdf';\n*\n* var y = cdf( 0.5, -1.0, 1.0, 0.0 );\n* // returns 0.875\n*\n* y = cdf( 0.5, -1.0, 1.0, 0.5 );\n* // returns 0.75\n*\n* y = cdf( -10.0, -20.0, 0.0, -2.0 );\n* // returns ~0.278\n*\n* y = cdf( -2.0, -1.0, 1.0, 0.0 );\n* // returns 0.0\n*\n* var mycdf = cdf.factory( 0.0, 10.0, 2.0 );\n* y = mycdf( 0.5 );\n* // returns 0.0125\n*\n* y = mycdf( 8.0 );\n* // returns 0.95\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport cdf from './cdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( cdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport pow from '@stdlib/math-base-special-pow';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the cumulative distribution function (CDF) for a triangular distribution with lower limit `a` and upper limit `b` and mode `c`.\n*\n* @param {number} a - lower limit\n* @param {number} b - upper limit\n* @param {number} c - mode\n* @returns {Function} CDF\n*\n* @example\n* var cdf = factory( 0.0, 10.0, 2.0 );\n* var y = cdf( 0.5 );\n* // returns 0.0125\n*\n* y = cdf( 8.0 );\n* // returns 0.95\n*/\nfunction factory( a, b, c ) {\n\tvar denom1;\n\tvar denom2;\n\n\tif (\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\tisnan( c )\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\tif ( !( a <= c && c <= b ) ) {\n\t\treturn constantFunction( NaN );\n\t}\n\n\tdenom1 = ( b - a ) * ( c - a );\n\tdenom2 = ( b - a ) * ( b - c );\n\treturn cdf;\n\n\t/**\n\t* Evaluates the cumulative distribution function (CDF) for a triangular distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated CDF\n\t*\n\t* @example\n\t* var y = cdf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction cdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x <= a ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\t// Case: x > a\n\t\tif ( x <= c ) {\n\t\t\treturn pow( x - a, 2.0 ) / denom1;\n\t\t}\n\t\t// Case: x > c\n\t\tif ( x < b ) {\n\t\t\treturn 1 - ( pow( b - x, 2.0 ) / denom2 );\n\t\t}\n\t\t// Case: x >= b\n\t\treturn 1.0;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Triangular distribution logarithm of cumulative distribution function (CDF).\n*\n* @module @stdlib/stats-base-dists-triangular-logcdf\n*\n* @example\n* import logcdf from '@stdlib/stats-base-dists-triangular-logcdf';\n*\n* var y = logcdf( 0.5, -1.0, 1.0, 0.0 );\n* // returns ~-0.134\n*\n* y = logcdf( 0.5, -1.0, 1.0, 0.5 );\n* // returns ~-0.288\n*\n* y = logcdf( -10.0, -20.0, 0.0, -2.0 );\n* // returns ~-1.281\n*\n* y = logcdf( -2.0, -1.0, 1.0, 0.0 );\n* // returns -Infinity\n*\n* var mylogcdf = logcdf.factory( 0.0, 10.0, 2.0 );\n* y = mylogcdf( 0.5 );\n* // returns ~-4.382\n*\n* y = mylogcdf( 8.0 );\n* // returns ~-0.051\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport logcdf from './logcdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( logcdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default logcdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport pow from '@stdlib/math-base-special-pow';\nimport ln from '@stdlib/math-base-special-ln';\nimport NINF from '@stdlib/constants-float64-ninf';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the natural logarithm of the cumulative distribution function (CDF) for a triangular distribution with lower limit `a` and upper limit `b` and mode `c`.\n*\n* @param {number} a - lower limit\n* @param {number} b - upper limit\n* @param {number} c - mode\n* @returns {Function} logCDF\n*\n* @example\n* var logcdf = factory( 0.0, 10.0, 2.0 );\n* var y = logcdf( 0.5 );\n* // returns ~-4.382\n*\n* y = logcdf( 8.0 );\n* // returns ~-0.051\n*/\nfunction factory( a, b, c ) {\n\tvar denom1;\n\tvar denom2;\n\n\tif (\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\tisnan( c )\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\tif ( !( a <= c && c <= b ) ) {\n\t\treturn constantFunction( NaN );\n\t}\n\n\tdenom1 = ( b - a ) * ( c - a );\n\tdenom2 = ( b - a ) * ( b - c );\n\treturn logcdf;\n\n\t/**\n\t* Evaluates the natural logarithm of the cumulative distribution function (CDF) for a triangular distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {number} evaluated logCDF\n\t*\n\t* @example\n\t* var y = logcdf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction logcdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x <= a ) {\n\t\t\treturn NINF;\n\t\t}\n\t\t// Case: x > a\n\t\tif ( x <= c ) {\n\t\t\treturn ( 2.0 * ln( x - a ) ) - ln( denom1 );\n\t\t}\n\t\t// Case: x > c\n\t\tif ( x < b ) {\n\t\t\treturn ln( 1.0 - ( pow( b - x, 2.0 ) / denom2 ) );\n\t\t}\n\t\t// Case: x >= b\n\t\treturn 0.0;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Triangular distribution logarithm of probability density function (PDF).\n*\n* @module @stdlib/stats-base-dists-triangular-logpdf\n*\n* @example\n* import logpdf from '@stdlib/stats-base-dists-triangular-logpdf';\n*\n* var y = logpdf( 0.5, -1.0, 1.0, 0.0 );\n* // returns ~-0.693\n*\n* y = logpdf( 0.5, -1.0, 1.0, 0.5 );\n* // returns 0.0\n*\n* y = logpdf( -10.0, -20.0, 0.0, -2.0 );\n* // returns ~-2.89\n*\n* var mylogpdf = logpdf.factory( 0.0, 10.0, 5.0 );\n* y = mylogpdf( 2.0 );\n* // returns ~-2.526\n*\n* y = mylogpdf( 12.0 );\n* // returns -Infinity\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport logpdf from './logpdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( logpdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default logpdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport ln from '@stdlib/math-base-special-ln';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport LN2 from '@stdlib/constants-float64-ln-two';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the natural logarithm of the probability density function (PDF) for a triangular distribution with lower limit `a` and upper limit `b` and mode `c`.\n*\n* @param {number} a - lower limit\n* @param {number} b - upper limit\n* @param {number} c - mode\n* @returns {Function} logPDF\n*\n* @example\n* var logpdf = factory( 0.0, 10.0, 5.0 );\n* var y = logpdf( 2.0 );\n* // returns ~-2.526\n*\n* y = logpdf( 12.0 );\n* // returns -Infinity\n*/\nfunction factory( a, b, c ) {\n\tvar denom1;\n\tvar denom2;\n\tvar denom3;\n\n\tif (\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\tisnan( c ) ||\n\t\ta > c ||\n\t\tc > b\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\n\tdenom1 = ln( b - a ) + ln( c - a );\n\tdenom2 = ln( b - a );\n\tdenom3 = ln( b - a ) + ln( b - c );\n\treturn logpdf;\n\n\t/**\n\t* Evaluates the natural logarithm of the probability density function (PDF) for a triangular distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {number} evaluated logPDF\n\t*\n\t* @example\n\t* var y = logpdf( 12.0 );\n\t* // returns <number>\n\t*/\n\tfunction logpdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x < a ) {\n\t\t\treturn NINF;\n\t\t}\n\t\t// Case: x >= a\n\t\tif ( x < c ) {\n\t\t\treturn LN2 + ln( x - a ) - denom1;\n\t\t}\n\t\tif ( x === c ) {\n\t\t\treturn LN2 - denom2;\n\t\t}\n\t\t// Case: x > c\n\t\tif ( x <= b ) {\n\t\t\treturn LN2 + ln( b - x ) - denom3;\n\t\t}\n\t\t// Case: x > b\n\t\treturn NINF;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate the moment-generating function (MGF) for a triangular distribution.\n*\n* @module @stdlib/stats-base-dists-triangular-mgf\n*\n* @example\n* import mgf from '@stdlib/stats-base-dists-triangular-mgf';\n*\n* var y = mgf( 0.5, -1.0, 1.0, 0.0 );\n* // returns ~1.021\n*\n* y = mgf( 0.5, -1.0, 1.0, 0.5 );\n* // returns ~1.111\n*\n* y = mgf( -0.3, -20.0, 0.0, -2.0 );\n* // returns ~24.334\n*\n* y = mgf( -2.0, -1.0, 1.0, 0.0 );\n* // returns ~1.381\n*\n* var mymgf = mgf.factory( 0.0, 2.0, 1.0 );\n* y = mymgf( -1.0 );\n* // returns ~0.3996\n*\n* y = mymgf( 2.0 );\n* // returns ~10.205\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport mgf from './mgf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( mgf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default mgf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport exp from '@stdlib/math-base-special-exp';\nimport pow from '@stdlib/math-base-special-pow';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the moment-generating function (MGF) for a triangular distribution with lower limit `a`, upper limit `b`, and mode `c`.\n*\n* @param {number} a - lower limit\n* @param {number} b - upper limit\n* @param {number} c - mode\n* @returns {Function} MGF\n*\n* @example\n* var mgf = factory( 0.0, 2.0, 1.0 );\n* var y = mgf( -1.0 );\n* // returns ~0.3996\n*\n* y = mgf( 2.0 );\n* // returns ~10.205\n*/\nfunction factory( a, b, c ) {\n\tvar bmc;\n\tvar bma;\n\tvar cma;\n\n\tif (\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\tisnan( c ) ||\n\t\ta > c ||\n\t\tc > b\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\tbmc = b - c;\n\tbma = b - a;\n\tcma = c - a;\n\treturn mgf;\n\n\t/**\n\t* Evaluates the moment-generating function (MGF) for a triangular distribution.\n\t*\n\t* @private\n\t* @param {number} t - input value\n\t* @returns {number} evaluated MGF\n\t*\n\t* @example\n\t* var y = mgf( 0.5 );\n\t* // returns <number>\n\t*/\n\tfunction mgf( t ) {\n\t\tvar ret;\n\n\t\tif ( isnan( t ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( t === 0.0 ) {\n\t\t\treturn 1.0;\n\t\t}\n\t\tret = (bmc * exp( a * t )) - (bma * exp( c * t ));\n\t\tret += cma * exp( b * t );\n\t\tret *= 2.0;\n\t\tret /= bma * cma * bmc * pow( t, 2.0 );\n\t\treturn ret;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Triangular distribution probability density function (PDF).\n*\n* @module @stdlib/stats-base-dists-triangular-pdf\n*\n* @example\n* import pdf from '@stdlib/stats-base-dists-triangular-pdf';\n*\n* var y = pdf( 0.5, -1.0, 1.0, 0.0 );\n* // returns 0.5\n*\n* y = pdf( 0.5, -1.0, 1.0, 0.5 );\n* // returns 1.0\n*\n* y = pdf( -10.0, -20.0, 0.0, -2.0 );\n* // returns ~0.056\n*\n* var mypdf = pdf.factory( 0.0, 10.0, 5.0 );\n* y = mypdf( 2.0 );\n* // returns 0.08\n*\n* y = mypdf( 12.0 );\n* // returns 0.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport pdf from './pdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( pdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default pdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the probability density function (PDF) for a triangular distribution with lower limit `a` and upper limit `b` and mode `c`.\n*\n* @param {number} a - lower limit\n* @param {number} b - upper limit\n* @param {number} c - mode\n* @returns {Function} PDF\n*\n* @example\n* var pdf = factory( 0.0, 10.0, 5.0 );\n* var y = pdf( 2.0 );\n* // returns 0.08\n*\n* y = pdf( 12.0 );\n* // returns 0.0\n*/\nfunction factory( a, b, c ) {\n\tvar denom1;\n\tvar denom2;\n\tvar denom3;\n\n\tif (\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\tisnan( c ) ||\n\t\ta > c ||\n\t\tc > b\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\n\tdenom1 = ( b - a ) * ( c - a );\n\tdenom2 = b - a;\n\tdenom3 = ( b - a ) * ( b - c );\n\treturn pdf;\n\n\t/**\n\t* Evaluates the probability density function (PDF) for a triangular distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {number} evaluated PDF\n\t*\n\t* @example\n\t* var y = pdf( 12.0 );\n\t* // returns <number>\n\t*/\n\tfunction pdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x < a ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\t// Case: x >= a\n\t\tif ( x < c ) {\n\t\t\treturn 2.0 * ( x - a ) / denom1;\n\t\t}\n\t\tif ( x === c ) {\n\t\t\treturn 2.0 / denom2;\n\t\t}\n\t\t// Case: x > c\n\t\tif ( x <= b ) {\n\t\t\treturn 2.0 * ( b - x ) / denom3;\n\t\t}\n\t\t// Case: x > b\n\t\treturn 0.0;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Triangular distribution quantile function.\n*\n* @module @stdlib/stats-base-dists-triangular-quantile\n*\n* @example\n* import quantile from '@stdlib/stats-base-dists-triangular-quantile';\n*\n* var y = quantile( 0.9, -1.0, 1.0, 0.0 );\n* // returns ~0.553\n*\n* y = quantile( 0.1, -1.0, 1.0, 0.5 );\n* // returns ~-0.452\n*\n* y = quantile( 0.1, -20.0, 0.0, -2.0 );\n* // returns -14.0\n*\n* y = quantile( 0.8, 0.0, 20.0, 0.0 );\n* // returns ~11.056\n*\n* var myquantile = quantile.factory( 2.0, 4.0, 2.5 );\n* y = myquantile( 0.4 );\n* // returns ~2.658\n*\n* y = myquantile( 0.8 );\n* // returns ~3.225\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport quantile from './quantile.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( quantile, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default quantile;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport sqrt from '@stdlib/math-base-special-sqrt';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the quantile function for a triangular distribution with lower limit `a`, upper limit `b` and mode `c`.\n*\n* @param {number} a - lower limit\n* @param {number} b - upper limit\n* @param {number} c - mode\n* @returns {Function} quantile function\n*\n* @example\n* var quantile = factory( 2.0, 4.0, 2.5 );\n* var y = quantile( 0.4 );\n* // returns ~2.658\n*\n* y = quantile( 0.8 );\n* // returns ~3.225\n*/\nfunction factory( a, b, c ) {\n\tvar pInflection;\n\tvar fact1;\n\tvar fact2;\n\n\tif (\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\tisnan( c ) ||\n\t\ta > c ||\n\t\tc > b\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\n\tpInflection = ( c - a ) / ( b - a );\n\tfact1 = ( b - a ) * ( c - a);\n\tfact2 = ( b - a ) * ( b - c );\n\treturn quantile;\n\n\t/**\n\t* Evaluates the quantile function for a triangular distribution.\n\t*\n\t* @private\n\t* @param {Probability} p - input value\n\t* @returns {number} evaluated quantile function\n\t*\n\t* @example\n\t* var y = quantile( 0.3 );\n\t* // returns <number>\n\t*/\n\tfunction quantile( p ) {\n\t\tif ( isnan( p ) || p < 0.0 || p > 1.0 ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( p < pInflection ) {\n\t\t\treturn a + sqrt( fact1 * p );\n\t\t}\n\t\tif ( p > pInflection ) {\n\t\t\treturn b - sqrt( fact2 * ( 1.0 - p ) );\n\t\t}\n\t\t// Case: p = pInflection\n\t\treturn c;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace triangular\n*/\nvar triangular = {};\n\n/**\n* @name cdf\n* @memberof triangular\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/triangular/cdf}\n*/\nimport cdf from '@stdlib/stats-base-dists-triangular-cdf';\nsetReadOnly( triangular, 'cdf', cdf );\n\n/**\n* @name Triangular\n* @memberof triangular\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/triangular/ctor}\n*/\nimport Triangular from '@stdlib/stats-base-dists-triangular-ctor';\nsetReadOnly( triangular, 'Triangular', Triangular );\n\n/**\n* @name entropy\n* @memberof triangular\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/triangular/entropy}\n*/\nimport entropy from '@stdlib/stats-base-dists-triangular-entropy';\nsetReadOnly( triangular, 'entropy', entropy );\n\n/**\n* @name kurtosis\n* @memberof triangular\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/triangular/kurtosis}\n*/\nimport kurtosis from '@stdlib/stats-base-dists-triangular-kurtosis';\nsetReadOnly( triangular, 'kurtosis', kurtosis );\n\n/**\n* @name logcdf\n* @memberof triangular\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/triangular/logcdf}\n*/\nimport logcdf from '@stdlib/stats-base-dists-triangular-logcdf';\nsetReadOnly( triangular, 'logcdf', logcdf );\n\n/**\n* @name logpdf\n* @memberof triangular\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/triangular/logpdf}\n*/\nimport logpdf from '@stdlib/stats-base-dists-triangular-logpdf';\nsetReadOnly( triangular, 'logpdf', logpdf );\n\n/**\n* @name mean\n* @memberof triangular\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/triangular/mean}\n*/\nimport mean from '@stdlib/stats-base-dists-triangular-mean';\nsetReadOnly( triangular, 'mean', mean );\n\n/**\n* @name median\n* @memberof triangular\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/triangular/median}\n*/\nimport median from '@stdlib/stats-base-dists-triangular-median';\nsetReadOnly( triangular, 'median', median );\n\n/**\n* @name mgf\n* @memberof triangular\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/triangular/mgf}\n*/\nimport mgf from '@stdlib/stats-base-dists-triangular-mgf';\nsetReadOnly( triangular, 'mgf', mgf );\n\n/**\n* @name mode\n* @memberof triangular\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/triangular/mode}\n*/\nimport mode from '@stdlib/stats-base-dists-triangular-mode';\nsetReadOnly( triangular, 'mode', mode );\n\n/**\n* @name pdf\n* @memberof triangular\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/triangular/pdf}\n*/\nimport pdf from '@stdlib/stats-base-dists-triangular-pdf';\nsetReadOnly( triangular, 'pdf', pdf );\n\n/**\n* @name quantile\n* @memberof triangular\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/triangular/quantile}\n*/\nimport quantile from '@stdlib/stats-base-dists-triangular-quantile';\nsetReadOnly( triangular, 'quantile', quantile );\n\n/**\n* @name skewness\n* @memberof triangular\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/triangular/skewness}\n*/\nimport skewness from '@stdlib/stats-base-dists-triangular-skewness';\nsetReadOnly( triangular, 'skewness', skewness );\n\n/**\n* @name stdev\n* @memberof triangular\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/triangular/stdev}\n*/\nimport stdev from '@stdlib/stats-base-dists-triangular-stdev';\nsetReadOnly( triangular, 'stdev', stdev );\n\n/**\n* @name variance\n* @memberof triangular\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/triangular/variance}\n*/\nimport variance from '@stdlib/stats-base-dists-triangular-variance';\nsetReadOnly( triangular, 'variance', variance );\n\n\n// EXPORTS //\n\nexport default triangular;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport exp from '@stdlib/math-base-special-exp';\nimport pow from '@stdlib/math-base-special-pow';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport { factory as normal } from '@stdlib/stats-base-dists-normal-cdf';\nimport PI from '@stdlib/constants-float64-pi';\n\n\n// VARIABLES //\n\nvar normalCDF = normal( 0.0, 1.0 );\n\n\n// MAIN //\n\n/**\n* Evaluates the probability density function (PDF) for a truncated normal distribution with endpoints `a` and `b`, location parameter `mu` and scale parameter `sigma` at a value `x`.\n*\n* @param {number} x - input value\n* @param {number} a - minimum support\n* @param {number} b - maximum support\n* @param {number} mu - location parameter\n* @param {PositiveNumber} sigma - scale parameter\n* @returns {number} evaluated PDF\n*\n* @example\n* var y = pdf( 0.9, 0.0, 1.0, 0.0, 1.0 );\n* // returns ~0.7795\n*\n* @example\n* var y = pdf( 0.9, 0.0, 1.0, 0.5, 1.0 );\n* // returns ~0.9617\n*\n* @example\n* var y = pdf( 0.9, -1.0, 1.0, 0.5, 1.0 );\n* // returns ~0.5896\n*\n* @example\n* var y = pdf( 1.4, 0.0, 1.0, 0.0, 1.0 );\n* // returns 0.0\n*\n* @example\n* var y = pdf( -0.9, 0.0, 1.0, 0.0, 1.0 );\n* // returns 0.0\n*/\nfunction pdf( x, a, b, mu, sigma ) {\n\tvar s2x2;\n\tvar A;\n\tvar B;\n\tvar C;\n\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\tsigma <= 0.0 ||\n\t\ta >= b\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x < a || x > b ) {\n\t\treturn 0.0;\n\t}\n\ts2x2 = 2.0 * pow( sigma, 2.0 );\n\tA = 1.0 / ( sqrt( s2x2 * PI ) );\n\tB = -1.0 / ( s2x2 );\n\tC = normalCDF( (b-mu)/sigma ) - normalCDF( (a-mu)/sigma );\n\treturn A * exp( B * pow( x - mu, 2.0 ) ) / C;\n}\n\n\n// EXPORTS //\n\nexport default pdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport exp from '@stdlib/math-base-special-exp';\nimport pow from '@stdlib/math-base-special-pow';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport { factory as normal } from '@stdlib/stats-base-dists-normal-cdf';\nimport PI from '@stdlib/constants-float64-pi';\n\n\n// VARIABLES //\n\nvar normalCDF = normal( 0.0, 1.0 );\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the probability density function (PDF) for a truncated normal distribution with endpoints `a` and `b`, mean `mu` and standard deviation `sigma`.\n*\n* @param {number} a - minimum support\n* @param {number} b - maximum support\n* @param {number} mu - location parameter\n* @param {PositiveNumber} sigma - scale parameter\n* @returns {Function} PDF\n*\n* @example\n* var myPDF = factory( 0.0, 1.0, 0.0, 1.0 );\n* var y = myPDF( 0.8 );\n* // returns ~0.849\n*\n* @example\n* var myPDF = factory( 0.0, 1.0, 0.5, 1.0 );\n* var y = myPDF( 0.8 );\n* // returns ~0.996\n*\n* @example\n* var myPDF = factory( 0.0, 1.0, 0.0, 1.0 );\n* var y = myPDF( 2.0 );\n* // returns 0.0\n*\n* @example\n* var myPDF = factory( 0.0, 1.0, 0.0, 1.0 );\n* var y = myPDF( -1.0 );\n* // returns 0.0\n*/\nfunction factory( a, b, mu, sigma ) {\n\tvar s2x2;\n\tvar A;\n\tvar B;\n\tvar C;\n\n\tif (\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\tisnan( mu ) ||\n\t\tisnan( sigma ) ||\n\t\tsigma <= 0.0 ||\n\t\ta >= b\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\ts2x2 = 2.0 * pow( sigma, 2.0 );\n\tA = 1.0 / ( sqrt( s2x2 * PI ) );\n\tB = -1.0 / ( s2x2 );\n\tC = normalCDF( (b-mu)/sigma ) - normalCDF( (a-mu)/sigma );\n\treturn pdf;\n\n\t/**\n\t* Evaluates the probability density function (PDF) for a truncated normal distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {number} evaluated PDF\n\t*/\n\tfunction pdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x < a || x > b ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn A * exp( B * pow( x - mu, 2.0 ) ) / C;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Truncated normal distribution probability density function (PDF).\n*\n* @module @stdlib/stats-base-dists-truncated-normal-pdf\n*\n* @example\n* import pdf from '@stdlib/stats-base-dists-truncated-normal-pdf';\n*\n* var y = pdf( 0.9, 0.0, 1.0, 0.0, 1.0 );\n* // returns ~0.7795\n*\n* var mypdf = pdf.factory( -1.0, 1.0, 0.0, 1.0 );\n* y = mypdf( 0.9 );\n* // returns ~0.5896\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport pdf from './pdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( pdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default pdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace truncatedNormal\n*/\nvar truncatedNormal = {};\n\n/**\n* @name pdf\n* @memberof truncatedNormal\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/truncated-normal/pdf}\n*/\nimport pdf from '@stdlib/stats-base-dists-truncated-normal-pdf';\nsetReadOnly( truncatedNormal, 'pdf', pdf );\n\n\n// EXPORTS //\n\nexport default truncatedNormal;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Evaluates the cumulative distribution function (CDF) for a uniform distribution with minimum support `a` and maximum support `b` at a value `x`.\n*\n* @param {number} x - input value\n* @param {number} a - minimum support\n* @param {number} b - maximum support\n* @returns {Probability} evaluated CDF\n*\n* @example\n* var y = cdf( 9.0, 0.0, 10.0 );\n* // returns 0.9\n*\n* @example\n* var y = cdf( 0.5, 0.0, 2.0 );\n* // returns 0.25\n*\n* @example\n* var y = cdf( +Infinity, 2.0, 4.0 );\n* // returns 1.0\n*\n* @example\n* var y = cdf( -Infinity, 2.0, 4.0 );\n* // returns 0.0\n*\n* @example\n* var y = cdf( NaN, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2.0, 1.0, 0.0 );\n* // returns NaN\n*/\nfunction cdf( x, a, b ) {\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\ta >= b\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x < a ) {\n\t\treturn 0.0;\n\t}\n\tif ( x >= b ) {\n\t\treturn 1.0;\n\t}\n\treturn ( x - a ) / ( b - a );\n}\n\n\n// EXPORTS //\n\nexport default cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport ln from '@stdlib/math-base-special-ln';\n\n\n// MAIN //\n\n/**\n* Returns the differential entropy of a uniform distribution.\n*\n* @param {number} a - minimum support\n* @param {number} b - maximum support\n* @returns {number} differential entropy\n*\n* @example\n* var v = entropy( 0.0, 1.0 );\n* // returns 0.0\n*\n* @example\n* var v = entropy( 4.0, 12.0 );\n* // returns ~2.079\n*\n* @example\n* var v = entropy( -4.0, 4.0 );\n* // returns ~2.079\n*\n* @example\n* var v = entropy( 1.0, -0.1 );\n* // returns NaN\n*\n* @example\n* var v = entropy( 2.0, NaN );\n* // returns NaN\n*\n* @example\n* var v = entropy( NaN, 2.0 );\n* // returns NaN\n*/\nfunction entropy( a, b ) {\n\tif (\n\t\ta >= b\n\t) {\n\t\treturn NaN;\n\t}\n\treturn ln( b-a );\n}\n\n\n// EXPORTS //\n\nexport default entropy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns the excess kurtosis of a uniform distribution.\n*\n* @param {number} a - minimum support\n* @param {number} b - maximum support\n* @returns {number} excess kurtosis\n*\n* @example\n* var v = kurtosis( 0.0, 1.0 );\n* // returns -1.2\n*\n* @example\n* var v = kurtosis( 4.0, 12.0 );\n* // returns -1.2\n*\n* @example\n* var v = kurtosis( -4.0, 4.0 );\n* // returns -1.2\n*\n* @example\n* var v = kurtosis( 1.0, -0.1 );\n* // returns NaN\n*\n* @example\n* var v = kurtosis( 2.0, NaN );\n* // returns NaN\n*\n* @example\n* var v = kurtosis( NaN, 2.0 );\n* // returns NaN\n*/\nfunction kurtosis( a, b ) {\n\tif (\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\ta >= b\n\t) {\n\t\treturn NaN;\n\t}\n\treturn -1.2;\n}\n\n\n// EXPORTS //\n\nexport default kurtosis;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns the expected value of a uniform distribution.\n*\n* @param {number} a - minimum support\n* @param {number} b - maximum support\n* @returns {number} expected value\n*\n* @example\n* var v = mean( 0.0, 1.0 );\n* // returns 0.5\n*\n* @example\n* var v = mean( 4.0, 12.0 );\n* // returns 8.0\n*\n* @example\n* var v = mean( -4.0, 4.0 );\n* // returns 0.0\n*\n* @example\n* var v = mean( 1.0, -0.1 );\n* // returns NaN\n*\n* @example\n* var v = mean( 2.0, NaN );\n* // returns NaN\n*\n* @example\n* var v = mean( NaN, 2.0 );\n* // returns NaN\n*/\nfunction mean( a, b ) {\n\tif (\n\t\ta >= b\n\t) {\n\t\treturn NaN;\n\t}\n\treturn 0.5 * ( a + b );\n}\n\n\n// EXPORTS //\n\nexport default mean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns the median of a uniform distribution.\n*\n* @param {number} a - minimum support\n* @param {number} b - maximum support\n* @returns {number} median\n*\n* @example\n* var v = median( 0.0, 1.0 );\n* // returns 0.5\n*\n* @example\n* var v = median( 4.0, 12.0 );\n* // returns 8.0\n*\n* @example\n* var v = median( -4.0, 4.0 );\n* // returns 0.0\n*\n* @example\n* var v = median( 1.0, -0.1 );\n* // returns NaN\n*\n* @example\n* var v = median( 2.0, NaN );\n* // returns NaN\n*\n* @example\n* var v = median( NaN, 2.0 );\n* // returns NaN\n*/\nfunction median( a, b ) {\n\tif (\n\t\ta >= b\n\t) {\n\t\treturn NaN;\n\t}\n\treturn 0.5 * ( a + b );\n}\n\n\n// EXPORTS //\n\nexport default median;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns the skewness of a uniform distribution.\n*\n* @param {number} a - minimum support\n* @param {number} b - maximum support\n* @returns {number} skewness\n*\n* @example\n* var v = skewness( 0.0, 1.0 );\n* // returns 0.0\n*\n* @example\n* var v = skewness( 4.0, 12.0 );\n* // returns 0.0\n*\n* @example\n* var v = skewness( -4.0, 4.0 );\n* // returns 0.0\n*\n* @example\n* var v = skewness( 1.0, -0.1 );\n* // returns NaN\n*\n* @example\n* var v = skewness( 2.0, NaN );\n* // returns NaN\n*\n* @example\n* var v = skewness( NaN, 2.0 );\n* // returns NaN\n*/\nfunction skewness( a, b ) {\n\tif (\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\ta >= b\n\t) {\n\t\treturn NaN;\n\t}\n\treturn 0.0;\n}\n\n\n// EXPORTS //\n\nexport default skewness;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Uniform distribution cumulative distribution function (CDF).\n*\n* @module @stdlib/stats-base-dists-uniform-cdf\n*\n* @example\n* import cdf from '@stdlib/stats-base-dists-uniform-cdf';\n*\n* var y = cdf( 5.0, 0.0, 4.0 );\n* // returns 1.0\n*\n* var mycdf = cdf.factory( 0.0, 10.0 );\n* y = mycdf( 0.5 );\n* // returns 0.05\n*\n* y = mycdf( 8.0 );\n* // returns 0.8\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport cdf from './cdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( cdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the cumulative distribution function (CDF) for a uniform distribution with minimum support `a` and maximum support `b`.\n*\n* @param {number} a - minimum support\n* @param {number} b - maximum support\n* @returns {Function} CDF\n*\n* @example\n* var cdf = factory( 0.0, 10.0 );\n* var y = cdf( 0.5 );\n* // returns 0.05\n*\n* y = cdf( 8.0 );\n* // returns 0.8\n*/\nfunction factory( a, b ) {\n\tif (\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\ta >= b\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn cdf;\n\n\t/**\n\t* Evaluates the cumulative distribution function (CDF) for a uniform distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated CDF\n\t*\n\t* @example\n\t* var y = cdf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction cdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x < a ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\tif ( x >= b ) {\n\t\t\treturn 1.0;\n\t\t}\n\t\treturn ( x - a ) / ( b - a );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport sqrt from '@stdlib/math-base-special-sqrt';\n\n\n// VARIABLES //\n\nvar SQRT1O12 = sqrt( 1.0/12.0 );\n\n\n// MAIN //\n\n/**\n* Returns the standard deviation of a uniform distribution.\n*\n* @param {number} a - minimum support\n* @param {number} b - maximum support\n* @returns {PositiveNumber} standard deviation\n*\n* @example\n* var v = stdev( 0.0, 1.0 );\n* // returns ~0.289\n*\n* @example\n* var v = stdev( 4.0, 12.0 );\n* // returns ~2.309\n*\n* @example\n* var v = stdev( -4.0, 4.0 );\n* // returns ~2.309\n*\n* @example\n* var v = stdev( 1.0, -0.1 );\n* // returns NaN\n*\n* @example\n* var v = stdev( 2.0, NaN );\n* // returns NaN\n*\n* @example\n* var v = stdev( NaN, 2.0 );\n* // returns NaN\n*/\nfunction stdev( a, b ) {\n\tif (\n\t\ta >= b\n\t) {\n\t\treturn NaN;\n\t}\n\treturn SQRT1O12 * ( b-a );\n}\n\n\n// EXPORTS //\n\nexport default stdev;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport pow from '@stdlib/math-base-special-pow';\n\n\n// MAIN //\n\n/**\n* Returns the variance of a uniform distribution.\n*\n* @param {number} a - minimum support\n* @param {number} b - maximum support\n* @returns {PositiveNumber} variance\n*\n* @example\n* var v = variance( 0.0, 1.0 );\n* // returns ~0.083\n*\n* @example\n* var v = variance( 4.0, 12.0 );\n* // returns ~5.333\n*\n* @example\n* var v = variance( -4.0, 4.0 );\n* // returns ~5.333\n*\n* @example\n* var v = variance( 1.0, -0.1 );\n* // returns NaN\n*\n* @example\n* var v = variance( 2.0, NaN );\n* // returns NaN\n*\n* @example\n* var v = variance( NaN, 2.0 );\n* // returns NaN\n*/\nfunction variance( a, b ) {\n\tif (\n\t\ta >= b\n\t) {\n\t\treturn NaN;\n\t}\n\treturn (1.0/12.0) * pow( b-a, 2.0 );\n}\n\n\n// EXPORTS //\n\nexport default variance;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport ln from '@stdlib/math-base-special-ln';\nimport NINF from '@stdlib/constants-float64-ninf';\n\n\n// MAIN //\n\n/**\n* Evaluates the logarithm of the cumulative distribution function (CDF) for a uniform distribution with minimum support `a` and maximum support `b` at a value `x`.\n*\n* @param {number} x - input value\n* @param {number} a - minimum support\n* @param {number} b - maximum support\n* @returns {number} evaluated logCDF\n*\n* @example\n* var y = logcdf( 9.0, 0.0, 10.0 );\n* // returns ~-0.105\n*\n* @example\n* var y = logcdf( 0.5, 0.0, 2.0 );\n* // returns ~-1.386\n*\n* @example\n* var y = logcdf( +Infinity, 2.0, 4.0 );\n* // returns 0.0\n*\n* @example\n* var y = logcdf( -Infinity, 2.0, 4.0 );\n* // returns -Infinity\n*\n* @example\n* var y = logcdf( NaN, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = logcdf( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = logcdf( 0.0, 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = logcdf( 2.0, 1.0, 0.0 );\n* // returns NaN\n*/\nfunction logcdf( x, a, b ) {\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\ta >= b\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x < a ) {\n\t\treturn NINF;\n\t}\n\tif ( x >= b ) {\n\t\treturn 0.0;\n\t}\n\treturn ln( ( x - a ) / ( b - a ) );\n}\n\n\n// EXPORTS //\n\nexport default logcdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport ln from '@stdlib/math-base-special-ln';\nimport NINF from '@stdlib/constants-float64-ninf';\n\n\n// MAIN //\n\n/**\n* Evaluates the logarithm of the probability density function (PDF) for a uniform distribution with minimum support `a` and maximum support `b` at a value `x`.\n*\n* @param {number} x - input value\n* @param {number} a - minimum support\n* @param {number} b - maximum support\n* @returns {number} evaluated logPDF\n*\n* @example\n* var y = logpdf( 2.0, 0.0, 4.0 );\n* // returns ~-1.386\n*\n* @example\n* var y = logpdf( 5.0, 0.0, 4.0 );\n* // returns -Infinity\n*\n* @example\n* var y = logpdf( 0.25, 0.0, 1.0 );\n* // returns 0.0\n*\n* @example\n* var y = logpdf( NaN, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = logpdf( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = logpdf( 0.0, 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = logpdf( 2.0, 3.0, 1.0 );\n* // returns NaN\n*/\nfunction logpdf( x, a, b ) {\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\ta >= b\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x < a || x > b ) {\n\t\treturn NINF;\n\t}\n\treturn -ln( b - a );\n}\n\n\n// EXPORTS //\n\nexport default logpdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport exp from '@stdlib/math-base-special-exp';\n\n\n// MAIN //\n\n/**\n* Evaluates the moment-generating function (MGF) of a uniform distribution with minimum support `a` and maximum support `b` at a value `t`.\n*\n* @param {number} t - input value\n* @param {number} a - minimum support\n* @param {number} b - maximum support\n* @returns {number} evaluated MGF\n*\n* @example\n* var y = mgf( 2.0, 0.0, 4.0 );\n* // returns ~372.495\n*\n* @example\n* var y = mgf( -0.2, 0.0, 4.0 );\n* // returns ~0.688\n*\n* @example\n* var y = mgf( 2.0, 0.0, 1.0 );\n* // returns ~3.195\n*\n* @example\n* var y = mgf( 0.5, 3.0, 2.0 );\n* // returns NaN\n*\n* @example\n* var y = mgf( 0.5, 3.0, 3.0 );\n* // returns NaN\n*\n* @example\n* var y = mgf( NaN, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = mgf( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = mgf( 0.0, 0.0, NaN );\n* // returns NaN\n*/\nfunction mgf( t, a, b ) {\n\tvar ret;\n\tif (\n\t\tisnan( t ) ||\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\ta >= b\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( t === 0.0 ) {\n\t\treturn 1.0;\n\t}\n\t// Case: t not equal to zero\n\tret = exp( t * b ) - exp( t * a );\n\tret /= t * ( b - a );\n\treturn ret;\n}\n\n\n// EXPORTS //\n\nexport default mgf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Evaluates the probability density function (PDF) for a uniform distribution with minimum support `a` and maximum support `b` at a value `x`.\n*\n* @param {number} x - input value\n* @param {number} a - minimum support\n* @param {number} b - maximum support\n* @returns {number} evaluated PDF\n*\n* @example\n* var y = pdf( 2.0, 0.0, 4.0 );\n* // returns 0.25\n*\n* @example\n* var y = pdf( 5.0, 0.0, 4.0 );\n* // returns 0.0\n*\n* @example\n* var y = pdf( 0.25, 0.0, 1.0 );\n* // returns 1.0\n*\n* @example\n* var y = pdf( NaN, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = pdf( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = pdf( 0.0, 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = pdf( 2.0, 3.0, 1.0 );\n* // returns NaN\n*/\nfunction pdf( x, a, b ) {\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\ta >= b\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x < a || x > b ) {\n\t\treturn 0.0;\n\t}\n\treturn 1.0 / ( b - a );\n}\n\n\n// EXPORTS //\n\nexport default pdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Evaluates the quantile function for a uniform distribution with minimum support `a` and maximum support `b` at a probability `p`.\n*\n* @param {Probability} p - input value\n* @param {number} a - minimum support\n* @param {number} b - maximum support\n* @returns {number} evaluated quantile function\n*\n* @example\n* var y = quantile( 0.8, 0.0, 1.0 );\n* // returns 0.8\n*\n* @example\n* var y = quantile( 0.5, 0.0, 10.0 );\n* // returns 5.0\n*\n* @example\n* var y = quantile( 1.1, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( -0.2, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( NaN, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.0, 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.5, 2.0, 1.0 );\n* // returns NaN\n*/\nfunction quantile( p, a, b ) {\n\tif (\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\ta >= b\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( isnan( p ) || p < 0.0 || p > 1.0 ) {\n\t\treturn NaN;\n\t}\n\treturn a + ( p * ( b - a ) );\n}\n\n\n// EXPORTS //\n\nexport default quantile;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nimport defineProperty from '@stdlib/utils-define-property';\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport setReadOnlyAccessor from '@stdlib/utils-define-nonenumerable-read-only-accessor';\nimport { isPrimitive as isNumber } from '@stdlib/assert-is-number';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport entropy from '@stdlib/stats-base-dists-uniform-entropy';\nimport kurtosis from '@stdlib/stats-base-dists-uniform-kurtosis';\nimport mean from '@stdlib/stats-base-dists-uniform-mean';\nimport median from '@stdlib/stats-base-dists-uniform-median';\nimport skewness from '@stdlib/stats-base-dists-uniform-skewness';\nimport stdev from '@stdlib/stats-base-dists-uniform-stdev';\nimport variance from '@stdlib/stats-base-dists-uniform-variance';\nimport cdf from '@stdlib/stats-base-dists-uniform-cdf';\nimport logcdf from '@stdlib/stats-base-dists-uniform-logcdf';\nimport logpdf from '@stdlib/stats-base-dists-uniform-logpdf';\nimport mgf from '@stdlib/stats-base-dists-uniform-mgf';\nimport pdf from '@stdlib/stats-base-dists-uniform-pdf';\nimport quantile from '@stdlib/stats-base-dists-uniform-quantile';\nimport format from '@stdlib/string-format';\n\n\n// FUNCTIONS //\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {Probability} evaluated CDF\n*/\nfunction uniformCDF( x ) {\n\treturn cdf( x, this.a, this.b );\n}\n\n/**\n* Evaluates the the natural logarithm of the cumulative distribution function (logCDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {Probability} evaluated logCDF\n*/\nfunction uniformLogCDF( x ) {\n\treturn logcdf( x, this.a, this.b );\n}\n\n/**\n* Evaluates the natural logarithm of the probability density function (logPDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n*/\nfunction uniformLogPDF( x ) {\n\treturn logpdf( x, this.a, this.b );\n}\n\n/**\n* Evaluates the moment-generating function (MGF).\n*\n* @private\n* @param {number} t - input value\n* @returns {number} evaluated MGF\n*/\nfunction uniformMGF( t ) {\n\treturn mgf( t, this.a, this.b );\n}\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n*/\nfunction uniformPDF( x ) {\n\treturn pdf( x, this.a, this.b );\n}\n\n/**\n* Evaluates the quantile function.\n*\n* @private\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n*/\nfunction uniformQuantile( p ) {\n\treturn quantile( p, this.a, this.b );\n}\n\n\n// MAIN //\n\n/**\n* Uniform distribution constructor.\n*\n* @constructor\n* @param {number} [a=0.0] - minimum support\n* @param {number} [b=1.0] - maximum support\n* @throws {TypeError} `a` must be a number\n* @throws {TypeError} `b` must be a number\n* @throws {RangeError} `a` must be less than `b`\n* @returns {Uniform} distribution instance\n*\n* @example\n* var uniform = new Uniform( 0.0, 1.0 );\n*\n* var y = uniform.cdf( 0.8 );\n* // returns 0.8\n*\n* var mu = uniform.mean;\n* // returns 0.5\n*/\nfunction Uniform() {\n\tvar a;\n\tvar b;\n\tif ( !(this instanceof Uniform) ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn new Uniform();\n\t\t}\n\t\treturn new Uniform( arguments[ 0 ], arguments[ 1 ] );\n\t}\n\tif ( arguments.length ) {\n\t\ta = arguments[ 0 ];\n\t\tb = arguments[ 1 ];\n\t\tif ( !isNumber( a ) || isnan( a ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Minimum support must be a number. Value: `%s`.', a ) );\n\t\t}\n\t\tif ( !isNumber( b ) || isnan( b ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Maximum support must be a number. Value: `%s`.', b ) );\n\t\t}\n\t\tif ( a >= b ) {\n\t\t\tthrow new RangeError( format( 'invalid arguments. Minimum support must be less than maximum support. Value: `(%f, %f)`.', a, b ) );\n\t\t}\n\t} else {\n\t\ta = 0.0;\n\t\tb = 1.0;\n\t}\n\tdefineProperty( this, 'a', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn a;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isNumber( value ) || isnan( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid assignment. Must be a number. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\tif ( value >= b ) {\n\t\t\t\tthrow new RangeError( format( 'invalid assignment. Must be less than %f. Value: `%f`.', b, value ) );\n\t\t\t}\n\t\t\ta = value;\n\t\t}\n\t});\n\tdefineProperty( this, 'b', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn b;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isNumber( value ) || isnan( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid assignment. Must be a number. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\tif ( a >= value ) {\n\t\t\t\tthrow new RangeError( format( 'invalid assignment. Must be greater than %f. Value: `%f`.', a, value ) );\n\t\t\t}\n\t\t\tb = value;\n\t\t}\n\t});\n\treturn this;\n}\n\n/**\n* Uniform distribution differential entropy.\n*\n* @name entropy\n* @memberof Uniform.prototype\n* @type {number}\n* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}\n*\n* @example\n* var uniform = new Uniform( 4.0, 12.0 );\n*\n* var v = uniform.entropy;\n* // returns ~2.079\n*/\nsetReadOnlyAccessor( Uniform.prototype, 'entropy', function get() {\n\treturn entropy( this.a, this.b );\n});\n\n/**\n* Uniform distribution excess kurtosis.\n*\n* @name kurtosis\n* @memberof Uniform.prototype\n* @type {number}\n* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}\n*\n* @example\n* var uniform = new Uniform( 4.0, 12.0 );\n*\n* var v = uniform.kurtosis;\n* // returns -1.2\n*/\nsetReadOnlyAccessor( Uniform.prototype, 'kurtosis', function get() {\n\treturn kurtosis( this.a, this.b );\n});\n\n/**\n* Uniform distribution expected value.\n*\n* @name mean\n* @memberof Uniform.prototype\n* @type {number}\n* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}\n*\n* @example\n* var uniform = new Uniform( 4.0, 12.0 );\n*\n* var v = uniform.mean;\n* // returns 8.0\n*/\nsetReadOnlyAccessor( Uniform.prototype, 'mean', function get() {\n\treturn mean( this.a, this.b );\n});\n\n/**\n* Uniform distribution median.\n*\n* @name median\n* @memberof Uniform.prototype\n* @type {number}\n* @see [median]{@link https://en.wikipedia.org/wiki/Median}\n*\n* @example\n* var uniform = new Uniform( 4.0, 12.0 );\n*\n* var v = uniform.median;\n* // returns 8.0\n*/\nsetReadOnlyAccessor( Uniform.prototype, 'median', function get() {\n\treturn median( this.a, this.b );\n});\n\n/**\n* Uniform distribution skewness.\n*\n* @name skewness\n* @memberof Uniform.prototype\n* @type {number}\n* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}\n*\n* @example\n* var uniform = new Uniform( 4.0, 12.0 );\n*\n* var v = uniform.skewness;\n* // returns 0.0\n*/\nsetReadOnlyAccessor( Uniform.prototype, 'skewness', function get() {\n\treturn skewness( this.a, this.b );\n});\n\n/**\n* Uniform distribution standard deviation.\n*\n* @name stdev\n* @memberof Uniform.prototype\n* @type {PositiveNumber}\n* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}\n*\n* @example\n* var uniform = new Uniform( 4.0, 12.0 );\n*\n* var v = uniform.stdev;\n* // returns ~2.309\n*/\nsetReadOnlyAccessor( Uniform.prototype, 'stdev', function get() {\n\treturn stdev( this.a, this.b );\n});\n\n/**\n* Uniform distribution variance.\n*\n* @name variance\n* @memberof Uniform.prototype\n* @type {PositiveNumber}\n* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}\n*\n* @example\n* var uniform = new Uniform( 4.0, 12.0 );\n*\n* var v = uniform.variance;\n* // returns ~5.333\n*/\nsetReadOnlyAccessor( Uniform.prototype, 'variance', function get() {\n\treturn variance( this.a, this.b );\n});\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @name cdf\n* @memberof Uniform.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var uniform = new Uniform( 2.0, 4.0 );\n*\n* var v = uniform.cdf( 3.0 );\n* // returns ~0.5\n*/\nsetReadOnly( Uniform.prototype, 'cdf', uniformCDF );\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (logCDF).\n*\n* @name logcdf\n* @memberof Uniform.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logCDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var uniform = new Uniform( 2.0, 4.0 );\n*\n* var v = uniform.logcdf( 2.5 );\n* // returns ~-1.386\n*/\nsetReadOnly( Uniform.prototype, 'logcdf', uniformLogCDF );\n\n/**\n* Evaluates the natural logarithm of the probability density function (logPDF).\n*\n* @name logpdf\n* @memberof Uniform.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var uniform = new Uniform( 2.0, 4.0 );\n*\n* var v = uniform.logpdf( 2.5 );\n* // returns ~-0.693\n*/\nsetReadOnly( Uniform.prototype, 'logpdf', uniformLogPDF );\n\n/**\n* Evaluates the moment-generating function (MGF).\n*\n* @name mgf\n* @memberof Uniform.prototype\n* @type {Function}\n* @param {number} t - input value\n* @returns {number} evaluated MGF\n* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}\n*\n* @example\n* var uniform = new Uniform( 2.0, 4.0 );\n*\n* var v = uniform.mgf( 0.5 );\n* // returns ~4.671\n*/\nsetReadOnly( Uniform.prototype, 'mgf', uniformMGF );\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @name pdf\n* @memberof Uniform.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var uniform = new Uniform( 2.0, 4.0 );\n*\n* var v = uniform.pdf( 2.4 );\n* // returns 0.5\n*/\nsetReadOnly( Uniform.prototype, 'pdf', uniformPDF );\n\n/**\n* Evaluates the quantile function.\n*\n* @name quantile\n* @memberof Uniform.prototype\n* @type {Function}\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}\n*\n* @example\n* var uniform = new Uniform( 2.0, 4.0 );\n*\n* var v = uniform.quantile( 0.5 );\n* // returns 3.0\n*/\nsetReadOnly( Uniform.prototype, 'quantile', uniformQuantile );\n\n\n// EXPORTS //\n\nexport default Uniform;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Uniform distribution logarithm of cumulative distribution function (CDF).\n*\n* @module @stdlib/stats-base-dists-uniform-logcdf\n*\n* @example\n* import logcdf from '@stdlib/stats-base-dists-uniform-logcdf';\n*\n* var y = logcdf( 5.0, 0.0, 4.0 );\n* // returns 0.0\n*\n* var mylogcdf = logcdf.factory( 0.0, 10.0 );\n* y = mylogcdf( 0.5 );\n* // returns ~-2.996\n*\n* y = mylogcdf( 8.0 );\n* // returns ~-0.223\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport logcdf from './logcdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( logcdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default logcdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport ln from '@stdlib/math-base-special-ln';\nimport NINF from '@stdlib/constants-float64-ninf';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the logarithm of the cumulative distribution function (CDF) for a uniform distribution with minimum support `a` and maximum support `b`.\n*\n* @param {number} a - minimum support\n* @param {number} b - maximum support\n* @returns {Function} logCDF\n*\n* @example\n* var logcdf = factory( 0.0, 10.0 );\n* var y = logcdf( 0.5 );\n* // returns ~-2.996\n*\n* y = logcdf( 8.0 );\n* // returns ~-0.223\n*/\nfunction factory( a, b ) {\n\tif (\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\ta >= b\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn logcdf;\n\n\t/**\n\t* Evaluates the logarithm of the cumulative distribution function (CDF) for a uniform distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {number} evaluated logCDF\n\t*\n\t* @example\n\t* var y = logcdf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction logcdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x < a ) {\n\t\t\treturn NINF;\n\t\t}\n\t\tif ( x >= b ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn ln( ( x - a ) / ( b - a ) );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Uniform distribution logarithm of probability density function (PDF).\n*\n* @module @stdlib/stats-base-dists-uniform-logpdf\n*\n* @example\n* import logpdf from '@stdlib/stats-base-dists-uniform-logpdf';\n*\n* var y = logpdf( 3.0, 2.0, 6.0 );\n* // returns ~-1.386\n*\n* var mylogPDF = logpdf.factory( 6.0, 7.0 );\n* y = mylogPDF( 7.0 );\n* // returns 0.0\n*\n* y = mylogPDF( 5.0 );\n* // returns -Infinity\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport logpdf from './logpdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( logpdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default logpdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport ln from '@stdlib/math-base-special-ln';\nimport NINF from '@stdlib/constants-float64-ninf';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the logarithm of the probability density function (PDF) for a uniform distribution with minimum support `a` and maximum support `b`.\n*\n* @param {number} a - minimum support\n* @param {number} b - maximum support\n* @returns {Function} logPDF\n*\n* @example\n* var logpdf = factory( 0.0, 10.0 );\n* var y = logpdf( 2.0 );\n* // returns ~-2.303\n*\n* y = logpdf( 12.0 );\n* // returns -Infinity\n*/\nfunction factory( a, b ) {\n\tif (\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\ta >= b\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn logpdf;\n\n\t/**\n\t* Evaluates the logarithm of the probability density function (PDF) for a uniform distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {number} evaluated logPDF\n\t*\n\t* @example\n\t* var y = logpdf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction logpdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x < a || x > b ) {\n\t\t\treturn NINF;\n\t\t}\n\t\treturn -ln( b - a );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate the moment-generating function (MGF) of a uniform distribution.\n*\n* @module @stdlib/stats-base-dists-uniform-mgf\n*\n* @example\n* import mgf from '@stdlib/stats-base-dists-uniform-mgf';\n*\n* var y = mgf( 2.0, 0.0, 4.0 );\n* // returns ~372.495\n*\n* y = mgf( -0.2, 0.0, 4.0 );\n* // returns ~0.688\n*\n* y = mgf( 2.0, 0.0, 1.0 );\n* // returns ~3.195\n*\n* var mymgf = mgf.factory( 6.0, 7.0 );\n* y = mymgf( 0.1 );\n* // returns ~1.916\n*\n* y = mymgf( 1.1 );\n* // returns ~1339.321\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport mgf from './mgf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( mgf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default mgf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport exp from '@stdlib/math-base-special-exp';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the moment-generating function (MGF) of a uniform distribution with minimum support `a` and maximum support `b`.\n*\n* @param {number} a - minimum support\n* @param {number} b - maximum support\n* @returns {Function} MGF\n*\n* @example\n* var mgf = factory( 6.0, 7.0 );\n* var y = mgf( 0.1 );\n* // returns ~1.916\n*\n* y = mgf( 1.1 );\n* // returns ~1339.321\n*/\nfunction factory( a, b ) {\n\tif (\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\ta >= b\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn mgf;\n\n\t/**\n\t* Evaluates the moment-generating function (MGF) of a uniform distribution.\n\t*\n\t* @private\n\t* @param {number} t - input value\n\t* @returns {number} evaluated MGF\n\t*\n\t* @example\n\t* var y = mgf( 0.5 );\n\t* // returns <number>\n\t*/\n\tfunction mgf( t ) {\n\t\tvar ret;\n\t\tif ( isnan( t ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( t === 0.0 ) {\n\t\t\treturn 1.0;\n\t\t}\n\t\t// Case: t not equal to zero\n\t\tret = exp( t * b ) - exp( t * a );\n\t\tret /= t * ( b - a );\n\t\treturn ret;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Uniform distribution probability density function (PDF).\n*\n* @module @stdlib/stats-base-dists-uniform-pdf\n*\n* @example\n* import pdf from '@stdlib/stats-base-dists-uniform-pdf';\n*\n* var y = pdf( 3.0, 2.0, 6.0 );\n* // returns 0.25\n*\n* var myPDF = pdf.factory( 6.0, 7.0 );\n* y = myPDF( 7.0 );\n* // returns 1.0\n*\n* y = myPDF( 5.0 );\n* // returns 0.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport pdf from './pdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( pdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default pdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the probability density function (PDF) for a uniform distribution with minimum support `a` and maximum support `b`.\n*\n* @param {number} a - minimum support\n* @param {number} b - maximum support\n* @returns {Function} PDF\n*\n* @example\n* var pdf = factory( 0.0, 10.0 );\n* var y = pdf( 2.0 );\n* // returns 0.1\n*\n* y = pdf( 12.0 );\n* // returns 0.0\n*/\nfunction factory( a, b ) {\n\tif (\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\ta >= b\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn pdf;\n\n\t/**\n\t* Evaluates the probability density function (PDF) for a uniform distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {number} evaluated PDF\n\t*\n\t* @example\n\t* var y = pdf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction pdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x < a || x > b ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn 1.0 / ( b - a );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Uniform distribution quantile function.\n*\n* @module @stdlib/stats-base-dists-uniform-quantile\n*\n* @example\n* import quantile from '@stdlib/stats-base-dists-uniform-quantile';\n*\n* var y = quantile( 0.5, 0.0, 10.0 );\n* // returns 5.0\n*\n* y = quantile( 0.8, 0.0, 1.0 );\n* // returns 0.8\n*\n* var myQuantile = quantile.factory( 0.0, 4.0 );\n* y = myQuantile( 0.8 );\n* // returns 3.2\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport quantile from './quantile.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( quantile, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default quantile;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the quantile function for a uniform distribution with minimum support `a` an maximum support `b`.\n*\n* @param {number} a - minimum support\n* @param {number} b - maximum support\n* @returns {Function} quantile function\n*\n* @example\n* var quantile = factory( 2.0, 4.0 );\n* var y = quantile( 0.4 );\n* // returns 2.8\n*\n* y = quantile( 0.8 );\n* // returns 3.6\n*/\nfunction factory( a, b ) {\n\tif (\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\ta >= b\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn quantile;\n\n\t/**\n\t* Evaluates the quantile function for a uniform distribution.\n\t*\n\t* @private\n\t* @param {Probability} p - input value\n\t* @returns {number} evaluated quantile function\n\t*\n\t* @example\n\t* var y = quantile( 0.3 );\n\t* // returns <number>\n\t*/\n\tfunction quantile( p ) {\n\t\tif ( isnan( p ) || p < 0.0 || p > 1.0 ) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn a + ( p * ( b - a ) );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace uniform\n*/\nvar uniform = {};\n\n/**\n* @name cdf\n* @memberof uniform\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/uniform/cdf}\n*/\nimport cdf from '@stdlib/stats-base-dists-uniform-cdf';\nsetReadOnly( uniform, 'cdf', cdf );\n\n/**\n* @name Uniform\n* @memberof uniform\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/uniform/ctor}\n*/\nimport Uniform from '@stdlib/stats-base-dists-uniform-ctor';\nsetReadOnly( uniform, 'Uniform', Uniform );\n\n/**\n* @name entropy\n* @memberof uniform\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/uniform/entropy}\n*/\nimport entropy from '@stdlib/stats-base-dists-uniform-entropy';\nsetReadOnly( uniform, 'entropy', entropy );\n\n/**\n* @name kurtosis\n* @memberof uniform\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/uniform/kurtosis}\n*/\nimport kurtosis from '@stdlib/stats-base-dists-uniform-kurtosis';\nsetReadOnly( uniform, 'kurtosis', kurtosis );\n\n/**\n* @name logcdf\n* @memberof uniform\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/uniform/logcdf}\n*/\nimport logcdf from '@stdlib/stats-base-dists-uniform-logcdf';\nsetReadOnly( uniform, 'logcdf', logcdf );\n\n/**\n* @name logpdf\n* @memberof uniform\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/uniform/logpdf}\n*/\nimport logpdf from '@stdlib/stats-base-dists-uniform-logpdf';\nsetReadOnly( uniform, 'logpdf', logpdf );\n\n/**\n* @name mean\n* @memberof uniform\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/uniform/mean}\n*/\nimport mean from '@stdlib/stats-base-dists-uniform-mean';\nsetReadOnly( uniform, 'mean', mean );\n\n/**\n* @name median\n* @memberof uniform\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/uniform/median}\n*/\nimport median from '@stdlib/stats-base-dists-uniform-median';\nsetReadOnly( uniform, 'median', median );\n\n/**\n* @name mgf\n* @memberof uniform\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/uniform/mgf}\n*/\nimport mgf from '@stdlib/stats-base-dists-uniform-mgf';\nsetReadOnly( uniform, 'mgf', mgf );\n\n/**\n* @name pdf\n* @memberof uniform\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/uniform/pdf}\n*/\nimport pdf from '@stdlib/stats-base-dists-uniform-pdf';\nsetReadOnly( uniform, 'pdf', pdf );\n\n/**\n* @name quantile\n* @memberof uniform\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/uniform/quantile}\n*/\nimport quantile from '@stdlib/stats-base-dists-uniform-quantile';\nsetReadOnly( uniform, 'quantile', quantile );\n\n/**\n* @name skewness\n* @memberof uniform\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/uniform/skewness}\n*/\nimport skewness from '@stdlib/stats-base-dists-uniform-skewness';\nsetReadOnly( uniform, 'skewness', skewness );\n\n/**\n* @name stdev\n* @memberof uniform\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/uniform/stdev}\n*/\nimport stdev from '@stdlib/stats-base-dists-uniform-stdev';\nsetReadOnly( uniform, 'stdev', stdev );\n\n/**\n* @name variance\n* @memberof uniform\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/uniform/variance}\n*/\nimport variance from '@stdlib/stats-base-dists-uniform-variance';\nsetReadOnly( uniform, 'variance', variance );\n\n\n// EXPORTS //\n\nexport default uniform;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport expm1 from '@stdlib/math-base-special-expm1';\nimport pow from '@stdlib/math-base-special-pow';\n\n\n// MAIN //\n\n/**\n* Evaluates the cumulative distribution function (CDF) for a Weibull distribution with scale parameter `k` and shape parameter `lambda` at a value `x`.\n*\n* @param {number} x - input value\n* @param {PositiveNumber} k - scale parameter\n* @param {PositiveNumber} lambda - shape parameter\n* @returns {Probability} evaluated CDF\n*\n* @example\n* var y = cdf( 2.0, 1.0, 1.0 );\n* // returns ~0.865\n*\n* @example\n* var y = cdf( -1.0, 2.0, 2.0 );\n* // returns 0.0\n*\n* @example\n* var y = cdf( +Infinity, 4.0, 2.0 );\n* // returns 1.0\n*\n* @example\n* var y = cdf( -Infinity, 4.0, 2.0 );\n* // returns 0.0\n*\n* @example\n* var y = cdf( NaN, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2.0, 0.0, -1.0 );\n* // returns NaN\n*/\nfunction cdf( x, k, lambda ) {\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( k ) ||\n\t\tisnan( lambda ) ||\n\t\tk <= 0.0 ||\n\t\tlambda <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x < 0.0 ) {\n\t\treturn 0.0;\n\t}\n\treturn -expm1( -pow( x / lambda, k ) );\n}\n\n\n// EXPORTS //\n\nexport default cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport ln from '@stdlib/math-base-special-ln';\nimport GAMMA from '@stdlib/constants-float64-eulergamma';\n\n\n// MAIN //\n\n/**\n* Returns the differential entropy of a Weibull distribution.\n*\n* @param {PositiveNumber} k - shape parameter\n* @param {PositiveNumber} lambda - scale parameter\n* @returns {number} entropy\n*\n* @example\n* var v = entropy( 1.0, 1.0 );\n* // returns 1.0\n*\n* @example\n* var v = entropy( 4.0, 12.0 );\n* // returns ~2.532\n*\n* @example\n* var v = entropy( 8.0, 2.0 );\n* // returns ~0.119\n*\n* @example\n* var v = entropy( 1.0, -0.1 );\n* // returns NaN\n*\n* @example\n* var v = entropy( -0.1, 1.0 );\n* // returns NaN\n*\n* @example\n* var v = entropy( 2.0, NaN );\n* // returns NaN\n*\n* @example\n* var v = entropy( NaN, 2.0 );\n* // returns NaN\n*/\nfunction entropy( k, lambda ) {\n\tif (\n\t\tisnan( k ) ||\n\t\tisnan( lambda ) ||\n\t\tk <= 0.0 ||\n\t\tlambda <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn ( GAMMA * ( 1.0 - (1.0/k) ) ) + ln( lambda/k ) + 1.0;\n}\n\n\n// EXPORTS //\n\nexport default entropy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport gamma from '@stdlib/math-base-special-gamma';\nimport pow from '@stdlib/math-base-special-pow';\n\n\n// MAIN //\n\n/**\n* Returns the excess kurtosis of a Weibull distribution.\n*\n* @param {PositiveNumber} k - shape parameter\n* @param {PositiveNumber} lambda - scale parameter\n* @returns {number} kurtosis\n*\n* @example\n* var v = kurtosis( 1.0, 1.0 );\n* // returns 6.0\n*\n* @example\n* var v = kurtosis( 4.0, 12.0 );\n* // returns ~-0.252\n*\n* @example\n* var v = kurtosis( 8.0, 2.0 );\n* // returns ~0.328\n*\n* @example\n* var v = kurtosis( 1.0, -0.1 );\n* // returns NaN\n*\n* @example\n* var v = kurtosis( -0.1, 1.0 );\n* // returns NaN\n*\n* @example\n* var v = kurtosis( 2.0, NaN );\n* // returns NaN\n*\n* @example\n* var v = kurtosis( NaN, 2.0 );\n* // returns NaN\n*/\nfunction kurtosis( k, lambda ) {\n\tvar out;\n\tvar g4;\n\tvar g3;\n\tvar g2;\n\tvar g1;\n\tif (\n\t\tisnan( k ) ||\n\t\tisnan( lambda ) ||\n\t\tk <= 0.0 ||\n\t\tlambda <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tg1 = gamma( 1.0 + (1.0/k) );\n\tg2 = gamma( 1.0 + (2.0/k) );\n\tg3 = gamma( 1.0 + (3.0/k) );\n\tg4 = gamma( 1.0 + (4.0/k) );\n\tout = (-6.0*pow(g1, 4.0)) + (12.0*g1*g1*g2) - (3.0*g2*g2)- (4.0*g1*g3) + g4;\n\tout /= pow( g2 - (g1*g1), 2.0 );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default kurtosis;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport gamma from '@stdlib/math-base-special-gamma';\n\n\n// MAIN //\n\n/**\n* Returns the expected value of a Weibull distribution.\n*\n* @param {PositiveNumber} k - shape parameter\n* @param {PositiveNumber} lambda - scale parameter\n* @returns {PositiveNumber} expected value\n*\n* @example\n* var v = mean( 1.0, 1.0 );\n* // returns 1.0\n*\n* @example\n* var v = mean( 4.0, 12.0 );\n* // returns ~10.877\n*\n* @example\n* var v = mean( 8.0, 2.0 );\n* // returns ~1.883\n*\n* @example\n* var v = mean( 1.0, -0.1 );\n* // returns NaN\n*\n* @example\n* var v = mean( -0.1, 1.0 );\n* // returns NaN\n*\n* @example\n* var v = mean( 2.0, NaN );\n* // returns NaN\n*\n* @example\n* var v = mean( NaN, 2.0 );\n* // returns NaN\n*/\nfunction mean( k, lambda ) {\n\tif (\n\t\tisnan( k ) ||\n\t\tisnan( lambda ) ||\n\t\tk <= 0.0 ||\n\t\tlambda <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn lambda * gamma( 1.0 + ( 1.0/k ) );\n}\n\n\n// EXPORTS //\n\nexport default mean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport pow from '@stdlib/math-base-special-pow';\nimport LN2 from '@stdlib/constants-float64-ln-two';\n\n\n// MAIN //\n\n/**\n* Returns the median of a Weibull distribution.\n*\n* @param {PositiveNumber} k - shape parameter\n* @param {PositiveNumber} lambda - scale parameter\n* @returns {PositiveNumber} median\n*\n* @example\n* var v = median( 1.0, 1.0 );\n* // returns ~0.693\n*\n* @example\n* var v = median( 4.0, 12.0 );\n* // returns ~10.949\n*\n* @example\n* var v = median( 8.0, 2.0 );\n* // returns ~1.91\n*\n* @example\n* var v = median( 1.0, -0.1 );\n* // returns NaN\n*\n* @example\n* var v = median( -0.1, 1.0 );\n* // returns NaN\n*\n* @example\n* var v = median( 2.0, NaN );\n* // returns NaN\n*\n* @example\n* var v = median( NaN, 2.0 );\n* // returns NaN\n*/\nfunction median( k, lambda ) {\n\tif (\n\t\tisnan( k ) ||\n\t\tisnan( lambda ) ||\n\t\tk <= 0.0 ||\n\t\tlambda <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn lambda * pow( LN2, 1.0/k );\n}\n\n\n// EXPORTS //\n\nexport default median;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport pow from '@stdlib/math-base-special-pow';\n\n\n// MAIN //\n\n/**\n* Returns the mode of a Weibull distribution.\n*\n* @param {PositiveNumber} k - shape parameter\n* @param {PositiveNumber} lambda - scale parameter\n* @returns {NonNegativeNumber} mode\n*\n* @example\n* var v = mode( 1.0, 1.0 );\n* // returns 0.0\n*\n* @example\n* var v = mode( 4.0, 12.0 );\n* // returns ~11.167\n*\n* @example\n* var v = mode( 8.0, 2.0 );\n* // returns ~1.967\n*\n* @example\n* var v = mode( 1.0, -0.1 );\n* // returns NaN\n*\n* @example\n* var v = mode( -0.1, 1.0 );\n* // returns NaN\n*\n* @example\n* var v = mode( 2.0, NaN );\n* // returns NaN\n*\n* @example\n* var v = mode( NaN, 2.0 );\n* // returns NaN\n*/\nfunction mode( k, lambda ) {\n\tif (\n\t\tisnan( k ) ||\n\t\tisnan( lambda ) ||\n\t\tk <= 0.0 ||\n\t\tlambda <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( k <= 1.0 ) {\n\t\treturn 0.0;\n\t}\n\treturn lambda * pow( ( k-1.0 ) / k, 1.0/k );\n}\n\n\n// EXPORTS //\n\nexport default mode;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport gamma from '@stdlib/math-base-special-gamma';\nimport mean from '@stdlib/stats-base-dists-weibull-mean';\n\n\n// MAIN //\n\n/**\n* Returns the variance of a Weibull distribution.\n*\n* @param {PositiveNumber} k - shape parameter\n* @param {PositiveNumber} lambda - scale parameter\n* @returns {PositiveNumber} variance\n*\n* @example\n* var v = variance( 1.0, 1.0 );\n* // returns 1.0\n*\n* @example\n* var v = variance( 4.0, 12.0 );\n* // returns ~9.311\n*\n* @example\n* var v = variance( 8.0, 2.0 );\n* // returns ~0.078\n*\n* @example\n* var v = variance( 1.0, -0.1 );\n* // returns NaN\n*\n* @example\n* var v = variance( -0.1, 1.0 );\n* // returns NaN\n*\n* @example\n* var v = variance( 2.0, NaN );\n* // returns NaN\n*\n* @example\n* var v = variance( NaN, 2.0 );\n* // returns NaN\n*/\nfunction variance( k, lambda ) {\n\tvar mu;\n\tif (\n\t\tisnan( k ) ||\n\t\tisnan( lambda ) ||\n\t\tk <= 0.0 ||\n\t\tlambda <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tmu = mean( k, lambda );\n\treturn ( lambda*lambda * ( gamma( 1.0 + (2.0/k) ) ) ) - ( mu*mu );\n}\n\n\n// EXPORTS //\n\nexport default variance;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport variance from '@stdlib/stats-base-dists-weibull-variance';\nimport gamma from '@stdlib/math-base-special-gamma';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport mean from '@stdlib/stats-base-dists-weibull-mean';\nimport pow from '@stdlib/math-base-special-pow';\n\n\n// MAIN //\n\n/**\n* Returns the skewness of a Weibull distribution.\n*\n* @param {PositiveNumber} k - shape parameter\n* @param {PositiveNumber} lambda - scale parameter\n* @returns {number} skewness\n*\n* @example\n* var v = skewness( 1.0, 1.0 );\n* // returns 2.0\n*\n* @example\n* var v = skewness( 4.0, 12.0 );\n* // returns ~-0.087\n*\n* @example\n* var v = skewness( 8.0, 2.0 );\n* // returns ~-0.534\n*\n* @example\n* var v = skewness( 1.0, -0.1 );\n* // returns NaN\n*\n* @example\n* var v = skewness( -0.1, 1.0 );\n* // returns NaN\n*\n* @example\n* var v = skewness( 2.0, NaN );\n* // returns NaN\n*\n* @example\n* var v = skewness( NaN, 2.0 );\n* // returns NaN\n*/\nfunction skewness( k, lambda ) {\n\tvar sigma2;\n\tvar sigma;\n\tvar out;\n\tvar mu;\n\tif (\n\t\tisnan( k ) ||\n\t\tisnan( lambda ) ||\n\t\tk <= 0.0 ||\n\t\tlambda <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tmu = mean( k, lambda );\n\tsigma2 = variance( k, lambda);\n\tsigma = sqrt( sigma2 );\n\tout = gamma( 1.0 + ( 3.0/k ) ) * pow( lambda, 3.0 );\n\tout -= ( 3.0*mu*sigma2 ) + pow( mu, 3.0 );\n\tout /= pow( sigma, 3.0 );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default skewness;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport gamma from '@stdlib/math-base-special-gamma';\nimport sqrt from '@stdlib/math-base-special-sqrt';\n\n\n// MAIN //\n\n/**\n* Returns the standard deviation of a Weibull distribution.\n*\n* @param {PositiveNumber} k - shape parameter\n* @param {PositiveNumber} lambda - scale parameter\n* @returns {PositiveNumber} standard deviation\n*\n* @example\n* var v = stdev( 1.0, 1.0 );\n* // returns 1.0\n*\n* @example\n* var v = stdev( 4.0, 12.0 );\n* // returns ~3.051\n*\n* @example\n* var v = stdev( 8.0, 2.0 );\n* // returns ~0.279\n*\n* @example\n* var v = stdev( 1.0, -0.1 );\n* // returns NaN\n*\n* @example\n* var v = stdev( -0.1, 1.0 );\n* // returns NaN\n*\n* @example\n* var v = stdev( 2.0, NaN );\n* // returns NaN\n*\n* @example\n* var v = stdev( NaN, 2.0 );\n* // returns NaN\n*/\nfunction stdev( k, lambda ) {\n\tvar g1k;\n\tif (\n\t\tisnan( k ) ||\n\t\tisnan( lambda ) ||\n\t\tk <= 0.0 ||\n\t\tlambda <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tg1k = gamma( 1.0 + ( 1.0/k ) );\n\treturn lambda * sqrt( gamma( 1.0 + ( 2.0/k ) ) - ( g1k*g1k ) );\n}\n\n\n// EXPORTS //\n\nexport default stdev;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport expm1 from '@stdlib/math-base-special-expm1';\nimport log1p from '@stdlib/math-base-special-log1p';\nimport exp from '@stdlib/math-base-special-exp';\nimport pow from '@stdlib/math-base-special-pow';\nimport ln from '@stdlib/math-base-special-ln';\nimport LNHALF from '@stdlib/constants-float64-ln-half';\nimport NINF from '@stdlib/constants-float64-ninf';\n\n\n// MAIN //\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (CDF) for a Weibull distribution with scale parameter `k` and shape parameter `lambda` at a value `x`.\n*\n* @param {number} x - input value\n* @param {PositiveNumber} k - scale parameter\n* @param {PositiveNumber} lambda - shape parameter\n* @returns {number} natural logarithm of CDF\n*\n* @example\n* var y = logcdf( 2.0, 1.0, 1.0 );\n* // returns ~-0.145\n*\n* @example\n* var y = logcdf( -1.0, 2.0, 2.0 );\n* // returns -Infinity\n*\n* @example\n* var y = logcdf( +Infinity, 4.0, 2.0 );\n* // returns 0.0\n*\n* @example\n* var y = logcdf( -Infinity, 4.0, 2.0 );\n* // returns -Infinity\n*\n* @example\n* var y = logcdf( NaN, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = logcdf( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = logcdf( 0.0, 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = logcdf( 2.0, 0.0, -1.0 );\n* // returns NaN\n*/\nfunction logcdf( x, k, lambda ) {\n\tvar p;\n\tif (\n\t\tisnan( k ) ||\n\t\tisnan( lambda ) ||\n\t\tk <= 0.0 ||\n\t\tlambda <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x < 0.0 ) {\n\t\treturn NINF;\n\t}\n\tp = -pow( x / lambda, k );\n\treturn ( p < LNHALF ) ? log1p( -exp( p ) ) : ln( -expm1( p ) );\n}\n\n\n// EXPORTS //\n\nexport default logcdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport pow from '@stdlib/math-base-special-pow';\nimport ln from '@stdlib/math-base-special-ln';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport NINF from '@stdlib/constants-float64-ninf';\n\n\n// MAIN //\n\n/**\n* Evaluates the natural logarithm of the probability density function (PDF) for a Weibull distribution with shape parameter `k` and scale parameter `lambda` at a value `x`.\n*\n* @param {number} x - input value\n* @param {PositiveNumber} k - shape parameter\n* @param {PositiveNumber} lambda - scale parameter\n* @returns {number} evaluated logarithm of probability density function\n*\n* @example\n* var y = logpdf( 2.0, 1.0, 0.5 );\n* // returns ~-3.307\n*\n* @example\n* var y = logpdf( 0.1, 1.0, 1.0 );\n* // returns ~-0.1\n*\n* @example\n* var y = logpdf( -1.0, 4.0, 2.0 );\n* // returns -Infinity\n*\n* @example\n* var y = logpdf( NaN, 0.6, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = logpdf( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = logpdf( 0.0, 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = logpdf( 2.0, 0.0, -1.0 );\n* // returns NaN\n*/\nfunction logpdf( x, k, lambda ) {\n\tvar xol;\n\tif (\n\t\tisnan( k ) ||\n\t\tisnan( lambda ) ||\n\t\tk <= 0.0 ||\n\t\tlambda <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x < 0.0 ) {\n\t\treturn NINF;\n\t}\n\tif ( x === PINF || x === NINF ) {\n\t\treturn NINF;\n\t}\n\tif ( x === 0.0 ) {\n\t\treturn ( k === 1.0 ) ? ln( k/lambda ): NINF;\n\t}\n\txol = x / lambda;\n\treturn ln( k / lambda ) + ( ( k - 1.0 ) * ln( xol ) ) - pow( xol, k );\n}\n\n\n// EXPORTS //\n\nexport default logpdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport gamma from '@stdlib/math-base-special-gamma';\nimport EPS from '@stdlib/constants-float64-eps';\n\n\n// MAIN //\n\n/**\n* Evaluates the moment-generating function (MGF) for a Weibull distribution with shape `k` and scale `lambda` at a value `t`.\n*\n* @param {number} t - input value\n* @param {PositiveNumber} k - shape parameter\n* @param {PositiveNumber} lambda - scale parameter\n* @returns {number} evaluated MGF\n*\n* @example\n* var y = mgf( 1.0, 1.0, 0.5 );\n* // returns ~2.0\n*\n* @example\n* var y = mgf( -1.0, 4.0, 4.0 );\n* // returns ~0.019\n*\n* @example\n* var y = mgf( NaN, 1.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = mgf( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = mgf( 0.0, 1.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = mgf( 0.2, -1.0, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = mgf( 0.2, 0.0, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = mgf( 0.2, 0.5, -1.0 );\n* // returns NaN\n*\n* @example\n* var y = mgf( 0.2, 0.5, 0.0 );\n* // returns NaN\n*/\nfunction mgf( t, k, lambda ) {\n\tvar summand;\n\tvar sum;\n\tvar c;\n\tvar n;\n\n\tif (\n\t\tisnan( t ) ||\n\t\tisnan( k ) ||\n\t\tisnan( lambda ) ||\n\t\tk <= 0.0 ||\n\t\tlambda <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tsum = 1.0;\n\tc = 1.0;\n\tn = 0;\n\tdo {\n\t\tn += 1;\n\t\tc *= ( t * lambda ) / n;\n\t\tif ( c === 0.0 ) {\n\t\t\tsummand = 0.0;\n\t\t} else {\n\t\t\tsummand = c * gamma( 1.0 + (n / k) );\n\t\t}\n\t\tsum += summand;\n\t} while ( summand / sum > EPS );\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nexport default mgf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport pow from '@stdlib/math-base-special-pow';\nimport exp from '@stdlib/math-base-special-exp';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport NINF from '@stdlib/constants-float64-ninf';\n\n\n// MAIN //\n\n/**\n* Evaluates the probability density function (PDF) for a Weibull distribution with shape parameter `k` and scale parameter `lambda` at a value `x`.\n*\n* @param {number} x - input value\n* @param {PositiveNumber} k - shape parameter\n* @param {PositiveNumber} lambda - scale parameter\n* @returns {number} evaluated probability density function\n*\n* @example\n* var y = pdf( 2.0, 1.0, 0.5 );\n* // returns ~0.037\n*\n* @example\n* var y = pdf( 0.1, 1.0, 1.0 );\n* // returns ~0.905\n*\n* @example\n* var y = pdf( -1.0, 4.0, 2.0 );\n* // returns 0.0\n*\n* @example\n* var y = pdf( NaN, 0.6, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = pdf( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = pdf( 0.0, 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = pdf( 2.0, 0.0, -1.0 );\n* // returns NaN\n*/\nfunction pdf( x, k, lambda ) {\n\tvar xol;\n\tvar z;\n\tif (\n\t\tisnan( k ) ||\n\t\tisnan( lambda ) ||\n\t\tk <= 0.0 ||\n\t\tlambda <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x < 0.0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( x === PINF || x === NINF ) {\n\t\treturn 0.0;\n\t}\n\tif ( x === 0.0 ) {\n\t\treturn ( k === 1.0 ) ? k/lambda : 0.0;\n\t}\n\txol = x / lambda;\n\tz = pow( xol, k - 1.0 );\n\treturn ( k / lambda ) * z * exp( -pow( xol, k ) );\n}\n\n\n// EXPORTS //\n\nexport default pdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport ln from '@stdlib/math-base-special-ln';\nimport pow from '@stdlib/math-base-special-pow';\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Evaluates the quantile function for a Weibull distribution with scale parameter `k` and shape parameter `lambda` at a probability `p`.\n*\n* @param {Probability} p - input value\n* @param {PositiveNumber} k - scale parameter\n* @param {PositiveNumber} lambda - shape parameter\n* @returns {number} evaluated quantile function\n*\n* @example\n* var y = quantile( 0.8, 1.0, 1.0 );\n* // returns ~1.609\n*\n* @example\n* var y = quantile( 0.5, 2.0, 4.0 );\n* // returns ~3.33\n*\n* @example\n* var y = quantile( 1.1, 1.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( -0.2, 1.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( NaN, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.0, 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.5, 1.0, -1.0 );\n* // returns NaN\n*/\nfunction quantile( p, k, lambda ) {\n\tif (\n\t\tisnan( k ) ||\n\t\tisnan( lambda ) ||\n\t\tisnan( p ) ||\n\t\tk <= 0.0 ||\n\t\tlambda <= 0.0 ||\n\t\tp < 0.0 ||\n\t\tp > 1.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn lambda * pow( -ln( 1.0 - p ), 1.0/k );\n}\n\n\n// EXPORTS //\n\nexport default quantile;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nimport defineProperty from '@stdlib/utils-define-property';\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport setReadOnlyAccessor from '@stdlib/utils-define-nonenumerable-read-only-accessor';\nimport { isPrimitive as isPositive } from '@stdlib/assert-is-positive-number';\nimport entropy from '@stdlib/stats-base-dists-weibull-entropy';\nimport kurtosis from '@stdlib/stats-base-dists-weibull-kurtosis';\nimport mean from '@stdlib/stats-base-dists-weibull-mean';\nimport median from '@stdlib/stats-base-dists-weibull-median';\nimport mode from '@stdlib/stats-base-dists-weibull-mode';\nimport skewness from '@stdlib/stats-base-dists-weibull-skewness';\nimport stdev from '@stdlib/stats-base-dists-weibull-stdev';\nimport variance from '@stdlib/stats-base-dists-weibull-variance';\nimport cdf from '@stdlib/stats-base-dists-weibull-cdf';\nimport logcdf from '@stdlib/stats-base-dists-weibull-logcdf';\nimport logpdf from '@stdlib/stats-base-dists-weibull-logpdf';\nimport mgf from '@stdlib/stats-base-dists-weibull-mgf';\nimport pdf from '@stdlib/stats-base-dists-weibull-pdf';\nimport quantile from '@stdlib/stats-base-dists-weibull-quantile';\nimport format from '@stdlib/string-format';\n\n\n// FUNCTIONS //\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n*/\nfunction weibullCDF( x ) {\n\treturn cdf( x, this.k, this.lambda );\n}\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (logCDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logCDF\n*/\nfunction weibullLogCDF( x ) {\n\treturn logcdf( x, this.k, this.lambda );\n}\n\n/**\n* Evaluates the natural logarithm of the probability density function (logPDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n*/\nfunction weibullLogPDF( x ) {\n\treturn logpdf( x, this.k, this.lambda );\n}\n\n/**\n* Evaluates the moment-generating function (MGF).\n*\n* @private\n* @param {number} t - input value\n* @returns {number} evaluated MGF\n*/\nfunction weibullMGF( t ) {\n\treturn mgf( t, this.k, this.lambda );\n}\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n*/\nfunction weibullPDF( x ) {\n\treturn pdf( x, this.k, this.lambda );\n}\n\n/**\n* Evaluates the quantile function.\n*\n* @private\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n*/\nfunction weibullQuantile( p ) {\n\treturn quantile( p, this.k, this.lambda );\n}\n\n\n// MAIN //\n\n/**\n* Weibull distribution constructor.\n*\n* @constructor\n* @param {PositiveNumber} [k=1.0] - shape parameter\n* @param {PositiveNumber} [lambda=1.0] - scale parameter\n* @throws {TypeError} `k` must be a positive number\n* @throws {TypeError} `lambda` must be a positive number\n* @returns {Weibull} distribution instance\n*\n* @example\n* var weibull = new Weibull( 1.0, 1.0 );\n*\n* var y = weibull.cdf( 0.8 );\n* // returns ~0.551\n*\n* var v = weibull.mode;\n* // returns 0.0\n*/\nfunction Weibull() {\n\tvar lambda;\n\tvar k;\n\tif ( !(this instanceof Weibull) ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn new Weibull();\n\t\t}\n\t\treturn new Weibull( arguments[ 0 ], arguments[ 1 ] );\n\t}\n\tif ( arguments.length ) {\n\t\tk = arguments[ 0 ];\n\t\tlambda = arguments[ 1 ];\n\t\tif ( !isPositive( k ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Shape parameter must be a positive number. Value: `%s`.', k ) );\n\t\t}\n\t\tif ( !isPositive( lambda ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Scale parameter must be a positive number. Value: `%s`.', lambda ) );\n\t\t}\n\t} else {\n\t\tk = 1.0;\n\t\tlambda = 1.0;\n\t}\n\tdefineProperty( this, 'k', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn k;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isPositive( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid assignment. Must be a positive number. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\tk = value;\n\t\t}\n\t});\n\tdefineProperty( this, 'lambda', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn lambda;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isPositive( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid assignment. Must be a positive number. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\tlambda = value;\n\t\t}\n\t});\n\treturn this;\n}\n\n/**\n* Weibull distribution differential entropy.\n*\n* @name entropy\n* @memberof Weibull.prototype\n* @type {number}\n* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}\n*\n* @example\n* var weibull = new Weibull( 4.0, 12.0 );\n*\n* var v = weibull.entropy;\n* // returns ~2.532\n*/\nsetReadOnlyAccessor( Weibull.prototype, 'entropy', function get() {\n\treturn entropy( this.k, this.lambda );\n});\n\n/**\n* Weibull distribution excess kurtosis.\n*\n* @name kurtosis\n* @memberof Weibull.prototype\n* @type {number}\n* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}\n*\n* @example\n* var weibull = new Weibull( 4.0, 12.0 );\n*\n* var v = weibull.kurtosis;\n* // returns ~-0.252\n*/\nsetReadOnlyAccessor( Weibull.prototype, 'kurtosis', function get() {\n\treturn kurtosis( this.k, this.lambda );\n});\n\n/**\n* Weibull distribution expected value.\n*\n* @name mean\n* @memberof Weibull.prototype\n* @type {number}\n* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}\n*\n* @example\n* var weibull = new Weibull( 4.0, 12.0 );\n*\n* var v = weibull.mean;\n* // returns ~10.877\n*/\nsetReadOnlyAccessor( Weibull.prototype, 'mean', function get() {\n\treturn mean( this.k, this.lambda );\n});\n\n/**\n* Weibull distribution median.\n*\n* @name median\n* @memberof Weibull.prototype\n* @type {number}\n* @see [median]{@link https://en.wikipedia.org/wiki/Median}\n*\n* @example\n* var weibull = new Weibull( 4.0, 12.0 );\n*\n* var v = weibull.median;\n* // returns ~10.949\n*/\nsetReadOnlyAccessor( Weibull.prototype, 'median', function get() {\n\treturn median( this.k, this.lambda );\n});\n\n/**\n* Weibull distribution mode.\n*\n* @name mode\n* @memberof Weibull.prototype\n* @type {number}\n* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}\n*\n* @example\n* var weibull = new Weibull( 4.0, 12.0 );\n*\n* var v = weibull.mode;\n* // returns ~11.167\n*/\nsetReadOnlyAccessor( Weibull.prototype, 'mode', function get() {\n\treturn mode( this.k, this.lambda );\n});\n\n/**\n* Weibull distribution skewness.\n*\n* @name skewness\n* @memberof Weibull.prototype\n* @type {number}\n* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}\n*\n* @example\n* var weibull = new Weibull( 4.0, 12.0 );\n*\n* var v = weibull.skewness;\n* // returns ~-0.087\n*/\nsetReadOnlyAccessor( Weibull.prototype, 'skewness', function get() {\n\treturn skewness( this.k, this.lambda );\n});\n\n/**\n* Weibull distribution standard deviation.\n*\n* @name stdev\n* @memberof Weibull.prototype\n* @type {PositiveNumber}\n* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}\n*\n* @example\n* var weibull = new Weibull( 4.0, 12.0 );\n*\n* var v = weibull.stdev;\n* // returns ~3.051\n*/\nsetReadOnlyAccessor( Weibull.prototype, 'stdev', function get() {\n\treturn stdev( this.k, this.lambda );\n});\n\n/**\n* Weibull distribution variance.\n*\n* @name variance\n* @memberof Weibull.prototype\n* @type {PositiveNumber}\n* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}\n*\n* @example\n* var weibull = new Weibull( 4.0, 12.0 );\n*\n* var v = weibull.variance;\n* // returns ~9.311\n*/\nsetReadOnlyAccessor( Weibull.prototype, 'variance', function get() {\n\treturn variance( this.k, this.lambda );\n});\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @name cdf\n* @memberof Weibull.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var weibull = new Weibull( 2.0, 4.0 );\n*\n* var v = weibull.cdf( 0.5 );\n* // returns ~0.016\n*/\nsetReadOnly( Weibull.prototype, 'cdf', weibullCDF );\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (logCDF).\n*\n* @name logcdf\n* @memberof Weibull.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logCDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var weibull = new Weibull( 2.0, 4.0 );\n*\n* var v = weibull.logcdf( 0.8 );\n* // returns ~-3.239\n*/\nsetReadOnly( Weibull.prototype, 'logcdf', weibullLogCDF );\n\n/**\n* Evaluates the natural logarithm of the probability density function (logPDF).\n*\n* @name logpdf\n* @memberof Weibull.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var weibull = new Weibull( 2.0, 4.0 );\n*\n* var v = weibull.logpdf( 0.8 );\n* // returns ~-2.343\n*/\nsetReadOnly( Weibull.prototype, 'logpdf', weibullLogPDF );\n\n/**\n* Evaluates the moment-generating function (MGF).\n*\n* @name mgf\n* @memberof Weibull.prototype\n* @type {Function}\n* @param {number} t - input value\n* @returns {number} evaluated MGF\n* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}\n*\n* @example\n* var weibull = new Weibull( 2.0, 4.0 );\n*\n* var v = weibull.mgf( 0.5 );\n* // returns ~9.878\n*/\nsetReadOnly( Weibull.prototype, 'mgf', weibullMGF );\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @name pdf\n* @memberof Weibull.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var weibull = new Weibull( 2.0, 4.0 );\n*\n* var v = weibull.pdf( 2.0 );\n* // returns ~0.195\n*/\nsetReadOnly( Weibull.prototype, 'pdf', weibullPDF );\n\n/**\n* Evaluates the quantile function.\n*\n* @name quantile\n* @memberof Weibull.prototype\n* @type {Function}\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}\n*\n* @example\n* var weibull = new Weibull( 2.0, 4.0 );\n*\n* var v = weibull.quantile( 0.5 );\n* // returns ~3.33\n*/\nsetReadOnly( Weibull.prototype, 'quantile', weibullQuantile );\n\n\n// EXPORTS //\n\nexport default Weibull;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Weibull distribution cumulative distribution function (CDF).\n*\n* @module @stdlib/stats-base-dists-weibull-cdf\n*\n* @example\n* import cdf from '@stdlib/stats-base-dists-weibull-cdf';\n*\n* var y = cdf( 2.0, 1.0, 1.0 );\n* // returns ~0.865\n*\n* var myCDF = cdf.factory( 2.0, 10.0 );\n* y = myCDF( 12.0 );\n* // returns ~0.763\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport cdf from './cdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( cdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport expm1 from '@stdlib/math-base-special-expm1';\nimport pow from '@stdlib/math-base-special-pow';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the cumulative distribution function (CDF) for a Weibull distribution.\n*\n* @param {PositiveNumber} k - scale parameter\n* @param {PositiveNumber} lambda - shape parameter\n* @returns {Function} CDF\n*\n* @example\n* var cdf = factory( 2.0, 10.0 );\n* var y = cdf( 12.0 );\n* // returns ~0.763\n*\n* y = cdf( 8.0 );\n* // returns ~0.473\n*/\nfunction factory( k, lambda ) {\n\tif (\n\t\tisnan( k ) ||\n\t\tisnan( lambda ) ||\n\t\tk <= 0.0 ||\n\t\tlambda <= 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn cdf;\n\n\t/**\n\t* Evaluates the cumulative distribution function (CDF) for a Weibull distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated CDF\n\t*\n\t* @example\n\t* var y = cdf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction cdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x < 0.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn -expm1( -pow( x / lambda, k ) );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Weibull distribution logarithm of cumulative distribution function (CDF).\n*\n* @module @stdlib/stats-base-dists-weibull-logcdf\n*\n* @example\n* import logcdf from '@stdlib/stats-base-dists-weibull-logcdf';\n*\n* var y = logcdf( 2.0, 1.0, 1.0 );\n* // returns ~-0.145\n*\n* var mylogcdf = logcdf.factory( 2.0, 10.0 );\n* y = mylogcdf( 12.0 );\n* // returns ~-0.27\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport logcdf from './logcdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( logcdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default logcdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport expm1 from '@stdlib/math-base-special-expm1';\nimport log1p from '@stdlib/math-base-special-log1p';\nimport exp from '@stdlib/math-base-special-exp';\nimport pow from '@stdlib/math-base-special-pow';\nimport ln from '@stdlib/math-base-special-ln';\nimport LNHALF from '@stdlib/constants-float64-ln-half';\nimport NINF from '@stdlib/constants-float64-ninf';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the natural logarithm of the cumulative distribution function (CDF) for a Weibull distribution.\n*\n* @param {PositiveNumber} k - scale parameter\n* @param {PositiveNumber} lambda - shape parameter\n* @returns {Function} logCDF\n*\n* @example\n* var logcdf = factory( 2.0, 10.0 );\n* var y = logcdf( 12.0 );\n* // returns ~-0.27\n*\n* y = logcdf( 8.0 );\n* // returns ~-0.749\n*/\nfunction factory( k, lambda ) {\n\tif (\n\t\tisnan( k ) ||\n\t\tisnan( lambda ) ||\n\t\tk <= 0.0 ||\n\t\tlambda <= 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn logcdf;\n\n\t/**\n\t* Evaluates the natural logarithm of the cumulative distribution function (CDF) for a Weibull distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {number} evaluated logCDF\n\t*\n\t* @example\n\t* var y = logcdf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction logcdf( x ) {\n\t\tvar p;\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x < 0.0 ) {\n\t\t\treturn NINF;\n\t\t}\n\t\tp = -pow( x / lambda, k );\n\t\treturn ( p < LNHALF ) ? log1p( -exp( p ) ) : ln( -expm1( p ) );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Weibull distribution logarithm of probability density function (PDF).\n*\n* @module @stdlib/stats-base-dists-weibull-logpdf\n*\n* @example\n* import logpdf from '@stdlib/stats-base-dists-weibull-logpdf';\n*\n* var y = logpdf( 2.0, 1.0, 0.5 );\n* // returns ~-3.297\n*\n* var mylogpdf = logpdf.factory( 7.0, 6.0 );\n* y = mylogpdf( 7.0 );\n* // returns ~-1.864\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport logpdf from './logpdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( logpdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default logpdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport pow from '@stdlib/math-base-special-pow';\nimport ln from '@stdlib/math-base-special-ln';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport NINF from '@stdlib/constants-float64-ninf';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the natural logarithm of the probability density function (PDF) for a Weibull distribution.\n*\n* @param {PositiveNumber} k - shape parameter\n* @param {PositiveNumber} lambda - scale parameter\n* @returns {Function} function to evaluate the logarithm of the probability density function\n*\n* @example\n* var logpdf = factory( 7.0, 6.0 );\n* var y = logpdf( 7.0 );\n* // returns ~-1.863\n*\n* y = logpdf( 5.0 );\n* // returns ~-1.219\n*/\nfunction factory( k, lambda ) {\n\tvar lnkl;\n\tif (\n\t\tisnan( k ) ||\n\t\tisnan( lambda ) ||\n\t\tk <= 0.0 ||\n\t\tlambda <= 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\tlnkl = ln( k / lambda );\n\treturn logpdf;\n\n\t/**\n\t* Evaluates the natural logarithm of the probability density function (PDF) for a Weibull distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {number} evaluated logPDF\n\t*\n\t* @example\n\t* var y = logpdf( 2.3 );\n\t* // returns <number>\n\t*/\n\tfunction logpdf( x ) {\n\t\tvar xol;\n\t\tif ( x < 0.0 ) {\n\t\t\treturn NINF;\n\t\t}\n\t\tif ( x === PINF || x === NINF ) {\n\t\t\treturn NINF;\n\t\t}\n\t\tif ( x === 0.0 ) {\n\t\t\treturn ( k === 1.0 ) ? ln( k / lambda ) : NINF;\n\t\t}\n\t\txol = x / lambda;\n\t\treturn lnkl + ( ( k - 1.0 ) * ln( xol ) ) - pow( xol, k );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate the moment-generating function (MGF) for a Weibull distribution.\n*\n* @module @stdlib/stats-base-dists-weibull-mgf\n*\n* @example\n* import mgf from '@stdlib/stats-base-dists-weibull-mgf';\n*\n* var y = mgf( 1.0, 1.0, 0.5 );\n* // returns ~2.0\n*\n* y = mgf( -1.0, 4.0, 4.0 );\n* // returns ~0.019\n*\n* var myMGF = mgf.factory( 8.0, 10.0 );\n*\n* y = myMGF( 0.8 );\n* // returns ~3150.149\n*\n* y = myMGF( 0.08 );\n* // returns ~2.137s\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport mgf from './mgf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( mgf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default mgf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport gamma from '@stdlib/math-base-special-gamma';\nimport EPS from '@stdlib/constants-float64-eps';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the moment-generating function (MGF) of a Weibull distribution with shape `k` and scale `lambda`.\n*\n* @param {PositiveNumber} k - shape parameter\n* @param {PositiveNumber} lambda - scale parameter\n* @returns {Function} MGF\n*\n* @example\n* var mgf = factory( 8.0, 10.0 );\n*\n* var y = mgf( 0.8 );\n* // returns ~3150.149\n*\n* y = mgf( 0.08 );\n* // returns ~2.137\n*/\nfunction factory( k, lambda ) {\n\tif (\n\t\tisnan( k ) ||\n\t\tisnan( lambda ) ||\n\t\tk <= 0.0 ||\n\t\tlambda <= 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn mgf;\n\n\t/**\n\t* Evaluates the moment-generating function (MGF) for a Weibull distribution.\n\t*\n\t* @private\n\t* @param {number} t - input value\n\t* @returns {number} evaluated MGF\n\t*\n\t* @example\n\t* var y = mgf( 0.5 );\n\t* // returns <number>\n\t*/\n\tfunction mgf( t ) {\n\t\tvar summand;\n\t\tvar sum;\n\t\tvar c;\n\t\tvar n;\n\n\t\tif ( isnan( t ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tsum = 1.0;\n\t\tc = 1.0;\n\t\tn = 0;\n\t\tdo {\n\t\t\tn += 1;\n\t\t\tc *= ( t * lambda ) / n;\n\t\t\tif ( c === 0.0 ) {\n\t\t\t\tsummand = 0.0;\n\t\t\t} else {\n\t\t\t\tsummand = c * gamma( 1.0 + (n / k) );\n\t\t\t}\n\t\t\tsum += summand;\n\t\t} while ( summand / sum > EPS );\n\t\treturn sum;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Weibull distribution probability density function (PDF).\n*\n* @module @stdlib/stats-base-dists-weibull-pdf\n*\n* @example\n* import pdf from '@stdlib/stats-base-dists-weibull-pdf';\n*\n* var y = pdf( 2.0, 1.0, 0.5 );\n* // returns ~0.037\n*\n* var myPDF = pdf.factory( 7.0, 6.0 );\n* y = myPDF( 7.0 );\n* // returns ~0.155\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport pdf from './pdf.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( pdf, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default pdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport pow from '@stdlib/math-base-special-pow';\nimport exp from '@stdlib/math-base-special-exp';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport NINF from '@stdlib/constants-float64-ninf';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the probability density function (PDF) for a Weibull distribution.\n*\n* @param {PositiveNumber} k - shape parameter\n* @param {PositiveNumber} lambda - scale parameter\n* @returns {Function} function to evaluate the probability density function\n*\n* @example\n* var pdf = factory( 7.0, 6.0 );\n* var y = pdf( 7.0 );\n* // returns ~0.155\n*\n* y = pdf( 5.0 );\n* // returns ~0.296\n*/\nfunction factory( k, lambda ) {\n\tif (\n\t\tisnan( k ) ||\n\t\tisnan( lambda ) ||\n\t\tk <= 0.0 ||\n\t\tlambda <= 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn pdf;\n\n\t/**\n\t* Evaluates the probability density function (PDF) for a Weibull distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {number} evaluated PDF\n\t*\n\t* @example\n\t* var y = pdf( 2.3 );\n\t* // returns <number>\n\t*/\n\tfunction pdf( x ) {\n\t\tvar xol;\n\t\tvar z;\n\t\tif ( x < 0.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\tif ( x === PINF || x === NINF ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\tif ( x === 0.0 ) {\n\t\t\treturn ( k === 1.0 ) ? k / lambda : 0.0;\n\t\t}\n\t\txol = x / lambda;\n\t\tz = pow( xol, k - 1.0 );\n\t\treturn ( k / lambda ) * z * exp( -pow( xol, k ) );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Weibull distribution quantile function.\n*\n* @module @stdlib/stats-base-dists-weibull-quantile\n*\n* @example\n* import quantile from '@stdlib/stats-base-dists-weibull-quantile';\n*\n* var y = quantile( 0.8, 1.0, 1.0 );\n* // returns ~1.609\n*\n* var myQuantile = quantile.factory( 2.0, 10.0 );\n* y = myQuantile( 0.4 );\n* // returns ~7.147\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport quantile from './quantile.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( quantile, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default quantile;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport ln from '@stdlib/math-base-special-ln';\nimport pow from '@stdlib/math-base-special-pow';\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the quantile function for a Weibull distribution.\n*\n* @param {PositiveNumber} k - scale parameter\n* @param {PositiveNumber} lambda - shape parameter\n* @returns {Function} quantile function\n*\n* @example\n* var quantile = factory( 2.0, 10.0 );\n* var y = quantile( 0.4 );\n* // returns ~7.147\n*\n* y = quantile( 0.8 );\n* // returns ~12.686\n*/\nfunction factory( k, lambda ) {\n\tif (\n\t\tisnan( k ) ||\n\t\tisnan( lambda ) ||\n\t\tk <= 0.0 ||\n\t\tlambda <= 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn quantile;\n\n\t/**\n\t* Evaluates the quantile function for a Weibull distribution.\n\t*\n\t* @private\n\t* @param {Probability} p - input value\n\t* @returns {number} evaluated quantile function\n\t*\n\t* @example\n\t* var y = quantile( 0.3 );\n\t* // returns <number>\n\t*/\n\tfunction quantile( p ) {\n\t\tif ( isnan( p ) || p < 0.0 || p > 1.0 ) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn lambda * pow( -ln( 1.0 - p ), 1.0/k );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace weibull\n*/\nvar weibull = {};\n\n/**\n* @name cdf\n* @memberof weibull\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/weibull/cdf}\n*/\nimport cdf from '@stdlib/stats-base-dists-weibull-cdf';\nsetReadOnly( weibull, 'cdf', cdf );\n\n/**\n* @name Weibull\n* @memberof weibull\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/weibull/ctor}\n*/\nimport Weibull from '@stdlib/stats-base-dists-weibull-ctor';\nsetReadOnly( weibull, 'Weibull', Weibull );\n\n/**\n* @name entropy\n* @memberof weibull\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/weibull/entropy}\n*/\nimport entropy from '@stdlib/stats-base-dists-weibull-entropy';\nsetReadOnly( weibull, 'entropy', entropy );\n\n/**\n* @name kurtosis\n* @memberof weibull\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/weibull/kurtosis}\n*/\nimport kurtosis from '@stdlib/stats-base-dists-weibull-kurtosis';\nsetReadOnly( weibull, 'kurtosis', kurtosis );\n\n/**\n* @name logcdf\n* @memberof weibull\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/weibull/logcdf}\n*/\nimport logcdf from '@stdlib/stats-base-dists-weibull-logcdf';\nsetReadOnly( weibull, 'logcdf', logcdf );\n\n/**\n* @name logpdf\n* @memberof weibull\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/weibull/logpdf}\n*/\nimport logpdf from '@stdlib/stats-base-dists-weibull-logpdf';\nsetReadOnly( weibull, 'logpdf', logpdf );\n\n/**\n* @name mean\n* @memberof weibull\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/weibull/mean}\n*/\nimport mean from '@stdlib/stats-base-dists-weibull-mean';\nsetReadOnly( weibull, 'mean', mean );\n\n/**\n* @name median\n* @memberof weibull\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/weibull/median}\n*/\nimport median from '@stdlib/stats-base-dists-weibull-median';\nsetReadOnly( weibull, 'median', median );\n\n/**\n* @name mgf\n* @memberof weibull\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/weibull/mgf}\n*/\nimport mgf from '@stdlib/stats-base-dists-weibull-mgf';\nsetReadOnly( weibull, 'mgf', mgf );\n\n/**\n* @name mode\n* @memberof weibull\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/weibull/mode}\n*/\nimport mode from '@stdlib/stats-base-dists-weibull-mode';\nsetReadOnly( weibull, 'mode', mode );\n\n/**\n* @name pdf\n* @memberof weibull\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/weibull/pdf}\n*/\nimport pdf from '@stdlib/stats-base-dists-weibull-pdf';\nsetReadOnly( weibull, 'pdf', pdf );\n\n/**\n* @name quantile\n* @memberof weibull\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/weibull/quantile}\n*/\nimport quantile from '@stdlib/stats-base-dists-weibull-quantile';\nsetReadOnly( weibull, 'quantile', quantile );\n\n/**\n* @name skewness\n* @memberof weibull\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/weibull/skewness}\n*/\nimport skewness from '@stdlib/stats-base-dists-weibull-skewness';\nsetReadOnly( weibull, 'skewness', skewness );\n\n/**\n* @name stdev\n* @memberof weibull\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/weibull/stdev}\n*/\nimport stdev from '@stdlib/stats-base-dists-weibull-stdev';\nsetReadOnly( weibull, 'stdev', stdev );\n\n/**\n* @name variance\n* @memberof weibull\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/dists/weibull/variance}\n*/\nimport variance from '@stdlib/stats-base-dists-weibull-variance';\nsetReadOnly( weibull, 'variance', variance );\n\n\n// EXPORTS //\n\nexport default weibull;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace dist\n*/\nvar dist = {};\n\n/**\n* @name arcsine\n* @memberof dist\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/stats/base/dists/arcsine}\n*/\nimport arcsine from '@stdlib/stats-base-dists-arcsine';\nsetReadOnly( dist, 'arcsine', arcsine );\n\n/**\n* @name bernoulli\n* @memberof dist\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/stats/base/dists/bernoulli}\n*/\nimport bernoulli from '@stdlib/stats-base-dists-bernoulli';\nsetReadOnly( dist, 'bernoulli', bernoulli );\n\n/**\n* @name beta\n* @memberof dist\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/stats/base/dists/beta}\n*/\nimport beta from '@stdlib/stats-base-dists-beta';\nsetReadOnly( dist, 'beta', beta );\n\n/**\n* @name betaprime\n* @memberof dist\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/stats/base/dists/betaprime}\n*/\nimport betaprime from '@stdlib/stats-base-dists-betaprime';\nsetReadOnly( dist, 'betaprime', betaprime );\n\n/**\n* @name binomial\n* @memberof dist\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/stats/base/dists/binomial}\n*/\nimport binomial from '@stdlib/stats-base-dists-binomial';\nsetReadOnly( dist, 'binomial', binomial );\n\n/**\n* @name cauchy\n* @memberof dist\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/stats/base/dists/cauchy}\n*/\nimport cauchy from '@stdlib/stats-base-dists-cauchy';\nsetReadOnly( dist, 'cauchy', cauchy );\n\n/**\n* @name chi\n* @memberof dist\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/stats/base/dists/chi}\n*/\nimport chi from '@stdlib/stats-base-dists-chi';\nsetReadOnly( dist, 'chi', chi );\n\n/**\n* @name chisquare\n* @memberof dist\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/stats/base/dists/chisquare}\n*/\nimport chisquare from '@stdlib/stats-base-dists-chisquare';\nsetReadOnly( dist, 'chisquare', chisquare );\n\n/**\n* @name cosine\n* @memberof dist\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/stats/base/dists/cosine}\n*/\nimport cosine from '@stdlib/stats-base-dists-cosine';\nsetReadOnly( dist, 'cosine', cosine );\n\n/**\n* @name degenerate\n* @memberof dist\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/stats/base/dists/degenerate}\n*/\nimport degenerate from '@stdlib/stats-base-dists-degenerate';\nsetReadOnly( dist, 'degenerate', degenerate );\n\n/**\n* @name discreteUniform\n* @memberof dist\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/stats/base/dists/discrete-uniform}\n*/\nimport discreteUniform from '@stdlib/stats-base-dists-discrete-uniform';\nsetReadOnly( dist, 'discreteUniform', discreteUniform );\n\n/**\n* @name erlang\n* @memberof dist\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/stats/base/dists/erlang}\n*/\nimport erlang from '@stdlib/stats-base-dists-erlang';\nsetReadOnly( dist, 'erlang', erlang );\n\n/**\n* @name exponential\n* @memberof dist\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/stats/base/dists/exponential}\n*/\nimport exponential from '@stdlib/stats-base-dists-exponential';\nsetReadOnly( dist, 'exponential', exponential );\n\n/**\n* @name f\n* @memberof dist\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/stats/base/dists/f}\n*/\nimport f from '@stdlib/stats-base-dists-f';\nsetReadOnly( dist, 'f', f );\n\n/**\n* @name frechet\n* @memberof dist\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/stats/base/dists/frechet}\n*/\nimport frechet from '@stdlib/stats-base-dists-frechet';\nsetReadOnly( dist, 'frechet', frechet );\n\n/**\n* @name gamma\n* @memberof dist\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/stats/base/dists/gamma}\n*/\nimport gamma from '@stdlib/stats-base-dists-gamma';\nsetReadOnly( dist, 'gamma', gamma );\n\n/**\n* @name geometric\n* @memberof dist\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/stats/base/dists/geometric}\n*/\nimport geometric from '@stdlib/stats-base-dists-geometric';\nsetReadOnly( dist, 'geometric', geometric );\n\n/**\n* @name gumbel\n* @memberof dist\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/stats/base/dists/gumbel}\n*/\nimport gumbel from '@stdlib/stats-base-dists-gumbel';\nsetReadOnly( dist, 'gumbel', gumbel );\n\n/**\n* @name hypergeometric\n* @memberof dist\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/stats/base/dists/hypergeometric}\n*/\n\nimport hypergeometric from '@stdlib/stats-base-dists-hypergeometric';\nsetReadOnly( dist, 'hypergeometric', hypergeometric );\n\n/**\n* @name invgamma\n* @memberof dist\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/stats/base/dists/invgamma}\n*/\nimport invgamma from '@stdlib/stats-base-dists-invgamma';\nsetReadOnly( dist, 'invgamma', invgamma );\n\n/**\n* @name kumaraswamy\n* @memberof dist\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/stats/base/dists/kumaraswamy}\n*/\nimport kumaraswamy from '@stdlib/stats-base-dists-kumaraswamy';\nsetReadOnly( dist, 'kumaraswamy', kumaraswamy );\n\n/**\n* @name laplace\n* @memberof dist\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/stats/base/dists/laplace}\n*/\nimport laplace from '@stdlib/stats-base-dists-laplace';\nsetReadOnly( dist, 'laplace', laplace );\n\n/**\n* @name levy\n* @memberof dist\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/stats/base/dists/levy}\n*/\nimport levy from '@stdlib/stats-base-dists-levy';\nsetReadOnly( dist, 'levy', levy );\n\n/**\n* @name logistic\n* @memberof dist\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/stats/base/dists/logistic}\n*/\nimport logistic from '@stdlib/stats-base-dists-logistic';\nsetReadOnly( dist, 'logistic', logistic );\n\n/**\n* @name lognormal\n* @memberof dist\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/stats/base/dists/lognormal}\n*/\nimport lognormal from '@stdlib/stats-base-dists-lognormal';\nsetReadOnly( dist, 'lognormal', lognormal );\n\n/**\n* @name negativeBinomial\n* @memberof dist\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/stats/base/dists/negative-binomial}\n*/\nimport negativeBinomial from '@stdlib/stats-base-dists-negative-binomial';\nsetReadOnly( dist, 'negativeBinomial', negativeBinomial );\n\n/**\n* @name normal\n* @memberof dist\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/stats/base/dists/normal}\n*/\nimport normal from '@stdlib/stats-base-dists-normal';\nsetReadOnly( dist, 'normal', normal );\n\n/**\n* @name pareto1\n* @memberof dist\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/stats/base/dists/pareto-type1}\n*/\nimport pareto1 from '@stdlib/stats-base-dists-pareto-type1';\nsetReadOnly( dist, 'pareto1', pareto1 );\n\n/**\n* @name poisson\n* @memberof dist\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/stats/base/dists/poisson}\n*/\nimport poisson from '@stdlib/stats-base-dists-poisson';\nsetReadOnly( dist, 'poisson', poisson );\n\n/**\n* @name rayleigh\n* @memberof dist\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/stats/base/dists/rayleigh}\n*/\nimport rayleigh from '@stdlib/stats-base-dists-rayleigh';\nsetReadOnly( dist, 'rayleigh', rayleigh );\n\n/**\n* @name signrank\n* @memberof dist\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/stats/base/dists/signrank}\n*/\nimport signrank from '@stdlib/stats-base-dists-signrank';\nsetReadOnly( dist, 'signrank', signrank );\n\n/**\n* @name tukey\n* @memberof dist\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/stats/base/dists/studentized-range}\n*/\nimport tukey from '@stdlib/stats-base-dists-studentized-range';\nsetReadOnly( dist, 'tukey', tukey );\n\n/**\n* @name t\n* @memberof dist\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/stats/base/dists/t}\n*/\nimport t from '@stdlib/stats-base-dists-t';\nsetReadOnly( dist, 't', t );\n\n/**\n* @name triangular\n* @memberof dist\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/stats/base/dists/triangular}\n*/\nimport triangular from '@stdlib/stats-base-dists-triangular';\nsetReadOnly( dist, 'triangular', triangular );\n\n/**\n* @name truncatedNormal\n* @memberof dist\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/stats/base/dists/truncated-normal}\n*/\nimport truncatedNormal from '@stdlib/stats-base-dists-truncated-normal';\nsetReadOnly( dist, 'truncatedNormal', truncatedNormal );\n\n/**\n* @name uniform\n* @memberof dist\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/stats/base/dists/uniform}\n*/\nimport uniform from '@stdlib/stats-base-dists-uniform';\nsetReadOnly( dist, 'uniform', uniform );\n\n/**\n* @name weibull\n* @memberof dist\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/stats/base/dists/weibull}\n*/\nimport weibull from '@stdlib/stats-base-dists-weibull';\nsetReadOnly( dist, 'weibull', weibull );\n\n\n// EXPORTS //\n\nexport default dist;\n"],"names":["main","Object","defineProperty","objectProtoype","prototype","toStr","toString","defineGetter","__defineGetter__","defineSetter","__defineSetter__","lookupGetter","__lookupGetter__","lookupSetter","__lookupSetter__","err","hasDefinePropertySupport","builtin","obj","prop","descriptor","hasValue","hasGet","hasSet","call","TypeError","__proto__","value","Error","get","set","defineProperty$1","setReadOnly","configurable","enumerable","writable","setNonEnumerableReadOnly","isnan","x","sqrt","Math","FOURTH_PI","asin","sgn","zz","a","p","z","NaN","s1","s2","ratevalRS","PIO4","ratevalPQ","PI","cdf","b","wrap","setNonEnumerableReadOnlyAccessor","getter","isNumber","constantFunction","FLG","Symbol","hasToStringTagSupport","toStringTag","has","hasOwnProperty","hasOwnProp","property","toStrTag","nativeClass$1","hasToStringTag","v","isOwn","tag","out","Number$1","Number","test","nativeClass","isPrimitive","isObject","hasUint32Array","Uint32Array","ctor","bool","arr","GlobalUint32Array","UINT32_MAX","hasUint32ArraySupport","Uint32Array$1","hasFloat64Array","Float64Array","GlobalFloat64Array","hasFloat64ArraySupport","Float64Array$1","hasUint8Array","Uint8Array","GlobalUint8Array","UINT8_MAX","hasUint8ArraySupport","Uint8Array$1","hasUint16Array","Uint16Array","GlobalUint16Array","UINT16_MAX","hasUint16ArraySupport","uint16view","ctors","uint16","uint8","IS_LITTLE_ENDIAN","buffer","HIGH$7","isLittleEndian","FLOAT64_VIEW","UINT32_VIEW","getHighWord","HIGH","HIGH$5","setHighWord","high","FLOAT64_EXPONENT_BIAS","FLOAT64_NINF","NEGATIVE_INFINITY","LN2_HI","LN2_LO","HIGH_SIGNIFICAND_MASK","ln","hfsq","hx","t2","t1","k","R","f","i","j","s","w","NINF","BIAS","polyvalP","polyvalQ","LN_FOURTH_PI","entropy","kurtosis","mean","median","mode","skewness","stdev","floor","isInteger","isEven","isOdd","LOW","FLOAT64_PINF","POSITIVE_INFINITY","isInfinite","PINF","abs","indices$3","indices","toWords","stride","offset","fcn","assign","LOW$5","setLowWord","low","uint32ToInt32","FLOAT64_HIGH_WORD_ABS_MASK","indices$1","fromWords","WORDS","copysign","y","hy","ABS_MASK","HIGH_MIN_NORMAL_EXP","BP","DP_HI","DP_LO","FLOAT64_SMALLEST_NORMAL","normalize","FRAC","ldexp","frac","exp","m","floatExp","LN2","FLOAT64_HIGH_WORD_SIGNIFICAND_MASK","HIGH_BIASED_EXP_10","HUGE","TINY","LOG_WORKSPACE","pow","ahx","ahy","ax","sx","sy","y1","hp","lp","t","yIsInfinite","xIsZero","yIsHuge","u","logx","tmp","ss","hs","ls","ht","bp","dp","hz","lz","r","n","log2ax","pow2","variance","LN_PI","logcdf","logpdf","pdf","kernelCos","polyval13","polyval46","S1","kernelSin","LOW$1","zeros","len","push","filled","IPIO2","PIO2","TWO24","TWON24","F","Q","FQ","IQ","compute","jz","q","q0","jk","jv","jx","carry","fw","ih","jp","kernelRempio2","e0","nx","round","rempio2Medium","ix","PIO2_1","PIO2_1T","TWO_PIO2_1T","THREE_PIO2_1T","FOUR_PIO2_1T","TX","TY","rempio2","getLowWord","rempio2Kernel","Y","sin","HALF_PI","quantile","zeroPad","str","width","right","negative","pad","length","startsWithMinus","substr","lowercase","String","toLowerCase","uppercase","toUpperCase","formatInteger","token","base","specifier","arg","parseInt","isFinite","precision","padRight","sign","alternate","charAt","isString","replace","RE_EXP_POS_DIGITS","RE_EXP_NEG_DIGITS","RE_ONLY_DIGITS","RE_DIGITS_BEFORE_EXP","RE_TRAILING_PERIOD_ZERO","RE_PERIOD_ZERO_EXP","RE_ZERO_BEFORE_EXP","formatDouble","digits","parseFloat","toExponential","toFixed","toPrecision","spaces","spacePad","fromCharCode","isNaN","isArray","Array","initialize","flags","mapping","formatInterpolate","tokens","hasPeriod","flag","num","pos","padZeros","indexOf","arguments","maxWidth","substring","RE","parse","match","formatTokenize","content","prev","exec","slice","lastIndex","format","args","tokenize","interpolate","apply","Arcsine","this","RangeError","arcsine","isProbability","valueOf","ceil","trunc","LOG2_E","NEARZERO","hi","lo","c","expmulti","mgf","pmf","Bernoulli","bernoulli","LN2_INV","expm1","halfX","r1","e","polyval","log1p","hu","E","FLOAT64_EPSILON","evalrational","Infinity","G","beta","ambh","agh","bgh","cgh","res","EPSILON","lanczosSumExpGScaled","isPositiveZero","max","isNegativeZero","min","FLOAT64_MAX","SQRT_TWO_PI","gamma","GAMMA","EULER","stirlingApprox","smallApprox","rateval","factorial","FACTORIALS","FLOAT64_GAMMA_LANCZOS_G","gammaDeltaRatioLanczos","delta","result","ratio","zgh","lanczosSum","gammaDeltaRatio","idelta","iz","cos","sinpi","ar","YMIN","TC","gammaln","isNegative","nadj","flg","p3","p2","p1","polyvalA1","polyvalA2","polyvalT1","polyvalT2","polyvalT3","polyvalU","polyvalV","polyvalS","polyvalR","polyvalW","FLOAT64_SQRT_EPSILON","FLOAT64_MAX_LN","ERX","erfc","polyvalPP","polyvalQQ","polyvalPA","polyvalQA","polyvalRA","polyvalSA","polyvalRB","polyvalSB","FLOAT64_MIN_LN","fullIGammaPrefix","alz","MAX_LN","MIN_LN","evalpoly","Function","TWO_PI","workspace","evil","eval","hasGeneratorSupport","MAX_TERMS","sumSeries","generator","options","tolerance","nextTerm","counter","opts","EPS","maxTerms","initialValue","next","sumSeries$1","lowerGammaSeries","a1","z1","lowerIncompleteGammaSeries","regularisedGammaPrefix","prefix","amza","amz","sq","d","lgammaSmallImp","zm1","zm2","rateval2","rateval3","tgammaSmallUpperPart","invert","pgam","gamma1pm1","powm1","apn","smallGamma2Series","FLOAT32_SMALLEST_NORMAL","MAX_ITER","continuedFractionA","gen","factor","maxIter","isgenerator","a0","C","D","continuedFractionB","continuedFraction","eps","keep","continuedFraction$1","upperGammaFraction","upperIncompleteGammaFract","gammainc","regularized","upper","optimisedInvert","normalized","evalMethod","initValue","isHalfInt","useTemme","isInt","sigma","fa","g","SQRT_EPSILON","term","sum","finiteGammaQ","finiteHalfGammaQ","phi","polyvalC0","polyvalC1","polyvalC2","polyvalC3","polyvalC4","polyvalC5","polyvalC6","polyvalC7","polyvalC8","igammaTemmeLarge","betaSmallBLargeASeries","s0","mult","tmp1","tnp1","b2n","bm1","lx2","lxp","mbn","lx","t4","h","regularizedGammaPrefix","MIN_VALUE","risingFactorialRatio","ibetaPowerTerms","smallA","l1","l2","l3","b1","b2","l","nargs","minabs","maxabs","OPTS","ibetaFraction2","denom","aN","bN","ibetaFraction2t","binomcoef","ibetaAStep","ibetaSeries","poch","ibetaSeriesT","ibetaImp","fract","bbar","div","i0","i1","MAX_FLOAT64","MIN_FLOAT64","MAX_INT32","startTerm","start","binomialCCDF","betainc","kernelBetainc","alpha","factory","isPositiveNumber","kernelTan","polyvalOdd","polyvalEven","tan","digamma","rem","asymptoticApprox","rationalApprox","LN_SQRT_TWO_PI","ALGMCS","LEN","gammaCorrection","twox","b0","dceval","betaln","corr","correction","axb","amb","apb","erfcinv","rationalFcnR1","rationalFcnR2","rationalFcnR3","rationalFcnR4","rationalFcnR5","SQRT2","inverseStudentsTBodySeries","df","idf","polyval2","polyval3","polyval4","polyval5","polyval6","polyval7","polyval8","polyval9","inverseStudentsTTailSeries","np2","np4","np6","rn","inverseStudentsTHill","ndf","DF_THRESHOLD","inverseStudentsT","rootAlpha","p0","p4","acos","terms","BIG","MAX_VALUE","temmeRootFinder","signum","newtonRaphsonIterate","fun","guess","f0last","delta1","delta2","count","f0","f1","FLOAT32_MAX","debug","require$$0","AK","lambdaeta","eta","L2","L3","L4","L5","la","L","polyvalAK2","A","stirling","SMALLEST_FLOAT32","MAX_FLOAT32","tt","u0","u1","u2","chepolsum","polyvalC","polyvalD","gamstar","HALF","ONEO3","ONEO6","CK","ap1inv","invfp","lgama","pcase","porq","ainv","logr","ap22","ap14","ap13","ap12","vgam","xini","ap1","ap2","ap3","p5","x0","a2","b3","a4","a3","xr","eps1","lnmeta","rateval1","eps2","rational1","rational2","rational3","rational4","rational5","eps3","dlnr","ck2","x2","higherNewton","gammaincinv","FLOAT32_SMALLEST","ibetaInvImp","lambda","lower","theta","roots","maxv","minv","bet","ppa","xs2","fs","xg","xs","yp","py","findIBetaInvFromTDist","eta0","eta2","B2","B3","B","temme1","sc7","sc6","sc5","sc4","sc3","sc2","sc","lu","c2","polyval1","polyval10","polyval11","polyval12","temme2","cross","w12","w13","w14","e1","e2","e3","mu","d2","d3","w2","w3","w4","w5","w6","w7","w8","w9","w1","temme3","FLOAT64_MIN_NORM","target","buf","f2","ibetaRoots","minimum","maximum","convergence","outOfBounds","f0Last","diff","halleyIterate","betaincinv","kernelBetaincinv","ab","summand","betaFcn","mgf0","Beta","isPositive","betalnAB","betaCDF","abm1","betaLogCDF","BetaPrime","betaFactory","logpdfFactory","betaprime","isNonNegativeInteger","isPositiveInteger","pq","binomcoefln","logpmf","lnl","searchLeft","searchRight","sigmaInv","Binomial","degenerate","binomial","nlq","MOREBITS","atan2","isinfinite","signbit","atan","isNan","LNPI","Cauchy","gpi","cauchy","gammaCDF","kh","SQRT_TWO","sigma2","gammaQuantile","Chi","gammaFactory","km1","chi","gammaPDerivative","gammaDeriv","gammaPDF","ChiSquare","gammaLogPDF","chisquare","PI_SQUARED","cospi","rx","MAX_INTEGER","sinh","MAXLOG","MINLOG","st","bisect","cosineCDF","Cosine","cosine","Degenerate","n2","am1","SQRT1O12","ret","DiscreteUniform","logn","ninv","discreteUniform","quantileGamma","Erlang","factoryGamma","erlang","scale","Exponential","exponential","d1","half","hd1","hd2","ibetaDerivative","v1x","zeroVal","d1by2","d2by2","d1d2","g1","g2","g3","g1s","Frechet","ldfrechet","frechet","Gamma","IVLN2HI","log2","klog","et","Geometric","geometric","LLN2","SKEWNESS","zeta","as","is","EVEN_NONNEGATIVE_INTEGERS","ODD_POSITIVE_INTEGERS","BERNOULLI","rateval4","rateval5","rateval6","SQRT6","Gumbel","lbeta","gumbel","factorialln","isNegativeInteger","N","K","ldenom","lnum","maxs","mins","fln","probs","Hypergeometric","hypergeometric","InvGamma","firstTerm","invgamma","mu2","m1","m2","m3","Kumaraswamy","kumaraswamy","LN_HALF","LNHALF","bt","Laplace","laplace","DENOM","LN_TWO_PI","fval","Levy","levy","log1pexp","az","sinc","ez","Logistic","logistic","normalCDF","es2","erfinv","qnormal","LogNormal","methods","lognormal","xint","left","search$1","search","NegativeBinomial","negativeBinomial","Normal","normal","Pareto1","alphaInv","pareto1","lk","seriesClosure","Poisson","poisson","SQRT_HALF_PI","SQRT2LN2","SQRT4MPI","s2i","erf","sigmat","Rayleigh","rayleigh","isfinite","isBoolean","Boolean","getGlobal","self","window","global","root","codegen","getThis","Self","Win","Global","nodeList","document","childNodes","typedarray","Int8Array","reFunctionName","RE_FUNCTION_NAME","REGEXP","isArray$1","isObjectLike","constructorName","name","constructor","_isBuffer","isBuffer","predicate","arrayfun","memoized","ctorName","type","isFunction","typeOf","identity","memoize","hashFunction","toKey","cache","key","weights$5","mlim","pui","weights","weights$3","weights$1","signrank","apnorm","expntl","zabs","fint","ww","yii","aii","bii","yyi","gaussLegreQuadrature","wsum","ROOT","WEIGHT","prangeVInf","soma","ai","ii","bi","f26","za","aux1","aux","LN_TWO","lngamma","gausslegdquad","ci","cmm","nranges","probinic","auxprob","found","ll","qtrngo","ppnd","apnorminv","qrange","q1","q2","prange","PCUT","JMAX","tukey","vh","betaTerm","prob","T","exponent","denom1","denom2","denom3","bmc","bma","cma","pInflection","fact2","Triangular","fact1","triangular","s2x2","truncatedNormal","Uniform","uniform","g4","g1k","xol","Weibull","lnkl","weibull","dist"],"mappings":"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"}